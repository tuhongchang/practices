!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDR	sqlite3.c	9345;"	d	file:
AGGREGATE	sqlite3.c	10872;"	d	file:
AGGREGATE2	sqlite3.c	10875;"	d	file:
ALWAYS	sqlite3.c	129486;"	d	file:
ALWAYS	sqlite3.c	129489;"	d	file:
ALWAYS	sqlite3.c	8130;"	d	file:
ALWAYS	sqlite3.c	8133;"	d	file:
ALWAYS	sqlite3.c	8136;"	d	file:
AdjustTree	sqlite3.c	/^static int AdjustTree($/;"	f	file:	signature:( Rtree *pRtree, RtreeNode *pNode, RtreeCell *pCell )
AggInfo	sqlite3.c	/^struct AggInfo {$/;"	s	file:
AggInfo	sqlite3.c	/^typedef struct AggInfo AggInfo;$/;"	t	typeref:struct:AggInfo	file:
AggInfo::AggInfo_col	sqlite3.c	/^  struct AggInfo_col {    \/* For each column used in source tables *\/$/;"	s	struct:AggInfo	file:	access:public
AggInfo::AggInfo_col::iColumn	sqlite3.c	/^    int iColumn;             \/* Column number within the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:	access:public
AggInfo::AggInfo_col::iMem	sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_col	file:	access:public
AggInfo::AggInfo_col::iSorterColumn	sqlite3.c	/^    int iSorterColumn;       \/* Column number in the sorting index *\/$/;"	m	struct:AggInfo::AggInfo_col	file:	access:public
AggInfo::AggInfo_col::iTable	sqlite3.c	/^    int iTable;              \/* Cursor number of the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:	access:public
AggInfo::AggInfo_col::pExpr	sqlite3.c	/^    Expr *pExpr;             \/* The original expression *\/$/;"	m	struct:AggInfo::AggInfo_col	file:	access:public
AggInfo::AggInfo_col::pTab	sqlite3.c	/^    Table *pTab;             \/* Source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:	access:public
AggInfo::AggInfo_func	sqlite3.c	/^  struct AggInfo_func {   \/* For each aggregate function *\/$/;"	s	struct:AggInfo	file:	access:public
AggInfo::AggInfo_func::iDistinct	sqlite3.c	/^    int iDistinct;           \/* Ephemeral table used to enforce DISTINCT *\/$/;"	m	struct:AggInfo::AggInfo_func	file:	access:public
AggInfo::AggInfo_func::iMem	sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_func	file:	access:public
AggInfo::AggInfo_func::pExpr	sqlite3.c	/^    Expr *pExpr;             \/* Expression encoding the function *\/$/;"	m	struct:AggInfo::AggInfo_func	file:	access:public
AggInfo::AggInfo_func::pFunc	sqlite3.c	/^    FuncDef *pFunc;          \/* The aggregate function implementation *\/$/;"	m	struct:AggInfo::AggInfo_func	file:	access:public
AggInfo::aCol	sqlite3.c	/^  } *aCol;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_col	file:	access:public
AggInfo::aFunc	sqlite3.c	/^  } *aFunc;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_func	file:	access:public
AggInfo::directMode	sqlite3.c	/^  u8 directMode;          \/* Direct rendering mode means take data directly$/;"	m	struct:AggInfo	file:	access:public
AggInfo::mnReg	sqlite3.c	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo	file:	access:public
AggInfo::mxReg	sqlite3.c	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo	file:	access:public
AggInfo::nAccumulator	sqlite3.c	/^  int nAccumulator;       \/* Number of columns that show through to the output.$/;"	m	struct:AggInfo	file:	access:public
AggInfo::nColumn	sqlite3.c	/^  int nColumn;            \/* Number of used entries in aCol[] *\/$/;"	m	struct:AggInfo	file:	access:public
AggInfo::nFunc	sqlite3.c	/^  int nFunc;              \/* Number of entries in aFunc[] *\/$/;"	m	struct:AggInfo	file:	access:public
AggInfo::nSortingColumn	sqlite3.c	/^  int nSortingColumn;     \/* Number of columns in the sorting index *\/$/;"	m	struct:AggInfo	file:	access:public
AggInfo::pGroupBy	sqlite3.c	/^  ExprList *pGroupBy;     \/* The group by clause *\/$/;"	m	struct:AggInfo	file:	access:public
AggInfo::sortingIdx	sqlite3.c	/^  int sortingIdx;         \/* Cursor number of the sorting index *\/$/;"	m	struct:AggInfo	file:	access:public
AggInfo::sortingIdxPTab	sqlite3.c	/^  int sortingIdxPTab;     \/* Cursor number of pseudo-table *\/$/;"	m	struct:AggInfo	file:	access:public
AggInfo::useSortingIdx	sqlite3.c	/^  u8 useSortingIdx;       \/* In direct mode, reference the sorting index rather$/;"	m	struct:AggInfo	file:	access:public
AggInfo_col	sqlite3.c	/^  struct AggInfo_col {    \/* For each column used in source tables *\/$/;"	s	struct:AggInfo	file:	access:public
AggInfo_func	sqlite3.c	/^  struct AggInfo_func {   \/* For each aggregate function *\/$/;"	s	struct:AggInfo	file:	access:public
ApplyCostMultiplier	sqlite3.c	117882;"	d	file:
ApplyCostMultiplier	sqlite3.c	117884;"	d	file:
ArraySize	sqlite3.c	8812;"	d	file:
AttachKey	sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	s	file:
AttachKey::key	sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:	access:public
AttachKey::type	sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:	access:public
AuthContext	sqlite3.c	/^struct AuthContext {$/;"	s	file:
AuthContext	sqlite3.c	/^typedef struct AuthContext AuthContext;$/;"	t	typeref:struct:AuthContext	file:
AuthContext::pParse	sqlite3.c	/^  Parse *pParse;              \/* The Parse structure *\/$/;"	m	struct:AuthContext	file:	access:public
AuthContext::zAuthContext	sqlite3.c	/^  const char *zAuthContext;   \/* Put saved Parse.zAuthContext here *\/$/;"	m	struct:AuthContext	file:	access:public
AutoincInfo	sqlite3.c	/^struct AutoincInfo {$/;"	s	file:
AutoincInfo	sqlite3.c	/^typedef struct AutoincInfo AutoincInfo;$/;"	t	typeref:struct:AutoincInfo	file:
AutoincInfo::iDb	sqlite3.c	/^  int iDb;              \/* Index in sqlite3.aDb[] of database holding pTab *\/$/;"	m	struct:AutoincInfo	file:	access:public
AutoincInfo::pNext	sqlite3.c	/^  AutoincInfo *pNext;   \/* Next info block in a list of them all *\/$/;"	m	struct:AutoincInfo	file:	access:public
AutoincInfo::pTab	sqlite3.c	/^  Table *pTab;          \/* Table this info block refers to *\/$/;"	m	struct:AutoincInfo	file:	access:public
AutoincInfo::regCtr	sqlite3.c	/^  int regCtr;           \/* Memory register holding the rowid counter *\/$/;"	m	struct:AutoincInfo	file:	access:public
AuxData	sqlite3.c	/^struct AuxData {$/;"	s	file:
AuxData	sqlite3.c	/^typedef struct AuxData AuxData;$/;"	t	typeref:struct:AuxData	file:
AuxData::iArg	sqlite3.c	/^  int iArg;                       \/* Index of function argument. *\/$/;"	m	struct:AuxData	file:	access:public
AuxData::iOp	sqlite3.c	/^  int iOp;                        \/* Instruction number of OP_Function opcode *\/$/;"	m	struct:AuxData	file:	access:public
AuxData::pAux	sqlite3.c	/^  void *pAux;                     \/* Aux data pointer *\/$/;"	m	struct:AuxData	file:	access:public
AuxData::pNext	sqlite3.c	/^  AuxData *pNext;                 \/* Next element in list *\/$/;"	m	struct:AuxData	file:	access:public
AuxData::xDelete	sqlite3.c	/^  void (*xDelete)(void *);        \/* Destructor for the aux data *\/$/;"	m	struct:AuxData	file:	access:public
BITVEC_HASH	sqlite3.c	38166;"	d	file:
BITVEC_MXHASH	sqlite3.c	38161;"	d	file:
BITVEC_NBIT	sqlite3.c	38155;"	d	file:
BITVEC_NELEM	sqlite3.c	38153;"	d	file:
BITVEC_NINT	sqlite3.c	38158;"	d	file:
BITVEC_NPTR	sqlite3.c	38168;"	d	file:
BITVEC_SZ	sqlite3.c	38139;"	d	file:
BITVEC_SZELEM	sqlite3.c	38151;"	d	file:
BITVEC_TELEM	sqlite3.c	38149;"	d	file:
BITVEC_USIZE	sqlite3.c	38143;"	d	file:
BMS	sqlite3.c	11678;"	d	file:
BTALLOC_ANY	sqlite3.c	52244;"	d	file:
BTALLOC_EXACT	sqlite3.c	52245;"	d	file:
BTALLOC_LE	sqlite3.c	52246;"	d	file:
BTCF_AtLast	sqlite3.c	51756;"	d	file:
BTCF_Incrblob	sqlite3.c	51757;"	d	file:
BTCF_ValidNKey	sqlite3.c	51754;"	d	file:
BTCF_ValidOvfl	sqlite3.c	51755;"	d	file:
BTCF_WriteFlag	sqlite3.c	51753;"	d	file:
BTCURSOR_MAX_DEPTH	sqlite3.c	51708;"	d	file:
BTREE_APPLICATION_ID	sqlite3.c	9076;"	d	file:
BTREE_AUTOVACUUM_FULL	sqlite3.c	8963;"	d	file:
BTREE_AUTOVACUUM_INCR	sqlite3.c	8964;"	d	file:
BTREE_AUTOVACUUM_NONE	sqlite3.c	8962;"	d	file:
BTREE_BLOBKEY	sqlite3.c	9044;"	d	file:
BTREE_BULKLOAD	sqlite3.c	9082;"	d	file:
BTREE_DEFAULT_CACHE_SIZE	sqlite3.c	9071;"	d	file:
BTREE_FILE_FORMAT	sqlite3.c	9070;"	d	file:
BTREE_FREE_PAGE_COUNT	sqlite3.c	9068;"	d	file:
BTREE_INCR_VACUUM	sqlite3.c	9075;"	d	file:
BTREE_INTKEY	sqlite3.c	9043;"	d	file:
BTREE_LARGEST_ROOT_PAGE	sqlite3.c	9072;"	d	file:
BTREE_MEMORY	sqlite3.c	8990;"	d	file:
BTREE_OMIT_JOURNAL	sqlite3.c	8989;"	d	file:
BTREE_SCHEMA_VERSION	sqlite3.c	9069;"	d	file:
BTREE_SINGLE	sqlite3.c	8991;"	d	file:
BTREE_TEXT_ENCODING	sqlite3.c	9073;"	d	file:
BTREE_UNORDERED	sqlite3.c	8992;"	d	file:
BTREE_USER_VERSION	sqlite3.c	9074;"	d	file:
BTS_EXCLUSIVE	sqlite3.c	51681;"	d	file:
BTS_INITIALLY_EMPTY	sqlite3.c	51679;"	d	file:
BTS_NO_WAL	sqlite3.c	51680;"	d	file:
BTS_PAGESIZE_FIXED	sqlite3.c	51677;"	d	file:
BTS_PENDING	sqlite3.c	51682;"	d	file:
BTS_READ_ONLY	sqlite3.c	51676;"	d	file:
BTS_SECURE_DELETE	sqlite3.c	51678;"	d	file:
BUFF_SIZE	client.c	4;"	d	file:
BUFF_SIZE	loaddatabase.c	9;"	d	file:
BYTESWAP32	sqlite3.c	48697;"	d	file:
BenignMallocHooks	sqlite3.c	/^static SQLITE_WSD struct BenignMallocHooks {$/;"	s	file:
BenignMallocHooks	sqlite3.c	/^typedef struct BenignMallocHooks BenignMallocHooks;$/;"	t	typeref:struct:BenignMallocHooks	file:
BenignMallocHooks::xBenignBegin	sqlite3.c	/^  void (*xBenignBegin)(void);$/;"	m	struct:BenignMallocHooks	file:	access:public
BenignMallocHooks::xBenignEnd	sqlite3.c	/^  void (*xBenignEnd)(void);$/;"	m	struct:BenignMallocHooks	file:	access:public
Bitmask	sqlite3.c	/^typedef u64 Bitmask;$/;"	t	file:
Bitvec	sqlite3.c	/^struct Bitvec {$/;"	s	file:
Bitvec	sqlite3.c	/^typedef struct Bitvec Bitvec;$/;"	t	typeref:struct:Bitvec	file:
Bitvec::__anon13::aBitmap	sqlite3.c	/^    BITVEC_TELEM aBitmap[BITVEC_NELEM];    \/* Bitmap representation *\/$/;"	m	union:Bitvec::__anon13	file:	access:public
Bitvec::__anon13::aHash	sqlite3.c	/^    u32 aHash[BITVEC_NINT];      \/* Hash table representation *\/$/;"	m	union:Bitvec::__anon13	file:	access:public
Bitvec::__anon13::apSub	sqlite3.c	/^    Bitvec *apSub[BITVEC_NPTR];  \/* Recursive representation *\/$/;"	m	union:Bitvec::__anon13	file:	access:public
Bitvec::iDivisor	sqlite3.c	/^  u32 iDivisor;   \/* Number of bits handled by each apSub[] entry. *\/$/;"	m	struct:Bitvec	file:	access:public
Bitvec::iSize	sqlite3.c	/^  u32 iSize;      \/* Maximum bit index.  Max iSize is 4,294,967,296. *\/$/;"	m	struct:Bitvec	file:	access:public
Bitvec::nSet	sqlite3.c	/^  u32 nSet;       \/* Number of bits that are set - only valid for aHash$/;"	m	struct:Bitvec	file:	access:public
Bitvec::u	sqlite3.c	/^  } u;$/;"	m	struct:Bitvec	typeref:union:Bitvec::__anon13	file:	access:public
Blob	sqlite3.c	/^struct Blob {$/;"	s	file:
Blob	sqlite3.c	/^typedef struct Blob Blob;$/;"	t	typeref:struct:Blob	file:
Blob::a	sqlite3.c	/^  char *a;                        \/* Pointer to allocation *\/$/;"	m	struct:Blob	file:	access:public
Blob::n	sqlite3.c	/^  int n;                          \/* Number of valid bytes of data in a[] *\/$/;"	m	struct:Blob	file:	access:public
Blob::nAlloc	sqlite3.c	/^  int nAlloc;                     \/* Allocated size of a[] (nAlloc>=n) *\/$/;"	m	struct:Blob	file:	access:public
Bool	sqlite3.c	/^typedef unsigned Bool;$/;"	t	file:
BtCursor	sqlite3.c	/^struct BtCursor {$/;"	s	file:
BtCursor	sqlite3.c	/^typedef struct BtCursor BtCursor;$/;"	t	typeref:struct:BtCursor	file:
BtCursor::aOverflow	sqlite3.c	/^  Pgno *aOverflow;          \/* Cache of overflow page locations *\/$/;"	m	struct:BtCursor	file:	access:public
BtCursor::aiIdx	sqlite3.c	/^  u16 aiIdx[BTCURSOR_MAX_DEPTH];        \/* Current index in apPage[i] *\/$/;"	m	struct:BtCursor	file:	access:public
BtCursor::apPage	sqlite3.c	/^  MemPage *apPage[BTCURSOR_MAX_DEPTH];  \/* Pages from root to current page *\/$/;"	m	struct:BtCursor	file:	access:public
BtCursor::curFlags	sqlite3.c	/^  u8 curFlags;              \/* zero or more BTCF_* flags defined below *\/$/;"	m	struct:BtCursor	file:	access:public
BtCursor::eState	sqlite3.c	/^  u8 eState;                \/* One of the CURSOR_XXX constants (see below) *\/$/;"	m	struct:BtCursor	file:	access:public
BtCursor::hints	sqlite3.c	/^  u8 hints;                             \/* As configured by CursorSetHints() *\/$/;"	m	struct:BtCursor	file:	access:public
BtCursor::iPage	sqlite3.c	/^  i16 iPage;                            \/* Index of current page in apPage *\/$/;"	m	struct:BtCursor	file:	access:public
BtCursor::info	sqlite3.c	/^  CellInfo info;            \/* A parse of the cell we are pointing at *\/$/;"	m	struct:BtCursor	file:	access:public
BtCursor::nKey	sqlite3.c	/^  i64 nKey;                 \/* Size of pKey, or last integer key *\/$/;"	m	struct:BtCursor	file:	access:public
BtCursor::nOvflAlloc	sqlite3.c	/^  int nOvflAlloc;           \/* Allocated size of aOverflow[] array *\/$/;"	m	struct:BtCursor	file:	access:public
BtCursor::pBt	sqlite3.c	/^  BtShared *pBt;            \/* The BtShared this cursor points to *\/$/;"	m	struct:BtCursor	file:	access:public
BtCursor::pBtree	sqlite3.c	/^  Btree *pBtree;            \/* The Btree to which this cursor belongs *\/$/;"	m	struct:BtCursor	file:	access:public
BtCursor::pKey	sqlite3.c	/^  void *pKey;               \/* Saved key that was cursor last known position *\/$/;"	m	struct:BtCursor	file:	access:public
BtCursor::pKeyInfo	sqlite3.c	/^  struct KeyInfo *pKeyInfo; \/* Argument passed to comparison function *\/$/;"	m	struct:BtCursor	typeref:struct:BtCursor::KeyInfo	file:	access:public
BtCursor::pNext	sqlite3.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:	access:public
BtCursor::pPrev	sqlite3.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:	access:public
BtCursor::pgnoRoot	sqlite3.c	/^  Pgno pgnoRoot;            \/* The root page of this tree *\/$/;"	m	struct:BtCursor	file:	access:public
BtCursor::skipNext	sqlite3.c	/^  int skipNext;    \/* Prev() is noop if negative. Next() is noop if positive.$/;"	m	struct:BtCursor	file:	access:public
BtLock	sqlite3.c	/^struct BtLock {$/;"	s	file:
BtLock	sqlite3.c	/^typedef struct BtLock BtLock;$/;"	t	typeref:struct:BtLock	file:
BtLock::eLock	sqlite3.c	/^  u8 eLock;             \/* READ_LOCK or WRITE_LOCK *\/$/;"	m	struct:BtLock	file:	access:public
BtLock::iTable	sqlite3.c	/^  Pgno iTable;          \/* Root page of table *\/$/;"	m	struct:BtLock	file:	access:public
BtLock::pBtree	sqlite3.c	/^  Btree *pBtree;        \/* Btree handle holding this lock *\/$/;"	m	struct:BtLock	file:	access:public
BtLock::pNext	sqlite3.c	/^  BtLock *pNext;        \/* Next in BtShared.pLock list *\/$/;"	m	struct:BtLock	file:	access:public
BtShared	sqlite3.c	/^struct BtShared {$/;"	s	file:
BtShared	sqlite3.c	/^typedef struct BtShared BtShared;$/;"	t	typeref:struct:BtShared	file:
BtShared::autoVacuum	sqlite3.c	/^  u8 autoVacuum;        \/* True if auto-vacuum is enabled *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::bDoTruncate	sqlite3.c	/^  u8 bDoTruncate;       \/* True to truncate db on commit *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::btsFlags	sqlite3.c	/^  u16 btsFlags;         \/* Boolean parameters.  See BTS_* macros below *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::db	sqlite3.c	/^  sqlite3 *db;          \/* Database connection currently using this Btree *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::inTransaction	sqlite3.c	/^  u8 inTransaction;     \/* Transaction state *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::incrVacuum	sqlite3.c	/^  u8 incrVacuum;        \/* True if incr-vacuum is enabled *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::max1bytePayload	sqlite3.c	/^  u8 max1bytePayload;   \/* Maximum first byte of cell for a 1-byte payload *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::maxLeaf	sqlite3.c	/^  u16 maxLeaf;          \/* Maximum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::maxLocal	sqlite3.c	/^  u16 maxLocal;         \/* Maximum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::minLeaf	sqlite3.c	/^  u16 minLeaf;          \/* Minimum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::minLocal	sqlite3.c	/^  u16 minLocal;         \/* Minimum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::mutex	sqlite3.c	/^  sqlite3_mutex *mutex; \/* Non-recursive mutex required to access this object *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::nPage	sqlite3.c	/^  u32 nPage;            \/* Number of pages in the database *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::nRef	sqlite3.c	/^  int nRef;             \/* Number of references to this structure *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::nTransaction	sqlite3.c	/^  int nTransaction;     \/* Number of open transactions (read + write) *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::openFlags	sqlite3.c	/^  u8 openFlags;         \/* Flags to sqlite3BtreeOpen() *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::pCursor	sqlite3.c	/^  BtCursor *pCursor;    \/* A list of all open cursors *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::pHasContent	sqlite3.c	/^  Bitvec *pHasContent;  \/* Set of pages moved to free-list this transaction *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::pLock	sqlite3.c	/^  BtLock *pLock;        \/* List of locks held on this shared-btree struct *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::pNext	sqlite3.c	/^  BtShared *pNext;      \/* Next on a list of sharable BtShared structs *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::pPage1	sqlite3.c	/^  MemPage *pPage1;      \/* First page of the database *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::pPager	sqlite3.c	/^  Pager *pPager;        \/* The page cache *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::pSchema	sqlite3.c	/^  void *pSchema;        \/* Pointer to space allocated by sqlite3BtreeSchema() *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::pTmpSpace	sqlite3.c	/^  u8 *pTmpSpace;        \/* Temp space sufficient to hold a single cell *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::pWriter	sqlite3.c	/^  Btree *pWriter;       \/* Btree with currently open write transaction *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::pageSize	sqlite3.c	/^  u32 pageSize;         \/* Total number of bytes on a page *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::usableSize	sqlite3.c	/^  u32 usableSize;       \/* Number of usable bytes on each page *\/$/;"	m	struct:BtShared	file:	access:public
BtShared::xFreeSchema	sqlite3.c	/^  void (*xFreeSchema)(void*);  \/* Destructor for BtShared.pSchema *\/$/;"	m	struct:BtShared	file:	access:public
Btree	sqlite3.c	/^struct Btree {$/;"	s	file:
Btree	sqlite3.c	/^typedef struct Btree Btree;$/;"	t	typeref:struct:Btree	file:
Btree::db	sqlite3.c	/^  sqlite3 *db;       \/* The database connection holding this btree *\/$/;"	m	struct:Btree	file:	access:public
Btree::inTrans	sqlite3.c	/^  u8 inTrans;        \/* TRANS_NONE, TRANS_READ or TRANS_WRITE *\/$/;"	m	struct:Btree	file:	access:public
Btree::lock	sqlite3.c	/^  BtLock lock;       \/* Object used to lock page 1 *\/$/;"	m	struct:Btree	file:	access:public
Btree::locked	sqlite3.c	/^  u8 locked;         \/* True if db currently has pBt locked *\/$/;"	m	struct:Btree	file:	access:public
Btree::nBackup	sqlite3.c	/^  int nBackup;       \/* Number of backup operations reading this btree *\/$/;"	m	struct:Btree	file:	access:public
Btree::pBt	sqlite3.c	/^  BtShared *pBt;     \/* Sharable content of this btree *\/$/;"	m	struct:Btree	file:	access:public
Btree::pNext	sqlite3.c	/^  Btree *pNext;      \/* List of other sharable Btrees from the same db *\/$/;"	m	struct:Btree	file:	access:public
Btree::pPrev	sqlite3.c	/^  Btree *pPrev;      \/* Back pointer of the same list *\/$/;"	m	struct:Btree	file:	access:public
Btree::sharable	sqlite3.c	/^  u8 sharable;       \/* True if we can share pBt with another db *\/$/;"	m	struct:Btree	file:	access:public
Btree::wantToLock	sqlite3.c	/^  int wantToLock;    \/* Number of nested calls to sqlite3BtreeEnter() *\/$/;"	m	struct:Btree	file:	access:public
BusyHandler	sqlite3.c	/^struct BusyHandler {$/;"	s	file:
BusyHandler	sqlite3.c	/^typedef struct BusyHandler BusyHandler;$/;"	t	typeref:struct:BusyHandler	file:
BusyHandler::nBusy	sqlite3.c	/^  int nBusy;                 \/* Incremented with each busy call *\/$/;"	m	struct:BusyHandler	file:	access:public
BusyHandler::pArg	sqlite3.c	/^  void *pArg;                \/* First arg to busy callback *\/$/;"	m	struct:BusyHandler	file:	access:public
BusyHandler::xFunc	sqlite3.c	/^  int (*xFunc)(void *,int);  \/* The busy callback *\/$/;"	m	struct:BusyHandler	file:	access:public
ByteRangeLockPB2	sqlite3.c	/^struct ByteRangeLockPB2$/;"	s	file:
ByteRangeLockPB2::fd	sqlite3.c	/^  int fd;                           \/* file desc to assoc this lock with *\/$/;"	m	struct:ByteRangeLockPB2	file:	access:public
ByteRangeLockPB2::length	sqlite3.c	/^  unsigned long long length;        \/* nbr of bytes to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:	access:public
ByteRangeLockPB2::offset	sqlite3.c	/^  unsigned long long offset;        \/* offset to first byte to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:	access:public
ByteRangeLockPB2::retRangeStart	sqlite3.c	/^  unsigned long long retRangeStart; \/* nbr of 1st byte locked if successful *\/$/;"	m	struct:ByteRangeLockPB2	file:	access:public
ByteRangeLockPB2::startEndFlag	sqlite3.c	/^  unsigned char startEndFlag;       \/* 1=rel to end of fork, 0=rel to start *\/$/;"	m	struct:ByteRangeLockPB2	file:	access:public
ByteRangeLockPB2::unLockFlag	sqlite3.c	/^  unsigned char unLockFlag;         \/* 1 = unlock, 0 = lock *\/$/;"	m	struct:ByteRangeLockPB2	file:	access:public
CACHE_STALE	sqlite3.c	14179;"	d	file:
CC	Makefile	/^CC:= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS:= -Wall -O2$/;"	m
CHECK_PAGE	sqlite3.c	42065;"	d	file:
CHECK_PAGE	sqlite3.c	42076;"	d	file:
CLEARBIT	sqlite3.c	38399;"	d	file:
CODEC1	sqlite3.c	41280;"	d	file:
CODEC1	sqlite3.c	41286;"	d	file:
CODEC2	sqlite3.c	41282;"	d	file:
CODEC2	sqlite3.c	41287;"	d	file:
COLFLAG_HIDDEN	sqlite3.c	10932;"	d	file:
COLFLAG_PRIMKEY	sqlite3.c	10931;"	d	file:
COLNAME_COLUMN	sqlite3.c	9328;"	d	file:
COLNAME_DATABASE	sqlite3.c	9326;"	d	file:
COLNAME_DECLTYPE	sqlite3.c	9325;"	d	file:
COLNAME_N	sqlite3.c	9330;"	d	file:
COLNAME_N	sqlite3.c	9333;"	d	file:
COLNAME_N	sqlite3.c	9335;"	d	file:
COLNAME_NAME	sqlite3.c	9324;"	d	file:
COLNAME_TABLE	sqlite3.c	9327;"	d	file:
COLUMN_MASK	sqlite3.c	96967;"	d	file:
CORRUPT_DB	sqlite3.c	12407;"	d	file:
CTIMEOPT_VAL	sqlite3.c	13621;"	d	file:
CTIMEOPT_VAL_	sqlite3.c	13620;"	d	file:
CTRL_FREE	sqlite3.c	18041;"	d	file:
CTRL_LOGSIZE	sqlite3.c	18040;"	d	file:
CURSOR_FAULT	sqlite3.c	51793;"	d	file:
CURSOR_INVALID	sqlite3.c	51789;"	d	file:
CURSOR_REQUIRESEEK	sqlite3.c	51792;"	d	file:
CURSOR_SKIPNEXT	sqlite3.c	51791;"	d	file:
CURSOR_VALID	sqlite3.c	51790;"	d	file:
CellInfo	sqlite3.c	/^struct CellInfo {$/;"	s	file:
CellInfo	sqlite3.c	/^typedef struct CellInfo CellInfo;$/;"	t	typeref:struct:CellInfo	file:
CellInfo::iOverflow	sqlite3.c	/^  u16 iOverflow; \/* Offset to overflow page number.  Zero if no overflow *\/$/;"	m	struct:CellInfo	file:	access:public
CellInfo::nKey	sqlite3.c	/^  i64 nKey;      \/* The key for INTKEY tables, or nPayload otherwise *\/$/;"	m	struct:CellInfo	file:	access:public
CellInfo::nLocal	sqlite3.c	/^  u16 nLocal;    \/* Amount of payload held locally, not on overflow *\/$/;"	m	struct:CellInfo	file:	access:public
CellInfo::nPayload	sqlite3.c	/^  u32 nPayload;  \/* Bytes of payload *\/$/;"	m	struct:CellInfo	file:	access:public
CellInfo::nSize	sqlite3.c	/^  u16 nSize;     \/* Size of the cell content on the main b-tree page *\/$/;"	m	struct:CellInfo	file:	access:public
CellInfo::pPayload	sqlite3.c	/^  u8 *pPayload;  \/* Pointer to the start of payload *\/$/;"	m	struct:CellInfo	file:	access:public
ChooseLeaf	sqlite3.c	/^static int ChooseLeaf($/;"	f	file:	signature:( Rtree *pRtree, RtreeCell *pCell, int iHeight, RtreeNode **ppLeaf )
Cleanup	sqlite3.c	/^static void Cleanup(Vdbe *p){$/;"	f	file:	signature:(Vdbe *p)
CollSeq	sqlite3.c	/^struct CollSeq {$/;"	s	file:
CollSeq	sqlite3.c	/^typedef struct CollSeq CollSeq;$/;"	t	typeref:struct:CollSeq	file:
CollSeq::enc	sqlite3.c	/^  u8 enc;               \/* Text encoding handled by xCmp() *\/$/;"	m	struct:CollSeq	file:	access:public
CollSeq::pUser	sqlite3.c	/^  void *pUser;          \/* First argument to xCmp() *\/$/;"	m	struct:CollSeq	file:	access:public
CollSeq::xCmp	sqlite3.c	/^  int (*xCmp)(void*,int, const void*, int, const void*);$/;"	m	struct:CollSeq	file:	access:public
CollSeq::xDel	sqlite3.c	/^  void (*xDel)(void*);  \/* Destructor for pUser *\/$/;"	m	struct:CollSeq	file:	access:public
CollSeq::zName	sqlite3.c	/^  char *zName;          \/* Name of the collating sequence, UTF-8 encoded *\/$/;"	m	struct:CollSeq	file:	access:public
Column	sqlite3.c	/^struct Column {$/;"	s	file:
Column	sqlite3.c	/^typedef struct Column Column;$/;"	t	typeref:struct:Column	file:
Column::affinity	sqlite3.c	/^  char affinity;   \/* One of the SQLITE_AFF_... values *\/$/;"	m	struct:Column	file:	access:public
Column::colFlags	sqlite3.c	/^  u8 colFlags;     \/* Boolean properties.  See COLFLAG_ defines below *\/$/;"	m	struct:Column	file:	access:public
Column::notNull	sqlite3.c	/^  u8 notNull;      \/* An OE_ code for handling a NOT NULL constraint *\/$/;"	m	struct:Column	file:	access:public
Column::pDflt	sqlite3.c	/^  Expr *pDflt;     \/* Default value of this column *\/$/;"	m	struct:Column	file:	access:public
Column::szEst	sqlite3.c	/^  u8 szEst;        \/* Estimated size of this column.  INT==1 *\/$/;"	m	struct:Column	file:	access:public
Column::zColl	sqlite3.c	/^  char *zColl;     \/* Collating sequence.  If NULL, use the default *\/$/;"	m	struct:Column	file:	access:public
Column::zDflt	sqlite3.c	/^  char *zDflt;     \/* Original text of the default value *\/$/;"	m	struct:Column	file:	access:public
Column::zName	sqlite3.c	/^  char *zName;     \/* Name of this column *\/$/;"	m	struct:Column	file:	access:public
Column::zType	sqlite3.c	/^  char *zType;     \/* Data type for this column *\/$/;"	m	struct:Column	file:	access:public
ConstFactorOk	sqlite3.c	10758;"	d	file:
CountCtx	sqlite3.c	/^struct CountCtx {$/;"	s	file:
CountCtx	sqlite3.c	/^typedef struct CountCtx CountCtx;$/;"	t	typeref:struct:CountCtx	file:
CountCtx::n	sqlite3.c	/^  i64 n;$/;"	m	struct:CountCtx	file:	access:public
Cte	sqlite3.c	/^  struct Cte {                    \/* For each CTE in the WITH clause.... *\/$/;"	s	struct:With	file:	access:public
D	sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:	access:public
DB_Empty	sqlite3.c	10477;"	d	file:
DB_SchemaLoaded	sqlite3.c	10475;"	d	file:
DB_TABLE_NAME	comm.h	17;"	d
DB_UnresetViews	sqlite3.c	10476;"	d	file:
DCOORD	sqlite3.c	147727;"	d	file:
DCOORD	sqlite3.c	147729;"	d	file:
DIRECT_MODE	sqlite3.c	46840;"	d	file:
DOCID_CMP	sqlite3.c	132042;"	d	file:
DOTLOCK_SUFFIX	sqlite3.c	26859;"	d	file:
DO_OS_MALLOC_TEST	sqlite3.c	15945;"	d	file:
DO_OS_MALLOC_TEST	sqlite3.c	15952;"	d	file:
DateTime	sqlite3.c	/^struct DateTime {$/;"	s	file:
DateTime	sqlite3.c	/^typedef struct DateTime DateTime;$/;"	t	typeref:struct:DateTime	file:
DateTime::D	sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:	access:public
DateTime::M	sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:	access:public
DateTime::Y	sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:	access:public
DateTime::h	sqlite3.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:	access:public
DateTime::iJD	sqlite3.c	/^  sqlite3_int64 iJD; \/* The julian day number times 86400000 *\/$/;"	m	struct:DateTime	file:	access:public
DateTime::m	sqlite3.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:	access:public
DateTime::s	sqlite3.c	/^  double s;          \/* Seconds *\/$/;"	m	struct:DateTime	file:	access:public
DateTime::tz	sqlite3.c	/^  int tz;            \/* Timezone offset in minutes *\/$/;"	m	struct:DateTime	file:	access:public
DateTime::validHMS	sqlite3.c	/^  char validHMS;     \/* True (1) if h,m,s are valid *\/$/;"	m	struct:DateTime	file:	access:public
DateTime::validJD	sqlite3.c	/^  char validJD;      \/* True (1) if iJD is valid *\/$/;"	m	struct:DateTime	file:	access:public
DateTime::validTZ	sqlite3.c	/^  char validTZ;      \/* True (1) if tz is valid *\/$/;"	m	struct:DateTime	file:	access:public
DateTime::validYMD	sqlite3.c	/^  char validYMD;     \/* True (1) if Y,M,D are valid *\/$/;"	m	struct:DateTime	file:	access:public
Db	sqlite3.c	/^struct Db {$/;"	s	file:
Db	sqlite3.c	/^typedef struct Db Db;$/;"	t	typeref:struct:Db	file:
Db::pBt	sqlite3.c	/^  Btree *pBt;          \/* The B*Tree structure for this database file *\/$/;"	m	struct:Db	file:	access:public
Db::pSchema	sqlite3.c	/^  Schema *pSchema;     \/* Pointer to database schema (possibly shared) *\/$/;"	m	struct:Db	file:	access:public
Db::safety_level	sqlite3.c	/^  u8 safety_level;     \/* How aggressive at syncing data to disk *\/$/;"	m	struct:Db	file:	access:public
Db::zName	sqlite3.c	/^  char *zName;         \/* Name of this database *\/$/;"	m	struct:Db	file:	access:public
DbClearProperty	sqlite3.c	10463;"	d	file:
DbFixer	sqlite3.c	/^struct DbFixer {$/;"	s	file:
DbFixer	sqlite3.c	/^typedef struct DbFixer DbFixer;$/;"	t	typeref:struct:DbFixer	file:
DbFixer::bVarOnly	sqlite3.c	/^  int bVarOnly;       \/* Check for variable references only *\/$/;"	m	struct:DbFixer	file:	access:public
DbFixer::pName	sqlite3.c	/^  const Token *pName; \/* Name of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:	access:public
DbFixer::pParse	sqlite3.c	/^  Parse *pParse;      \/* The parsing context.  Error messages written here *\/$/;"	m	struct:DbFixer	file:	access:public
DbFixer::pSchema	sqlite3.c	/^  Schema *pSchema;    \/* Fix items to this schema *\/$/;"	m	struct:DbFixer	file:	access:public
DbFixer::zDb	sqlite3.c	/^  const char *zDb;    \/* Make sure all objects are contained in this database *\/$/;"	m	struct:DbFixer	file:	access:public
DbFixer::zType	sqlite3.c	/^  const char *zType;  \/* Type of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:	access:public
DbHasAnyProperty	sqlite3.c	10461;"	d	file:
DbHasProperty	sqlite3.c	10460;"	d	file:
DbMaskAllZero	sqlite3.c	12033;"	d	file:
DbMaskAllZero	sqlite3.c	12040;"	d	file:
DbMaskNonZero	sqlite3.c	12034;"	d	file:
DbMaskNonZero	sqlite3.c	12041;"	d	file:
DbMaskSet	sqlite3.c	12032;"	d	file:
DbMaskSet	sqlite3.c	12039;"	d	file:
DbMaskTest	sqlite3.c	12030;"	d	file:
DbMaskTest	sqlite3.c	12037;"	d	file:
DbMaskZero	sqlite3.c	12031;"	d	file:
DbMaskZero	sqlite3.c	12038;"	d	file:
DbPage	sqlite3.c	/^typedef struct PgHdr DbPage;$/;"	t	typeref:struct:PgHdr	file:
DbSetProperty	sqlite3.c	10462;"	d	file:
Deephemeralize	sqlite3.c	69118;"	d	file:
DistinctCtx	sqlite3.c	/^struct DistinctCtx {$/;"	s	file:
DistinctCtx	sqlite3.c	/^typedef struct DistinctCtx DistinctCtx;$/;"	t	typeref:struct:DistinctCtx	file:
DistinctCtx::addrTnct	sqlite3.c	/^  int addrTnct;   \/* Address of OP_OpenEphemeral opcode for tabTnct *\/$/;"	m	struct:DistinctCtx	file:	access:public
DistinctCtx::eTnctType	sqlite3.c	/^  u8 eTnctType;   \/* One of the WHERE_DISTINCT_* operators *\/$/;"	m	struct:DistinctCtx	file:	access:public
DistinctCtx::isTnct	sqlite3.c	/^  u8 isTnct;      \/* True if the DISTINCT keyword is present *\/$/;"	m	struct:DistinctCtx	file:	access:public
DistinctCtx::tabTnct	sqlite3.c	/^  int tabTnct;    \/* Ephemeral table used for DISTINCT processing *\/$/;"	m	struct:DistinctCtx	file:	access:public
EIGHT_BYTE_ALIGNMENT	sqlite3.c	8701;"	d	file:
EIGHT_BYTE_ALIGNMENT	sqlite3.c	8703;"	d	file:
ENC	sqlite3.c	10687;"	d	file:
EP_Agg	sqlite3.c	11541;"	d	file:
EP_CanBeNull	sqlite3.c	11560;"	d	file:
EP_Collate	sqlite3.c	11548;"	d	file:
EP_Constant	sqlite3.c	11559;"	d	file:
EP_DblQuoted	sqlite3.c	11546;"	d	file:
EP_Distinct	sqlite3.c	11544;"	d	file:
EP_Error	sqlite3.c	11543;"	d	file:
EP_FromJoin	sqlite3.c	11540;"	d	file:
EP_Generic	sqlite3.c	11549;"	d	file:
EP_InfixFunc	sqlite3.c	11547;"	d	file:
EP_IntValue	sqlite3.c	11550;"	d	file:
EP_MemToken	sqlite3.c	11556;"	d	file:
EP_NoReduce	sqlite3.c	11557;"	d	file:
EP_Reduced	sqlite3.c	11553;"	d	file:
EP_Resolved	sqlite3.c	11542;"	d	file:
EP_Skip	sqlite3.c	11552;"	d	file:
EP_Static	sqlite3.c	11555;"	d	file:
EP_TokenOnly	sqlite3.c	11554;"	d	file:
EP_Unlikely	sqlite3.c	11558;"	d	file:
EP_VarSelect	sqlite3.c	11545;"	d	file:
EP_xIsSelect	sqlite3.c	11551;"	d	file:
EXCLUSIVE_LOCK	sqlite3.c	10210;"	d	file:
EXPRDUP_REDUCE	sqlite3.c	11594;"	d	file:
EXPR_FULLSIZE	sqlite3.c	11586;"	d	file:
EXPR_REDUCEDSIZE	sqlite3.c	11587;"	d	file:
EXPR_TOKENONLYSIZE	sqlite3.c	11588;"	d	file:
EXTRA_SIZE	sqlite3.c	51536;"	d	file:
ExpandBlob	sqlite3.c	14502;"	d	file:
ExpandBlob	sqlite3.c	14505;"	d	file:
Explain	sqlite3.c	/^struct Explain {$/;"	s	file:
Explain	sqlite3.c	/^typedef struct Explain Explain;$/;"	t	typeref:struct:Explain	file:
Explain::aIndent	sqlite3.c	/^  u16 aIndent[100];  \/* Levels of indentation *\/$/;"	m	struct:Explain	file:	access:public
Explain::nIndent	sqlite3.c	/^  int nIndent;       \/* Number of elements in aIndent *\/$/;"	m	struct:Explain	file:	access:public
Explain::pVdbe	sqlite3.c	/^  Vdbe *pVdbe;       \/* Attach the explanation to this Vdbe *\/$/;"	m	struct:Explain	file:	access:public
Explain::str	sqlite3.c	/^  StrAccum str;      \/* The string being accumulated *\/$/;"	m	struct:Explain	file:	access:public
Explain::zBase	sqlite3.c	/^  char zBase[100];   \/* Initial space *\/$/;"	m	struct:Explain	file:	access:public
Expr	sqlite3.c	/^struct Expr {$/;"	s	file:
Expr	sqlite3.c	/^typedef struct Expr Expr;$/;"	t	typeref:struct:Expr	file:
Expr::__anon3::iValue	sqlite3.c	/^    int iValue;            \/* Non-negative integer value if EP_IntValue *\/$/;"	m	union:Expr::__anon3	file:	access:public
Expr::__anon3::zToken	sqlite3.c	/^    char *zToken;          \/* Token value. Zero terminated and dequoted *\/$/;"	m	union:Expr::__anon3	file:	access:public
Expr::__anon4::pList	sqlite3.c	/^    ExprList *pList;     \/* op = IN, EXISTS, SELECT, CASE, FUNCTION, BETWEEN *\/$/;"	m	union:Expr::__anon4	file:	access:public
Expr::__anon4::pSelect	sqlite3.c	/^    Select *pSelect;     \/* EP_xIsSelect and op = IN, EXISTS, SELECT *\/$/;"	m	union:Expr::__anon4	file:	access:public
Expr::affinity	sqlite3.c	/^  char affinity;         \/* The affinity of the column or 0 if not a column *\/$/;"	m	struct:Expr	file:	access:public
Expr::flags	sqlite3.c	/^  u32 flags;             \/* Various flags.  EP_* See below *\/$/;"	m	struct:Expr	file:	access:public
Expr::iAgg	sqlite3.c	/^  i16 iAgg;              \/* Which entry in pAggInfo->aCol[] or ->aFunc[] *\/$/;"	m	struct:Expr	file:	access:public
Expr::iColumn	sqlite3.c	/^  ynVar iColumn;         \/* TK_COLUMN: column index.  -1 for rowid.$/;"	m	struct:Expr	file:	access:public
Expr::iRightJoinTable	sqlite3.c	/^  i16 iRightJoinTable;   \/* If EP_FromJoin, the right table of the join *\/$/;"	m	struct:Expr	file:	access:public
Expr::iTable	sqlite3.c	/^  int iTable;            \/* TK_COLUMN: cursor number of table holding column$/;"	m	struct:Expr	file:	access:public
Expr::nHeight	sqlite3.c	/^  int nHeight;           \/* Height of the tree headed by this node *\/$/;"	m	struct:Expr	file:	access:public
Expr::op	sqlite3.c	/^  u8 op;                 \/* Operation performed by this node *\/$/;"	m	struct:Expr	file:	access:public
Expr::op2	sqlite3.c	/^  u8 op2;                \/* TK_REGISTER: original value of Expr.op$/;"	m	struct:Expr	file:	access:public
Expr::pAggInfo	sqlite3.c	/^  AggInfo *pAggInfo;     \/* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION *\/$/;"	m	struct:Expr	file:	access:public
Expr::pLeft	sqlite3.c	/^  Expr *pLeft;           \/* Left subnode *\/$/;"	m	struct:Expr	file:	access:public
Expr::pRight	sqlite3.c	/^  Expr *pRight;          \/* Right subnode *\/$/;"	m	struct:Expr	file:	access:public
Expr::pTab	sqlite3.c	/^  Table *pTab;           \/* Table for TK_COLUMN expressions. *\/$/;"	m	struct:Expr	file:	access:public
Expr::u	sqlite3.c	/^  } u;$/;"	m	struct:Expr	typeref:union:Expr::__anon3	file:	access:public
Expr::x	sqlite3.c	/^  } x;$/;"	m	struct:Expr	typeref:union:Expr::__anon4	file:	access:public
ExprClearProperty	sqlite3.c	11569;"	d	file:
ExprHasAllProperty	sqlite3.c	11567;"	d	file:
ExprHasProperty	sqlite3.c	11566;"	d	file:
ExprList	sqlite3.c	/^struct ExprList {$/;"	s	file:
ExprList	sqlite3.c	/^typedef struct ExprList ExprList;$/;"	t	typeref:struct:ExprList	file:
ExprList::ExprList_item	sqlite3.c	/^  struct ExprList_item { \/* For each expression in the list *\/$/;"	s	struct:ExprList	file:	access:public
ExprList::ExprList_item::__anon5::__anon6::iAlias	sqlite3.c	/^        u16 iAlias;           \/* Index into Parse.aAlias[] for zName *\/$/;"	m	struct:ExprList::ExprList_item::__anon5::__anon6	file:	access:public
ExprList::ExprList_item::__anon5::__anon6::iOrderByCol	sqlite3.c	/^        u16 iOrderByCol;      \/* For ORDER BY, column number in result set *\/$/;"	m	struct:ExprList::ExprList_item::__anon5::__anon6	file:	access:public
ExprList::ExprList_item::__anon5::iConstExprReg	sqlite3.c	/^      int iConstExprReg;      \/* Register in which Expr value is cached *\/$/;"	m	union:ExprList::ExprList_item::__anon5	file:	access:public
ExprList::ExprList_item::__anon5::x	sqlite3.c	/^      } x;$/;"	m	union:ExprList::ExprList_item::__anon5	typeref:struct:ExprList::ExprList_item::__anon5::__anon6	file:	access:public
ExprList::ExprList_item::bSpanIsTab	sqlite3.c	/^    unsigned bSpanIsTab :1; \/* zSpan holds DB.TABLE.COLUMN *\/$/;"	m	struct:ExprList::ExprList_item	file:	access:public
ExprList::ExprList_item::done	sqlite3.c	/^    unsigned done :1;       \/* A flag to indicate when processing is finished *\/$/;"	m	struct:ExprList::ExprList_item	file:	access:public
ExprList::ExprList_item::pExpr	sqlite3.c	/^    Expr *pExpr;            \/* The list of expressions *\/$/;"	m	struct:ExprList::ExprList_item	file:	access:public
ExprList::ExprList_item::reusable	sqlite3.c	/^    unsigned reusable :1;   \/* Constant expression is reusable *\/$/;"	m	struct:ExprList::ExprList_item	file:	access:public
ExprList::ExprList_item::sortOrder	sqlite3.c	/^    u8 sortOrder;           \/* 1 for DESC or 0 for ASC *\/$/;"	m	struct:ExprList::ExprList_item	file:	access:public
ExprList::ExprList_item::u	sqlite3.c	/^    } u;$/;"	m	struct:ExprList::ExprList_item	typeref:union:ExprList::ExprList_item::__anon5	file:	access:public
ExprList::ExprList_item::zName	sqlite3.c	/^    char *zName;            \/* Token associated with this expression *\/$/;"	m	struct:ExprList::ExprList_item	file:	access:public
ExprList::ExprList_item::zSpan	sqlite3.c	/^    char *zSpan;            \/* Original text of the expression *\/$/;"	m	struct:ExprList::ExprList_item	file:	access:public
ExprList::a	sqlite3.c	/^  } *a;                  \/* Alloc a power of two greater or equal to nExpr *\/$/;"	m	struct:ExprList	typeref:struct:ExprList::ExprList_item	file:	access:public
ExprList::nExpr	sqlite3.c	/^  int nExpr;             \/* Number of expressions on the list *\/$/;"	m	struct:ExprList	file:	access:public
ExprList_item	sqlite3.c	/^  struct ExprList_item { \/* For each expression in the list *\/$/;"	s	struct:ExprList	file:	access:public
ExprSetProperty	sqlite3.c	11568;"	d	file:
ExprSetVVAProperty	sqlite3.c	11576;"	d	file:
ExprSetVVAProperty	sqlite3.c	11578;"	d	file:
ExprSpan	sqlite3.c	/^struct ExprSpan {$/;"	s	file:
ExprSpan	sqlite3.c	/^typedef struct ExprSpan ExprSpan;$/;"	t	typeref:struct:ExprSpan	file:
ExprSpan::pExpr	sqlite3.c	/^  Expr *pExpr;          \/* The expression parse tree *\/$/;"	m	struct:ExprSpan	file:	access:public
ExprSpan::zEnd	sqlite3.c	/^  const char *zEnd;     \/* One character past the end of input text *\/$/;"	m	struct:ExprSpan	file:	access:public
ExprSpan::zStart	sqlite3.c	/^  const char *zStart;   \/* First character of input text *\/$/;"	m	struct:ExprSpan	file:	access:public
FILEHANDLEID	sqlite3.c	40999;"	d	file:
FILE_ATTRIBUTE_MASK	sqlite3.c	32759;"	d	file:
FILE_FLAG_MASK	sqlite3.c	32755;"	d	file:
FKey	sqlite3.c	/^struct FKey {$/;"	s	file:
FKey	sqlite3.c	/^typedef struct FKey FKey;$/;"	t	typeref:struct:FKey	file:
FKey::aAction	sqlite3.c	/^  u8 aAction[2];        \/* ON DELETE and ON UPDATE actions, respectively *\/$/;"	m	struct:FKey	file:	access:public
FKey::aCol	sqlite3.c	/^  } aCol[1];            \/* One entry for each of nCol columns *\/$/;"	m	struct:FKey	typeref:struct:FKey::sColMap	file:	access:public
FKey::apTrigger	sqlite3.c	/^  Trigger *apTrigger[2];\/* Triggers for aAction[] actions *\/$/;"	m	struct:FKey	file:	access:public
FKey::isDeferred	sqlite3.c	/^  u8 isDeferred;       \/* True if constraint checking is deferred till COMMIT *\/$/;"	m	struct:FKey	file:	access:public
FKey::nCol	sqlite3.c	/^  int nCol;         \/* Number of columns in this key *\/$/;"	m	struct:FKey	file:	access:public
FKey::pFrom	sqlite3.c	/^  Table *pFrom;     \/* Table containing the REFERENCES clause (aka: Child) *\/$/;"	m	struct:FKey	file:	access:public
FKey::pNextFrom	sqlite3.c	/^  FKey *pNextFrom;  \/* Next FKey with the same in pFrom. Next parent of pFrom *\/$/;"	m	struct:FKey	file:	access:public
FKey::pNextTo	sqlite3.c	/^  FKey *pNextTo;    \/* Next with the same zTo. Next child of zTo. *\/$/;"	m	struct:FKey	file:	access:public
FKey::pPrevTo	sqlite3.c	/^  FKey *pPrevTo;    \/* Previous with the same zTo *\/$/;"	m	struct:FKey	file:	access:public
FKey::sColMap	sqlite3.c	/^  struct sColMap {      \/* Mapping of columns in pFrom to columns in zTo *\/$/;"	s	struct:FKey	file:	access:public
FKey::sColMap::iFrom	sqlite3.c	/^    int iFrom;            \/* Index of column in pFrom *\/$/;"	m	struct:FKey::sColMap	file:	access:public
FKey::sColMap::zCol	sqlite3.c	/^    char *zCol;           \/* Name of column in zTo.  If NULL use PRIMARY KEY *\/$/;"	m	struct:FKey::sColMap	file:	access:public
FKey::zTo	sqlite3.c	/^  char *zTo;        \/* Name of table that the key points to (aka: Parent) *\/$/;"	m	struct:FKey	file:	access:public
FLAG_INTERN	sqlite3.c	20812;"	d	file:
FLAG_SIGNED	sqlite3.c	20811;"	d	file:
FLAG_STRING	sqlite3.c	20813;"	d	file:
FOREGUARD	sqlite3.c	16806;"	d	file:
FOUR_BYTE_INT	sqlite3.c	66220;"	d	file:
FOUR_BYTE_UINT	sqlite3.c	66219;"	d	file:
FTS3_AUX_SCHEMA	sqlite3.c	135507;"	d	file:
FTS3_DOCID_SEARCH	sqlite3.c	129680;"	d	file:
FTS3_EVAL_FILTER	sqlite3.c	129660;"	d	file:
FTS3_EVAL_MATCHINFO	sqlite3.c	129662;"	d	file:
FTS3_EVAL_NEXT	sqlite3.c	129661;"	d	file:
FTS3_FULLSCAN_SEARCH	sqlite3.c	129679;"	d	file:
FTS3_FULLTEXT_SEARCH	sqlite3.c	129681;"	d	file:
FTS3_HASH_BINARY	sqlite3.c	129345;"	d	file:
FTS3_HASH_STRING	sqlite3.c	129344;"	d	file:
FTS3_HAVE_DOCID_GE	sqlite3.c	129690;"	d	file:
FTS3_HAVE_DOCID_LE	sqlite3.c	129691;"	d	file:
FTS3_HAVE_LANGID	sqlite3.c	129689;"	d	file:
FTS3_MATCHINFO_AVGLENGTH	sqlite3.c	145211;"	d	file:
FTS3_MATCHINFO_DEFAULT	sqlite3.c	145219;"	d	file:
FTS3_MATCHINFO_HITS	sqlite3.c	145214;"	d	file:
FTS3_MATCHINFO_LCS	sqlite3.c	145213;"	d	file:
FTS3_MATCHINFO_LENGTH	sqlite3.c	145212;"	d	file:
FTS3_MATCHINFO_NCOL	sqlite3.c	145209;"	d	file:
FTS3_MATCHINFO_NDOC	sqlite3.c	145210;"	d	file:
FTS3_MATCHINFO_NPHRASE	sqlite3.c	145208;"	d	file:
FTS3_MAX_PENDING_DATA	sqlite3.c	129420;"	d	file:
FTS3_MERGE_COUNT	sqlite3.c	129410;"	d	file:
FTS3_NODE_CHUNKSIZE	sqlite3.c	139585;"	d	file:
FTS3_NODE_CHUNKSIZE	sqlite3.c	139588;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	sqlite3.c	139586;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	sqlite3.c	139589;"	d	file:
FTS3_NODE_PADDING	sqlite3.c	139563;"	d	file:
FTS3_SEGCURSOR_ALL	sqlite3.c	129828;"	d	file:
FTS3_SEGCURSOR_PENDING	sqlite3.c	129827;"	d	file:
FTS3_SEGDIR_MAXLEVEL	sqlite3.c	129458;"	d	file:
FTS3_SEGDIR_MAXLEVEL_STR	sqlite3.c	129459;"	d	file:
FTS3_SEGMENT_COLUMN_FILTER	sqlite3.c	129840;"	d	file:
FTS3_SEGMENT_FIRST	sqlite3.c	129843;"	d	file:
FTS3_SEGMENT_IGNORE_EMPTY	sqlite3.c	129839;"	d	file:
FTS3_SEGMENT_PREFIX	sqlite3.c	129841;"	d	file:
FTS3_SEGMENT_REQUIRE_POS	sqlite3.c	129838;"	d	file:
FTS3_SEGMENT_SCAN	sqlite3.c	129842;"	d	file:
FTS3_TOK_SCHEMA	sqlite3.c	139213;"	d	file:
FTS3_VARINT_MAX	sqlite3.c	129441;"	d	file:
FTS4AUX_EQ_CONSTRAINT	sqlite3.c	135600;"	d	file:
FTS4AUX_GE_CONSTRAINT	sqlite3.c	135601;"	d	file:
FTS4AUX_LE_CONSTRAINT	sqlite3.c	135602;"	d	file:
FTSQUERY_AND	sqlite3.c	129788;"	d	file:
FTSQUERY_NEAR	sqlite3.c	129786;"	d	file:
FTSQUERY_NOT	sqlite3.c	129787;"	d	file:
FTSQUERY_OR	sqlite3.c	129789;"	d	file:
FTSQUERY_PHRASE	sqlite3.c	129790;"	d	file:
FTS_CORRUPT_VTAB	sqlite3.c	129529;"	d	file:
FTS_CORRUPT_VTAB	sqlite3.c	129531;"	d	file:
FTS_MAX_APPENDABLE_HEIGHT	sqlite3.c	139551;"	d	file:
FTS_STAT_AUTOINCRMERGE	sqlite3.c	139598;"	d	file:
FTS_STAT_DOCTOTAL	sqlite3.c	139596;"	d	file:
FTS_STAT_INCRMERGEHINT	sqlite3.c	139597;"	d	file:
FULLY_WITHIN	sqlite3.c	7659;"	d	file:
FULLY_WITHIN	sqlite3.h	7535;"	d
FUNCTION	sqlite3.c	10857;"	d	file:
FUNCTION2	sqlite3.c	10863;"	d	file:
FUNC_PERFECT_MATCH	sqlite3.c	93104;"	d	file:
FileChunk	sqlite3.c	/^struct FileChunk {$/;"	s	file:
FileChunk	sqlite3.c	/^typedef struct FileChunk FileChunk;$/;"	t	typeref:struct:FileChunk	file:
FileChunk::pNext	sqlite3.c	/^  FileChunk *pNext;               \/* Next chunk in the journal *\/$/;"	m	struct:FileChunk	file:	access:public
FileChunk::zChunk	sqlite3.c	/^  u8 zChunk[JOURNAL_CHUNKSIZE];   \/* Content of this chunk *\/$/;"	m	struct:FileChunk	file:	access:public
FilePoint	sqlite3.c	/^struct FilePoint {$/;"	s	file:
FilePoint	sqlite3.c	/^typedef struct FilePoint FilePoint;$/;"	t	typeref:struct:FilePoint	file:
FilePoint::iOffset	sqlite3.c	/^  sqlite3_int64 iOffset;          \/* Offset from the beginning of the file *\/$/;"	m	struct:FilePoint	file:	access:public
FilePoint::pChunk	sqlite3.c	/^  FileChunk *pChunk;              \/* Specific chunk into which cursor points *\/$/;"	m	struct:FilePoint	file:	access:public
Fts3Cursor	sqlite3.c	/^struct Fts3Cursor {$/;"	s	file:
Fts3Cursor	sqlite3.c	/^typedef struct Fts3Cursor Fts3Cursor;$/;"	t	typeref:struct:Fts3Cursor	file:
Fts3Cursor::aDoclist	sqlite3.c	/^  char *aDoclist;                 \/* List of docids for full-text queries *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::aMatchinfo	sqlite3.c	/^  u32 *aMatchinfo;                \/* Information about most recent match *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::bDesc	sqlite3.c	/^  u8 bDesc;                       \/* True to sort in descending order *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::base	sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::eEvalmode	sqlite3.c	/^  int eEvalmode;                  \/* An FTS3_EVAL_XX constant *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::eSearch	sqlite3.c	/^  i16 eSearch;                    \/* Search strategy (see below) *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::iLangid	sqlite3.c	/^  int iLangid;                    \/* Language being queried for *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::iMaxDocid	sqlite3.c	/^  i64 iMaxDocid;                  \/* Maximum docid to return *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::iMinDocid	sqlite3.c	/^  i64 iMinDocid;                  \/* Minimum docid to return *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::iPrevId	sqlite3.c	/^  sqlite3_int64 iPrevId;          \/* Previous id read from aDoclist *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::isEof	sqlite3.c	/^  u8 isEof;                       \/* True if at End Of Results *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::isMatchinfoNeeded	sqlite3.c	/^  int isMatchinfoNeeded;          \/* True when aMatchinfo[] needs filling in *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::isRequireSeek	sqlite3.c	/^  u8 isRequireSeek;               \/* True if must seek pStmt to %_content row *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::nDoc	sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Documents in table *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::nDoclist	sqlite3.c	/^  int nDoclist;                   \/* Size of buffer at aDoclist *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::nMatchinfo	sqlite3.c	/^  int nMatchinfo;                 \/* Number of elements in aMatchinfo[] *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::nPhrase	sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::nRowAvg	sqlite3.c	/^  int nRowAvg;                    \/* Average size of database rows, in pages *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::pDeferred	sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred search tokens, if any *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::pExpr	sqlite3.c	/^  Fts3Expr *pExpr;                \/* Parsed MATCH query string *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::pNextId	sqlite3.c	/^  char *pNextId;                  \/* Pointer into the body of aDoclist *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::pStmt	sqlite3.c	/^  sqlite3_stmt *pStmt;            \/* Prepared statement in use by the cursor *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3Cursor::zMatchinfo	sqlite3.c	/^  char *zMatchinfo;               \/* Matchinfo specification *\/$/;"	m	struct:Fts3Cursor	file:	access:public
Fts3DeferredToken	sqlite3.c	/^struct Fts3DeferredToken {$/;"	s	file:
Fts3DeferredToken	sqlite3.c	/^typedef struct Fts3DeferredToken Fts3DeferredToken;$/;"	t	typeref:struct:Fts3DeferredToken	file:
Fts3DeferredToken::iCol	sqlite3.c	/^  int iCol;                       \/* Column token must occur in *\/$/;"	m	struct:Fts3DeferredToken	file:	access:public
Fts3DeferredToken::pList	sqlite3.c	/^  PendingList *pList;             \/* Doclist is assembled here *\/$/;"	m	struct:Fts3DeferredToken	file:	access:public
Fts3DeferredToken::pNext	sqlite3.c	/^  Fts3DeferredToken *pNext;       \/* Next in list of deferred tokens *\/$/;"	m	struct:Fts3DeferredToken	file:	access:public
Fts3DeferredToken::pToken	sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* Pointer to corresponding expr token *\/$/;"	m	struct:Fts3DeferredToken	file:	access:public
Fts3Doclist	sqlite3.c	/^struct Fts3Doclist {$/;"	s	file:
Fts3Doclist	sqlite3.c	/^typedef struct Fts3Doclist Fts3Doclist;$/;"	t	typeref:struct:Fts3Doclist	file:
Fts3Doclist::aAll	sqlite3.c	/^  char *aAll;                    \/* Array containing doclist (or NULL) *\/$/;"	m	struct:Fts3Doclist	file:	access:public
Fts3Doclist::bFreeList	sqlite3.c	/^  int bFreeList;                 \/* True if pList should be sqlite3_free()d *\/$/;"	m	struct:Fts3Doclist	file:	access:public
Fts3Doclist::iDocid	sqlite3.c	/^  sqlite3_int64 iDocid;          \/* Current docid (if pList!=0) *\/$/;"	m	struct:Fts3Doclist	file:	access:public
Fts3Doclist::nAll	sqlite3.c	/^  int nAll;                      \/* Size of a[] in bytes *\/$/;"	m	struct:Fts3Doclist	file:	access:public
Fts3Doclist::nList	sqlite3.c	/^  int nList;                     \/* Length of position list *\/$/;"	m	struct:Fts3Doclist	file:	access:public
Fts3Doclist::pList	sqlite3.c	/^  char *pList;                   \/* Pointer to position list following iDocid *\/$/;"	m	struct:Fts3Doclist	file:	access:public
Fts3Doclist::pNextDocid	sqlite3.c	/^  char *pNextDocid;              \/* Pointer to next docid *\/$/;"	m	struct:Fts3Doclist	file:	access:public
Fts3Expr	sqlite3.c	/^struct Fts3Expr {$/;"	s	file:
Fts3Expr	sqlite3.c	/^typedef struct Fts3Expr Fts3Expr;$/;"	t	typeref:struct:Fts3Expr	file:
Fts3Expr::aMI	sqlite3.c	/^  u32 *aMI;$/;"	m	struct:Fts3Expr	file:	access:public
Fts3Expr::bDeferred	sqlite3.c	/^  u8 bDeferred;              \/* True if this expression is entirely deferred *\/$/;"	m	struct:Fts3Expr	file:	access:public
Fts3Expr::bEof	sqlite3.c	/^  u8 bEof;                   \/* True this expression is at EOF already *\/$/;"	m	struct:Fts3Expr	file:	access:public
Fts3Expr::bStart	sqlite3.c	/^  u8 bStart;                 \/* True if iDocid is valid *\/$/;"	m	struct:Fts3Expr	file:	access:public
Fts3Expr::eType	sqlite3.c	/^  int eType;                 \/* One of the FTSQUERY_XXX values defined below *\/$/;"	m	struct:Fts3Expr	file:	access:public
Fts3Expr::iDocid	sqlite3.c	/^  sqlite3_int64 iDocid;      \/* Current docid *\/$/;"	m	struct:Fts3Expr	file:	access:public
Fts3Expr::nNear	sqlite3.c	/^  int nNear;                 \/* Valid if eType==FTSQUERY_NEAR *\/$/;"	m	struct:Fts3Expr	file:	access:public
Fts3Expr::pLeft	sqlite3.c	/^  Fts3Expr *pLeft;           \/* Left operand *\/$/;"	m	struct:Fts3Expr	file:	access:public
Fts3Expr::pParent	sqlite3.c	/^  Fts3Expr *pParent;         \/* pParent->pLeft==this or pParent->pRight==this *\/$/;"	m	struct:Fts3Expr	file:	access:public
Fts3Expr::pPhrase	sqlite3.c	/^  Fts3Phrase *pPhrase;       \/* Valid if eType==FTSQUERY_PHRASE *\/$/;"	m	struct:Fts3Expr	file:	access:public
Fts3Expr::pRight	sqlite3.c	/^  Fts3Expr *pRight;          \/* Right operand *\/$/;"	m	struct:Fts3Expr	file:	access:public
Fts3Hash	sqlite3.c	/^struct Fts3Hash {$/;"	s	file:
Fts3Hash	sqlite3.c	/^typedef struct Fts3Hash Fts3Hash;$/;"	t	typeref:struct:Fts3Hash	file:
Fts3Hash::_fts3ht	sqlite3.c	/^  struct _fts3ht {        \/* the hash table *\/$/;"	s	struct:Fts3Hash	file:	access:public
Fts3Hash::_fts3ht::chain	sqlite3.c	/^    Fts3HashElem *chain;     \/* Pointer to first entry with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:	access:public
Fts3Hash::_fts3ht::count	sqlite3.c	/^    int count;               \/* Number of entries with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:	access:public
Fts3Hash::copyKey	sqlite3.c	/^  char copyKey;           \/* True if copy of key made on insert *\/$/;"	m	struct:Fts3Hash	file:	access:public
Fts3Hash::count	sqlite3.c	/^  int count;              \/* Number of entries in this table *\/$/;"	m	struct:Fts3Hash	file:	access:public
Fts3Hash::first	sqlite3.c	/^  Fts3HashElem *first;    \/* The first element of the array *\/$/;"	m	struct:Fts3Hash	file:	access:public
Fts3Hash::ht	sqlite3.c	/^  } *ht;$/;"	m	struct:Fts3Hash	typeref:struct:Fts3Hash::_fts3ht	file:	access:public
Fts3Hash::htsize	sqlite3.c	/^  int htsize;             \/* Number of buckets in the hash table *\/$/;"	m	struct:Fts3Hash	file:	access:public
Fts3Hash::keyClass	sqlite3.c	/^  char keyClass;          \/* HASH_INT, _POINTER, _STRING, _BINARY *\/$/;"	m	struct:Fts3Hash	file:	access:public
Fts3HashElem	sqlite3.c	/^struct Fts3HashElem {$/;"	s	file:
Fts3HashElem	sqlite3.c	/^typedef struct Fts3HashElem Fts3HashElem;$/;"	t	typeref:struct:Fts3HashElem	file:
Fts3HashElem::data	sqlite3.c	/^  void *data;                \/* Data associated with this element *\/$/;"	m	struct:Fts3HashElem	file:	access:public
Fts3HashElem::nKey	sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:	access:public
Fts3HashElem::next	sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:	access:public
Fts3HashElem::pKey	sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:	access:public
Fts3HashElem::prev	sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:	access:public
Fts3Index	sqlite3.c	/^  struct Fts3Index {$/;"	s	struct:Fts3Table	file:	access:public
Fts3MultiSegReader	sqlite3.c	/^struct Fts3MultiSegReader {$/;"	s	file:
Fts3MultiSegReader	sqlite3.c	/^typedef struct Fts3MultiSegReader Fts3MultiSegReader;$/;"	t	typeref:struct:Fts3MultiSegReader	file:
Fts3MultiSegReader::aBuffer	sqlite3.c	/^  char *aBuffer;                  \/* Buffer to merge doclists in *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
Fts3MultiSegReader::aDoclist	sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
Fts3MultiSegReader::apSegment	sqlite3.c	/^  Fts3SegReader **apSegment;      \/* Array of Fts3SegReader objects *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
Fts3MultiSegReader::bLookup	sqlite3.c	/^  int bLookup;                    \/* True if a lookup of a single entry. *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
Fts3MultiSegReader::bRestart	sqlite3.c	/^  int bRestart;$/;"	m	struct:Fts3MultiSegReader	file:	access:public
Fts3MultiSegReader::iColFilter	sqlite3.c	/^  int iColFilter;                 \/* If >=0, filter for this column *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
Fts3MultiSegReader::nAdvance	sqlite3.c	/^  int nAdvance;                   \/* How many seg-readers to advance *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
Fts3MultiSegReader::nBuffer	sqlite3.c	/^  int nBuffer;                    \/* Allocated size of aBuffer[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
Fts3MultiSegReader::nCost	sqlite3.c	/^  int nCost;                      \/* Cost of running iterator *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
Fts3MultiSegReader::nDoclist	sqlite3.c	/^  int nDoclist;                   \/* Size of aDoclist[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
Fts3MultiSegReader::nSegment	sqlite3.c	/^  int nSegment;                   \/* Size of apSegment array *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
Fts3MultiSegReader::nTerm	sqlite3.c	/^  int nTerm;                      \/* Size of zTerm in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
Fts3MultiSegReader::pFilter	sqlite3.c	/^  Fts3SegFilter *pFilter;         \/* Pointer to filter object *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
Fts3MultiSegReader::zTerm	sqlite3.c	/^  char *zTerm;                    \/* Pointer to term buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
Fts3Phrase	sqlite3.c	/^struct Fts3Phrase {$/;"	s	file:
Fts3Phrase	sqlite3.c	/^typedef struct Fts3Phrase Fts3Phrase;$/;"	t	typeref:struct:Fts3Phrase	file:
Fts3Phrase::aToken	sqlite3.c	/^  Fts3PhraseToken aToken[1]; \/* One entry for each token in the phrase *\/$/;"	m	struct:Fts3Phrase	file:	access:public
Fts3Phrase::bIncr	sqlite3.c	/^  int bIncr;                 \/* True if doclist is loaded incrementally *\/$/;"	m	struct:Fts3Phrase	file:	access:public
Fts3Phrase::doclist	sqlite3.c	/^  Fts3Doclist doclist;$/;"	m	struct:Fts3Phrase	file:	access:public
Fts3Phrase::iColumn	sqlite3.c	/^  int iColumn;               \/* Index of column this phrase must match *\/$/;"	m	struct:Fts3Phrase	file:	access:public
Fts3Phrase::iDoclistToken	sqlite3.c	/^  int iDoclistToken;$/;"	m	struct:Fts3Phrase	file:	access:public
Fts3Phrase::nToken	sqlite3.c	/^  int nToken;                \/* Number of tokens in the phrase *\/$/;"	m	struct:Fts3Phrase	file:	access:public
Fts3PhraseToken	sqlite3.c	/^struct Fts3PhraseToken {$/;"	s	file:
Fts3PhraseToken	sqlite3.c	/^typedef struct Fts3PhraseToken Fts3PhraseToken;$/;"	t	typeref:struct:Fts3PhraseToken	file:
Fts3PhraseToken::bFirst	sqlite3.c	/^  int bFirst;                     \/* True if token must appear at position 0 *\/$/;"	m	struct:Fts3PhraseToken	file:	access:public
Fts3PhraseToken::isPrefix	sqlite3.c	/^  int isPrefix;                   \/* True if token ends with a "*" character *\/$/;"	m	struct:Fts3PhraseToken	file:	access:public
Fts3PhraseToken::n	sqlite3.c	/^  int n;                          \/* Number of bytes in buffer z *\/$/;"	m	struct:Fts3PhraseToken	file:	access:public
Fts3PhraseToken::pDeferred	sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred token object for this token *\/$/;"	m	struct:Fts3PhraseToken	file:	access:public
Fts3PhraseToken::pSegcsr	sqlite3.c	/^  Fts3MultiSegReader *pSegcsr;    \/* Segment-reader for this token *\/$/;"	m	struct:Fts3PhraseToken	file:	access:public
Fts3PhraseToken::z	sqlite3.c	/^  char *z;                        \/* Text of the token *\/$/;"	m	struct:Fts3PhraseToken	file:	access:public
Fts3SegFilter	sqlite3.c	/^struct Fts3SegFilter {$/;"	s	file:
Fts3SegFilter	sqlite3.c	/^typedef struct Fts3SegFilter Fts3SegFilter;$/;"	t	typeref:struct:Fts3SegFilter	file:
Fts3SegFilter::flags	sqlite3.c	/^  int flags;$/;"	m	struct:Fts3SegFilter	file:	access:public
Fts3SegFilter::iCol	sqlite3.c	/^  int iCol;$/;"	m	struct:Fts3SegFilter	file:	access:public
Fts3SegFilter::nTerm	sqlite3.c	/^  int nTerm;$/;"	m	struct:Fts3SegFilter	file:	access:public
Fts3SegFilter::zTerm	sqlite3.c	/^  const char *zTerm;$/;"	m	struct:Fts3SegFilter	file:	access:public
Fts3SegReader	sqlite3.c	/^struct Fts3SegReader {$/;"	s	file:
Fts3SegReader	sqlite3.c	/^typedef struct Fts3SegReader Fts3SegReader;$/;"	t	typeref:struct:Fts3SegReader	file:
Fts3SegReader::aDoclist	sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist of current entry *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::aNode	sqlite3.c	/^  char *aNode;                    \/* Pointer to node data (or NULL) *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::bLookup	sqlite3.c	/^  u8 bLookup;                     \/* True for a lookup only *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::iCurrentBlock	sqlite3.c	/^  sqlite3_int64 iCurrentBlock;    \/* Current leaf block (or 0) *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::iDocid	sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::iEndBlock	sqlite3.c	/^  sqlite3_int64 iEndBlock;        \/* Rowid of final block in segment (or 0) *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::iIdx	sqlite3.c	/^  int iIdx;                       \/* Index within level, or 0x7FFFFFFF for PT *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::iLeafEndBlock	sqlite3.c	/^  sqlite3_int64 iLeafEndBlock;    \/* Rowid of final leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::iStartBlock	sqlite3.c	/^  sqlite3_int64 iStartBlock;      \/* Rowid of first leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::nDoclist	sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in current entry *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::nNode	sqlite3.c	/^  int nNode;                      \/* Size of buffer at aNode (or 0) *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::nOffsetList	sqlite3.c	/^  int nOffsetList;                \/* For descending pending seg-readers only *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::nPopulate	sqlite3.c	/^  int nPopulate;                  \/* If >0, bytes of buffer aNode[] loaded *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::nTerm	sqlite3.c	/^  int nTerm;                      \/* Number of bytes in current term *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::nTermAlloc	sqlite3.c	/^  int nTermAlloc;                 \/* Allocated size of zTerm buffer *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::pBlob	sqlite3.c	/^  sqlite3_blob *pBlob;            \/* If not NULL, blob handle to read node *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::pOffsetList	sqlite3.c	/^  char *pOffsetList;$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::ppNextElem	sqlite3.c	/^  Fts3HashElem **ppNextElem;$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::rootOnly	sqlite3.c	/^  u8 rootOnly;                    \/* True for a root-only reader *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3SegReader::zTerm	sqlite3.c	/^  char *zTerm;                    \/* Pointer to current term *\/$/;"	m	struct:Fts3SegReader	file:	access:public
Fts3Table	sqlite3.c	/^struct Fts3Table {$/;"	s	file:
Fts3Table	sqlite3.c	/^typedef struct Fts3Table Fts3Table;$/;"	t	typeref:struct:Fts3Table	file:
Fts3Table::Fts3Index	sqlite3.c	/^  struct Fts3Index {$/;"	s	struct:Fts3Table	file:	access:public
Fts3Table::Fts3Index::hPending	sqlite3.c	/^    Fts3Hash hPending;            \/* Pending terms table for this index *\/$/;"	m	struct:Fts3Table::Fts3Index	file:	access:public
Fts3Table::Fts3Index::nPrefix	sqlite3.c	/^    int nPrefix;                  \/* Prefix length (0 for main terms index) *\/$/;"	m	struct:Fts3Table::Fts3Index	file:	access:public
Fts3Table::aIndex	sqlite3.c	/^  } *aIndex;$/;"	m	struct:Fts3Table	typeref:struct:Fts3Table::Fts3Index	file:	access:public
Fts3Table::aStmt	sqlite3.c	/^  sqlite3_stmt *aStmt[40];$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::abNotindexed	sqlite3.c	/^  u8 *abNotindexed;               \/* True for 'notindexed' columns *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::azColumn	sqlite3.c	/^  char **azColumn;                \/* column names.  malloced *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::bDescIdx	sqlite3.c	/^  u8 bDescIdx;                    \/* True if doclists are in reverse order *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::bFts4	sqlite3.c	/^  u8 bFts4;                       \/* True for FTS4, false for FTS3 *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::bHasDocsize	sqlite3.c	/^  u8 bHasDocsize;                 \/* True if %_docsize table exists *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::bHasStat	sqlite3.c	/^  u8 bHasStat;                    \/* True if %_stat table exists (2==unknown) *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::bIgnoreSavepoint	sqlite3.c	/^  u8 bIgnoreSavepoint;            \/* True to ignore xSavepoint invocations *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::bNoIncrDoclist	sqlite3.c	/^  int bNoIncrDoclist;$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::base	sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::db	sqlite3.c	/^  sqlite3 *db;                    \/* The database connection *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::iPrevDocid	sqlite3.c	/^  sqlite_int64 iPrevDocid;        \/* Docid of most recently inserted document *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::iPrevLangid	sqlite3.c	/^  int iPrevLangid;                \/* Langid of recently inserted document *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::inTransaction	sqlite3.c	/^  int inTransaction;     \/* True after xBegin but before xCommit\/xRollback *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::mxSavepoint	sqlite3.c	/^  int mxSavepoint;       \/* Largest valid xSavepoint integer *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::nAutoincrmerge	sqlite3.c	/^  int nAutoincrmerge;             \/* Value configured by 'automerge' *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::nColumn	sqlite3.c	/^  int nColumn;                    \/* number of named columns in virtual table *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::nIndex	sqlite3.c	/^  int nIndex;                     \/* Size of aIndex[] *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::nLeafAdd	sqlite3.c	/^  u32 nLeafAdd;                   \/* Number of leaf blocks added this trans *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::nMaxPendingData	sqlite3.c	/^  int nMaxPendingData;            \/* Max pending data before flush to disk *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::nNodeSize	sqlite3.c	/^  int nNodeSize;                  \/* Soft limit for node size *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::nPendingData	sqlite3.c	/^  int nPendingData;               \/* Current bytes of pending data *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::nPgsz	sqlite3.c	/^  int nPgsz;                      \/* Page size for host database *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::pSegments	sqlite3.c	/^  sqlite3_blob *pSegments;        \/* Blob handle open on %_segments table *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::pTokenizer	sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;  \/* tokenizer for inserts and queries *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::zContentTbl	sqlite3.c	/^  char *zContentTbl;              \/* content=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::zDb	sqlite3.c	/^  const char *zDb;                \/* logical database name *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::zLanguageid	sqlite3.c	/^  char *zLanguageid;              \/* languageid=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::zName	sqlite3.c	/^  const char *zName;              \/* virtual table name *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::zReadExprlist	sqlite3.c	/^  char *zReadExprlist;$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::zSegmentsTbl	sqlite3.c	/^  char *zSegmentsTbl;             \/* Name of %_segments table *\/$/;"	m	struct:Fts3Table	file:	access:public
Fts3Table::zWriteExprlist	sqlite3.c	/^  char *zWriteExprlist;$/;"	m	struct:Fts3Table	file:	access:public
Fts3TokenAndCost	sqlite3.c	/^struct Fts3TokenAndCost {$/;"	s	file:
Fts3TokenAndCost	sqlite3.c	/^typedef struct Fts3TokenAndCost Fts3TokenAndCost;$/;"	t	typeref:struct:Fts3TokenAndCost	file:
Fts3TokenAndCost::iCol	sqlite3.c	/^  int iCol;                       \/* The column the token must match *\/$/;"	m	struct:Fts3TokenAndCost	file:	access:public
Fts3TokenAndCost::iToken	sqlite3.c	/^  int iToken;                     \/* Position of token in phrase *\/$/;"	m	struct:Fts3TokenAndCost	file:	access:public
Fts3TokenAndCost::nOvfl	sqlite3.c	/^  int nOvfl;                      \/* Number of overflow pages to load doclist *\/$/;"	m	struct:Fts3TokenAndCost	file:	access:public
Fts3TokenAndCost::pPhrase	sqlite3.c	/^  Fts3Phrase *pPhrase;            \/* The phrase the token belongs to *\/$/;"	m	struct:Fts3TokenAndCost	file:	access:public
Fts3TokenAndCost::pRoot	sqlite3.c	/^  Fts3Expr *pRoot;                \/* Root of NEAR\/AND cluster *\/$/;"	m	struct:Fts3TokenAndCost	file:	access:public
Fts3TokenAndCost::pToken	sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* The token itself *\/$/;"	m	struct:Fts3TokenAndCost	file:	access:public
Fts3auxColstats	sqlite3.c	/^  struct Fts3auxColstats {$/;"	s	struct:Fts3auxCursor	file:	access:public
Fts3auxCursor	sqlite3.c	/^struct Fts3auxCursor {$/;"	s	file:
Fts3auxCursor	sqlite3.c	/^typedef struct Fts3auxCursor Fts3auxCursor;$/;"	t	typeref:struct:Fts3auxCursor	file:
Fts3auxCursor::Fts3auxColstats	sqlite3.c	/^  struct Fts3auxColstats {$/;"	s	struct:Fts3auxCursor	file:	access:public
Fts3auxCursor::Fts3auxColstats::nDoc	sqlite3.c	/^    sqlite3_int64 nDoc;           \/* 'documents' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:	access:public
Fts3auxCursor::Fts3auxColstats::nOcc	sqlite3.c	/^    sqlite3_int64 nOcc;           \/* 'occurrences' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:	access:public
Fts3auxCursor::aStat	sqlite3.c	/^  } *aStat;$/;"	m	struct:Fts3auxCursor	typeref:struct:Fts3auxCursor::Fts3auxColstats	file:	access:public
Fts3auxCursor::base	sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxCursor	file:	access:public
Fts3auxCursor::csr	sqlite3.c	/^  Fts3MultiSegReader csr;        \/* Must be right after "base" *\/$/;"	m	struct:Fts3auxCursor	file:	access:public
Fts3auxCursor::filter	sqlite3.c	/^  Fts3SegFilter filter;$/;"	m	struct:Fts3auxCursor	file:	access:public
Fts3auxCursor::iCol	sqlite3.c	/^  int iCol;                       \/* Current value of 'col' column *\/$/;"	m	struct:Fts3auxCursor	file:	access:public
Fts3auxCursor::iLangid	sqlite3.c	/^  int iLangid;                    \/* Language id to query *\/$/;"	m	struct:Fts3auxCursor	file:	access:public
Fts3auxCursor::iRowid	sqlite3.c	/^  sqlite3_int64 iRowid;           \/* Current rowid *\/$/;"	m	struct:Fts3auxCursor	file:	access:public
Fts3auxCursor::isEof	sqlite3.c	/^  int isEof;                      \/* True if cursor is at EOF *\/$/;"	m	struct:Fts3auxCursor	file:	access:public
Fts3auxCursor::nStat	sqlite3.c	/^  int nStat;                      \/* Size of aStat[] array *\/$/;"	m	struct:Fts3auxCursor	file:	access:public
Fts3auxCursor::nStop	sqlite3.c	/^  int nStop;                      \/* Byte-length of string zStop *\/$/;"	m	struct:Fts3auxCursor	file:	access:public
Fts3auxCursor::zStop	sqlite3.c	/^  char *zStop;$/;"	m	struct:Fts3auxCursor	file:	access:public
Fts3auxTable	sqlite3.c	/^struct Fts3auxTable {$/;"	s	file:
Fts3auxTable	sqlite3.c	/^typedef struct Fts3auxTable Fts3auxTable;$/;"	t	typeref:struct:Fts3auxTable	file:
Fts3auxTable::base	sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxTable	file:	access:public
Fts3auxTable::pFts3Tab	sqlite3.c	/^  Fts3Table *pFts3Tab;$/;"	m	struct:Fts3auxTable	file:	access:public
Fts3tokCursor	sqlite3.c	/^struct Fts3tokCursor {$/;"	s	file:
Fts3tokCursor	sqlite3.c	/^typedef struct Fts3tokCursor Fts3tokCursor;$/;"	t	typeref:struct:Fts3tokCursor	file:
Fts3tokCursor::base	sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
Fts3tokCursor::iEnd	sqlite3.c	/^  int iEnd;                       \/* Current 'end' value *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
Fts3tokCursor::iPos	sqlite3.c	/^  int iPos;                       \/* Current 'pos' value *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
Fts3tokCursor::iRowid	sqlite3.c	/^  int iRowid;                     \/* Current 'rowid' value *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
Fts3tokCursor::iStart	sqlite3.c	/^  int iStart;                     \/* Current 'start' value *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
Fts3tokCursor::nToken	sqlite3.c	/^  int nToken;                     \/* Size of zToken in bytes *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
Fts3tokCursor::pCsr	sqlite3.c	/^  sqlite3_tokenizer_cursor *pCsr; \/* Cursor to iterate through zInput *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
Fts3tokCursor::zInput	sqlite3.c	/^  char *zInput;                   \/* Input string *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
Fts3tokCursor::zToken	sqlite3.c	/^  const char *zToken;             \/* Current 'token' value *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
Fts3tokTable	sqlite3.c	/^struct Fts3tokTable {$/;"	s	file:
Fts3tokTable	sqlite3.c	/^typedef struct Fts3tokTable Fts3tokTable;$/;"	t	typeref:struct:Fts3tokTable	file:
Fts3tokTable::base	sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3tokTable	file:	access:public
Fts3tokTable::pMod	sqlite3.c	/^  const sqlite3_tokenizer_module *pMod;$/;"	m	struct:Fts3tokTable	file:	access:public
Fts3tokTable::pTok	sqlite3.c	/^  sqlite3_tokenizer *pTok;$/;"	m	struct:Fts3tokTable	file:	access:public
FuncDef	sqlite3.c	/^struct FuncDef {$/;"	s	file:
FuncDef	sqlite3.c	/^typedef struct FuncDef FuncDef;$/;"	t	typeref:struct:FuncDef	file:
FuncDef::funcFlags	sqlite3.c	/^  u16 funcFlags;       \/* Some combination of SQLITE_FUNC_* *\/$/;"	m	struct:FuncDef	file:	access:public
FuncDef::nArg	sqlite3.c	/^  i16 nArg;            \/* Number of arguments.  -1 means unlimited *\/$/;"	m	struct:FuncDef	file:	access:public
FuncDef::pDestructor	sqlite3.c	/^  FuncDestructor *pDestructor;   \/* Reference counted destructor function *\/$/;"	m	struct:FuncDef	file:	access:public
FuncDef::pHash	sqlite3.c	/^  FuncDef *pHash;      \/* Next with a different name but the same hash *\/$/;"	m	struct:FuncDef	file:	access:public
FuncDef::pNext	sqlite3.c	/^  FuncDef *pNext;      \/* Next function with same name *\/$/;"	m	struct:FuncDef	file:	access:public
FuncDef::pUserData	sqlite3.c	/^  void *pUserData;     \/* User data parameter *\/$/;"	m	struct:FuncDef	file:	access:public
FuncDef::xFinalize	sqlite3.c	/^  void (*xFinalize)(sqlite3_context*);                \/* Aggregate finalizer *\/$/;"	m	struct:FuncDef	file:	access:public
FuncDef::xFunc	sqlite3.c	/^  void (*xFunc)(sqlite3_context*,int,sqlite3_value**); \/* Regular function *\/$/;"	m	struct:FuncDef	file:	access:public
FuncDef::xStep	sqlite3.c	/^  void (*xStep)(sqlite3_context*,int,sqlite3_value**); \/* Aggregate step *\/$/;"	m	struct:FuncDef	file:	access:public
FuncDef::zName	sqlite3.c	/^  char *zName;         \/* SQL name of the function. *\/$/;"	m	struct:FuncDef	file:	access:public
FuncDefHash	sqlite3.c	/^struct FuncDefHash {$/;"	s	file:
FuncDefHash	sqlite3.c	/^typedef struct FuncDefHash FuncDefHash;$/;"	t	typeref:struct:FuncDefHash	file:
FuncDefHash::a	sqlite3.c	/^  FuncDef *a[23];       \/* Hash table for functions *\/$/;"	m	struct:FuncDefHash	file:	access:public
FuncDestructor	sqlite3.c	/^struct FuncDestructor {$/;"	s	file:
FuncDestructor	sqlite3.c	/^typedef struct FuncDestructor FuncDestructor;$/;"	t	typeref:struct:FuncDestructor	file:
FuncDestructor::nRef	sqlite3.c	/^  int nRef;$/;"	m	struct:FuncDestructor	file:	access:public
FuncDestructor::pUserData	sqlite3.c	/^  void *pUserData;$/;"	m	struct:FuncDestructor	file:	access:public
FuncDestructor::xDestroy	sqlite3.c	/^  void (*xDestroy)(void *);$/;"	m	struct:FuncDestructor	file:	access:public
GETVARINT_INIT	sqlite3.c	129992;"	d	file:
GETVARINT_STEP	sqlite3.c	129989;"	d	file:
GLOBAL	sqlite3.c	8845;"	d	file:
GLOBAL	sqlite3.c	8851;"	d	file:
GlobUpperToLower	sqlite3.c	94747;"	d	file:
GlobUpperToLower	sqlite3.c	94750;"	d	file:
GlobUpperToLowerAscii	sqlite3.c	94748;"	d	file:
GlobUpperToLowerAscii	sqlite3.c	94751;"	d	file:
HANDLE_TO_WINFILE	sqlite3.c	34535;"	d	file:
HASHSIZE	sqlite3.c	147568;"	d	file:
HASHTABLE_HASH_1	sqlite3.c	48611;"	d	file:
HASHTABLE_NPAGE	sqlite3.c	48610;"	d	file:
HASHTABLE_NPAGE_ONE	sqlite3.c	48619;"	d	file:
HASHTABLE_NSLOT	sqlite3.c	48612;"	d	file:
HAVE_FULLFSYNC	sqlite3.c	28208;"	d	file:
HAVE_FULLFSYNC	sqlite3.c	28210;"	d	file:
HAVE_LOCALTIME_S	sqlite3.c	15177;"	d	file:
HAVE_MREMAP	sqlite3.c	25103;"	d	file:
HAVE_MREMAP	sqlite3.c	25105;"	d	file:
HAVE_STRCHRNUL	sqlite3.c	20760;"	d	file:
HasRowid	sqlite3.c	11140;"	d	file:
Hash	sqlite3.c	/^struct Hash {$/;"	s	file:
Hash	sqlite3.c	/^typedef struct Hash Hash;$/;"	t	typeref:struct:Hash	file:
Hash::_ht	sqlite3.c	/^  struct _ht {              \/* the hash table *\/$/;"	s	struct:Hash	file:	access:public
Hash::_ht::chain	sqlite3.c	/^    HashElem *chain;           \/* Pointer to first entry with this hash *\/$/;"	m	struct:Hash::_ht	file:	access:public
Hash::_ht::count	sqlite3.c	/^    int count;                 \/* Number of entries with this hash *\/$/;"	m	struct:Hash::_ht	file:	access:public
Hash::count	sqlite3.c	/^  unsigned int count;       \/* Number of entries in this table *\/$/;"	m	struct:Hash	file:	access:public
Hash::first	sqlite3.c	/^  HashElem *first;          \/* The first element of the array *\/$/;"	m	struct:Hash	file:	access:public
Hash::ht	sqlite3.c	/^  } *ht;$/;"	m	struct:Hash	typeref:struct:Hash::_ht	file:	access:public
Hash::htsize	sqlite3.c	/^  unsigned int htsize;      \/* Number of buckets in the hash table *\/$/;"	m	struct:Hash	file:	access:public
HashElem	sqlite3.c	/^struct HashElem {$/;"	s	file:
HashElem	sqlite3.c	/^typedef struct HashElem HashElem;$/;"	t	typeref:struct:HashElem	file:
HashElem::data	sqlite3.c	/^  void *data;                  \/* Data associated with this element *\/$/;"	m	struct:HashElem	file:	access:public
HashElem::next	sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:	access:public
HashElem::pKey	sqlite3.c	/^  const char *pKey;            \/* Key associated with this element *\/$/;"	m	struct:HashElem	file:	access:public
HashElem::prev	sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:	access:public
INCRINIT_NORMAL	sqlite3.c	77879;"	d	file:
INCRINIT_ROOT	sqlite3.c	77881;"	d	file:
INCRINIT_TASK	sqlite3.c	77880;"	d	file:
INT16_TYPE	sqlite3.c	8560;"	d	file:
INT16_TYPE	sqlite3.c	8562;"	d	file:
INT8_TYPE	sqlite3.c	8574;"	d	file:
INT8_TYPE	sqlite3.c	8576;"	d	file:
INTERFACE	sqlite3.c	120375;"	d	file:
INVALID_FILE_ATTRIBUTES	sqlite3.c	32751;"	d	file:
INVALID_SET_FILE_POINTER	sqlite3.c	34887;"	d	file:
IN_DECLARE_VTAB	sqlite3.c	12170;"	d	file:
IN_DECLARE_VTAB	sqlite3.c	12172;"	d	file:
IN_INDEX_EPH	sqlite3.c	13221;"	d	file:
IN_INDEX_INDEX_ASC	sqlite3.c	13222;"	d	file:
IN_INDEX_INDEX_DESC	sqlite3.c	13223;"	d	file:
IN_INDEX_LOOP	sqlite3.c	13230;"	d	file:
IN_INDEX_MEMBERSHIP	sqlite3.c	13229;"	d	file:
IN_INDEX_NOOP	sqlite3.c	13224;"	d	file:
IN_INDEX_NOOP_OK	sqlite3.c	13228;"	d	file:
IN_INDEX_ROWID	sqlite3.c	13220;"	d	file:
IOMETHODS	sqlite3.c	29761;"	d	file:
IOTRACE	sqlite3.c	13280;"	d	file:
IOTRACE	sqlite3.c	13284;"	d	file:
ISAUTOVACUUM	sqlite3.c	51872;"	d	file:
ISAUTOVACUUM	sqlite3.c	51874;"	d	file:
IS_BIG_INT	sqlite3.c	8145;"	d	file:
IS_LOCK_ERROR	sqlite3.c	24755;"	d	file:
IcuCursor	sqlite3.c	/^struct IcuCursor {$/;"	s	file:
IcuCursor	sqlite3.c	/^typedef struct IcuCursor IcuCursor;$/;"	t	typeref:struct:IcuCursor	file:
IcuCursor::aChar	sqlite3.c	/^  UChar *aChar;               \/* Copy of input using utf-16 encoding *\/$/;"	m	struct:IcuCursor	file:	access:public
IcuCursor::aOffset	sqlite3.c	/^  int *aOffset;               \/* Offsets of each character in utf-8 input *\/$/;"	m	struct:IcuCursor	file:	access:public
IcuCursor::base	sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:IcuCursor	file:	access:public
IcuCursor::iToken	sqlite3.c	/^  int iToken;$/;"	m	struct:IcuCursor	file:	access:public
IcuCursor::nBuffer	sqlite3.c	/^  int nBuffer;$/;"	m	struct:IcuCursor	file:	access:public
IcuCursor::nChar	sqlite3.c	/^  int nChar;                  \/* Number of UChar elements in pInput *\/$/;"	m	struct:IcuCursor	file:	access:public
IcuCursor::pIter	sqlite3.c	/^  UBreakIterator *pIter;      \/* ICU break-iterator object *\/$/;"	m	struct:IcuCursor	file:	access:public
IcuCursor::zBuffer	sqlite3.c	/^  char *zBuffer;$/;"	m	struct:IcuCursor	file:	access:public
IcuTokenizer	sqlite3.c	/^struct IcuTokenizer {$/;"	s	file:
IcuTokenizer	sqlite3.c	/^typedef struct IcuTokenizer IcuTokenizer;$/;"	t	typeref:struct:IcuTokenizer	file:
IcuTokenizer::base	sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:IcuTokenizer	file:	access:public
IcuTokenizer::zLocale	sqlite3.c	/^  char *zLocale;$/;"	m	struct:IcuTokenizer	file:	access:public
IdChar	sqlite3.c	124152;"	d	file:
IdChar	sqlite3.c	124170;"	d	file:
IdChar	sqlite3.c	124618;"	d	file:
IdChar	sqlite3.c	124622;"	d	file:
IdList	sqlite3.c	/^struct IdList {$/;"	s	file:
IdList	sqlite3.c	/^typedef struct IdList IdList;$/;"	t	typeref:struct:IdList	file:
IdList::IdList_item	sqlite3.c	/^  struct IdList_item {$/;"	s	struct:IdList	file:	access:public
IdList::IdList_item::idx	sqlite3.c	/^    int idx;          \/* Index in some Table.aCol[] of a column named zName *\/$/;"	m	struct:IdList::IdList_item	file:	access:public
IdList::IdList_item::zName	sqlite3.c	/^    char *zName;      \/* Name of the identifier *\/$/;"	m	struct:IdList::IdList_item	file:	access:public
IdList::a	sqlite3.c	/^  } *a;$/;"	m	struct:IdList	typeref:struct:IdList::IdList_item	file:	access:public
IdList::nId	sqlite3.c	/^  int nId;         \/* Number of identifiers on the list *\/$/;"	m	struct:IdList	file:	access:public
IdList_item	sqlite3.c	/^  struct IdList_item {$/;"	s	struct:IdList	file:	access:public
IfNotOmitAV	sqlite3.c	52255;"	d	file:
IfNotOmitAV	sqlite3.c	52257;"	d	file:
IgnorableOrderby	sqlite3.c	11954;"	d	file:
InLoop	sqlite3.c	/^      struct InLoop {$/;"	s	struct:WhereLevel::__anon16::__anon17	file:	access:public
IncrMerger	sqlite3.c	/^struct IncrMerger {$/;"	s	file:
IncrMerger	sqlite3.c	/^typedef struct IncrMerger IncrMerger;       \/* Read & merge multiple PMAs *\/$/;"	t	typeref:struct:IncrMerger	file:
IncrMerger::aFile	sqlite3.c	/^  SorterFile aFile[2];            \/* aFile[0] for reading, [1] for writing *\/$/;"	m	struct:IncrMerger	file:	access:public
IncrMerger::bEof	sqlite3.c	/^  int bEof;                       \/* Set to true when merge is finished *\/$/;"	m	struct:IncrMerger	file:	access:public
IncrMerger::bUseThread	sqlite3.c	/^  int bUseThread;                 \/* True to use a bg thread for this object *\/$/;"	m	struct:IncrMerger	file:	access:public
IncrMerger::iStartOff	sqlite3.c	/^  i64 iStartOff;                  \/* Offset to start writing file at *\/$/;"	m	struct:IncrMerger	file:	access:public
IncrMerger::mxSz	sqlite3.c	/^  int mxSz;                       \/* Maximum bytes of data to store *\/$/;"	m	struct:IncrMerger	file:	access:public
IncrMerger::pMerger	sqlite3.c	/^  MergeEngine *pMerger;           \/* Merge engine thread reads data from *\/$/;"	m	struct:IncrMerger	file:	access:public
IncrMerger::pTask	sqlite3.c	/^  SortSubtask *pTask;             \/* Task that owns this merger *\/$/;"	m	struct:IncrMerger	file:	access:public
Incrblob	sqlite3.c	/^struct Incrblob {$/;"	s	file:
Incrblob	sqlite3.c	/^typedef struct Incrblob Incrblob;$/;"	t	typeref:struct:Incrblob	file:
Incrblob::db	sqlite3.c	/^  sqlite3 *db;            \/* The associated database *\/$/;"	m	struct:Incrblob	file:	access:public
Incrblob::flags	sqlite3.c	/^  int flags;              \/* Copy of "flags" passed to sqlite3_blob_open() *\/$/;"	m	struct:Incrblob	file:	access:public
Incrblob::iCol	sqlite3.c	/^  int iCol;               \/* Table column this handle is open on *\/$/;"	m	struct:Incrblob	file:	access:public
Incrblob::iOffset	sqlite3.c	/^  int iOffset;            \/* Byte offset of blob in cursor data *\/$/;"	m	struct:Incrblob	file:	access:public
Incrblob::nByte	sqlite3.c	/^  int nByte;              \/* Size of open blob, in bytes *\/$/;"	m	struct:Incrblob	file:	access:public
Incrblob::pCsr	sqlite3.c	/^  BtCursor *pCsr;         \/* Cursor pointing at blob row *\/$/;"	m	struct:Incrblob	file:	access:public
Incrblob::pStmt	sqlite3.c	/^  sqlite3_stmt *pStmt;    \/* Statement holding cursor open *\/$/;"	m	struct:Incrblob	file:	access:public
IncrmergeWriter	sqlite3.c	/^struct IncrmergeWriter {$/;"	s	file:
IncrmergeWriter	sqlite3.c	/^typedef struct IncrmergeWriter IncrmergeWriter;$/;"	t	typeref:struct:IncrmergeWriter	file:
IncrmergeWriter::aNodeWriter	sqlite3.c	/^  NodeWriter aNodeWriter[FTS_MAX_APPENDABLE_HEIGHT];$/;"	m	struct:IncrmergeWriter	file:	access:public
IncrmergeWriter::bNoLeafData	sqlite3.c	/^  u8 bNoLeafData;                 \/* If true, store 0 for segment size *\/$/;"	m	struct:IncrmergeWriter	file:	access:public
IncrmergeWriter::iAbsLevel	sqlite3.c	/^  sqlite3_int64 iAbsLevel;        \/* Absolute level of input segments *\/$/;"	m	struct:IncrmergeWriter	file:	access:public
IncrmergeWriter::iEnd	sqlite3.c	/^  sqlite3_int64 iEnd;             \/* Block number of last allocated block *\/$/;"	m	struct:IncrmergeWriter	file:	access:public
IncrmergeWriter::iIdx	sqlite3.c	/^  int iIdx;                       \/* Index of *output* segment in iAbsLevel+1 *\/$/;"	m	struct:IncrmergeWriter	file:	access:public
IncrmergeWriter::iStart	sqlite3.c	/^  sqlite3_int64 iStart;           \/* Block number of first allocated block *\/$/;"	m	struct:IncrmergeWriter	file:	access:public
IncrmergeWriter::nLeafData	sqlite3.c	/^  sqlite3_int64 nLeafData;        \/* Bytes of leaf page data so far *\/$/;"	m	struct:IncrmergeWriter	file:	access:public
IncrmergeWriter::nLeafEst	sqlite3.c	/^  int nLeafEst;                   \/* Space allocated for leaf blocks *\/$/;"	m	struct:IncrmergeWriter	file:	access:public
IncrmergeWriter::nWork	sqlite3.c	/^  int nWork;                      \/* Number of leaf pages flushed *\/$/;"	m	struct:IncrmergeWriter	file:	access:public
Index	sqlite3.c	/^struct Index {$/;"	s	file:
Index	sqlite3.c	/^typedef struct Index Index;$/;"	t	typeref:struct:Index	file:
Index::aAvgEq	sqlite3.c	/^  tRowcnt *aAvgEq;         \/* Average nEq values for keys not in aSample *\/$/;"	m	struct:Index	file:	access:public
Index::aSample	sqlite3.c	/^  IndexSample *aSample;    \/* Samples of the left-most key *\/$/;"	m	struct:Index	file:	access:public
Index::aSortOrder	sqlite3.c	/^  u8 *aSortOrder;          \/* for each column: True==DESC, False==ASC *\/$/;"	m	struct:Index	file:	access:public
Index::aiColumn	sqlite3.c	/^  i16 *aiColumn;           \/* Which columns are used by this index.  1st is 0 *\/$/;"	m	struct:Index	file:	access:public
Index::aiRowEst	sqlite3.c	/^  tRowcnt *aiRowEst;       \/* Non-logarithmic stat1 data for this table *\/$/;"	m	struct:Index	file:	access:public
Index::aiRowLogEst	sqlite3.c	/^  LogEst *aiRowLogEst;     \/* From ANALYZE: Est. rows selected by each column *\/$/;"	m	struct:Index	file:	access:public
Index::azColl	sqlite3.c	/^  char **azColl;           \/* Array of collation sequence names for index *\/$/;"	m	struct:Index	file:	access:public
Index::bUnordered	sqlite3.c	/^  unsigned bUnordered:1;   \/* Use this index for == or IN queries only *\/$/;"	m	struct:Index	file:	access:public
Index::idxType	sqlite3.c	/^  unsigned idxType:2;      \/* 1==UNIQUE, 2==PRIMARY KEY, 0==CREATE INDEX *\/$/;"	m	struct:Index	file:	access:public
Index::isCovering	sqlite3.c	/^  unsigned isCovering:1;   \/* True if this is a covering index *\/$/;"	m	struct:Index	file:	access:public
Index::isResized	sqlite3.c	/^  unsigned isResized:1;    \/* True if resizeIndexObject() has been called *\/$/;"	m	struct:Index	file:	access:public
Index::nColumn	sqlite3.c	/^  u16 nColumn;             \/* Number of columns stored in the index *\/$/;"	m	struct:Index	file:	access:public
Index::nKeyCol	sqlite3.c	/^  u16 nKeyCol;             \/* Number of columns forming the key *\/$/;"	m	struct:Index	file:	access:public
Index::nSample	sqlite3.c	/^  int nSample;             \/* Number of elements in aSample[] *\/$/;"	m	struct:Index	file:	access:public
Index::nSampleCol	sqlite3.c	/^  int nSampleCol;          \/* Size of IndexSample.anEq[] and so on *\/$/;"	m	struct:Index	file:	access:public
Index::onError	sqlite3.c	/^  u8 onError;              \/* OE_Abort, OE_Ignore, OE_Replace, or OE_None *\/$/;"	m	struct:Index	file:	access:public
Index::pKeyInfo	sqlite3.c	/^  KeyInfo *pKeyInfo;       \/* A KeyInfo object suitable for this index *\/$/;"	m	struct:Index	file:	access:public
Index::pNext	sqlite3.c	/^  Index *pNext;            \/* The next index associated with the same table *\/$/;"	m	struct:Index	file:	access:public
Index::pPartIdxWhere	sqlite3.c	/^  Expr *pPartIdxWhere;     \/* WHERE clause for partial indices *\/$/;"	m	struct:Index	file:	access:public
Index::pSchema	sqlite3.c	/^  Schema *pSchema;         \/* Schema containing this index *\/$/;"	m	struct:Index	file:	access:public
Index::pTable	sqlite3.c	/^  Table *pTable;           \/* The SQL table being indexed *\/$/;"	m	struct:Index	file:	access:public
Index::szIdxRow	sqlite3.c	/^  LogEst szIdxRow;         \/* Estimated average row size in bytes *\/$/;"	m	struct:Index	file:	access:public
Index::tnum	sqlite3.c	/^  int tnum;                \/* DB Page containing root of this index *\/$/;"	m	struct:Index	file:	access:public
Index::uniqNotNull	sqlite3.c	/^  unsigned uniqNotNull:1;  \/* True if UNIQUE and NOT NULL for all columns *\/$/;"	m	struct:Index	file:	access:public
Index::zColAff	sqlite3.c	/^  char *zColAff;           \/* String defining the affinity of each column *\/$/;"	m	struct:Index	file:	access:public
Index::zName	sqlite3.c	/^  char *zName;             \/* Name of this index *\/$/;"	m	struct:Index	file:	access:public
IndexSample	sqlite3.c	/^struct IndexSample {$/;"	s	file:
IndexSample	sqlite3.c	/^typedef struct IndexSample IndexSample;$/;"	t	typeref:struct:IndexSample	file:
IndexSample::anDLt	sqlite3.c	/^  tRowcnt *anDLt;   \/* Est. number of distinct keys less than this sample *\/$/;"	m	struct:IndexSample	file:	access:public
IndexSample::anEq	sqlite3.c	/^  tRowcnt *anEq;    \/* Est. number of rows where the key equals this sample *\/$/;"	m	struct:IndexSample	file:	access:public
IndexSample::anLt	sqlite3.c	/^  tRowcnt *anLt;    \/* Est. number of rows where key is less than this sample *\/$/;"	m	struct:IndexSample	file:	access:public
IndexSample::n	sqlite3.c	/^  int n;            \/* Size of record in bytes *\/$/;"	m	struct:IndexSample	file:	access:public
IndexSample::p	sqlite3.c	/^  void *p;          \/* Pointer to sampled record *\/$/;"	m	struct:IndexSample	file:	access:public
InitData	sqlite3.c	/^} InitData;$/;"	t	typeref:struct:__anon7	file:
IntegrityCk	sqlite3.c	/^struct IntegrityCk {$/;"	s	file:
IntegrityCk	sqlite3.c	/^typedef struct IntegrityCk IntegrityCk;$/;"	t	typeref:struct:IntegrityCk	file:
IntegrityCk::aPgRef	sqlite3.c	/^  u8 *aPgRef;       \/* 1 bit per page in the db (see above) *\/$/;"	m	struct:IntegrityCk	file:	access:public
IntegrityCk::errMsg	sqlite3.c	/^  StrAccum errMsg;  \/* Accumulate the error message text here *\/$/;"	m	struct:IntegrityCk	file:	access:public
IntegrityCk::mallocFailed	sqlite3.c	/^  int mallocFailed; \/* A memory allocation error has occurred *\/$/;"	m	struct:IntegrityCk	file:	access:public
IntegrityCk::mxErr	sqlite3.c	/^  int mxErr;        \/* Stop accumulating errors when this reaches zero *\/$/;"	m	struct:IntegrityCk	file:	access:public
IntegrityCk::nErr	sqlite3.c	/^  int nErr;         \/* Number of messages written to zErrMsg so far *\/$/;"	m	struct:IntegrityCk	file:	access:public
IntegrityCk::nPage	sqlite3.c	/^  Pgno nPage;       \/* Number of pages in the database *\/$/;"	m	struct:IntegrityCk	file:	access:public
IntegrityCk::pBt	sqlite3.c	/^  BtShared *pBt;    \/* The tree being checked out *\/$/;"	m	struct:IntegrityCk	file:	access:public
IntegrityCk::pPager	sqlite3.c	/^  Pager *pPager;    \/* The associated pager.  Also accessible by pBt->pPager *\/$/;"	m	struct:IntegrityCk	file:	access:public
IntegrityCk::v1	sqlite3.c	/^  int v1, v2;       \/* Values for up to two %d fields in zPfx *\/$/;"	m	struct:IntegrityCk	file:	access:public
IntegrityCk::v2	sqlite3.c	/^  int v1, v2;       \/* Values for up to two %d fields in zPfx *\/$/;"	m	struct:IntegrityCk	file:	access:public
IntegrityCk::zPfx	sqlite3.c	/^  const char *zPfx; \/* Error message prefix *\/$/;"	m	struct:IntegrityCk	file:	access:public
IsHiddenColumn	sqlite3.c	11133;"	d	file:
IsHiddenColumn	sqlite3.c	11136;"	d	file:
IsPowerOfTwo	sqlite3.c	8817;"	d	file:
IsPrimaryKeyIndex	sqlite3.c	11339;"	d	file:
IsStat3	sqlite3.c	85977;"	d	file:
IsStat3	sqlite3.c	85980;"	d	file:
IsStat3	sqlite3.c	85983;"	d	file:
IsStat34	sqlite3.c	85987;"	d	file:
IsStat4	sqlite3.c	85976;"	d	file:
IsStat4	sqlite3.c	85979;"	d	file:
IsStat4	sqlite3.c	85982;"	d	file:
IsUniqueIndex	sqlite3.c	11342;"	d	file:
IsVirtual	sqlite3.c	11132;"	d	file:
IsVirtual	sqlite3.c	11135;"	d	file:
JOURNAL_CHUNKSIZE	sqlite3.c	78804;"	d	file:
JOURNAL_HDR_SZ	sqlite3.c	41635;"	d	file:
JOURNAL_PG_SZ	sqlite3.c	41629;"	d	file:
JT_CROSS	sqlite3.c	11739;"	d	file:
JT_ERROR	sqlite3.c	11744;"	d	file:
JT_INNER	sqlite3.c	11738;"	d	file:
JT_LEFT	sqlite3.c	11741;"	d	file:
JT_NATURAL	sqlite3.c	11740;"	d	file:
JT_OUTER	sqlite3.c	11743;"	d	file:
JT_RIGHT	sqlite3.c	11742;"	d	file:
JournalFile	sqlite3.c	/^struct JournalFile {$/;"	s	file:
JournalFile	sqlite3.c	/^typedef struct JournalFile JournalFile;$/;"	t	typeref:struct:JournalFile	file:
JournalFile::flags	sqlite3.c	/^  int flags;                      \/* xOpen flags *\/$/;"	m	struct:JournalFile	file:	access:public
JournalFile::iSize	sqlite3.c	/^  int iSize;                      \/* Amount of zBuf[] currently used *\/$/;"	m	struct:JournalFile	file:	access:public
JournalFile::nBuf	sqlite3.c	/^  int nBuf;                       \/* Size of zBuf[] in bytes *\/$/;"	m	struct:JournalFile	file:	access:public
JournalFile::pMethod	sqlite3.c	/^  sqlite3_io_methods *pMethod;    \/* I\/O methods on journal files *\/$/;"	m	struct:JournalFile	file:	access:public
JournalFile::pReal	sqlite3.c	/^  sqlite3_file *pReal;            \/* The "real" underlying file descriptor *\/$/;"	m	struct:JournalFile	file:	access:public
JournalFile::pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;              \/* The "real" underlying VFS *\/$/;"	m	struct:JournalFile	file:	access:public
JournalFile::zBuf	sqlite3.c	/^  char *zBuf;                     \/* Space to buffer journal writes *\/$/;"	m	struct:JournalFile	file:	access:public
JournalFile::zJournal	sqlite3.c	/^  const char *zJournal;           \/* Name of the journal file *\/$/;"	m	struct:JournalFile	file:	access:public
JournalFileMethods	sqlite3.c	/^static struct sqlite3_io_methods JournalFileMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
KeyClass	sqlite3.c	/^typedef struct KeyClass KeyClass;$/;"	t	typeref:struct:KeyClass	file:
KeyInfo	sqlite3.c	/^struct KeyInfo {$/;"	s	file:
KeyInfo	sqlite3.c	/^typedef struct KeyInfo KeyInfo;$/;"	t	typeref:struct:KeyInfo	file:
KeyInfo::aColl	sqlite3.c	/^  CollSeq *aColl[1];  \/* Collating sequence for each term of the key *\/$/;"	m	struct:KeyInfo	file:	access:public
KeyInfo::aSortOrder	sqlite3.c	/^  u8 *aSortOrder;     \/* Sort order for each column. *\/$/;"	m	struct:KeyInfo	file:	access:public
KeyInfo::db	sqlite3.c	/^  sqlite3 *db;        \/* The database connection *\/$/;"	m	struct:KeyInfo	file:	access:public
KeyInfo::enc	sqlite3.c	/^  u8 enc;             \/* Text encoding - one of the SQLITE_UTF* values *\/$/;"	m	struct:KeyInfo	file:	access:public
KeyInfo::nField	sqlite3.c	/^  u16 nField;         \/* Number of key columns in the index *\/$/;"	m	struct:KeyInfo	file:	access:public
KeyInfo::nRef	sqlite3.c	/^  u32 nRef;           \/* Number of references to this KeyInfo object *\/$/;"	m	struct:KeyInfo	file:	access:public
KeyInfo::nXField	sqlite3.c	/^  u16 nXField;        \/* Number of columns beyond the key columns *\/$/;"	m	struct:KeyInfo	file:	access:public
LARGEST_INT64	sqlite3.c	132703;"	d	file:
LARGEST_INT64	sqlite3.c	8677;"	d	file:
LCS_ITERATOR_FINISHED	sqlite3.c	146079;"	d	file:
LDFLAGS	Makefile	/^LDFLAGS:= -lpthread -ldl$/;"	m
LIKEFUNC	sqlite3.c	10869;"	d	file:
LOCKFILE_EXCLUSIVE_LOCK	sqlite3.c	35366;"	d	file:
LOCKFILE_FAIL_IMMEDIATELY	sqlite3.c	35362;"	d	file:
LOGMAX	sqlite3.c	18035;"	d	file:
LONGDOUBLE_TYPE	sqlite3.c	8435;"	d	file:
LONGDOUBLE_TYPE	sqlite3.c	8580;"	d	file:
LcsIterator	sqlite3.c	/^struct LcsIterator {$/;"	s	file:
LcsIterator	sqlite3.c	/^typedef struct LcsIterator LcsIterator;$/;"	t	typeref:struct:LcsIterator	file:
LcsIterator::iPos	sqlite3.c	/^  int iPos;                       \/* Current position *\/$/;"	m	struct:LcsIterator	file:	access:public
LcsIterator::iPosOffset	sqlite3.c	/^  int iPosOffset;                 \/* Tokens count up to end of this phrase *\/$/;"	m	struct:LcsIterator	file:	access:public
LcsIterator::pExpr	sqlite3.c	/^  Fts3Expr *pExpr;                \/* Pointer to phrase expression *\/$/;"	m	struct:LcsIterator	file:	access:public
LcsIterator::pRead	sqlite3.c	/^  char *pRead;                    \/* Cursor used to iterate through aDoclist *\/$/;"	m	struct:LcsIterator	file:	access:public
LikeOp	sqlite3.c	/^struct LikeOp {$/;"	s	file:
LikeOp::bNot	sqlite3.c	/^  int bNot;         \/* True if the NOT keyword is present *\/$/;"	m	struct:LikeOp	file:	access:public
LikeOp::eOperator	sqlite3.c	/^  Token eOperator;  \/* "like" or "glob" or "regexp" *\/$/;"	m	struct:LikeOp	file:	access:public
LimitVal	sqlite3.c	/^struct LimitVal {$/;"	s	file:
LimitVal::pLimit	sqlite3.c	/^  Expr *pLimit;    \/* The LIMIT expression.  NULL if there is no limit *\/$/;"	m	struct:LimitVal	file:	access:public
LimitVal::pOffset	sqlite3.c	/^  Expr *pOffset;   \/* The OFFSET expression.  NULL if there is none *\/$/;"	m	struct:LimitVal	file:	access:public
LoadDoclistCtx	sqlite3.c	/^struct LoadDoclistCtx {$/;"	s	file:
LoadDoclistCtx	sqlite3.c	/^typedef struct LoadDoclistCtx LoadDoclistCtx;$/;"	t	typeref:struct:LoadDoclistCtx	file:
LoadDoclistCtx::nPhrase	sqlite3.c	/^  int nPhrase;                    \/* Number of phrases seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:	access:public
LoadDoclistCtx::nToken	sqlite3.c	/^  int nToken;                     \/* Number of tokens seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:	access:public
LoadDoclistCtx::pCsr	sqlite3.c	/^  Fts3Cursor *pCsr;               \/* FTS3 Cursor *\/$/;"	m	struct:LoadDoclistCtx	file:	access:public
LogEst	sqlite3.c	/^typedef INT16_TYPE LogEst;$/;"	t	file:
Lookaside	sqlite3.c	/^struct Lookaside {$/;"	s	file:
Lookaside	sqlite3.c	/^typedef struct Lookaside Lookaside;$/;"	t	typeref:struct:Lookaside	file:
Lookaside::anStat	sqlite3.c	/^  int anStat[3];          \/* 0: hits.  1: size misses.  2: full misses *\/$/;"	m	struct:Lookaside	file:	access:public
Lookaside::bEnabled	sqlite3.c	/^  u8 bEnabled;            \/* False to disable new lookaside allocations *\/$/;"	m	struct:Lookaside	file:	access:public
Lookaside::bMalloced	sqlite3.c	/^  u8 bMalloced;           \/* True if pStart obtained from sqlite3_malloc() *\/$/;"	m	struct:Lookaside	file:	access:public
Lookaside::mxOut	sqlite3.c	/^  int mxOut;              \/* Highwater mark for nOut *\/$/;"	m	struct:Lookaside	file:	access:public
Lookaside::nOut	sqlite3.c	/^  int nOut;               \/* Number of buffers currently checked out *\/$/;"	m	struct:Lookaside	file:	access:public
Lookaside::pEnd	sqlite3.c	/^  void *pEnd;             \/* First byte past end of available space *\/$/;"	m	struct:Lookaside	file:	access:public
Lookaside::pFree	sqlite3.c	/^  LookasideSlot *pFree;   \/* List of available buffers *\/$/;"	m	struct:Lookaside	file:	access:public
Lookaside::pStart	sqlite3.c	/^  void *pStart;           \/* First byte of available memory space *\/$/;"	m	struct:Lookaside	file:	access:public
Lookaside::sz	sqlite3.c	/^  u16 sz;                 \/* Size of each buffer in bytes *\/$/;"	m	struct:Lookaside	file:	access:public
LookasideSlot	sqlite3.c	/^struct LookasideSlot {$/;"	s	file:
LookasideSlot	sqlite3.c	/^typedef struct LookasideSlot LookasideSlot;$/;"	t	typeref:struct:LookasideSlot	file:
LookasideSlot::pNext	sqlite3.c	/^  LookasideSlot *pNext;    \/* Next buffer in the list of free buffers *\/$/;"	m	struct:LookasideSlot	file:	access:public
M	sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:	access:public
MASKBIT	sqlite3.c	11683;"	d	file:
MASKBIT32	sqlite3.c	11684;"	d	file:
MASTER_NAME	sqlite3.c	8795;"	d	file:
MASTER_ROOT	sqlite3.c	8801;"	d	file:
MAX	sqlite3.c	129434;"	d	file:
MAX	sqlite3.c	147827;"	d	file:
MAX	sqlite3.c	8520;"	d	file:
MAX_6BYTE	sqlite3.c	66068;"	d	file:
MAX_INCR_PHRASE_TOKENS	sqlite3.c	133767;"	d	file:
MAX_PATH	sqlite3.c	32638;"	d	file:
MAX_PATHNAME	sqlite3.c	24749;"	d	file:
MAX_ROWID	sqlite3.c	73003;"	d	file:
MAX_SECTOR_SIZE	sqlite3.c	41296;"	d	file:
MEM5LINK	sqlite3.c	18098;"	d	file:
MEMCELLSIZE	sqlite3.c	62431;"	d	file:
MEMDB	sqlite3.c	41644;"	d	file:
MEMDB	sqlite3.c	41646;"	d	file:
MEMTYPE_HEAP	sqlite3.c	13325;"	d	file:
MEMTYPE_LOOKASIDE	sqlite3.c	13326;"	d	file:
MEMTYPE_PCACHE	sqlite3.c	13328;"	d	file:
MEMTYPE_SCRATCH	sqlite3.c	13327;"	d	file:
MEM_AffMask	sqlite3.c	14228;"	d	file:
MEM_Agg	sqlite3.c	14245;"	d	file:
MEM_Blob	sqlite3.c	14227;"	d	file:
MEM_Cleared	sqlite3.c	14232;"	d	file:
MEM_Dyn	sqlite3.c	14242;"	d	file:
MEM_Ephem	sqlite3.c	14244;"	d	file:
MEM_Frame	sqlite3.c	14230;"	d	file:
MEM_Int	sqlite3.c	14225;"	d	file:
MEM_Null	sqlite3.c	14223;"	d	file:
MEM_Real	sqlite3.c	14226;"	d	file:
MEM_RowSet	sqlite3.c	14229;"	d	file:
MEM_Static	sqlite3.c	14243;"	d	file:
MEM_Str	sqlite3.c	14224;"	d	file:
MEM_Term	sqlite3.c	14241;"	d	file:
MEM_TypeMask	sqlite3.c	14233;"	d	file:
MEM_Undefined	sqlite3.c	14231;"	d	file:
MEM_Zero	sqlite3.c	14246;"	d	file:
MEM_Zero	sqlite3.c	14248;"	d	file:
MEM_Zero	sqlite3.c	14249;"	d	file:
MIN	sqlite3.c	129431;"	d	file:
MIN	sqlite3.c	147830;"	d	file:
MIN	sqlite3.c	8519;"	d	file:
MUTEX_LOGIC	sqlite3.c	10402;"	d	file:
MUTEX_LOGIC	sqlite3.c	10404;"	d	file:
MX_CELL	sqlite3.c	51460;"	d	file:
MX_CELL_SIZE	sqlite3.c	51453;"	d	file:
MX_CLOSE_ATTEMPT	sqlite3.c	34967;"	d	file:
MX_SMALL	sqlite3.c	17308;"	d	file:
MapViewOfFile	sqlite3.c	/^WINBASEAPI LPVOID WINAPI MapViewOfFile(HANDLE, DWORD, DWORD, DWORD, SIZE_T);$/;"	p	file:
MapViewOfFileFromApp	sqlite3.c	/^WINBASEAPI LPVOID WINAPI MapViewOfFileFromApp(HANDLE, ULONG, ULONG64, SIZE_T);$/;"	p	file:
MatchInfo	sqlite3.c	/^struct MatchInfo {$/;"	s	file:
MatchInfo	sqlite3.c	/^typedef struct MatchInfo MatchInfo;$/;"	t	typeref:struct:MatchInfo	file:
MatchInfo::aMatchinfo	sqlite3.c	/^  u32 *aMatchinfo;                \/* Pre-allocated buffer *\/$/;"	m	struct:MatchInfo	file:	access:public
MatchInfo::nCol	sqlite3.c	/^  int nCol;                       \/* Number of columns in table *\/$/;"	m	struct:MatchInfo	file:	access:public
MatchInfo::nDoc	sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Number of docs in database *\/$/;"	m	struct:MatchInfo	file:	access:public
MatchInfo::nPhrase	sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:MatchInfo	file:	access:public
MatchInfo::pCursor	sqlite3.c	/^  Fts3Cursor *pCursor;            \/* FTS3 Cursor *\/$/;"	m	struct:MatchInfo	file:	access:public
Mem	sqlite3.c	/^struct Mem {$/;"	s	file:
Mem	sqlite3.c	/^typedef struct Mem Mem;$/;"	t	typeref:struct:Mem	file:
Mem0Global	sqlite3.c	/^static SQLITE_WSD struct Mem0Global {$/;"	s	file:
Mem0Global::alarmArg	sqlite3.c	/^  void *alarmArg;$/;"	m	struct:Mem0Global	file:	access:public
Mem0Global::alarmCallback	sqlite3.c	/^  void (*alarmCallback)(void*, sqlite3_int64,int);$/;"	m	struct:Mem0Global	file:	access:public
Mem0Global::alarmThreshold	sqlite3.c	/^  sqlite3_int64 alarmThreshold;$/;"	m	struct:Mem0Global	file:	access:public
Mem0Global::mutex	sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Mutex to serialize access *\/$/;"	m	struct:Mem0Global	file:	access:public
Mem0Global::nScratchFree	sqlite3.c	/^  u32 nScratchFree;$/;"	m	struct:Mem0Global	file:	access:public
Mem0Global::nearlyFull	sqlite3.c	/^  int nearlyFull;$/;"	m	struct:Mem0Global	file:	access:public
Mem0Global::pScratchEnd	sqlite3.c	/^  void *pScratchEnd;$/;"	m	struct:Mem0Global	file:	access:public
Mem0Global::pScratchFree	sqlite3.c	/^  ScratchFreeslot *pScratchFree;$/;"	m	struct:Mem0Global	file:	access:public
Mem3Block	sqlite3.c	/^struct Mem3Block {$/;"	s	file:
Mem3Block	sqlite3.c	/^typedef struct Mem3Block Mem3Block;$/;"	t	typeref:struct:Mem3Block	file:
Mem3Block::__anon10::__anon11::prevSize	sqlite3.c	/^      u32 prevSize;   \/* Size of previous chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon10::__anon11	file:	access:public
Mem3Block::__anon10::__anon11::size4x	sqlite3.c	/^      u32 size4x;     \/* 4x the size of current chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon10::__anon11	file:	access:public
Mem3Block::__anon10::__anon12::next	sqlite3.c	/^      u32 next;       \/* Index in mem3.aPool[] of next free chunk *\/$/;"	m	struct:Mem3Block::__anon10::__anon12	file:	access:public
Mem3Block::__anon10::__anon12::prev	sqlite3.c	/^      u32 prev;       \/* Index in mem3.aPool[] of previous free chunk *\/$/;"	m	struct:Mem3Block::__anon10::__anon12	file:	access:public
Mem3Block::__anon10::hdr	sqlite3.c	/^    } hdr;$/;"	m	union:Mem3Block::__anon10	typeref:struct:Mem3Block::__anon10::__anon11	file:	access:public
Mem3Block::__anon10::list	sqlite3.c	/^    } list;$/;"	m	union:Mem3Block::__anon10	typeref:struct:Mem3Block::__anon10::__anon12	file:	access:public
Mem3Block::u	sqlite3.c	/^  } u;$/;"	m	struct:Mem3Block	typeref:union:Mem3Block::__anon10	file:	access:public
Mem3Global	sqlite3.c	/^static SQLITE_WSD struct Mem3Global {$/;"	s	file:
Mem3Global::aPool	sqlite3.c	/^  Mem3Block *aPool;$/;"	m	struct:Mem3Global	file:	access:public
Mem3Global::aiHash	sqlite3.c	/^  u32 aiHash[N_HASH];        \/* For sizes MX_SMALL+1 and larger *\/$/;"	m	struct:Mem3Global	file:	access:public
Mem3Global::aiSmall	sqlite3.c	/^  u32 aiSmall[MX_SMALL-1];   \/* For sizes 2 through MX_SMALL, inclusive *\/$/;"	m	struct:Mem3Global	file:	access:public
Mem3Global::alarmBusy	sqlite3.c	/^  int alarmBusy;$/;"	m	struct:Mem3Global	file:	access:public
Mem3Global::iMaster	sqlite3.c	/^  u32 iMaster;$/;"	m	struct:Mem3Global	file:	access:public
Mem3Global::mnMaster	sqlite3.c	/^  u32 mnMaster;$/;"	m	struct:Mem3Global	file:	access:public
Mem3Global::mutex	sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem3Global	file:	access:public
Mem3Global::nPool	sqlite3.c	/^  u32 nPool;$/;"	m	struct:Mem3Global	file:	access:public
Mem3Global::szMaster	sqlite3.c	/^  u32 szMaster;$/;"	m	struct:Mem3Global	file:	access:public
Mem5Global	sqlite3.c	/^static SQLITE_WSD struct Mem5Global {$/;"	s	file:
Mem5Global::aCtrl	sqlite3.c	/^  u8 *aCtrl;$/;"	m	struct:Mem5Global	file:	access:public
Mem5Global::aiFreelist	sqlite3.c	/^  int aiFreelist[LOGMAX+1];$/;"	m	struct:Mem5Global	file:	access:public
Mem5Global::currentCount	sqlite3.c	/^  u32 currentCount;   \/* Current number of distinct checkouts *\/$/;"	m	struct:Mem5Global	file:	access:public
Mem5Global::currentOut	sqlite3.c	/^  u32 currentOut;     \/* Current checkout, including internal fragmentation *\/$/;"	m	struct:Mem5Global	file:	access:public
Mem5Global::maxCount	sqlite3.c	/^  u32 maxCount;       \/* Maximum instantaneous currentCount *\/$/;"	m	struct:Mem5Global	file:	access:public
Mem5Global::maxOut	sqlite3.c	/^  u32 maxOut;         \/* Maximum instantaneous currentOut *\/$/;"	m	struct:Mem5Global	file:	access:public
Mem5Global::maxRequest	sqlite3.c	/^  u32 maxRequest;     \/* Largest allocation (exclusive of internal frag) *\/$/;"	m	struct:Mem5Global	file:	access:public
Mem5Global::mutex	sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem5Global	file:	access:public
Mem5Global::nAlloc	sqlite3.c	/^  u64 nAlloc;         \/* Total number of calls to malloc *\/$/;"	m	struct:Mem5Global	file:	access:public
Mem5Global::nBlock	sqlite3.c	/^  int nBlock;      \/* Number of szAtom sized blocks in zPool *\/$/;"	m	struct:Mem5Global	file:	access:public
Mem5Global::szAtom	sqlite3.c	/^  int szAtom;      \/* Smallest possible allocation in bytes *\/$/;"	m	struct:Mem5Global	file:	access:public
Mem5Global::totalAlloc	sqlite3.c	/^  u64 totalAlloc;     \/* Total of all malloc calls - includes internal frag *\/$/;"	m	struct:Mem5Global	file:	access:public
Mem5Global::totalExcess	sqlite3.c	/^  u64 totalExcess;    \/* Total internal fragmentation *\/$/;"	m	struct:Mem5Global	file:	access:public
Mem5Global::zPool	sqlite3.c	/^  u8 *zPool;       \/* Memory available to be allocated *\/$/;"	m	struct:Mem5Global	file:	access:public
Mem5Link	sqlite3.c	/^struct Mem5Link {$/;"	s	file:
Mem5Link	sqlite3.c	/^typedef struct Mem5Link Mem5Link;$/;"	t	typeref:struct:Mem5Link	file:
Mem5Link::next	sqlite3.c	/^  int next;       \/* Index of next free chunk *\/$/;"	m	struct:Mem5Link	file:	access:public
Mem5Link::prev	sqlite3.c	/^  int prev;       \/* Index of previous free chunk *\/$/;"	m	struct:Mem5Link	file:	access:public
Mem::MemValue	sqlite3.c	/^  union MemValue {$/;"	u	struct:Mem	file:	access:public
Mem::MemValue::i	sqlite3.c	/^    i64 i;              \/* Integer value used when MEM_Int is set in flags *\/$/;"	m	union:Mem::MemValue	file:	access:public
Mem::MemValue::nZero	sqlite3.c	/^    int nZero;          \/* Used when bit MEM_Zero is set in flags *\/$/;"	m	union:Mem::MemValue	file:	access:public
Mem::MemValue::pDef	sqlite3.c	/^    FuncDef *pDef;      \/* Used only when flags==MEM_Agg *\/$/;"	m	union:Mem::MemValue	file:	access:public
Mem::MemValue::pFrame	sqlite3.c	/^    VdbeFrame *pFrame;  \/* Used when flags==MEM_Frame *\/$/;"	m	union:Mem::MemValue	file:	access:public
Mem::MemValue::pRowSet	sqlite3.c	/^    RowSet *pRowSet;    \/* Used only when flags==MEM_RowSet *\/$/;"	m	union:Mem::MemValue	file:	access:public
Mem::MemValue::r	sqlite3.c	/^    double r;           \/* Real value used when MEM_Real is set in flags *\/$/;"	m	union:Mem::MemValue	file:	access:public
Mem::db	sqlite3.c	/^  sqlite3 *db;        \/* The associated database connection *\/$/;"	m	struct:Mem	file:	access:public
Mem::enc	sqlite3.c	/^  u8  enc;            \/* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE *\/$/;"	m	struct:Mem	file:	access:public
Mem::flags	sqlite3.c	/^  u16 flags;          \/* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. *\/$/;"	m	struct:Mem	file:	access:public
Mem::n	sqlite3.c	/^  int n;              \/* Number of characters in string value, excluding '\\0' *\/$/;"	m	struct:Mem	file:	access:public
Mem::pFiller	sqlite3.c	/^  void *pFiller;      \/* So that sizeof(Mem) is a multiple of 8 *\/$/;"	m	struct:Mem	file:	access:public
Mem::pScopyFrom	sqlite3.c	/^  Mem *pScopyFrom;    \/* This Mem is a shallow copy of pScopyFrom *\/$/;"	m	struct:Mem	file:	access:public
Mem::szMalloc	sqlite3.c	/^  int szMalloc;       \/* Size of the zMalloc allocation *\/$/;"	m	struct:Mem	file:	access:public
Mem::u	sqlite3.c	/^  } u;$/;"	m	struct:Mem	typeref:union:Mem::MemValue	file:	access:public
Mem::uTemp	sqlite3.c	/^  u32 uTemp;          \/* Transient storage for serial_type in OP_MakeRecord *\/$/;"	m	struct:Mem	file:	access:public
Mem::xDel	sqlite3.c	/^  void (*xDel)(void*);\/* Destructor for Mem.z - only valid if MEM_Dyn *\/$/;"	m	struct:Mem	file:	access:public
Mem::z	sqlite3.c	/^  char *z;            \/* String or BLOB value *\/$/;"	m	struct:Mem	file:	access:public
Mem::zMalloc	sqlite3.c	/^  char *zMalloc;      \/* Space to hold MEM_Str or MEM_Blob if szMalloc>0 *\/$/;"	m	struct:Mem	file:	access:public
MemBlockHdr	sqlite3.c	/^struct MemBlockHdr {$/;"	s	file:
MemBlockHdr::eType	sqlite3.c	/^  u8 eType;                           \/* Allocation type code *\/$/;"	m	struct:MemBlockHdr	file:	access:public
MemBlockHdr::iForeGuard	sqlite3.c	/^  int iForeGuard;                     \/* Guard word for sanity *\/$/;"	m	struct:MemBlockHdr	file:	access:public
MemBlockHdr::iSize	sqlite3.c	/^  i64 iSize;                          \/* Size of this allocation *\/$/;"	m	struct:MemBlockHdr	file:	access:public
MemBlockHdr::nBacktrace	sqlite3.c	/^  char nBacktrace;                    \/* Number of backtraces on this alloc *\/$/;"	m	struct:MemBlockHdr	file:	access:public
MemBlockHdr::nBacktraceSlots	sqlite3.c	/^  char nBacktraceSlots;               \/* Available backtrace slots *\/$/;"	m	struct:MemBlockHdr	file:	access:public
MemBlockHdr::nTitle	sqlite3.c	/^  u8 nTitle;                          \/* Bytes of title; includes '\\0' *\/$/;"	m	struct:MemBlockHdr	file:	access:public
MemBlockHdr::pNext	sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::MemBlockHdr	file:	access:public
MemBlockHdr::pPrev	sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::	file:	access:public
MemJournal	sqlite3.c	/^struct MemJournal {$/;"	s	file:
MemJournal	sqlite3.c	/^typedef struct MemJournal MemJournal;$/;"	t	typeref:struct:MemJournal	file:
MemJournal::endpoint	sqlite3.c	/^  FilePoint endpoint;             \/* Pointer to the end of the file *\/$/;"	m	struct:MemJournal	file:	access:public
MemJournal::pFirst	sqlite3.c	/^  FileChunk *pFirst;              \/* Head of in-memory chunk-list *\/$/;"	m	struct:MemJournal	file:	access:public
MemJournal::pMethod	sqlite3.c	/^  sqlite3_io_methods *pMethod;    \/* Parent class. MUST BE FIRST *\/$/;"	m	struct:MemJournal	file:	access:public
MemJournal::readpoint	sqlite3.c	/^  FilePoint readpoint;            \/* Pointer to the end of the last xRead() *\/$/;"	m	struct:MemJournal	file:	access:public
MemJournalMethods	sqlite3.c	/^static const struct sqlite3_io_methods MemJournalMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
MemPage	sqlite3.c	/^struct MemPage {$/;"	s	file:
MemPage	sqlite3.c	/^typedef struct MemPage MemPage;$/;"	t	typeref:struct:MemPage	file:
MemPage::aCellIdx	sqlite3.c	/^  u8 *aCellIdx;        \/* The cell index area *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::aData	sqlite3.c	/^  u8 *aData;           \/* Pointer to disk image of the page data *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::aDataEnd	sqlite3.c	/^  u8 *aDataEnd;        \/* One byte past the end of usable data *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::aiOvfl	sqlite3.c	/^  u16 aiOvfl[5];       \/* Insert the i-th overflow cell before the aiOvfl-th$/;"	m	struct:MemPage	file:	access:public
MemPage::apOvfl	sqlite3.c	/^  u8 *apOvfl[5];       \/* Pointers to the body of overflow cells *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::cellOffset	sqlite3.c	/^  u16 cellOffset;      \/* Index in aData of first cell pointer *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::childPtrSize	sqlite3.c	/^  u8 childPtrSize;     \/* 0 if leaf==1.  4 if leaf==0 *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::hdrOffset	sqlite3.c	/^  u8 hdrOffset;        \/* 100 for page 1.  0 otherwise *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::intKey	sqlite3.c	/^  u8 intKey;           \/* True if table b-trees.  False for index b-trees *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::intKeyLeaf	sqlite3.c	/^  u8 intKeyLeaf;       \/* True if the leaf of an intKey table *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::isInit	sqlite3.c	/^  u8 isInit;           \/* True if previously initialized. MUST BE FIRST! *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::leaf	sqlite3.c	/^  u8 leaf;             \/* True if a leaf page *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::maskPage	sqlite3.c	/^  u16 maskPage;        \/* Mask for page offset *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::max1bytePayload	sqlite3.c	/^  u8 max1bytePayload;  \/* min(maxLocal,127) *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::maxLocal	sqlite3.c	/^  u16 maxLocal;        \/* Copy of BtShared.maxLocal or BtShared.maxLeaf *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::minLocal	sqlite3.c	/^  u16 minLocal;        \/* Copy of BtShared.minLocal or BtShared.minLeaf *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::nCell	sqlite3.c	/^  u16 nCell;           \/* Number of cells on this page, local and ovfl *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::nFree	sqlite3.c	/^  u16 nFree;           \/* Number of free bytes on the page *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::nOverflow	sqlite3.c	/^  u8 nOverflow;        \/* Number of overflow cell bodies in aCell[] *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::noPayload	sqlite3.c	/^  u8 noPayload;        \/* True if internal intKey page (thus w\/o data) *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::pBt	sqlite3.c	/^  BtShared *pBt;       \/* Pointer to BtShared that this page is part of *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::pDbPage	sqlite3.c	/^  DbPage *pDbPage;     \/* Pager page handle *\/$/;"	m	struct:MemPage	file:	access:public
MemPage::pgno	sqlite3.c	/^  Pgno pgno;           \/* Page number for this page *\/$/;"	m	struct:MemPage	file:	access:public
MemSetTypeFlag	sqlite3.c	14255;"	d	file:
MemValue	sqlite3.c	/^  union MemValue {$/;"	u	struct:Mem	file:	access:public
MergeEngine	sqlite3.c	/^struct MergeEngine {$/;"	s	file:
MergeEngine	sqlite3.c	/^typedef struct MergeEngine MergeEngine;     \/* Merge PMAs together *\/$/;"	t	typeref:struct:MergeEngine	file:
MergeEngine::aReadr	sqlite3.c	/^  PmaReader *aReadr;         \/* Array of PmaReaders to merge data from *\/$/;"	m	struct:MergeEngine	file:	access:public
MergeEngine::aTree	sqlite3.c	/^  int *aTree;                \/* Current state of incremental merge *\/$/;"	m	struct:MergeEngine	file:	access:public
MergeEngine::nTree	sqlite3.c	/^  int nTree;                 \/* Used size of aTree\/aReadr (power of 2) *\/$/;"	m	struct:MergeEngine	file:	access:public
MergeEngine::pTask	sqlite3.c	/^  SortSubtask *pTask;        \/* Used by this thread only *\/$/;"	m	struct:MergeEngine	file:	access:public
Module	sqlite3.c	/^struct Module {$/;"	s	file:
Module	sqlite3.c	/^typedef struct Module Module;$/;"	t	typeref:struct:Module	file:
Module::pAux	sqlite3.c	/^  void *pAux;                          \/* pAux passed to create_module() *\/$/;"	m	struct:Module	file:	access:public
Module::pModule	sqlite3.c	/^  const sqlite3_module *pModule;       \/* Callback pointers *\/$/;"	m	struct:Module	file:	access:public
Module::xDestroy	sqlite3.c	/^  void (*xDestroy)(void *);            \/* Module destructor function *\/$/;"	m	struct:Module	file:	access:public
Module::zName	sqlite3.c	/^  const char *zName;                   \/* Name passed to create_module() *\/$/;"	m	struct:Module	file:	access:public
NB	sqlite3.c	58217;"	d	file:
NCELL	sqlite3.c	147773;"	d	file:
NCSIZE	sqlite3.c	16812;"	d	file:
NC_AllowAgg	sqlite3.c	11812;"	d	file:
NC_HasAgg	sqlite3.c	11813;"	d	file:
NC_InAggFunc	sqlite3.c	11815;"	d	file:
NC_IsCheck	sqlite3.c	11814;"	d	file:
NC_MinMaxAgg	sqlite3.c	11817;"	d	file:
NC_PartIdx	sqlite3.c	11816;"	d	file:
NDEBUG	sqlite3.c	129091;"	d	file:
NDEBUG	sqlite3.c	129511;"	d	file:
NDEBUG	sqlite3.c	8055;"	d	file:
NDEBUG	sqlite3.c	8058;"	d	file:
NDELAY	sqlite3.c	126218;"	d	file:
NEVER	sqlite3.c	129487;"	d	file:
NEVER	sqlite3.c	129490;"	d	file:
NEVER	sqlite3.c	8131;"	d	file:
NEVER	sqlite3.c	8134;"	d	file:
NEVER	sqlite3.c	8137;"	d	file:
NN	sqlite3.c	58216;"	d	file:
NOT_WITHIN	sqlite3.c	7657;"	d	file:
NOT_WITHIN	sqlite3.h	7533;"	d
NO_LOCK	sqlite3.c	10206;"	d	file:
NTDDI_WIN8	sqlite3.c	32615;"	d	file:
NTDDI_WINBLUE	sqlite3.c	32619;"	d	file:
N_HASH	sqlite3.c	17314;"	d	file:
N_OR_COST	sqlite3.c	113326;"	d	file:
N_SORT_BUCKET	sqlite3.c	39070;"	d	file:
N_STATEMENT	sqlite3.c	150475;"	d	file:
NameContext	sqlite3.c	/^struct NameContext {$/;"	s	file:
NameContext	sqlite3.c	/^typedef struct NameContext NameContext;$/;"	t	typeref:struct:NameContext	file:
NameContext::nErr	sqlite3.c	/^  int nErr;            \/* Number of errors encountered while resolving names *\/$/;"	m	struct:NameContext	file:	access:public
NameContext::nRef	sqlite3.c	/^  int nRef;            \/* Number of names resolved by this context *\/$/;"	m	struct:NameContext	file:	access:public
NameContext::ncFlags	sqlite3.c	/^  u16 ncFlags;         \/* Zero or more NC_* flags defined below *\/$/;"	m	struct:NameContext	file:	access:public
NameContext::pAggInfo	sqlite3.c	/^  AggInfo *pAggInfo;   \/* Information about aggregates at this level *\/$/;"	m	struct:NameContext	file:	access:public
NameContext::pEList	sqlite3.c	/^  ExprList *pEList;    \/* Optional list of result-set columns *\/$/;"	m	struct:NameContext	file:	access:public
NameContext::pNext	sqlite3.c	/^  NameContext *pNext;  \/* Next outer name context.  NULL for outermost *\/$/;"	m	struct:NameContext	file:	access:public
NameContext::pParse	sqlite3.c	/^  Parse *pParse;       \/* The parser *\/$/;"	m	struct:NameContext	file:	access:public
NameContext::pSrcList	sqlite3.c	/^  SrcList *pSrcList;   \/* One or more tables used to resolve names *\/$/;"	m	struct:NameContext	file:	access:public
NodeReader	sqlite3.c	/^struct NodeReader {$/;"	s	file:
NodeReader	sqlite3.c	/^typedef struct NodeReader NodeReader;$/;"	t	typeref:struct:NodeReader	file:
NodeReader::aDoclist	sqlite3.c	/^  const char *aDoclist;           \/* Pointer to doclist *\/$/;"	m	struct:NodeReader	file:	access:public
NodeReader::aNode	sqlite3.c	/^  const char *aNode;$/;"	m	struct:NodeReader	file:	access:public
NodeReader::iChild	sqlite3.c	/^  sqlite3_int64 iChild;           \/* Pointer to child node *\/$/;"	m	struct:NodeReader	file:	access:public
NodeReader::iOff	sqlite3.c	/^  int iOff;                       \/* Current offset within aNode[] *\/$/;"	m	struct:NodeReader	file:	access:public
NodeReader::nDoclist	sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in bytes *\/$/;"	m	struct:NodeReader	file:	access:public
NodeReader::nNode	sqlite3.c	/^  int nNode;$/;"	m	struct:NodeReader	file:	access:public
NodeReader::term	sqlite3.c	/^  Blob term;                      \/* Current term *\/$/;"	m	struct:NodeReader	file:	access:public
NodeWriter	sqlite3.c	/^struct NodeWriter {$/;"	s	file:
NodeWriter	sqlite3.c	/^typedef struct NodeWriter NodeWriter;$/;"	t	typeref:struct:NodeWriter	file:
NodeWriter::block	sqlite3.c	/^  Blob block;                     \/* Current block image *\/$/;"	m	struct:NodeWriter	file:	access:public
NodeWriter::iBlock	sqlite3.c	/^  sqlite3_int64 iBlock;           \/* Current block id *\/$/;"	m	struct:NodeWriter	file:	access:public
NodeWriter::key	sqlite3.c	/^  Blob key;                       \/* Last key written to the current block *\/$/;"	m	struct:NodeWriter	file:	access:public
OE_Abort	sqlite3.c	11214;"	d	file:
OE_Cascade	sqlite3.c	11222;"	d	file:
OE_Default	sqlite3.c	11224;"	d	file:
OE_Fail	sqlite3.c	11215;"	d	file:
OE_Ignore	sqlite3.c	11216;"	d	file:
OE_None	sqlite3.c	11212;"	d	file:
OE_Replace	sqlite3.c	11217;"	d	file:
OE_Restrict	sqlite3.c	11219;"	d	file:
OE_Rollback	sqlite3.c	11213;"	d	file:
OE_SetDflt	sqlite3.c	11221;"	d	file:
OE_SetNull	sqlite3.c	11220;"	d	file:
OMIT_TEMPDB	sqlite3.c	8454;"	d	file:
OMIT_TEMPDB	sqlite3.c	8456;"	d	file:
ONE_BYTE_INT	sqlite3.c	66216;"	d	file:
OPFLAG_APPEND	sqlite3.c	12191;"	d	file:
OPFLAG_BULKCSR	sqlite3.c	12195;"	d	file:
OPFLAG_EPHEM	sqlite3.c	12188;"	d	file:
OPFLAG_ISUPDATE	sqlite3.c	12190;"	d	file:
OPFLAG_LASTROWID	sqlite3.c	12189;"	d	file:
OPFLAG_LENGTHARG	sqlite3.c	12193;"	d	file:
OPFLAG_NCHANGE	sqlite3.c	12187;"	d	file:
OPFLAG_P2ISREG	sqlite3.c	12196;"	d	file:
OPFLAG_PERMUTE	sqlite3.c	12197;"	d	file:
OPFLAG_TYPEOFARG	sqlite3.c	12194;"	d	file:
OPFLAG_USESEEKRESULT	sqlite3.c	12192;"	d	file:
OPFLG_IN1	sqlite3.c	9518;"	d	file:
OPFLG_IN2	sqlite3.c	9519;"	d	file:
OPFLG_IN3	sqlite3.c	9520;"	d	file:
OPFLG_INITIALIZER	sqlite3.c	9523;"	d	file:
OPFLG_JUMP	sqlite3.c	9516;"	d	file:
OPFLG_OUT2	sqlite3.c	9521;"	d	file:
OPFLG_OUT2_PRERELEASE	sqlite3.c	9517;"	d	file:
OPFLG_OUT3	sqlite3.c	9522;"	d	file:
OP_Add	sqlite3.c	9443;"	d	file:
OP_AddImm	sqlite3.c	9391;"	d	file:
OP_Affinity	sqlite3.c	9402;"	d	file:
OP_AggFinal	sqlite3.c	9494;"	d	file:
OP_AggStep	sqlite3.c	9364;"	d	file:
OP_And	sqlite3.c	9426;"	d	file:
OP_AutoCommit	sqlite3.c	9357;"	d	file:
OP_BitAnd	sqlite3.c	9439;"	d	file:
OP_BitNot	sqlite3.c	9450;"	d	file:
OP_BitOr	sqlite3.c	9440;"	d	file:
OP_Blob	sqlite3.c	9384;"	d	file:
OP_Cast	sqlite3.c	9394;"	d	file:
OP_Checkpoint	sqlite3.c	9365;"	d	file:
OP_Clear	sqlite3.c	9472;"	d	file:
OP_Close	sqlite3.c	9415;"	d	file:
OP_CollSeq	sqlite3.c	9390;"	d	file:
OP_Column	sqlite3.c	9401;"	d	file:
OP_Compare	sqlite3.c	9396;"	d	file:
OP_Concat	sqlite3.c	9448;"	d	file:
OP_Copy	sqlite3.c	9387;"	d	file:
OP_Count	sqlite3.c	9404;"	d	file:
OP_CreateIndex	sqlite3.c	9474;"	d	file:
OP_CreateTable	sqlite3.c	9475;"	d	file:
OP_Delete	sqlite3.c	9449;"	d	file:
OP_Destroy	sqlite3.c	9471;"	d	file:
OP_Divide	sqlite3.c	9446;"	d	file:
OP_DropIndex	sqlite3.c	9479;"	d	file:
OP_DropTable	sqlite3.c	9478;"	d	file:
OP_DropTrigger	sqlite3.c	9480;"	d	file:
OP_EndCoroutine	sqlite3.c	9375;"	d	file:
OP_Eq	sqlite3.c	9433;"	d	file:
OP_Expire	sqlite3.c	9496;"	d	file:
OP_Explain	sqlite3.c	9509;"	d	file:
OP_FkCounter	sqlite3.c	9488;"	d	file:
OP_FkIfZero	sqlite3.c	9489;"	d	file:
OP_Found	sqlite3.c	9423;"	d	file:
OP_Function	sqlite3.c	9355;"	d	file:
OP_Ge	sqlite3.c	9437;"	d	file:
OP_Gosub	sqlite3.c	9371;"	d	file:
OP_Goto	sqlite3.c	9370;"	d	file:
OP_Gt	sqlite3.c	9434;"	d	file:
OP_Halt	sqlite3.c	9378;"	d	file:
OP_HaltIfNull	sqlite3.c	9377;"	d	file:
OP_IdxDelete	sqlite3.c	9465;"	d	file:
OP_IdxGE	sqlite3.c	9470;"	d	file:
OP_IdxGT	sqlite3.c	9468;"	d	file:
OP_IdxInsert	sqlite3.c	9464;"	d	file:
OP_IdxLE	sqlite3.c	9467;"	d	file:
OP_IdxLT	sqlite3.c	9469;"	d	file:
OP_IdxRowid	sqlite3.c	9466;"	d	file:
OP_If	sqlite3.c	9399;"	d	file:
OP_IfNeg	sqlite3.c	9492;"	d	file:
OP_IfNot	sqlite3.c	9400;"	d	file:
OP_IfPos	sqlite3.c	9491;"	d	file:
OP_IfZero	sqlite3.c	9493;"	d	file:
OP_IncrVacuum	sqlite3.c	9495;"	d	file:
OP_Init	sqlite3.c	9507;"	d	file:
OP_InitCoroutine	sqlite3.c	9374;"	d	file:
OP_Insert	sqlite3.c	9429;"	d	file:
OP_InsertInt	sqlite3.c	9438;"	d	file:
OP_Int64	sqlite3.c	9380;"	d	file:
OP_Integer	sqlite3.c	9379;"	d	file:
OP_IntegrityCk	sqlite3.c	9481;"	d	file:
OP_IsNull	sqlite3.c	9430;"	d	file:
OP_JournalMode	sqlite3.c	9366;"	d	file:
OP_Jump	sqlite3.c	9397;"	d	file:
OP_Last	sqlite3.c	9459;"	d	file:
OP_Le	sqlite3.c	9435;"	d	file:
OP_LoadAnalysis	sqlite3.c	9477;"	d	file:
OP_Lt	sqlite3.c	9436;"	d	file:
OP_MakeRecord	sqlite3.c	9403;"	d	file:
OP_MaxPgcnt	sqlite3.c	9506;"	d	file:
OP_MemMax	sqlite3.c	9490;"	d	file:
OP_Move	sqlite3.c	9386;"	d	file:
OP_Multiply	sqlite3.c	9445;"	d	file:
OP_MustBeInt	sqlite3.c	9392;"	d	file:
OP_Ne	sqlite3.c	9432;"	d	file:
OP_NewRowid	sqlite3.c	9428;"	d	file:
OP_Next	sqlite3.c	9363;"	d	file:
OP_NextIfOpen	sqlite3.c	9361;"	d	file:
OP_NoConflict	sqlite3.c	9421;"	d	file:
OP_Noop	sqlite3.c	9508;"	d	file:
OP_Not	sqlite3.c	9373;"	d	file:
OP_NotExists	sqlite3.c	9424;"	d	file:
OP_NotFound	sqlite3.c	9422;"	d	file:
OP_NotNull	sqlite3.c	9431;"	d	file:
OP_Null	sqlite3.c	9382;"	d	file:
OP_NullRow	sqlite3.c	9458;"	d	file:
OP_Once	sqlite3.c	9398;"	d	file:
OP_OpenAutoindex	sqlite3.c	9410;"	d	file:
OP_OpenEphemeral	sqlite3.c	9411;"	d	file:
OP_OpenPseudo	sqlite3.c	9414;"	d	file:
OP_OpenRead	sqlite3.c	9408;"	d	file:
OP_OpenWrite	sqlite3.c	9409;"	d	file:
OP_Or	sqlite3.c	9425;"	d	file:
OP_Pagecount	sqlite3.c	9505;"	d	file:
OP_Param	sqlite3.c	9486;"	d	file:
OP_ParseSchema	sqlite3.c	9476;"	d	file:
OP_Permutation	sqlite3.c	9395;"	d	file:
OP_Prev	sqlite3.c	9362;"	d	file:
OP_PrevIfOpen	sqlite3.c	9360;"	d	file:
OP_Program	sqlite3.c	9485;"	d	file:
OP_ReadCookie	sqlite3.c	9405;"	d	file:
OP_Real	sqlite3.c	9487;"	d	file:
OP_RealAffinity	sqlite3.c	9393;"	d	file:
OP_Remainder	sqlite3.c	9447;"	d	file:
OP_ReopenIdx	sqlite3.c	9407;"	d	file:
OP_ResetCount	sqlite3.c	9452;"	d	file:
OP_ResetSorter	sqlite3.c	9473;"	d	file:
OP_ResultRow	sqlite3.c	9389;"	d	file:
OP_Return	sqlite3.c	9372;"	d	file:
OP_Rewind	sqlite3.c	9462;"	d	file:
OP_RowData	sqlite3.c	9456;"	d	file:
OP_RowKey	sqlite3.c	9455;"	d	file:
OP_RowSetAdd	sqlite3.c	9482;"	d	file:
OP_RowSetRead	sqlite3.c	9483;"	d	file:
OP_RowSetTest	sqlite3.c	9484;"	d	file:
OP_Rowid	sqlite3.c	9457;"	d	file:
OP_SCopy	sqlite3.c	9388;"	d	file:
OP_Savepoint	sqlite3.c	9356;"	d	file:
OP_Seek	sqlite3.c	9420;"	d	file:
OP_SeekGE	sqlite3.c	9418;"	d	file:
OP_SeekGT	sqlite3.c	9419;"	d	file:
OP_SeekLE	sqlite3.c	9417;"	d	file:
OP_SeekLT	sqlite3.c	9416;"	d	file:
OP_Sequence	sqlite3.c	9427;"	d	file:
OP_SequenceTest	sqlite3.c	9413;"	d	file:
OP_SetCookie	sqlite3.c	9406;"	d	file:
OP_ShiftLeft	sqlite3.c	9441;"	d	file:
OP_ShiftRight	sqlite3.c	9442;"	d	file:
OP_SoftNull	sqlite3.c	9383;"	d	file:
OP_Sort	sqlite3.c	9461;"	d	file:
OP_SorterCompare	sqlite3.c	9453;"	d	file:
OP_SorterData	sqlite3.c	9454;"	d	file:
OP_SorterInsert	sqlite3.c	9463;"	d	file:
OP_SorterNext	sqlite3.c	9359;"	d	file:
OP_SorterOpen	sqlite3.c	9412;"	d	file:
OP_SorterSort	sqlite3.c	9460;"	d	file:
OP_String	sqlite3.c	9381;"	d	file:
OP_String8	sqlite3.c	9451;"	d	file:
OP_Subtract	sqlite3.c	9444;"	d	file:
OP_TableLock	sqlite3.c	9497;"	d	file:
OP_Transaction	sqlite3.c	9358;"	d	file:
OP_VBegin	sqlite3.c	9498;"	d	file:
OP_VColumn	sqlite3.c	9502;"	d	file:
OP_VCreate	sqlite3.c	9499;"	d	file:
OP_VDestroy	sqlite3.c	9500;"	d	file:
OP_VFilter	sqlite3.c	9368;"	d	file:
OP_VNext	sqlite3.c	9503;"	d	file:
OP_VOpen	sqlite3.c	9501;"	d	file:
OP_VRename	sqlite3.c	9504;"	d	file:
OP_VUpdate	sqlite3.c	9369;"	d	file:
OP_Vacuum	sqlite3.c	9367;"	d	file:
OP_Variable	sqlite3.c	9385;"	d	file:
OP_Yield	sqlite3.c	9376;"	d	file:
OSTRACE	sqlite3.c	19315;"	d	file:
OSTRACE	sqlite3.c	19317;"	d	file:
OSTRACE	sqlite3.c	24899;"	d	file:
OSTRACE	sqlite3.c	24901;"	d	file:
OSTRACE	sqlite3.c	32400;"	d	file:
OSTRACE	sqlite3.c	32402;"	d	file:
OS_VXWORKS	sqlite3.c	24679;"	d	file:
OS_VXWORKS	sqlite3.c	24681;"	d	file:
O_BINARY	sqlite3.c	25085;"	d	file:
O_LARGEFILE	sqlite3.c	25075;"	d	file:
O_LARGEFILE	sqlite3.c	25078;"	d	file:
O_LARGEFILE	sqlite3.c	25079;"	d	file:
O_NOFOLLOW	sqlite3.c	25082;"	d	file:
Op	sqlite3.c	/^typedef struct VdbeOp Op;$/;"	t	typeref:struct:VdbeOp	file:
OpHelp	sqlite3.c	24433;"	d	file:
OpHelp	sqlite3.c	24435;"	d	file:
OpenCounter	sqlite3.c	19477;"	d	file:
OpenCounter	sqlite3.c	19479;"	d	file:
OpenCounter	sqlite3.c	25061;"	d	file:
OpenCounter	sqlite3.c	25063;"	d	file:
OpenCounter	sqlite3.c	32562;"	d	file:
OpenCounter	sqlite3.c	32564;"	d	file:
OptimizationDisabled	sqlite3.c	10747;"	d	file:
OptimizationDisabled	sqlite3.c	10750;"	d	file:
OptimizationEnabled	sqlite3.c	10748;"	d	file:
OptimizationEnabled	sqlite3.c	10751;"	d	file:
P4_ADVANCE	sqlite3.c	9312;"	d	file:
P4_COLLSEQ	sqlite3.c	9300;"	d	file:
P4_DYNAMIC	sqlite3.c	9298;"	d	file:
P4_FUNCDEF	sqlite3.c	9301;"	d	file:
P4_INT32	sqlite3.c	9309;"	d	file:
P4_INT64	sqlite3.c	9308;"	d	file:
P4_INTARRAY	sqlite3.c	9310;"	d	file:
P4_KEYINFO	sqlite3.c	9302;"	d	file:
P4_MEM	sqlite3.c	9303;"	d	file:
P4_MPRINTF	sqlite3.c	9306;"	d	file:
P4_NOTUSED	sqlite3.c	9297;"	d	file:
P4_REAL	sqlite3.c	9307;"	d	file:
P4_STATIC	sqlite3.c	9299;"	d	file:
P4_SUBPROGRAM	sqlite3.c	9311;"	d	file:
P4_TRANSIENT	sqlite3.c	9304;"	d	file:
P4_VTAB	sqlite3.c	9305;"	d	file:
P5_ConstraintCheck	sqlite3.c	9317;"	d	file:
P5_ConstraintFK	sqlite3.c	9318;"	d	file:
P5_ConstraintNotNull	sqlite3.c	9315;"	d	file:
P5_ConstraintUnique	sqlite3.c	9316;"	d	file:
PAGERID	sqlite3.c	40998;"	d	file:
PAGERTRACE	sqlite3.c	40987;"	d	file:
PAGER_CACHESPILL	sqlite3.c	9772;"	d	file:
PAGER_CKPT_FULLFSYNC	sqlite3.c	9771;"	d	file:
PAGER_ERROR	sqlite3.c	41224;"	d	file:
PAGER_FLAGS_MASK	sqlite3.c	9773;"	d	file:
PAGER_FULLFSYNC	sqlite3.c	9770;"	d	file:
PAGER_GET_NOCONTENT	sqlite3.c	9760;"	d	file:
PAGER_GET_READONLY	sqlite3.c	9761;"	d	file:
PAGER_INCR	sqlite3.c	41591;"	d	file:
PAGER_INCR	sqlite3.c	41593;"	d	file:
PAGER_JOURNALMODE_DELETE	sqlite3.c	9750;"	d	file:
PAGER_JOURNALMODE_MEMORY	sqlite3.c	9754;"	d	file:
PAGER_JOURNALMODE_OFF	sqlite3.c	9752;"	d	file:
PAGER_JOURNALMODE_PERSIST	sqlite3.c	9751;"	d	file:
PAGER_JOURNALMODE_QUERY	sqlite3.c	9749;"	d	file:
PAGER_JOURNALMODE_TRUNCATE	sqlite3.c	9753;"	d	file:
PAGER_JOURNALMODE_WAL	sqlite3.c	9755;"	d	file:
PAGER_LOCKINGMODE_EXCLUSIVE	sqlite3.c	9744;"	d	file:
PAGER_LOCKINGMODE_NORMAL	sqlite3.c	9743;"	d	file:
PAGER_LOCKINGMODE_QUERY	sqlite3.c	9742;"	d	file:
PAGER_MAX_PGNO	sqlite3.c	41662;"	d	file:
PAGER_MEMORY	sqlite3.c	9737;"	d	file:
PAGER_MJ_PGNO	sqlite3.c	9729;"	d	file:
PAGER_OMIT_JOURNAL	sqlite3.c	9736;"	d	file:
PAGER_OPEN	sqlite3.c	41218;"	d	file:
PAGER_READER	sqlite3.c	41219;"	d	file:
PAGER_STAT_HIT	sqlite3.c	41578;"	d	file:
PAGER_STAT_MISS	sqlite3.c	41579;"	d	file:
PAGER_STAT_WRITE	sqlite3.c	41580;"	d	file:
PAGER_SYNCHRONOUS_FULL	sqlite3.c	9768;"	d	file:
PAGER_SYNCHRONOUS_MASK	sqlite3.c	9769;"	d	file:
PAGER_SYNCHRONOUS_NORMAL	sqlite3.c	9767;"	d	file:
PAGER_SYNCHRONOUS_OFF	sqlite3.c	9766;"	d	file:
PAGER_WRITER_CACHEMOD	sqlite3.c	41221;"	d	file:
PAGER_WRITER_DBMOD	sqlite3.c	41222;"	d	file:
PAGER_WRITER_FINISHED	sqlite3.c	41223;"	d	file:
PAGER_WRITER_LOCKED	sqlite3.c	41220;"	d	file:
PARTLY_WITHIN	sqlite3.c	7658;"	d	file:
PARTLY_WITHIN	sqlite3.h	7534;"	d
PCACHE_DIRTYLIST_ADD	sqlite3.c	38558;"	d	file:
PCACHE_DIRTYLIST_FRONT	sqlite3.c	38559;"	d	file:
PCACHE_DIRTYLIST_REMOVE	sqlite3.c	38557;"	d	file:
PCache	sqlite3.c	/^struct PCache {$/;"	s	file:
PCache	sqlite3.c	/^typedef struct PCache PCache;$/;"	t	typeref:struct:PCache	file:
PCache1	sqlite3.c	/^struct PCache1 {$/;"	s	file:
PCache1	sqlite3.c	/^typedef struct PCache1 PCache1;$/;"	t	typeref:struct:PCache1	file:
PCache1::apHash	sqlite3.c	/^  PgHdr1 **apHash;                    \/* Hash table for fast lookup by key *\/$/;"	m	struct:PCache1	file:	access:public
PCache1::bPurgeable	sqlite3.c	/^  int bPurgeable;                     \/* True if cache is purgeable *\/$/;"	m	struct:PCache1	file:	access:public
PCache1::iMaxKey	sqlite3.c	/^  unsigned int iMaxKey;               \/* Largest key seen since xTruncate() *\/$/;"	m	struct:PCache1	file:	access:public
PCache1::n90pct	sqlite3.c	/^  unsigned int n90pct;                \/* nMax*9\/10 *\/$/;"	m	struct:PCache1	file:	access:public
PCache1::nHash	sqlite3.c	/^  unsigned int nHash;                 \/* Number of slots in apHash[] *\/$/;"	m	struct:PCache1	file:	access:public
PCache1::nMax	sqlite3.c	/^  unsigned int nMax;                  \/* Configured "cache_size" value *\/$/;"	m	struct:PCache1	file:	access:public
PCache1::nMin	sqlite3.c	/^  unsigned int nMin;                  \/* Minimum number of pages reserved *\/$/;"	m	struct:PCache1	file:	access:public
PCache1::nPage	sqlite3.c	/^  unsigned int nPage;                 \/* Total number of pages in apHash *\/$/;"	m	struct:PCache1	file:	access:public
PCache1::nRecyclable	sqlite3.c	/^  unsigned int nRecyclable;           \/* Number of pages in the LRU list *\/$/;"	m	struct:PCache1	file:	access:public
PCache1::pGroup	sqlite3.c	/^  PGroup *pGroup;                     \/* PGroup this cache belongs to *\/$/;"	m	struct:PCache1	file:	access:public
PCache1::szExtra	sqlite3.c	/^  int szExtra;                        \/* Size of extra space in bytes *\/$/;"	m	struct:PCache1	file:	access:public
PCache1::szPage	sqlite3.c	/^  int szPage;                         \/* Size of allocated pages in bytes *\/$/;"	m	struct:PCache1	file:	access:public
PCache::bPurgeable	sqlite3.c	/^  u8 bPurgeable;                      \/* True if pages are on backing store *\/$/;"	m	struct:PCache	file:	access:public
PCache::eCreate	sqlite3.c	/^  u8 eCreate;                         \/* eCreate value for for xFetch() *\/$/;"	m	struct:PCache	file:	access:public
PCache::nRef	sqlite3.c	/^  int nRef;                           \/* Number of referenced pages *\/$/;"	m	struct:PCache	file:	access:public
PCache::pCache	sqlite3.c	/^  sqlite3_pcache *pCache;             \/* Pluggable cache module *\/$/;"	m	struct:PCache	file:	access:public
PCache::pDirty	sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:	access:public
PCache::pDirtyTail	sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:	access:public
PCache::pPage1	sqlite3.c	/^  PgHdr *pPage1;                      \/* Reference to page 1 *\/$/;"	m	struct:PCache	file:	access:public
PCache::pStress	sqlite3.c	/^  void *pStress;                      \/* Argument to xStress *\/$/;"	m	struct:PCache	file:	access:public
PCache::pSynced	sqlite3.c	/^  PgHdr *pSynced;                     \/* Last synced page in dirty page list *\/$/;"	m	struct:PCache	file:	access:public
PCache::szCache	sqlite3.c	/^  int szCache;                        \/* Configured cache size *\/$/;"	m	struct:PCache	file:	access:public
PCache::szExtra	sqlite3.c	/^  int szExtra;                        \/* Size of extra space for each page *\/$/;"	m	struct:PCache	file:	access:public
PCache::szPage	sqlite3.c	/^  int szPage;                         \/* Size of every page in this cache *\/$/;"	m	struct:PCache	file:	access:public
PCache::xStress	sqlite3.c	/^  int (*xStress)(void*,PgHdr*);       \/* Call to try make a page clean *\/$/;"	m	struct:PCache	file:	access:public
PCacheGlobal	sqlite3.c	/^static SQLITE_WSD struct PCacheGlobal {$/;"	s	file:
PCacheGlobal::bUnderPressure	sqlite3.c	/^  int bUnderPressure;            \/* True if low on PAGECACHE memory *\/$/;"	m	struct:PCacheGlobal	file:	access:public
PCacheGlobal::grp	sqlite3.c	/^  PGroup grp;                    \/* The global PGroup for mode (2) *\/$/;"	m	struct:PCacheGlobal	file:	access:public
PCacheGlobal::isInit	sqlite3.c	/^  int isInit;                    \/* True if initialized *\/$/;"	m	struct:PCacheGlobal	file:	access:public
PCacheGlobal::mutex	sqlite3.c	/^  sqlite3_mutex *mutex;          \/* Mutex for accessing the following: *\/$/;"	m	struct:PCacheGlobal	file:	access:public
PCacheGlobal::nFreeSlot	sqlite3.c	/^  int nFreeSlot;                 \/* Number of unused pcache slots *\/$/;"	m	struct:PCacheGlobal	file:	access:public
PCacheGlobal::nReserve	sqlite3.c	/^  int nReserve;                  \/* Try to keep nFreeSlot above this *\/$/;"	m	struct:PCacheGlobal	file:	access:public
PCacheGlobal::nSlot	sqlite3.c	/^  int nSlot;                     \/* The number of pcache slots *\/$/;"	m	struct:PCacheGlobal	file:	access:public
PCacheGlobal::pEnd	sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:	access:public
PCacheGlobal::pFree	sqlite3.c	/^  PgFreeslot *pFree;             \/* Free page blocks *\/$/;"	m	struct:PCacheGlobal	file:	access:public
PCacheGlobal::pStart	sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:	access:public
PCacheGlobal::szSlot	sqlite3.c	/^  int szSlot;                    \/* Size of each free slot *\/$/;"	m	struct:PCacheGlobal	file:	access:public
PENDING_BYTE	sqlite3.c	10268;"	d	file:
PENDING_BYTE	sqlite3.c	10270;"	d	file:
PENDING_BYTE_PAGE	sqlite3.c	51798;"	d	file:
PENDING_LOCK	sqlite3.c	10209;"	d	file:
PGHDR_DIRTY	sqlite3.c	9940;"	d	file:
PGHDR_DONT_WRITE	sqlite3.c	9945;"	d	file:
PGHDR_MMAP	sqlite3.c	9947;"	d	file:
PGHDR_NEED_READ	sqlite3.c	9943;"	d	file:
PGHDR_NEED_SYNC	sqlite3.c	9941;"	d	file:
PGHDR_REUSE_UNLIKELY	sqlite3.c	9944;"	d	file:
PGroup	sqlite3.c	/^struct PGroup {$/;"	s	file:
PGroup	sqlite3.c	/^typedef struct PGroup PGroup;$/;"	t	typeref:struct:PGroup	file:
PGroup::mutex	sqlite3.c	/^  sqlite3_mutex *mutex;          \/* MUTEX_STATIC_LRU or NULL *\/$/;"	m	struct:PGroup	file:	access:public
PGroup::mxPinned	sqlite3.c	/^  unsigned int mxPinned;         \/* nMaxpage + 10 - nMinPage *\/$/;"	m	struct:PGroup	file:	access:public
PGroup::nCurrentPage	sqlite3.c	/^  unsigned int nCurrentPage;     \/* Number of purgeable pages allocated *\/$/;"	m	struct:PGroup	file:	access:public
PGroup::nMaxPage	sqlite3.c	/^  unsigned int nMaxPage;         \/* Sum of nMax for purgeable caches *\/$/;"	m	struct:PGroup	file:	access:public
PGroup::nMinPage	sqlite3.c	/^  unsigned int nMinPage;         \/* Sum of nMin for purgeable caches *\/$/;"	m	struct:PGroup	file:	access:public
PGroup::pLruHead	sqlite3.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:	access:public
PGroup::pLruTail	sqlite3.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:	access:public
POSITION_LIST_END	sqlite3.c	131647;"	d	file:
POS_COLUMN	sqlite3.c	129472;"	d	file:
POS_END	sqlite3.c	129473;"	d	file:
PROXY_CONCHVERSION	sqlite3.c	31435;"	d	file:
PROXY_HEADERLEN	sqlite3.c	31436;"	d	file:
PROXY_HOSTIDLEN	sqlite3.c	31397;"	d	file:
PROXY_MAXCONCHLEN	sqlite3.c	31438;"	d	file:
PROXY_PATHINDEX	sqlite3.c	31437;"	d	file:
PTF_INTKEY	sqlite3.c	51486;"	d	file:
PTF_LEAF	sqlite3.c	51489;"	d	file:
PTF_LEAFDATA	sqlite3.c	51488;"	d	file:
PTF_ZERODATA	sqlite3.c	51487;"	d	file:
PTRMAP_BTREE	sqlite3.c	51854;"	d	file:
PTRMAP_FREEPAGE	sqlite3.c	51851;"	d	file:
PTRMAP_ISPAGE	sqlite3.c	51817;"	d	file:
PTRMAP_OVERFLOW1	sqlite3.c	51852;"	d	file:
PTRMAP_OVERFLOW2	sqlite3.c	51853;"	d	file:
PTRMAP_PAGENO	sqlite3.c	51815;"	d	file:
PTRMAP_PTROFFSET	sqlite3.c	51816;"	d	file:
PTRMAP_ROOTPAGE	sqlite3.c	51850;"	d	file:
Pager	sqlite3.c	/^struct Pager {$/;"	s	file:
Pager	sqlite3.c	/^typedef struct Pager Pager;$/;"	t	typeref:struct:Pager	file:
Pager::aSavepoint	sqlite3.c	/^  PagerSavepoint *aSavepoint; \/* Array of active savepoints *\/$/;"	m	struct:Pager	file:	access:public
Pager::aStat	sqlite3.c	/^  int aStat[3];               \/* Total cache hits, misses and writes *\/$/;"	m	struct:Pager	file:	access:public
Pager::bUseFetch	sqlite3.c	/^  u8 bUseFetch;               \/* True to use xFetch() *\/$/;"	m	struct:Pager	file:	access:public
Pager::changeCountDone	sqlite3.c	/^  u8 changeCountDone;         \/* Set after incrementing the change-counter *\/$/;"	m	struct:Pager	file:	access:public
Pager::ckptSyncFlags	sqlite3.c	/^  u8 ckptSyncFlags;           \/* SYNC_NORMAL or SYNC_FULL for checkpoint *\/$/;"	m	struct:Pager	file:	access:public
Pager::cksumInit	sqlite3.c	/^  u32 cksumInit;              \/* Quasi-random value added to every checksum *\/$/;"	m	struct:Pager	file:	access:public
Pager::dbFileSize	sqlite3.c	/^  Pgno dbFileSize;            \/* Number of pages in the database file *\/$/;"	m	struct:Pager	file:	access:public
Pager::dbFileVers	sqlite3.c	/^  char dbFileVers[16];        \/* Changes whenever database file changes *\/$/;"	m	struct:Pager	file:	access:public
Pager::dbHintSize	sqlite3.c	/^  Pgno dbHintSize;            \/* Value passed to FCNTL_SIZE_HINT call *\/$/;"	m	struct:Pager	file:	access:public
Pager::dbOrigSize	sqlite3.c	/^  Pgno dbOrigSize;            \/* dbSize before the current transaction *\/$/;"	m	struct:Pager	file:	access:public
Pager::dbSize	sqlite3.c	/^  Pgno dbSize;                \/* Number of pages in the database *\/$/;"	m	struct:Pager	file:	access:public
Pager::doNotSpill	sqlite3.c	/^  u8 doNotSpill;              \/* Do not spill the cache when non-zero *\/$/;"	m	struct:Pager	file:	access:public
Pager::eLock	sqlite3.c	/^  u8 eLock;                   \/* Current lock held on database file *\/$/;"	m	struct:Pager	file:	access:public
Pager::eState	sqlite3.c	/^  u8 eState;                  \/* Pager state (OPEN, READER, WRITER_LOCKED..) *\/$/;"	m	struct:Pager	file:	access:public
Pager::errCode	sqlite3.c	/^  int errCode;                \/* One of several kinds of errors *\/$/;"	m	struct:Pager	file:	access:public
Pager::exclusiveMode	sqlite3.c	/^  u8 exclusiveMode;           \/* Boolean. True if locking_mode==EXCLUSIVE *\/$/;"	m	struct:Pager	file:	access:public
Pager::fd	sqlite3.c	/^  sqlite3_file *fd;           \/* File descriptor for database *\/$/;"	m	struct:Pager	file:	access:public
Pager::fullSync	sqlite3.c	/^  u8 fullSync;                \/* Do extra syncs of the journal for robustness *\/$/;"	m	struct:Pager	file:	access:public
Pager::jfd	sqlite3.c	/^  sqlite3_file *jfd;          \/* File descriptor for main journal *\/$/;"	m	struct:Pager	file:	access:public
Pager::journalHdr	sqlite3.c	/^  i64 journalHdr;             \/* Byte offset to previous journal header *\/$/;"	m	struct:Pager	file:	access:public
Pager::journalMode	sqlite3.c	/^  u8 journalMode;             \/* One of the PAGER_JOURNALMODE_* values *\/$/;"	m	struct:Pager	file:	access:public
Pager::journalOff	sqlite3.c	/^  i64 journalOff;             \/* Current write offset in the journal file *\/$/;"	m	struct:Pager	file:	access:public
Pager::journalSizeLimit	sqlite3.c	/^  i64 journalSizeLimit;       \/* Size limit for persistent journal files *\/$/;"	m	struct:Pager	file:	access:public
Pager::memDb	sqlite3.c	/^  u8 memDb;                   \/* True to inhibit all file I\/O *\/$/;"	m	struct:Pager	file:	access:public
Pager::mxPgno	sqlite3.c	/^  Pgno mxPgno;                \/* Maximum allowed size of the database *\/$/;"	m	struct:Pager	file:	access:public
Pager::nExtra	sqlite3.c	/^  u16 nExtra;                 \/* Add this many bytes to each in-memory page *\/$/;"	m	struct:Pager	file:	access:public
Pager::nMmapOut	sqlite3.c	/^  int nMmapOut;               \/* Number of mmap pages currently outstanding *\/$/;"	m	struct:Pager	file:	access:public
Pager::nRead	sqlite3.c	/^  int nRead;                  \/* Database pages read *\/$/;"	m	struct:Pager	file:	access:public
Pager::nRec	sqlite3.c	/^  int nRec;                   \/* Pages journalled since last j-header written *\/$/;"	m	struct:Pager	file:	access:public
Pager::nReserve	sqlite3.c	/^  i16 nReserve;               \/* Number of unused bytes at end of each page *\/$/;"	m	struct:Pager	file:	access:public
Pager::nSavepoint	sqlite3.c	/^  int nSavepoint;             \/* Number of elements in aSavepoint[] *\/$/;"	m	struct:Pager	file:	access:public
Pager::nSubRec	sqlite3.c	/^  u32 nSubRec;                \/* Number of records written to sub-journal *\/$/;"	m	struct:Pager	file:	access:public
Pager::noLock	sqlite3.c	/^  u8 noLock;                  \/* Do not lock (except in WAL mode) *\/$/;"	m	struct:Pager	file:	access:public
Pager::noSync	sqlite3.c	/^  u8 noSync;                  \/* Do not sync the journal if true *\/$/;"	m	struct:Pager	file:	access:public
Pager::pBackup	sqlite3.c	/^  sqlite3_backup *pBackup;    \/* Pointer to list of ongoing backup processes *\/$/;"	m	struct:Pager	file:	access:public
Pager::pBusyHandlerArg	sqlite3.c	/^  void *pBusyHandlerArg;      \/* Context argument for xBusyHandler *\/$/;"	m	struct:Pager	file:	access:public
Pager::pCodec	sqlite3.c	/^  void *pCodec;               \/* First argument to xCodec... methods *\/$/;"	m	struct:Pager	file:	access:public
Pager::pInJournal	sqlite3.c	/^  Bitvec *pInJournal;         \/* One bit for each page in the database file *\/$/;"	m	struct:Pager	file:	access:public
Pager::pMmapFreelist	sqlite3.c	/^  PgHdr *pMmapFreelist;       \/* List of free mmap page headers (pDirty) *\/$/;"	m	struct:Pager	file:	access:public
Pager::pPCache	sqlite3.c	/^  PCache *pPCache;            \/* Pointer to page cache object *\/$/;"	m	struct:Pager	file:	access:public
Pager::pTmpSpace	sqlite3.c	/^  char *pTmpSpace;            \/* Pager.pageSize bytes of space for tmp use *\/$/;"	m	struct:Pager	file:	access:public
Pager::pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;          \/* OS functions to use for IO *\/$/;"	m	struct:Pager	file:	access:public
Pager::pWal	sqlite3.c	/^  Wal *pWal;                  \/* Write-ahead log used by "journal_mode=wal" *\/$/;"	m	struct:Pager	file:	access:public
Pager::pageSize	sqlite3.c	/^  int pageSize;               \/* Number of bytes in a page *\/$/;"	m	struct:Pager	file:	access:public
Pager::readOnly	sqlite3.c	/^  u8 readOnly;                \/* True for a read-only database *\/$/;"	m	struct:Pager	file:	access:public
Pager::sectorSize	sqlite3.c	/^  u32 sectorSize;             \/* Assumed sector size during rollback *\/$/;"	m	struct:Pager	file:	access:public
Pager::setMaster	sqlite3.c	/^  u8 setMaster;               \/* True if a m-j name has been written to jrnl *\/$/;"	m	struct:Pager	file:	access:public
Pager::sjfd	sqlite3.c	/^  sqlite3_file *sjfd;         \/* File descriptor for sub-journal *\/$/;"	m	struct:Pager	file:	access:public
Pager::subjInMemory	sqlite3.c	/^  u8 subjInMemory;            \/* True to use in-memory sub-journals *\/$/;"	m	struct:Pager	file:	access:public
Pager::syncFlags	sqlite3.c	/^  u8 syncFlags;               \/* SYNC_NORMAL or SYNC_FULL otherwise *\/$/;"	m	struct:Pager	file:	access:public
Pager::szMmap	sqlite3.c	/^  sqlite3_int64 szMmap;       \/* Desired maximum mmap size *\/$/;"	m	struct:Pager	file:	access:public
Pager::tempFile	sqlite3.c	/^  u8 tempFile;                \/* zFilename is a temporary or immutable file *\/$/;"	m	struct:Pager	file:	access:public
Pager::useJournal	sqlite3.c	/^  u8 useJournal;              \/* Use a rollback journal on this file *\/$/;"	m	struct:Pager	file:	access:public
Pager::vfsFlags	sqlite3.c	/^  u32 vfsFlags;               \/* Flags for sqlite3_vfs.xOpen() *\/$/;"	m	struct:Pager	file:	access:public
Pager::walSyncFlags	sqlite3.c	/^  u8 walSyncFlags;            \/* SYNC_NORMAL or SYNC_FULL for wal writes *\/$/;"	m	struct:Pager	file:	access:public
Pager::xBusyHandler	sqlite3.c	/^  int (*xBusyHandler)(void*); \/* Function to call when busy *\/$/;"	m	struct:Pager	file:	access:public
Pager::xCodec	sqlite3.c	/^  void *(*xCodec)(void*,void*,Pgno,int); \/* Routine for en\/decoding data *\/$/;"	m	struct:Pager	file:	access:public
Pager::xCodecFree	sqlite3.c	/^  void (*xCodecFree)(void*);             \/* Destructor for the codec *\/$/;"	m	struct:Pager	file:	access:public
Pager::xCodecSizeChng	sqlite3.c	/^  void (*xCodecSizeChng)(void*,int,int); \/* Notify of page size changes *\/$/;"	m	struct:Pager	file:	access:public
Pager::xReiniter	sqlite3.c	/^  void (*xReiniter)(DbPage*); \/* Call this routine when reloading pages *\/$/;"	m	struct:Pager	file:	access:public
Pager::zFilename	sqlite3.c	/^  char *zFilename;            \/* Name of the database file *\/$/;"	m	struct:Pager	file:	access:public
Pager::zJournal	sqlite3.c	/^  char *zJournal;             \/* Name of the journal file *\/$/;"	m	struct:Pager	file:	access:public
Pager::zWal	sqlite3.c	/^  char *zWal;                 \/* File name for write-ahead log *\/$/;"	m	struct:Pager	file:	access:public
PagerSavepoint	sqlite3.c	/^struct PagerSavepoint {$/;"	s	file:
PagerSavepoint	sqlite3.c	/^typedef struct PagerSavepoint PagerSavepoint;$/;"	t	typeref:struct:PagerSavepoint	file:
PagerSavepoint::aWalData	sqlite3.c	/^  u32 aWalData[WAL_SAVEPOINT_NDATA];        \/* WAL savepoint context *\/$/;"	m	struct:PagerSavepoint	file:	access:public
PagerSavepoint::iHdrOffset	sqlite3.c	/^  i64 iHdrOffset;              \/* See above *\/$/;"	m	struct:PagerSavepoint	file:	access:public
PagerSavepoint::iOffset	sqlite3.c	/^  i64 iOffset;                 \/* Starting offset in main journal *\/$/;"	m	struct:PagerSavepoint	file:	access:public
PagerSavepoint::iSubRec	sqlite3.c	/^  Pgno iSubRec;                \/* Index of first record in sub-journal *\/$/;"	m	struct:PagerSavepoint	file:	access:public
PagerSavepoint::nOrig	sqlite3.c	/^  Pgno nOrig;                  \/* Original number of pages in file *\/$/;"	m	struct:PagerSavepoint	file:	access:public
PagerSavepoint::pInSavepoint	sqlite3.c	/^  Bitvec *pInSavepoint;        \/* Set of pages in this savepoint *\/$/;"	m	struct:PagerSavepoint	file:	access:public
Parse	sqlite3.c	/^struct Parse {$/;"	s	file:
Parse	sqlite3.c	/^typedef struct Parse Parse;$/;"	t	typeref:struct:Parse	file:
Parse::aColCache	sqlite3.c	/^  } aColCache[SQLITE_N_COLCACHE];  \/* One for each column cache entry *\/$/;"	m	struct:Parse	typeref:struct:Parse::yColCache	file:	access:public
Parse::aLabel	sqlite3.c	/^  int *aLabel;         \/* Space to hold the labels *\/$/;"	m	struct:Parse	file:	access:public
Parse::aTableLock	sqlite3.c	/^  TableLock *aTableLock; \/* Required table locks for shared-cache mode *\/$/;"	m	struct:Parse	file:	access:public
Parse::aTempReg	sqlite3.c	/^  int aTempReg[8];     \/* Holding area for temporary registers *\/$/;"	m	struct:Parse	file:	access:public
Parse::addrCrTab	sqlite3.c	/^  int addrCrTab;       \/* Address of OP_CreateTable opcode on CREATE TABLE *\/$/;"	m	struct:Parse	file:	access:public
Parse::addrSkipPK	sqlite3.c	/^  int addrSkipPK;      \/* Address of instruction to skip PRIMARY KEY index *\/$/;"	m	struct:Parse	file:	access:public
Parse::apVtabLock	sqlite3.c	/^  Table **apVtabLock;       \/* Pointer to virtual tables needing locking *\/$/;"	m	struct:Parse	file:	access:public
Parse::azVar	sqlite3.c	/^  char **azVar;             \/* Pointers to names of parameters *\/$/;"	m	struct:Parse	file:	access:public
Parse::bFreeWith	sqlite3.c	/^  u8 bFreeWith;             \/* True if pWith should be freed with parser *\/$/;"	m	struct:Parse	file:	access:public
Parse::checkSchema	sqlite3.c	/^  u8 checkSchema;      \/* Causes schema cookie check after an error *\/$/;"	m	struct:Parse	file:	access:public
Parse::ckBase	sqlite3.c	/^  int ckBase;          \/* Base register of data during check constraints *\/$/;"	m	struct:Parse	file:	access:public
Parse::colNamesSet	sqlite3.c	/^  u8 colNamesSet;      \/* TRUE after OP_ColumnName has been issued to pVdbe *\/$/;"	m	struct:Parse	file:	access:public
Parse::constraintName	sqlite3.c	/^  Token constraintName;\/* Name of the constraint currently being parsed *\/$/;"	m	struct:Parse	file:	access:public
Parse::cookieMask	sqlite3.c	/^  yDbMask cookieMask;  \/* Bitmask of schema verified databases *\/$/;"	m	struct:Parse	file:	access:public
Parse::cookieValue	sqlite3.c	/^  int cookieValue[SQLITE_MAX_ATTACHED+2];  \/* Values of cookies to verify *\/$/;"	m	struct:Parse	file:	access:public
Parse::db	sqlite3.c	/^  sqlite3 *db;         \/* The main database structure *\/$/;"	m	struct:Parse	file:	access:public
Parse::declareVtab	sqlite3.c	/^  u8 declareVtab;           \/* True if inside sqlite3_declare_vtab() *\/$/;"	m	struct:Parse	file:	access:public
Parse::disableTriggers	sqlite3.c	/^  u8 disableTriggers;  \/* True to disable triggers *\/$/;"	m	struct:Parse	file:	access:public
Parse::eOrconf	sqlite3.c	/^  u8 eOrconf;          \/* Default ON CONFLICT policy for trigger steps *\/$/;"	m	struct:Parse	file:	access:public
Parse::eTriggerOp	sqlite3.c	/^  u8 eTriggerOp;       \/* TK_UPDATE, TK_INSERT or TK_DELETE *\/$/;"	m	struct:Parse	file:	access:public
Parse::explain	sqlite3.c	/^  u8 explain;               \/* True if the EXPLAIN flag is found on the query *\/$/;"	m	struct:Parse	file:	access:public
Parse::hasCompound	sqlite3.c	/^  u8 hasCompound;      \/* Need to invoke convertCompoundSelectToSubquery() *\/$/;"	m	struct:Parse	file:	access:public
Parse::iCacheCnt	sqlite3.c	/^  int iCacheCnt;       \/* Counter used to generate aColCache[].lru values *\/$/;"	m	struct:Parse	file:	access:public
Parse::iCacheLevel	sqlite3.c	/^  int iCacheLevel;     \/* ColCache valid when aColCache[].iLevel<=iCacheLevel *\/$/;"	m	struct:Parse	file:	access:public
Parse::iFixedOp	sqlite3.c	/^  int iFixedOp;        \/* Never back out opcodes iFixedOp-1 or earlier *\/$/;"	m	struct:Parse	file:	access:public
Parse::iNextSelectId	sqlite3.c	/^  int iNextSelectId;        \/* Next available select ID for EXPLAIN output *\/$/;"	m	struct:Parse	file:	access:public
Parse::iPartIdxTab	sqlite3.c	/^  int iPartIdxTab;     \/* Table corresponding to a partial index *\/$/;"	m	struct:Parse	file:	access:public
Parse::iPkSortOrder	sqlite3.c	/^  u8 iPkSortOrder;          \/* ASC or DESC for INTEGER PRIMARY KEY *\/$/;"	m	struct:Parse	file:	access:public
Parse::iRangeReg	sqlite3.c	/^  int iRangeReg;       \/* First register in temporary register block *\/$/;"	m	struct:Parse	file:	access:public
Parse::iSelectId	sqlite3.c	/^  int iSelectId;            \/* ID of current select for EXPLAIN output *\/$/;"	m	struct:Parse	file:	access:public
Parse::isMultiWrite	sqlite3.c	/^  u8 isMultiWrite;     \/* True if statement may modify\/insert multiple rows *\/$/;"	m	struct:Parse	file:	access:public
Parse::mayAbort	sqlite3.c	/^  u8 mayAbort;         \/* True if statement may throw an ABORT exception *\/$/;"	m	struct:Parse	file:	access:public
Parse::nAlias	sqlite3.c	/^  int nAlias;               \/* Number of aliased result set columns *\/$/;"	m	struct:Parse	file:	access:public
Parse::nErr	sqlite3.c	/^  int nErr;            \/* Number of errors seen *\/$/;"	m	struct:Parse	file:	access:public
Parse::nHeight	sqlite3.c	/^  int nHeight;              \/* Expression tree height of current sub-select *\/$/;"	m	struct:Parse	file:	access:public
Parse::nLabel	sqlite3.c	/^  int nLabel;          \/* Number of labels used *\/$/;"	m	struct:Parse	file:	access:public
Parse::nMaxArg	sqlite3.c	/^  int nMaxArg;         \/* Max args passed to user function by sub-program *\/$/;"	m	struct:Parse	file:	access:public
Parse::nMem	sqlite3.c	/^  int nMem;            \/* Number of memory cells used so far *\/$/;"	m	struct:Parse	file:	access:public
Parse::nOnce	sqlite3.c	/^  int nOnce;           \/* Number of OP_Once instructions so far *\/$/;"	m	struct:Parse	file:	access:public
Parse::nOpAlloc	sqlite3.c	/^  int nOpAlloc;        \/* Number of slots allocated for Vdbe.aOp[] *\/$/;"	m	struct:Parse	file:	access:public
Parse::nQueryLoop	sqlite3.c	/^  u32 nQueryLoop;      \/* Est number of iterations of a query (10*log2(N)) *\/$/;"	m	struct:Parse	file:	access:public
Parse::nRangeReg	sqlite3.c	/^  int nRangeReg;       \/* Size of the temporary register block *\/$/;"	m	struct:Parse	file:	access:public
Parse::nSelect	sqlite3.c	/^  int nSelect;         \/* Number of SELECT statements seen *\/$/;"	m	struct:Parse	file:	access:public
Parse::nSelectIndent	sqlite3.c	/^  int nSelectIndent;   \/* How far to indent SELECTTRACE() output *\/$/;"	m	struct:Parse	file:	access:public
Parse::nSet	sqlite3.c	/^  int nSet;            \/* Number of sets used so far *\/$/;"	m	struct:Parse	file:	access:public
Parse::nTab	sqlite3.c	/^  int nTab;            \/* Number of previously allocated VDBE cursors *\/$/;"	m	struct:Parse	file:	access:public
Parse::nTableLock	sqlite3.c	/^  int nTableLock;        \/* Number of locks in aTableLock *\/$/;"	m	struct:Parse	file:	access:public
Parse::nTempReg	sqlite3.c	/^  u8 nTempReg;         \/* Number of temporary registers in aTempReg[] *\/$/;"	m	struct:Parse	file:	access:public
Parse::nVar	sqlite3.c	/^  int nVar;                 \/* Number of '?' variables seen in the SQL so far *\/$/;"	m	struct:Parse	file:	access:public
Parse::nVtabLock	sqlite3.c	/^  int nVtabLock;            \/* Number of virtual tables to lock *\/$/;"	m	struct:Parse	file:	access:public
Parse::nested	sqlite3.c	/^  u8 nested;           \/* Number of nested calls to the parser\/code generator *\/$/;"	m	struct:Parse	file:	access:public
Parse::newmask	sqlite3.c	/^  u32 newmask;         \/* Mask of new.* columns referenced *\/$/;"	m	struct:Parse	file:	access:public
Parse::nzVar	sqlite3.c	/^  int nzVar;                \/* Number of available slots in azVar[] *\/$/;"	m	struct:Parse	file:	access:public
Parse::okConstFactor	sqlite3.c	/^  u8 okConstFactor;    \/* OK to factor out constants *\/$/;"	m	struct:Parse	file:	access:public
Parse::oldmask	sqlite3.c	/^  u32 oldmask;         \/* Mask of old.* columns referenced *\/$/;"	m	struct:Parse	file:	access:public
Parse::pAinc	sqlite3.c	/^  AutoincInfo *pAinc;  \/* Information about AUTOINCREMENT counters *\/$/;"	m	struct:Parse	file:	access:public
Parse::pConstExpr	sqlite3.c	/^  ExprList *pConstExpr;\/* Constant expressions *\/$/;"	m	struct:Parse	file:	access:public
Parse::pNewTable	sqlite3.c	/^  Table *pNewTable;         \/* A table being constructed by CREATE TABLE *\/$/;"	m	struct:Parse	file:	access:public
Parse::pNewTrigger	sqlite3.c	/^  Trigger *pNewTrigger;     \/* Trigger under construct by a CREATE TRIGGER *\/$/;"	m	struct:Parse	file:	access:public
Parse::pReprepare	sqlite3.c	/^  Vdbe *pReprepare;         \/* VM being reprepared (sqlite3Reprepare()) *\/$/;"	m	struct:Parse	file:	access:public
Parse::pToplevel	sqlite3.c	/^  Parse *pToplevel;    \/* Parse structure for main program (or NULL) *\/$/;"	m	struct:Parse	file:	access:public
Parse::pTriggerPrg	sqlite3.c	/^  TriggerPrg *pTriggerPrg;  \/* Linked list of coded triggers *\/$/;"	m	struct:Parse	file:	access:public
Parse::pTriggerTab	sqlite3.c	/^  Table *pTriggerTab;  \/* Table triggers are being coded for *\/$/;"	m	struct:Parse	file:	access:public
Parse::pVdbe	sqlite3.c	/^  Vdbe *pVdbe;         \/* An engine for executing database bytecode *\/$/;"	m	struct:Parse	file:	access:public
Parse::pWith	sqlite3.c	/^  With *pWith;              \/* Current WITH clause, or NULL *\/$/;"	m	struct:Parse	file:	access:public
Parse::pZombieTab	sqlite3.c	/^  Table *pZombieTab;        \/* List of Table objects to delete after code gen *\/$/;"	m	struct:Parse	file:	access:public
Parse::rc	sqlite3.c	/^  int rc;              \/* Return code from execution *\/$/;"	m	struct:Parse	file:	access:public
Parse::regRoot	sqlite3.c	/^  int regRoot;         \/* Register holding root page number for new objects *\/$/;"	m	struct:Parse	file:	access:public
Parse::regRowid	sqlite3.c	/^  int regRowid;        \/* Register holding rowid of CREATE TABLE entry *\/$/;"	m	struct:Parse	file:	access:public
Parse::sArg	sqlite3.c	/^  Token sArg;               \/* Complete text of a module argument *\/$/;"	m	struct:Parse	file:	access:public
Parse::sLastToken	sqlite3.c	/^  Token sLastToken;         \/* The last token parsed *\/$/;"	m	struct:Parse	file:	access:public
Parse::sNameToken	sqlite3.c	/^  Token sNameToken;         \/* Token with unqualified schema object name *\/$/;"	m	struct:Parse	file:	access:public
Parse::writeMask	sqlite3.c	/^  yDbMask writeMask;   \/* Start a write transaction on these databases *\/$/;"	m	struct:Parse	file:	access:public
Parse::yColCache	sqlite3.c	/^  struct yColCache {$/;"	s	struct:Parse	file:	access:public
Parse::yColCache::iColumn	sqlite3.c	/^    i16 iColumn;          \/* Table column number *\/$/;"	m	struct:Parse::yColCache	file:	access:public
Parse::yColCache::iLevel	sqlite3.c	/^    int iLevel;           \/* Nesting level *\/$/;"	m	struct:Parse::yColCache	file:	access:public
Parse::yColCache::iReg	sqlite3.c	/^    int iReg;             \/* Reg with value of this column. 0 means none. *\/$/;"	m	struct:Parse::yColCache	file:	access:public
Parse::yColCache::iTable	sqlite3.c	/^    int iTable;           \/* Table cursor number *\/$/;"	m	struct:Parse::yColCache	file:	access:public
Parse::yColCache::lru	sqlite3.c	/^    int lru;              \/* Least recently used entry has the smallest value *\/$/;"	m	struct:Parse::yColCache	file:	access:public
Parse::yColCache::tempReg	sqlite3.c	/^    u8 tempReg;           \/* iReg is a temp register that needs to be freed *\/$/;"	m	struct:Parse::yColCache	file:	access:public
Parse::zAuthContext	sqlite3.c	/^  const char *zAuthContext; \/* The 6th parameter to db->xAuth callbacks *\/$/;"	m	struct:Parse	file:	access:public
Parse::zErrMsg	sqlite3.c	/^  char *zErrMsg;       \/* An error message *\/$/;"	m	struct:Parse	file:	access:public
Parse::zTail	sqlite3.c	/^  const char *zTail;        \/* All SQL text past the last semicolon parsed *\/$/;"	m	struct:Parse	file:	access:public
ParseContext	sqlite3.c	/^struct ParseContext {$/;"	s	file:
ParseContext	sqlite3.c	/^typedef struct ParseContext ParseContext;$/;"	t	typeref:struct:ParseContext	file:
ParseContext::azCol	sqlite3.c	/^  const char **azCol;                 \/* Array of column names for fts3 table *\/$/;"	m	struct:ParseContext	file:	access:public
ParseContext::bFts4	sqlite3.c	/^  int bFts4;                          \/* True to allow FTS4-only syntax *\/$/;"	m	struct:ParseContext	file:	access:public
ParseContext::iDefaultCol	sqlite3.c	/^  int iDefaultCol;                    \/* Default column to query *\/$/;"	m	struct:ParseContext	file:	access:public
ParseContext::iLangid	sqlite3.c	/^  int iLangid;                        \/* Language id used with tokenizer *\/$/;"	m	struct:ParseContext	file:	access:public
ParseContext::isNot	sqlite3.c	/^  int isNot;                          \/* True if getNextNode() sees a unary - *\/$/;"	m	struct:ParseContext	file:	access:public
ParseContext::nCol	sqlite3.c	/^  int nCol;                           \/* Number of entries in azCol[] *\/$/;"	m	struct:ParseContext	file:	access:public
ParseContext::nNest	sqlite3.c	/^  int nNest;                          \/* Number of nested brackets *\/$/;"	m	struct:ParseContext	file:	access:public
ParseContext::pCtx	sqlite3.c	/^  sqlite3_context *pCtx;              \/* Write error message here *\/$/;"	m	struct:ParseContext	file:	access:public
ParseContext::pTokenizer	sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;      \/* Tokenizer module *\/$/;"	m	struct:ParseContext	file:	access:public
PendingList	sqlite3.c	/^struct PendingList {$/;"	s	file:
PendingList	sqlite3.c	/^typedef struct PendingList PendingList;$/;"	t	typeref:struct:PendingList	file:
PendingList::aData	sqlite3.c	/^  char *aData;$/;"	m	struct:PendingList	file:	access:public
PendingList::iLastCol	sqlite3.c	/^  sqlite3_int64 iLastCol;$/;"	m	struct:PendingList	file:	access:public
PendingList::iLastDocid	sqlite3.c	/^  sqlite3_int64 iLastDocid;$/;"	m	struct:PendingList	file:	access:public
PendingList::iLastPos	sqlite3.c	/^  sqlite3_int64 iLastPos;$/;"	m	struct:PendingList	file:	access:public
PendingList::nData	sqlite3.c	/^  int nData;$/;"	m	struct:PendingList	file:	access:public
PendingList::nSpace	sqlite3.c	/^  int nSpace;$/;"	m	struct:PendingList	file:	access:public
PgFreeslot	sqlite3.c	/^struct PgFreeslot {$/;"	s	file:
PgFreeslot	sqlite3.c	/^typedef struct PgFreeslot PgFreeslot;$/;"	t	typeref:struct:PgFreeslot	file:
PgFreeslot::pNext	sqlite3.c	/^  PgFreeslot *pNext;  \/* Next free slot *\/$/;"	m	struct:PgFreeslot	file:	access:public
PgHdr	sqlite3.c	/^struct PgHdr {$/;"	s	file:
PgHdr	sqlite3.c	/^typedef struct PgHdr PgHdr;$/;"	t	typeref:struct:PgHdr	file:
PgHdr1	sqlite3.c	/^struct PgHdr1 {$/;"	s	file:
PgHdr1	sqlite3.c	/^typedef struct PgHdr1 PgHdr1;$/;"	t	typeref:struct:PgHdr1	file:
PgHdr1::iKey	sqlite3.c	/^  unsigned int iKey;             \/* Key value (page number) *\/$/;"	m	struct:PgHdr1	file:	access:public
PgHdr1::isPinned	sqlite3.c	/^  u8 isPinned;                   \/* Page in use, not on the LRU list *\/$/;"	m	struct:PgHdr1	file:	access:public
PgHdr1::pCache	sqlite3.c	/^  PCache1 *pCache;               \/* Cache that currently owns this page *\/$/;"	m	struct:PgHdr1	file:	access:public
PgHdr1::pLruNext	sqlite3.c	/^  PgHdr1 *pLruNext;              \/* Next in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:	access:public
PgHdr1::pLruPrev	sqlite3.c	/^  PgHdr1 *pLruPrev;              \/* Previous in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:	access:public
PgHdr1::pNext	sqlite3.c	/^  PgHdr1 *pNext;                 \/* Next in hash table chain *\/$/;"	m	struct:PgHdr1	file:	access:public
PgHdr1::page	sqlite3.c	/^  sqlite3_pcache_page page;$/;"	m	struct:PgHdr1	file:	access:public
PgHdr::flags	sqlite3.c	/^  u16 flags;                     \/* PGHDR flags defined below *\/$/;"	m	struct:PgHdr	file:	access:public
PgHdr::nRef	sqlite3.c	/^  i16 nRef;                      \/* Number of users of this page *\/$/;"	m	struct:PgHdr	file:	access:public
PgHdr::pCache	sqlite3.c	/^  PCache *pCache;                \/* Cache that owns this page *\/$/;"	m	struct:PgHdr	file:	access:public
PgHdr::pData	sqlite3.c	/^  void *pData;                   \/* Page data *\/$/;"	m	struct:PgHdr	file:	access:public
PgHdr::pDirty	sqlite3.c	/^  PgHdr *pDirty;                 \/* Transient list of dirty pages *\/$/;"	m	struct:PgHdr	file:	access:public
PgHdr::pDirtyNext	sqlite3.c	/^  PgHdr *pDirtyNext;             \/* Next element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:	access:public
PgHdr::pDirtyPrev	sqlite3.c	/^  PgHdr *pDirtyPrev;             \/* Previous element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:	access:public
PgHdr::pExtra	sqlite3.c	/^  void *pExtra;                  \/* Extra content *\/$/;"	m	struct:PgHdr	file:	access:public
PgHdr::pPage	sqlite3.c	/^  sqlite3_pcache_page *pPage;    \/* Pcache object page handle *\/$/;"	m	struct:PgHdr	file:	access:public
PgHdr::pPager	sqlite3.c	/^  Pager *pPager;                 \/* The pager this page is part of *\/$/;"	m	struct:PgHdr	file:	access:public
PgHdr::pageHash	sqlite3.c	/^  u32 pageHash;                  \/* Hash of page content *\/$/;"	m	struct:PgHdr	file:	access:public
PgHdr::pgno	sqlite3.c	/^  Pgno pgno;                     \/* Page number for this page *\/$/;"	m	struct:PgHdr	file:	access:public
Pgno	sqlite3.c	/^typedef u32 Pgno;$/;"	t	file:
PmaReader	sqlite3.c	/^struct PmaReader {$/;"	s	file:
PmaReader	sqlite3.c	/^typedef struct PmaReader PmaReader;         \/* Incrementally read one PMA *\/$/;"	t	typeref:struct:PmaReader	file:
PmaReader::aAlloc	sqlite3.c	/^  u8 *aAlloc;                 \/* Space for aKey if aBuffer and pMap wont work *\/$/;"	m	struct:PmaReader	file:	access:public
PmaReader::aBuffer	sqlite3.c	/^  u8 *aBuffer;                \/* Current read buffer *\/$/;"	m	struct:PmaReader	file:	access:public
PmaReader::aKey	sqlite3.c	/^  u8 *aKey;                   \/* Pointer to current key *\/$/;"	m	struct:PmaReader	file:	access:public
PmaReader::aMap	sqlite3.c	/^  u8 *aMap;                   \/* Pointer to mapping of entire file *\/$/;"	m	struct:PmaReader	file:	access:public
PmaReader::iEof	sqlite3.c	/^  i64 iEof;                   \/* 1 byte past EOF for this PmaReader *\/$/;"	m	struct:PmaReader	file:	access:public
PmaReader::iReadOff	sqlite3.c	/^  i64 iReadOff;               \/* Current read offset *\/$/;"	m	struct:PmaReader	file:	access:public
PmaReader::nAlloc	sqlite3.c	/^  int nAlloc;                 \/* Bytes of space at aAlloc *\/$/;"	m	struct:PmaReader	file:	access:public
PmaReader::nBuffer	sqlite3.c	/^  int nBuffer;                \/* Size of read buffer in bytes *\/$/;"	m	struct:PmaReader	file:	access:public
PmaReader::nKey	sqlite3.c	/^  int nKey;                   \/* Number of bytes in key *\/$/;"	m	struct:PmaReader	file:	access:public
PmaReader::pFd	sqlite3.c	/^  sqlite3_file *pFd;          \/* File handle we are reading from *\/$/;"	m	struct:PmaReader	file:	access:public
PmaReader::pIncr	sqlite3.c	/^  IncrMerger *pIncr;          \/* Incremental merger *\/$/;"	m	struct:PmaReader	file:	access:public
PmaWriter	sqlite3.c	/^struct PmaWriter {$/;"	s	file:
PmaWriter	sqlite3.c	/^typedef struct PmaWriter PmaWriter;         \/* Incrementally write one PMA *\/$/;"	t	typeref:struct:PmaWriter	file:
PmaWriter::aBuffer	sqlite3.c	/^  u8 *aBuffer;                    \/* Pointer to write buffer *\/$/;"	m	struct:PmaWriter	file:	access:public
PmaWriter::eFWErr	sqlite3.c	/^  int eFWErr;                     \/* Non-zero if in an error state *\/$/;"	m	struct:PmaWriter	file:	access:public
PmaWriter::iBufEnd	sqlite3.c	/^  int iBufEnd;                    \/* Last byte of buffer to write *\/$/;"	m	struct:PmaWriter	file:	access:public
PmaWriter::iBufStart	sqlite3.c	/^  int iBufStart;                  \/* First byte of buffer to write *\/$/;"	m	struct:PmaWriter	file:	access:public
PmaWriter::iWriteOff	sqlite3.c	/^  i64 iWriteOff;                  \/* Offset of start of buffer in file *\/$/;"	m	struct:PmaWriter	file:	access:public
PmaWriter::nBuffer	sqlite3.c	/^  int nBuffer;                    \/* Size of write buffer in bytes *\/$/;"	m	struct:PmaWriter	file:	access:public
PmaWriter::pFd	sqlite3.c	/^  sqlite3_file *pFd;              \/* File handle to write to *\/$/;"	m	struct:PmaWriter	file:	access:public
PragFlag_NeedSchema	sqlite3.c	100861;"	d	file:
PragTyp_ACTIVATE_EXTENSIONS	sqlite3.c	100855;"	d	file:
PragTyp_AUTO_VACUUM	sqlite3.c	100820;"	d	file:
PragTyp_BUSY_TIMEOUT	sqlite3.c	100822;"	d	file:
PragTyp_CACHE_SIZE	sqlite3.c	100823;"	d	file:
PragTyp_CASE_SENSITIVE_LIKE	sqlite3.c	100824;"	d	file:
PragTyp_COLLATION_LIST	sqlite3.c	100825;"	d	file:
PragTyp_COMPILE_OPTIONS	sqlite3.c	100826;"	d	file:
PragTyp_DATABASE_LIST	sqlite3.c	100828;"	d	file:
PragTyp_DATA_STORE_DIRECTORY	sqlite3.c	100827;"	d	file:
PragTyp_DEFAULT_CACHE_SIZE	sqlite3.c	100829;"	d	file:
PragTyp_ENCODING	sqlite3.c	100830;"	d	file:
PragTyp_FLAG	sqlite3.c	100821;"	d	file:
PragTyp_FOREIGN_KEY_CHECK	sqlite3.c	100831;"	d	file:
PragTyp_FOREIGN_KEY_LIST	sqlite3.c	100832;"	d	file:
PragTyp_HEADER_VALUE	sqlite3.c	100819;"	d	file:
PragTyp_HEXKEY	sqlite3.c	100856;"	d	file:
PragTyp_INCREMENTAL_VACUUM	sqlite3.c	100833;"	d	file:
PragTyp_INDEX_INFO	sqlite3.c	100834;"	d	file:
PragTyp_INDEX_LIST	sqlite3.c	100835;"	d	file:
PragTyp_INTEGRITY_CHECK	sqlite3.c	100836;"	d	file:
PragTyp_JOURNAL_MODE	sqlite3.c	100837;"	d	file:
PragTyp_JOURNAL_SIZE_LIMIT	sqlite3.c	100838;"	d	file:
PragTyp_KEY	sqlite3.c	100857;"	d	file:
PragTyp_LOCKING_MODE	sqlite3.c	100840;"	d	file:
PragTyp_LOCK_PROXY_FILE	sqlite3.c	100839;"	d	file:
PragTyp_LOCK_STATUS	sqlite3.c	100859;"	d	file:
PragTyp_MMAP_SIZE	sqlite3.c	100842;"	d	file:
PragTyp_PAGE_COUNT	sqlite3.c	100841;"	d	file:
PragTyp_PAGE_SIZE	sqlite3.c	100843;"	d	file:
PragTyp_PARSER_TRACE	sqlite3.c	100860;"	d	file:
PragTyp_REKEY	sqlite3.c	100858;"	d	file:
PragTyp_SECURE_DELETE	sqlite3.c	100844;"	d	file:
PragTyp_SHRINK_MEMORY	sqlite3.c	100845;"	d	file:
PragTyp_SOFT_HEAP_LIMIT	sqlite3.c	100846;"	d	file:
PragTyp_STATS	sqlite3.c	100847;"	d	file:
PragTyp_SYNCHRONOUS	sqlite3.c	100848;"	d	file:
PragTyp_TABLE_INFO	sqlite3.c	100849;"	d	file:
PragTyp_TEMP_STORE	sqlite3.c	100850;"	d	file:
PragTyp_TEMP_STORE_DIRECTORY	sqlite3.c	100851;"	d	file:
PragTyp_THREADS	sqlite3.c	100852;"	d	file:
PragTyp_WAL_AUTOCHECKPOINT	sqlite3.c	100853;"	d	file:
PragTyp_WAL_CHECKPOINT	sqlite3.c	100854;"	d	file:
PrintfArguments	sqlite3.c	/^struct PrintfArguments {$/;"	s	file:
PrintfArguments	sqlite3.c	/^typedef struct PrintfArguments PrintfArguments;$/;"	t	typeref:struct:PrintfArguments	file:
PrintfArguments::apArg	sqlite3.c	/^  sqlite3_value **apArg;   \/* The argument values *\/$/;"	m	struct:PrintfArguments	file:	access:public
PrintfArguments::nArg	sqlite3.c	/^  int nArg;                \/* Total number of arguments *\/$/;"	m	struct:PrintfArguments	file:	access:public
PrintfArguments::nUsed	sqlite3.c	/^  int nUsed;               \/* Number of arguments used so far *\/$/;"	m	struct:PrintfArguments	file:	access:public
QMESG_EXPLAN_LEN	comm.h	19;"	d
QMESG_FLAG_ACK	comm.h	22;"	d
QMESG_FLAG_ERR	comm.h	23;"	d
QMESG_FLAG_REQ	comm.h	21;"	d
QMESG_WORD_LEN	comm.h	18;"	d
READMARK_NOT_USED	sqlite3.c	48485;"	d	file:
READ_LOCK	sqlite3.c	51553;"	d	file:
READ_UTF16BE	sqlite3.c	22378;"	d	file:
READ_UTF16LE	sqlite3.c	22368;"	d	file:
READ_UTF8	sqlite3.c	146753;"	d	file:
READ_UTF8	sqlite3.c	22415;"	d	file:
REARGUARD	sqlite3.c	16807;"	d	file:
REGISTER_TRACE	sqlite3.c	69436;"	d	file:
REGISTER_TRACE	sqlite3.c	69438;"	d	file:
RESERVED_BYTE	sqlite3.c	10272;"	d	file:
RESERVED_LOCK	sqlite3.c	10208;"	d	file:
RNDAWAY	sqlite3.c	150235;"	d	file:
RNDTOWARDS	sqlite3.c	150234;"	d	file:
ROUND8	sqlite3.c	8684;"	d	file:
ROUNDDOWN8	sqlite3.c	8689;"	d	file:
ROWSET_ALLOCATION_SIZE	sqlite3.c	40286;"	d	file:
ROWSET_ENTRY_PER_CHUNK	sqlite3.c	40291;"	d	file:
ROWSET_NEXT	sqlite3.c	40340;"	d	file:
ROWSET_SORTED	sqlite3.c	40339;"	d	file:
RTREE_CACHE_SZ	sqlite3.c	147686;"	d	file:
RTREE_COORD_INT32	sqlite3.c	147624;"	d	file:
RTREE_COORD_REAL32	sqlite3.c	147623;"	d	file:
RTREE_DECODE_COORD	sqlite3.c	148393;"	d	file:
RTREE_DECODE_COORD	sqlite3.c	148401;"	d	file:
RTREE_DECODE_COORD	sqlite3.c	148407;"	d	file:
RTREE_DEFAULT_ROWEST	sqlite3.c	147577;"	d	file:
RTREE_EQ	sqlite3.c	147751;"	d	file:
RTREE_GE	sqlite3.c	147754;"	d	file:
RTREE_GEOMETRY_MAGIC	sqlite3.c	147811;"	d	file:
RTREE_GT	sqlite3.c	147755;"	d	file:
RTREE_LE	sqlite3.c	147752;"	d	file:
RTREE_LT	sqlite3.c	147753;"	d	file:
RTREE_MATCH	sqlite3.c	147756;"	d	file:
RTREE_MAXCELLS	sqlite3.c	147669;"	d	file:
RTREE_MAX_DEPTH	sqlite3.c	147678;"	d	file:
RTREE_MAX_DIMENSIONS	sqlite3.c	147562;"	d	file:
RTREE_MINCELLS	sqlite3.c	147667;"	d	file:
RTREE_MIN_ROWEST	sqlite3.c	147578;"	d	file:
RTREE_OF_CURSOR	sqlite3.c	147708;"	d	file:
RTREE_QUERY	sqlite3.c	147757;"	d	file:
RTREE_QUEUE_TRACE	sqlite3.c	148733;"	d	file:
RTREE_REINSERT	sqlite3.c	147668;"	d	file:
RTREE_ZERO	sqlite3.c	147634;"	d	file:
RTREE_ZERO	sqlite3.c	147638;"	d	file:
RecordCompare	sqlite3.c	/^typedef int (*RecordCompare)(int,const void*,UnpackedRecord*);$/;"	t	file:
Reinsert	sqlite3.c	/^static int Reinsert($/;"	f	file:	signature:( Rtree *pRtree, RtreeNode *pNode, RtreeCell *pCell, int iHeight )
RowSet	sqlite3.c	/^struct RowSet {$/;"	s	file:
RowSet	sqlite3.c	/^typedef struct RowSet RowSet;$/;"	t	typeref:struct:RowSet	file:
RowSet::db	sqlite3.c	/^  sqlite3 *db;                   \/* The database connection *\/$/;"	m	struct:RowSet	file:	access:public
RowSet::iBatch	sqlite3.c	/^  int iBatch;                    \/* Current insert batch *\/$/;"	m	struct:RowSet	file:	access:public
RowSet::nFresh	sqlite3.c	/^  u16 nFresh;                    \/* Number of objects on pFresh *\/$/;"	m	struct:RowSet	file:	access:public
RowSet::pChunk	sqlite3.c	/^  struct RowSetChunk *pChunk;    \/* List of all chunk allocations *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetChunk	file:	access:public
RowSet::pEntry	sqlite3.c	/^  struct RowSetEntry *pEntry;    \/* List of entries using pRight *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:	access:public
RowSet::pForest	sqlite3.c	/^  struct RowSetEntry *pForest;   \/* List of binary trees of entries *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:	access:public
RowSet::pFresh	sqlite3.c	/^  struct RowSetEntry *pFresh;    \/* Source of new entry objects *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:	access:public
RowSet::pLast	sqlite3.c	/^  struct RowSetEntry *pLast;     \/* Last entry on the pEntry list *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:	access:public
RowSet::rsFlags	sqlite3.c	/^  u16 rsFlags;                   \/* Various flags *\/$/;"	m	struct:RowSet	file:	access:public
RowSetChunk	sqlite3.c	/^struct RowSetChunk {$/;"	s	file:
RowSetChunk::aEntry	sqlite3.c	/^  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; \/* Allocated entries *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetEntry	file:	access:public
RowSetChunk::pNextChunk	sqlite3.c	/^  struct RowSetChunk *pNextChunk;        \/* Next chunk on list of them all *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetChunk	file:	access:public
RowSetEntry	sqlite3.c	/^struct RowSetEntry {            $/;"	s	file:
RowSetEntry::pLeft	sqlite3.c	/^  struct RowSetEntry *pLeft;    \/* Left subtree (smaller entries) *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:	access:public
RowSetEntry::pRight	sqlite3.c	/^  struct RowSetEntry *pRight;   \/* Right subtree (larger entries) or list *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:	access:public
RowSetEntry::v	sqlite3.c	/^  i64 v;                        \/* ROWID value for this entry *\/$/;"	m	struct:RowSetEntry	file:	access:public
Rtree	sqlite3.c	/^struct Rtree {$/;"	s	file:
Rtree	sqlite3.c	/^typedef struct Rtree Rtree;$/;"	t	typeref:struct:Rtree	file:
Rtree::aHash	sqlite3.c	/^  RtreeNode *aHash[HASHSIZE]; \/* Hash table of in-memory nodes. *\/ $/;"	m	struct:Rtree	file:	access:public
Rtree::base	sqlite3.c	/^  sqlite3_vtab base;          \/* Base class.  Must be first *\/$/;"	m	struct:Rtree	file:	access:public
Rtree::db	sqlite3.c	/^  sqlite3 *db;                \/* Host database connection *\/$/;"	m	struct:Rtree	file:	access:public
Rtree::eCoordType	sqlite3.c	/^  u8 eCoordType;              \/* RTREE_COORD_REAL32 or RTREE_COORD_INT32 *\/$/;"	m	struct:Rtree	file:	access:public
Rtree::iDepth	sqlite3.c	/^  int iDepth;                 \/* Current depth of the r-tree structure *\/$/;"	m	struct:Rtree	file:	access:public
Rtree::iNodeSize	sqlite3.c	/^  int iNodeSize;              \/* Size in bytes of each node in the node table *\/$/;"	m	struct:Rtree	file:	access:public
Rtree::iReinsertHeight	sqlite3.c	/^  int iReinsertHeight;        \/* Height of sub-trees Reinsert() has run on *\/$/;"	m	struct:Rtree	file:	access:public
Rtree::nBusy	sqlite3.c	/^  int nBusy;                  \/* Current number of users of this structure *\/$/;"	m	struct:Rtree	file:	access:public
Rtree::nBytesPerCell	sqlite3.c	/^  u8 nBytesPerCell;           \/* Bytes consumed per cell *\/$/;"	m	struct:Rtree	file:	access:public
Rtree::nDim	sqlite3.c	/^  u8 nDim;                    \/* Number of dimensions *\/$/;"	m	struct:Rtree	file:	access:public
Rtree::nRowEst	sqlite3.c	/^  i64 nRowEst;                \/* Estimated number of rows in this table *\/$/;"	m	struct:Rtree	file:	access:public
Rtree::pDeleteNode	sqlite3.c	/^  sqlite3_stmt *pDeleteNode;$/;"	m	struct:Rtree	file:	access:public
Rtree::pDeleteParent	sqlite3.c	/^  sqlite3_stmt *pDeleteParent;$/;"	m	struct:Rtree	file:	access:public
Rtree::pDeleteRowid	sqlite3.c	/^  sqlite3_stmt *pDeleteRowid;$/;"	m	struct:Rtree	file:	access:public
Rtree::pDeleted	sqlite3.c	/^  RtreeNode *pDeleted;$/;"	m	struct:Rtree	file:	access:public
Rtree::pReadNode	sqlite3.c	/^  sqlite3_stmt *pReadNode;$/;"	m	struct:Rtree	file:	access:public
Rtree::pReadParent	sqlite3.c	/^  sqlite3_stmt *pReadParent;$/;"	m	struct:Rtree	file:	access:public
Rtree::pReadRowid	sqlite3.c	/^  sqlite3_stmt *pReadRowid;$/;"	m	struct:Rtree	file:	access:public
Rtree::pWriteNode	sqlite3.c	/^  sqlite3_stmt *pWriteNode;$/;"	m	struct:Rtree	file:	access:public
Rtree::pWriteParent	sqlite3.c	/^  sqlite3_stmt *pWriteParent;$/;"	m	struct:Rtree	file:	access:public
Rtree::pWriteRowid	sqlite3.c	/^  sqlite3_stmt *pWriteRowid;$/;"	m	struct:Rtree	file:	access:public
Rtree::zDb	sqlite3.c	/^  char *zDb;                  \/* Name of database containing r-tree table *\/$/;"	m	struct:Rtree	file:	access:public
Rtree::zName	sqlite3.c	/^  char *zName;                \/* Name of r-tree table *\/ $/;"	m	struct:Rtree	file:	access:public
RtreeCell	sqlite3.c	/^struct RtreeCell {$/;"	s	file:
RtreeCell	sqlite3.c	/^typedef struct RtreeCell RtreeCell;$/;"	t	typeref:struct:RtreeCell	file:
RtreeCell::aCoord	sqlite3.c	/^  RtreeCoord aCoord[RTREE_MAX_DIMENSIONS*2];  \/* Bounding box coordinates *\/$/;"	m	struct:RtreeCell	file:	access:public
RtreeCell::iRowid	sqlite3.c	/^  i64 iRowid;                                 \/* Node or entry ID *\/$/;"	m	struct:RtreeCell	file:	access:public
RtreeConstraint	sqlite3.c	/^struct RtreeConstraint {$/;"	s	file:
RtreeConstraint	sqlite3.c	/^typedef struct RtreeConstraint RtreeConstraint;$/;"	t	typeref:struct:RtreeConstraint	file:
RtreeConstraint::__anon25::rValue	sqlite3.c	/^    RtreeDValue rValue;             \/* Constraint value. *\/$/;"	m	union:RtreeConstraint::__anon25	file:	access:public
RtreeConstraint::__anon25::xGeom	sqlite3.c	/^    int (*xGeom)(sqlite3_rtree_geometry*,int,RtreeDValue*,int*);$/;"	m	union:RtreeConstraint::__anon25	file:	access:public
RtreeConstraint::__anon25::xQueryFunc	sqlite3.c	/^    int (*xQueryFunc)(sqlite3_rtree_query_info*);$/;"	m	union:RtreeConstraint::__anon25	file:	access:public
RtreeConstraint::iCoord	sqlite3.c	/^  int iCoord;                     \/* Index of constrained coordinate *\/$/;"	m	struct:RtreeConstraint	file:	access:public
RtreeConstraint::op	sqlite3.c	/^  int op;                         \/* Constraining operation *\/$/;"	m	struct:RtreeConstraint	file:	access:public
RtreeConstraint::pInfo	sqlite3.c	/^  sqlite3_rtree_query_info *pInfo;  \/* xGeom and xQueryFunc argument *\/$/;"	m	struct:RtreeConstraint	file:	access:public
RtreeConstraint::u	sqlite3.c	/^  } u;$/;"	m	struct:RtreeConstraint	typeref:union:RtreeConstraint::__anon25	file:	access:public
RtreeCoord	sqlite3.c	/^typedef union RtreeCoord RtreeCoord;$/;"	t	typeref:union:RtreeCoord	file:
RtreeCoord	sqlite3.c	/^union RtreeCoord {$/;"	u	file:
RtreeCoord::f	sqlite3.c	/^  RtreeValue f;      \/* Floating point value *\/$/;"	m	union:RtreeCoord	file:	access:public
RtreeCoord::i	sqlite3.c	/^  int i;             \/* Integer value *\/$/;"	m	union:RtreeCoord	file:	access:public
RtreeCoord::u	sqlite3.c	/^  u32 u;             \/* Unsigned for byte-order conversions *\/$/;"	m	union:RtreeCoord	file:	access:public
RtreeCursor	sqlite3.c	/^struct RtreeCursor {$/;"	s	file:
RtreeCursor	sqlite3.c	/^typedef struct RtreeCursor RtreeCursor;$/;"	t	typeref:struct:RtreeCursor	file:
RtreeCursor::aConstraint	sqlite3.c	/^  RtreeConstraint *aConstraint;     \/* Search constraints. *\/$/;"	m	struct:RtreeCursor	file:	access:public
RtreeCursor::aNode	sqlite3.c	/^  RtreeNode *aNode[RTREE_CACHE_SZ]; \/* Rtree node cache *\/$/;"	m	struct:RtreeCursor	file:	access:public
RtreeCursor::aPoint	sqlite3.c	/^  RtreeSearchPoint *aPoint;         \/* Priority queue for search points *\/$/;"	m	struct:RtreeCursor	file:	access:public
RtreeCursor::anQueue	sqlite3.c	/^  u32 anQueue[RTREE_MAX_DEPTH+1];   \/* Number of queued entries by iLevel *\/$/;"	m	struct:RtreeCursor	file:	access:public
RtreeCursor::atEOF	sqlite3.c	/^  u8 atEOF;                         \/* True if at end of search *\/$/;"	m	struct:RtreeCursor	file:	access:public
RtreeCursor::bPoint	sqlite3.c	/^  u8 bPoint;                        \/* True if sPoint is valid *\/$/;"	m	struct:RtreeCursor	file:	access:public
RtreeCursor::base	sqlite3.c	/^  sqlite3_vtab_cursor base;         \/* Base class.  Must be first *\/$/;"	m	struct:RtreeCursor	file:	access:public
RtreeCursor::iStrategy	sqlite3.c	/^  int iStrategy;                    \/* Copy of idxNum search parameter *\/$/;"	m	struct:RtreeCursor	file:	access:public
RtreeCursor::mxLevel	sqlite3.c	/^  int mxLevel;                      \/* iLevel value for root of the tree *\/$/;"	m	struct:RtreeCursor	file:	access:public
RtreeCursor::nConstraint	sqlite3.c	/^  int nConstraint;                  \/* Number of entries in aConstraint *\/$/;"	m	struct:RtreeCursor	file:	access:public
RtreeCursor::nPoint	sqlite3.c	/^  int nPoint;                       \/* Number of slots used in aPoint[] *\/$/;"	m	struct:RtreeCursor	file:	access:public
RtreeCursor::nPointAlloc	sqlite3.c	/^  int nPointAlloc;                  \/* Number of slots allocated for aPoint[] *\/$/;"	m	struct:RtreeCursor	file:	access:public
RtreeCursor::sPoint	sqlite3.c	/^  RtreeSearchPoint sPoint;          \/* Cached next search point *\/$/;"	m	struct:RtreeCursor	file:	access:public
RtreeDValue	sqlite3.c	/^  typedef double RtreeDValue;              \/* High accuracy coordinate *\/$/;"	t	file:
RtreeDValue	sqlite3.c	/^  typedef sqlite3_int64 RtreeDValue;       \/* High accuracy coordinate *\/$/;"	t	file:
RtreeGeomCallback	sqlite3.c	/^struct RtreeGeomCallback {$/;"	s	file:
RtreeGeomCallback	sqlite3.c	/^typedef struct RtreeGeomCallback RtreeGeomCallback;$/;"	t	typeref:struct:RtreeGeomCallback	file:
RtreeGeomCallback::pContext	sqlite3.c	/^  void *pContext;$/;"	m	struct:RtreeGeomCallback	file:	access:public
RtreeGeomCallback::xDestructor	sqlite3.c	/^  void (*xDestructor)(void*);$/;"	m	struct:RtreeGeomCallback	file:	access:public
RtreeGeomCallback::xGeom	sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry*, int, RtreeDValue*, int*);$/;"	m	struct:RtreeGeomCallback	file:	access:public
RtreeGeomCallback::xQueryFunc	sqlite3.c	/^  int (*xQueryFunc)(sqlite3_rtree_query_info*);$/;"	m	struct:RtreeGeomCallback	file:	access:public
RtreeMatchArg	sqlite3.c	/^struct RtreeMatchArg {$/;"	s	file:
RtreeMatchArg	sqlite3.c	/^typedef struct RtreeMatchArg RtreeMatchArg;$/;"	t	typeref:struct:RtreeMatchArg	file:
RtreeMatchArg::aParam	sqlite3.c	/^  RtreeDValue aParam[1];      \/* Values for parameters to the SQL function *\/$/;"	m	struct:RtreeMatchArg	file:	access:public
RtreeMatchArg::cb	sqlite3.c	/^  RtreeGeomCallback cb;       \/* Info about the callback functions *\/$/;"	m	struct:RtreeMatchArg	file:	access:public
RtreeMatchArg::magic	sqlite3.c	/^  u32 magic;                  \/* Always RTREE_GEOMETRY_MAGIC *\/$/;"	m	struct:RtreeMatchArg	file:	access:public
RtreeMatchArg::nParam	sqlite3.c	/^  int nParam;                 \/* Number of parameters to the SQL function *\/$/;"	m	struct:RtreeMatchArg	file:	access:public
RtreeNode	sqlite3.c	/^struct RtreeNode {$/;"	s	file:
RtreeNode	sqlite3.c	/^typedef struct RtreeNode RtreeNode;$/;"	t	typeref:struct:RtreeNode	file:
RtreeNode::iNode	sqlite3.c	/^  i64 iNode;                  \/* The node number *\/$/;"	m	struct:RtreeNode	file:	access:public
RtreeNode::isDirty	sqlite3.c	/^  int isDirty;                \/* True if the node needs to be written to disk *\/$/;"	m	struct:RtreeNode	file:	access:public
RtreeNode::nRef	sqlite3.c	/^  int nRef;                   \/* Number of references to this node *\/$/;"	m	struct:RtreeNode	file:	access:public
RtreeNode::pNext	sqlite3.c	/^  RtreeNode *pNext;           \/* Next node in this hash collision chain *\/$/;"	m	struct:RtreeNode	file:	access:public
RtreeNode::pParent	sqlite3.c	/^  RtreeNode *pParent;         \/* Parent node *\/$/;"	m	struct:RtreeNode	file:	access:public
RtreeNode::zData	sqlite3.c	/^  u8 *zData;                  \/* Content of the node, as should be on disk *\/$/;"	m	struct:RtreeNode	file:	access:public
RtreeSearchPoint	sqlite3.c	/^struct RtreeSearchPoint {$/;"	s	file:
RtreeSearchPoint	sqlite3.c	/^typedef struct RtreeSearchPoint RtreeSearchPoint;$/;"	t	typeref:struct:RtreeSearchPoint	file:
RtreeSearchPoint::eWithin	sqlite3.c	/^  u8 eWithin;            \/* PARTLY_WITHIN or FULLY_WITHIN *\/$/;"	m	struct:RtreeSearchPoint	file:	access:public
RtreeSearchPoint::iCell	sqlite3.c	/^  u8 iCell;              \/* Cell index within the node *\/$/;"	m	struct:RtreeSearchPoint	file:	access:public
RtreeSearchPoint::iLevel	sqlite3.c	/^  u8 iLevel;             \/* 0=entries.  1=leaf node.  2+ for higher *\/$/;"	m	struct:RtreeSearchPoint	file:	access:public
RtreeSearchPoint::id	sqlite3.c	/^  sqlite3_int64 id;      \/* Node ID *\/$/;"	m	struct:RtreeSearchPoint	file:	access:public
RtreeSearchPoint::rScore	sqlite3.c	/^  RtreeDValue rScore;    \/* The score for this node.  Smallest goes first. *\/$/;"	m	struct:RtreeSearchPoint	file:	access:public
RtreeValue	sqlite3.c	/^  typedef float RtreeValue;                \/* Low accuracy coordinate *\/$/;"	t	file:
RtreeValue	sqlite3.c	/^  typedef int RtreeValue;                  \/* Low accuracy coordinate *\/$/;"	t	file:
SAVEPOINT_BEGIN	sqlite3.c	10896;"	d	file:
SAVEPOINT_RELEASE	sqlite3.c	10897;"	d	file:
SAVEPOINT_ROLLBACK	sqlite3.c	10898;"	d	file:
SAVE_SZ	sqlite3.c	88823;"	d	file:
SCHEMA_TABLE	sqlite3.c	8806;"	d	file:
SELECTTRACE	sqlite3.c	104090;"	d	file:
SELECTTRACE	sqlite3.c	104095;"	d	file:
SELECTTRACE_ENABLED	sqlite3.c	8769;"	d	file:
SELECTTRACE_ENABLED	sqlite3.c	8771;"	d	file:
SER_ADDR	comm.h	14;"	d
SER_PORT	comm.h	13;"	d
SETBIT	sqlite3.c	38398;"	d	file:
SET_FULLSYNC	sqlite3.c	10154;"	d	file:
SF_Aggregate	sqlite3.c	11867;"	d	file:
SF_Compound	sqlite3.c	11871;"	d	file:
SF_Distinct	sqlite3.c	11865;"	d	file:
SF_Expanded	sqlite3.c	11869;"	d	file:
SF_HasTypeInfo	sqlite3.c	11870;"	d	file:
SF_MaybeConvert	sqlite3.c	11875;"	d	file:
SF_MinMaxAgg	sqlite3.c	11877;"	d	file:
SF_NestedFrom	sqlite3.c	11874;"	d	file:
SF_Recursive	sqlite3.c	11876;"	d	file:
SF_Resolved	sqlite3.c	11866;"	d	file:
SF_UsesEphemeral	sqlite3.c	11868;"	d	file:
SF_Values	sqlite3.c	11872;"	d	file:
SHARED_FIRST	sqlite3.c	10273;"	d	file:
SHARED_LOCK	sqlite3.c	10207;"	d	file:
SHARED_SIZE	sqlite3.c	10274;"	d	file:
SLOT_2_0	sqlite3.c	23549;"	d	file:
SLOT_4_2_0	sqlite3.c	23550;"	d	file:
SMALLEST_INT64	sqlite3.c	132704;"	d	file:
SMALLEST_INT64	sqlite3.c	8678;"	d	file:
SORTER_MAX_MERGE_COUNT	sqlite3.c	76439;"	d	file:
SORTER_MIN_WORKING	sqlite3.c	76436;"	d	file:
SORTFLAG_UseSorter	sqlite3.c	104126;"	d	file:
SPILLFLAG_NOSYNC	sqlite3.c	41328;"	d	file:
SPILLFLAG_OFF	sqlite3.c	41326;"	d	file:
SPILLFLAG_ROLLBACK	sqlite3.c	41327;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite3.c	18949;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite3.c	18951;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite3.c	19601;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite3.c	19604;"	d	file:
SQLITE3_TEXT	sqlite3.c	3912;"	d	file:
SQLITE3_TEXT	sqlite3.h	3788;"	d
SQLITE_ABORT	sqlite3.c	527;"	d	file:
SQLITE_ABORT	sqlite3.h	403;"	d
SQLITE_ABORT_ROLLBACK	sqlite3.c	610;"	d	file:
SQLITE_ABORT_ROLLBACK	sqlite3.h	486;"	d
SQLITE_ACCESS_EXISTS	sqlite3.c	1328;"	d	file:
SQLITE_ACCESS_EXISTS	sqlite3.h	1204;"	d
SQLITE_ACCESS_READ	sqlite3.c	1330;"	d	file:
SQLITE_ACCESS_READ	sqlite3.h	1206;"	d
SQLITE_ACCESS_READWRITE	sqlite3.c	1329;"	d	file:
SQLITE_ACCESS_READWRITE	sqlite3.h	1205;"	d
SQLITE_AFF_INTEGER	sqlite3.c	10974;"	d	file:
SQLITE_AFF_MASK	sqlite3.c	10983;"	d	file:
SQLITE_AFF_NONE	sqlite3.c	10971;"	d	file:
SQLITE_AFF_NUMERIC	sqlite3.c	10973;"	d	file:
SQLITE_AFF_REAL	sqlite3.c	10975;"	d	file:
SQLITE_AFF_TEXT	sqlite3.c	10972;"	d	file:
SQLITE_ALLOW_COVERING_INDEX_SCAN	sqlite3.c	13484;"	d	file:
SQLITE_ALTER_TABLE	sqlite3.c	2705;"	d	file:
SQLITE_ALTER_TABLE	sqlite3.h	2581;"	d
SQLITE_AMALGAMATION	sqlite3.c	21;"	d	file:
SQLITE_ANALYZE	sqlite3.c	2707;"	d	file:
SQLITE_ANALYZE	sqlite3.h	2583;"	d
SQLITE_ANY	sqlite3.c	4279;"	d	file:
SQLITE_ANY	sqlite3.h	4155;"	d
SQLITE_API	sqlite3.c	177;"	d	file:
SQLITE_API	sqlite3.c	26;"	d	file:
SQLITE_API	sqlite3.h	53;"	d
SQLITE_ASCII	sqlite3.c	8534;"	d	file:
SQLITE_ATTACH	sqlite3.c	2703;"	d	file:
SQLITE_ATTACH	sqlite3.h	2579;"	d
SQLITE_AUTH	sqlite3.c	546;"	d	file:
SQLITE_AUTH	sqlite3.h	422;"	d
SQLITE_AUTH_USER	sqlite3.c	624;"	d	file:
SQLITE_AUTH_USER	sqlite3.h	500;"	d
SQLITE_AllOpts	sqlite3.c	10741;"	d	file:
SQLITE_AutoIndex	sqlite3.c	10715;"	d	file:
SQLITE_BIGENDIAN	sqlite3.c	8654;"	d	file:
SQLITE_BIGENDIAN	sqlite3.c	8661;"	d	file:
SQLITE_BIGENDIAN	sqlite3.c	8667;"	d	file:
SQLITE_BIG_DBL	sqlite3.c	8437;"	d	file:
SQLITE_BIG_DBL	sqlite3.c	8445;"	d	file:
SQLITE_BLOB	sqlite3.c	3905;"	d	file:
SQLITE_BLOB	sqlite3.h	3781;"	d
SQLITE_BUSY	sqlite3.c	528;"	d	file:
SQLITE_BUSY	sqlite3.h	404;"	d
SQLITE_BUSY_RECOVERY	sqlite3.c	599;"	d	file:
SQLITE_BUSY_RECOVERY	sqlite3.h	475;"	d
SQLITE_BUSY_SNAPSHOT	sqlite3.c	600;"	d	file:
SQLITE_BUSY_SNAPSHOT	sqlite3.h	476;"	d
SQLITE_BYTEORDER	sqlite3.c	8653;"	d	file:
SQLITE_BYTEORDER	sqlite3.c	8660;"	d	file:
SQLITE_BYTEORDER	sqlite3.c	8666;"	d	file:
SQLITE_CANTOPEN	sqlite3.c	537;"	d	file:
SQLITE_CANTOPEN	sqlite3.h	413;"	d
SQLITE_CANTOPEN_BKPT	sqlite3.c	12489;"	d	file:
SQLITE_CANTOPEN_CONVPATH	sqlite3.c	604;"	d	file:
SQLITE_CANTOPEN_CONVPATH	sqlite3.h	480;"	d
SQLITE_CANTOPEN_FULLPATH	sqlite3.c	603;"	d	file:
SQLITE_CANTOPEN_FULLPATH	sqlite3.h	479;"	d
SQLITE_CANTOPEN_ISDIR	sqlite3.c	602;"	d	file:
SQLITE_CANTOPEN_ISDIR	sqlite3.h	478;"	d
SQLITE_CANTOPEN_NOTEMPDIR	sqlite3.c	601;"	d	file:
SQLITE_CANTOPEN_NOTEMPDIR	sqlite3.h	477;"	d
SQLITE_CHECKPOINT_FULL	sqlite3.c	7448;"	d	file:
SQLITE_CHECKPOINT_FULL	sqlite3.h	7324;"	d
SQLITE_CHECKPOINT_PASSIVE	sqlite3.c	7447;"	d	file:
SQLITE_CHECKPOINT_PASSIVE	sqlite3.h	7323;"	d
SQLITE_CHECKPOINT_RESTART	sqlite3.c	7449;"	d	file:
SQLITE_CHECKPOINT_RESTART	sqlite3.h	7325;"	d
SQLITE_CONFIG_COVERING_INDEX_SCAN	sqlite3.c	1871;"	d	file:
SQLITE_CONFIG_COVERING_INDEX_SCAN	sqlite3.h	1747;"	d
SQLITE_CONFIG_GETMALLOC	sqlite3.c	1856;"	d	file:
SQLITE_CONFIG_GETMALLOC	sqlite3.h	1732;"	d
SQLITE_CONFIG_GETMUTEX	sqlite3.c	1862;"	d	file:
SQLITE_CONFIG_GETMUTEX	sqlite3.h	1738;"	d
SQLITE_CONFIG_GETPCACHE	sqlite3.c	1866;"	d	file:
SQLITE_CONFIG_GETPCACHE	sqlite3.h	1742;"	d
SQLITE_CONFIG_GETPCACHE2	sqlite3.c	1870;"	d	file:
SQLITE_CONFIG_GETPCACHE2	sqlite3.h	1746;"	d
SQLITE_CONFIG_HEAP	sqlite3.c	1859;"	d	file:
SQLITE_CONFIG_HEAP	sqlite3.h	1735;"	d
SQLITE_CONFIG_LOG	sqlite3.c	1867;"	d	file:
SQLITE_CONFIG_LOG	sqlite3.h	1743;"	d
SQLITE_CONFIG_LOOKASIDE	sqlite3.c	1864;"	d	file:
SQLITE_CONFIG_LOOKASIDE	sqlite3.h	1740;"	d
SQLITE_CONFIG_MALLOC	sqlite3.c	1855;"	d	file:
SQLITE_CONFIG_MALLOC	sqlite3.h	1731;"	d
SQLITE_CONFIG_MEMSTATUS	sqlite3.c	1860;"	d	file:
SQLITE_CONFIG_MEMSTATUS	sqlite3.h	1736;"	d
SQLITE_CONFIG_MMAP_SIZE	sqlite3.c	1873;"	d	file:
SQLITE_CONFIG_MMAP_SIZE	sqlite3.h	1749;"	d
SQLITE_CONFIG_MULTITHREAD	sqlite3.c	1853;"	d	file:
SQLITE_CONFIG_MULTITHREAD	sqlite3.h	1729;"	d
SQLITE_CONFIG_MUTEX	sqlite3.c	1861;"	d	file:
SQLITE_CONFIG_MUTEX	sqlite3.h	1737;"	d
SQLITE_CONFIG_PAGECACHE	sqlite3.c	1858;"	d	file:
SQLITE_CONFIG_PAGECACHE	sqlite3.h	1734;"	d
SQLITE_CONFIG_PCACHE	sqlite3.c	1865;"	d	file:
SQLITE_CONFIG_PCACHE	sqlite3.h	1741;"	d
SQLITE_CONFIG_PCACHE2	sqlite3.c	1869;"	d	file:
SQLITE_CONFIG_PCACHE2	sqlite3.h	1745;"	d
SQLITE_CONFIG_SCRATCH	sqlite3.c	1857;"	d	file:
SQLITE_CONFIG_SCRATCH	sqlite3.h	1733;"	d
SQLITE_CONFIG_SERIALIZED	sqlite3.c	1854;"	d	file:
SQLITE_CONFIG_SERIALIZED	sqlite3.h	1730;"	d
SQLITE_CONFIG_SINGLETHREAD	sqlite3.c	1852;"	d	file:
SQLITE_CONFIG_SINGLETHREAD	sqlite3.h	1728;"	d
SQLITE_CONFIG_SQLLOG	sqlite3.c	1872;"	d	file:
SQLITE_CONFIG_SQLLOG	sqlite3.h	1748;"	d
SQLITE_CONFIG_URI	sqlite3.c	1868;"	d	file:
SQLITE_CONFIG_URI	sqlite3.h	1744;"	d
SQLITE_CONFIG_WIN32_HEAPSIZE	sqlite3.c	1874;"	d	file:
SQLITE_CONFIG_WIN32_HEAPSIZE	sqlite3.h	1750;"	d
SQLITE_CONSTRAINT	sqlite3.c	542;"	d	file:
SQLITE_CONSTRAINT	sqlite3.h	418;"	d
SQLITE_CONSTRAINT_CHECK	sqlite3.c	611;"	d	file:
SQLITE_CONSTRAINT_CHECK	sqlite3.h	487;"	d
SQLITE_CONSTRAINT_COMMITHOOK	sqlite3.c	612;"	d	file:
SQLITE_CONSTRAINT_COMMITHOOK	sqlite3.h	488;"	d
SQLITE_CONSTRAINT_FOREIGNKEY	sqlite3.c	613;"	d	file:
SQLITE_CONSTRAINT_FOREIGNKEY	sqlite3.h	489;"	d
SQLITE_CONSTRAINT_FUNCTION	sqlite3.c	614;"	d	file:
SQLITE_CONSTRAINT_FUNCTION	sqlite3.h	490;"	d
SQLITE_CONSTRAINT_NOTNULL	sqlite3.c	615;"	d	file:
SQLITE_CONSTRAINT_NOTNULL	sqlite3.h	491;"	d
SQLITE_CONSTRAINT_PRIMARYKEY	sqlite3.c	616;"	d	file:
SQLITE_CONSTRAINT_PRIMARYKEY	sqlite3.h	492;"	d
SQLITE_CONSTRAINT_ROWID	sqlite3.c	620;"	d	file:
SQLITE_CONSTRAINT_ROWID	sqlite3.h	496;"	d
SQLITE_CONSTRAINT_TRIGGER	sqlite3.c	617;"	d	file:
SQLITE_CONSTRAINT_TRIGGER	sqlite3.h	493;"	d
SQLITE_CONSTRAINT_UNIQUE	sqlite3.c	618;"	d	file:
SQLITE_CONSTRAINT_UNIQUE	sqlite3.h	494;"	d
SQLITE_CONSTRAINT_VTAB	sqlite3.c	619;"	d	file:
SQLITE_CONSTRAINT_VTAB	sqlite3.h	495;"	d
SQLITE_COPY	sqlite3.c	2712;"	d	file:
SQLITE_COPY	sqlite3.h	2588;"	d
SQLITE_CORE	sqlite3.c	129953;"	d	file:
SQLITE_CORE	sqlite3.c	20;"	d	file:
SQLITE_CORE	sqlite3.c	99513;"	d	file:
SQLITE_CORRUPT	sqlite3.c	534;"	d	file:
SQLITE_CORRUPT	sqlite3.h	410;"	d
SQLITE_CORRUPT_BKPT	sqlite3.c	12487;"	d	file:
SQLITE_CORRUPT_VTAB	sqlite3.c	605;"	d	file:
SQLITE_CORRUPT_VTAB	sqlite3.h	481;"	d
SQLITE_CREATE_INDEX	sqlite3.c	2680;"	d	file:
SQLITE_CREATE_INDEX	sqlite3.h	2556;"	d
SQLITE_CREATE_TABLE	sqlite3.c	2681;"	d	file:
SQLITE_CREATE_TABLE	sqlite3.h	2557;"	d
SQLITE_CREATE_TEMP_INDEX	sqlite3.c	2682;"	d	file:
SQLITE_CREATE_TEMP_INDEX	sqlite3.h	2558;"	d
SQLITE_CREATE_TEMP_TABLE	sqlite3.c	2683;"	d	file:
SQLITE_CREATE_TEMP_TABLE	sqlite3.h	2559;"	d
SQLITE_CREATE_TEMP_TRIGGER	sqlite3.c	2684;"	d	file:
SQLITE_CREATE_TEMP_TRIGGER	sqlite3.h	2560;"	d
SQLITE_CREATE_TEMP_VIEW	sqlite3.c	2685;"	d	file:
SQLITE_CREATE_TEMP_VIEW	sqlite3.h	2561;"	d
SQLITE_CREATE_TRIGGER	sqlite3.c	2686;"	d	file:
SQLITE_CREATE_TRIGGER	sqlite3.h	2562;"	d
SQLITE_CREATE_VIEW	sqlite3.c	2687;"	d	file:
SQLITE_CREATE_VIEW	sqlite3.h	2563;"	d
SQLITE_CREATE_VTABLE	sqlite3.c	2708;"	d	file:
SQLITE_CREATE_VTABLE	sqlite3.h	2584;"	d
SQLITE_CacheSpill	sqlite3.c	10696;"	d	file:
SQLITE_CkptFullFSync	sqlite3.c	10695;"	d	file:
SQLITE_ColumnCache	sqlite3.c	10730;"	d	file:
SQLITE_CountRows	sqlite3.c	10699;"	d	file:
SQLITE_CoverIdxScan	sqlite3.c	10735;"	d	file:
SQLITE_DBCONFIG_ENABLE_FKEY	sqlite3.c	1935;"	d	file:
SQLITE_DBCONFIG_ENABLE_FKEY	sqlite3.h	1811;"	d
SQLITE_DBCONFIG_ENABLE_TRIGGER	sqlite3.c	1936;"	d	file:
SQLITE_DBCONFIG_ENABLE_TRIGGER	sqlite3.h	1812;"	d
SQLITE_DBCONFIG_LOOKASIDE	sqlite3.c	1934;"	d	file:
SQLITE_DBCONFIG_LOOKASIDE	sqlite3.h	1810;"	d
SQLITE_DBSTATUS_CACHE_HIT	sqlite3.c	6589;"	d	file:
SQLITE_DBSTATUS_CACHE_HIT	sqlite3.h	6465;"	d
SQLITE_DBSTATUS_CACHE_MISS	sqlite3.c	6590;"	d	file:
SQLITE_DBSTATUS_CACHE_MISS	sqlite3.h	6466;"	d
SQLITE_DBSTATUS_CACHE_USED	sqlite3.c	6583;"	d	file:
SQLITE_DBSTATUS_CACHE_USED	sqlite3.h	6459;"	d
SQLITE_DBSTATUS_CACHE_WRITE	sqlite3.c	6591;"	d	file:
SQLITE_DBSTATUS_CACHE_WRITE	sqlite3.h	6467;"	d
SQLITE_DBSTATUS_DEFERRED_FKS	sqlite3.c	6592;"	d	file:
SQLITE_DBSTATUS_DEFERRED_FKS	sqlite3.h	6468;"	d
SQLITE_DBSTATUS_LOOKASIDE_HIT	sqlite3.c	6586;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_HIT	sqlite3.h	6462;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	sqlite3.c	6588;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	sqlite3.h	6464;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	sqlite3.c	6587;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	sqlite3.h	6463;"	d
SQLITE_DBSTATUS_LOOKASIDE_USED	sqlite3.c	6582;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_USED	sqlite3.h	6458;"	d
SQLITE_DBSTATUS_MAX	sqlite3.c	6593;"	d	file:
SQLITE_DBSTATUS_MAX	sqlite3.h	6469;"	d
SQLITE_DBSTATUS_SCHEMA_USED	sqlite3.c	6584;"	d	file:
SQLITE_DBSTATUS_SCHEMA_USED	sqlite3.h	6460;"	d
SQLITE_DBSTATUS_STMT_USED	sqlite3.c	6585;"	d	file:
SQLITE_DBSTATUS_STMT_USED	sqlite3.h	6461;"	d
SQLITE_DEBUG_OS_TRACE	sqlite3.c	19312;"	d	file:
SQLITE_DEBUG_OS_TRACE	sqlite3.c	24896;"	d	file:
SQLITE_DEBUG_OS_TRACE	sqlite3.c	32397;"	d	file:
SQLITE_DEFAULT_AUTOVACUUM	sqlite3.c	8959;"	d	file:
SQLITE_DEFAULT_CACHE_SIZE	sqlite3.c	7786;"	d	file:
SQLITE_DEFAULT_FILE_FORMAT	sqlite3.c	8467;"	d	file:
SQLITE_DEFAULT_FILE_PERMISSIONS	sqlite3.c	24736;"	d	file:
SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT	sqlite3.c	9702;"	d	file:
SQLITE_DEFAULT_MEMSTATUS	sqlite3.c	7989;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	sqlite3.c	8742;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	sqlite3.c	8746;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	sqlite3.c	8747;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE_xc	sqlite3.c	8743;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	sqlite3.c	7838;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	sqlite3.c	7841;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	sqlite3.c	7842;"	d	file:
SQLITE_DEFAULT_PROXYDIR_PERMISSIONS	sqlite3.c	24743;"	d	file:
SQLITE_DEFAULT_RECURSIVE_TRIGGERS	sqlite3.c	8475;"	d	file:
SQLITE_DEFAULT_SECTOR_SIZE	sqlite3.c	10161;"	d	file:
SQLITE_DEFAULT_TEMP_CACHE_SIZE	sqlite3.c	7789;"	d	file:
SQLITE_DEFAULT_WAL_AUTOCHECKPOINT	sqlite3.c	7797;"	d	file:
SQLITE_DEFAULT_WORKER_THREADS	sqlite3.c	8500;"	d	file:
SQLITE_DELETE	sqlite3.c	2688;"	d	file:
SQLITE_DELETE	sqlite3.h	2564;"	d
SQLITE_DENY	sqlite3.c	2657;"	d	file:
SQLITE_DENY	sqlite3.h	2533;"	d
SQLITE_DEPRECATED	sqlite3.c	194;"	d	file:
SQLITE_DEPRECATED	sqlite3.h	70;"	d
SQLITE_DETACH	sqlite3.c	2704;"	d	file:
SQLITE_DETACH	sqlite3.h	2580;"	d
SQLITE_DETERMINISTIC	sqlite3.c	4290;"	d	file:
SQLITE_DETERMINISTIC	sqlite3.h	4166;"	d
SQLITE_DONE	sqlite3.c	553;"	d	file:
SQLITE_DONE	sqlite3.h	429;"	d
SQLITE_DROP_INDEX	sqlite3.c	2689;"	d	file:
SQLITE_DROP_INDEX	sqlite3.h	2565;"	d
SQLITE_DROP_TABLE	sqlite3.c	2690;"	d	file:
SQLITE_DROP_TABLE	sqlite3.h	2566;"	d
SQLITE_DROP_TEMP_INDEX	sqlite3.c	2691;"	d	file:
SQLITE_DROP_TEMP_INDEX	sqlite3.h	2567;"	d
SQLITE_DROP_TEMP_TABLE	sqlite3.c	2692;"	d	file:
SQLITE_DROP_TEMP_TABLE	sqlite3.h	2568;"	d
SQLITE_DROP_TEMP_TRIGGER	sqlite3.c	2693;"	d	file:
SQLITE_DROP_TEMP_TRIGGER	sqlite3.h	2569;"	d
SQLITE_DROP_TEMP_VIEW	sqlite3.c	2694;"	d	file:
SQLITE_DROP_TEMP_VIEW	sqlite3.h	2570;"	d
SQLITE_DROP_TRIGGER	sqlite3.c	2695;"	d	file:
SQLITE_DROP_TRIGGER	sqlite3.h	2571;"	d
SQLITE_DROP_VIEW	sqlite3.c	2696;"	d	file:
SQLITE_DROP_VIEW	sqlite3.h	2572;"	d
SQLITE_DROP_VTABLE	sqlite3.c	2709;"	d	file:
SQLITE_DROP_VTABLE	sqlite3.h	2585;"	d
SQLITE_DYNAMIC	sqlite3.c	8827;"	d	file:
SQLITE_DeferFKs	sqlite3.c	10719;"	d	file:
SQLITE_DistinctOpt	sqlite3.c	10734;"	d	file:
SQLITE_EBCDIC	sqlite3.c	8532;"	d	file:
SQLITE_ECEL_DUP	sqlite3.c	12787;"	d	file:
SQLITE_ECEL_FACTOR	sqlite3.c	12788;"	d	file:
SQLITE_EMPTY	sqlite3.c	539;"	d	file:
SQLITE_EMPTY	sqlite3.h	415;"	d
SQLITE_ENABLE_EXPLAIN_COMMENTS	sqlite3.c	8065;"	d	file:
SQLITE_ENABLE_FTS3	sqlite3.c	12498;"	d	file:
SQLITE_ENABLE_FTS3	sqlite3.c	129100;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite3.c	100806;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite3.c	100808;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite3.c	24667;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite3.c	24669;"	d	file:
SQLITE_ENABLE_STAT3	sqlite3.c	8756;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	sqlite3.c	8757;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	sqlite3.c	8759;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	sqlite3.c	8761;"	d	file:
SQLITE_ERROR	sqlite3.c	524;"	d	file:
SQLITE_ERROR	sqlite3.h	400;"	d
SQLITE_EXPERIMENTAL	sqlite3.c	195;"	d	file:
SQLITE_EXPERIMENTAL	sqlite3.h	71;"	d
SQLITE_EXTENSION_INIT1	sqlite3.c	100020;"	d	file:
SQLITE_EXTENSION_INIT1	sqlite3.c	100027;"	d	file:
SQLITE_EXTENSION_INIT2	sqlite3.c	100021;"	d	file:
SQLITE_EXTENSION_INIT2	sqlite3.c	100028;"	d	file:
SQLITE_EXTENSION_INIT3	sqlite3.c	100022;"	d	file:
SQLITE_EXTENSION_INIT3	sqlite3.c	100029;"	d	file:
SQLITE_EXTERN	sqlite3.c	173;"	d	file:
SQLITE_EXTERN	sqlite3.h	49;"	d
SQLITE_EnableTrigger	sqlite3.c	10718;"	d	file:
SQLITE_FAIL	sqlite3.c	7534;"	d	file:
SQLITE_FAIL	sqlite3.h	7410;"	d
SQLITE_FAULTINJECTOR_COUNT	sqlite3.c	13202;"	d	file:
SQLITE_FAULTINJECTOR_MALLOC	sqlite3.c	13201;"	d	file:
SQLITE_FCNTL_BUSYHANDLER	sqlite3.c	1089;"	d	file:
SQLITE_FCNTL_BUSYHANDLER	sqlite3.h	965;"	d
SQLITE_FCNTL_CHUNK_SIZE	sqlite3.c	1080;"	d	file:
SQLITE_FCNTL_CHUNK_SIZE	sqlite3.h	956;"	d
SQLITE_FCNTL_COMMIT_PHASETWO	sqlite3.c	1095;"	d	file:
SQLITE_FCNTL_COMMIT_PHASETWO	sqlite3.h	971;"	d
SQLITE_FCNTL_DB_UNCHANGED	sqlite3.c	10295;"	d	file:
SQLITE_FCNTL_FILE_POINTER	sqlite3.c	1081;"	d	file:
SQLITE_FCNTL_FILE_POINTER	sqlite3.h	957;"	d
SQLITE_FCNTL_HAS_MOVED	sqlite3.c	1093;"	d	file:
SQLITE_FCNTL_HAS_MOVED	sqlite3.h	969;"	d
SQLITE_FCNTL_LOCKSTATE	sqlite3.c	1075;"	d	file:
SQLITE_FCNTL_LOCKSTATE	sqlite3.h	951;"	d
SQLITE_FCNTL_MMAP_SIZE	sqlite3.c	1091;"	d	file:
SQLITE_FCNTL_MMAP_SIZE	sqlite3.h	967;"	d
SQLITE_FCNTL_OVERWRITE	sqlite3.c	1085;"	d	file:
SQLITE_FCNTL_OVERWRITE	sqlite3.h	961;"	d
SQLITE_FCNTL_PERSIST_WAL	sqlite3.c	1084;"	d	file:
SQLITE_FCNTL_PERSIST_WAL	sqlite3.h	960;"	d
SQLITE_FCNTL_POWERSAFE_OVERWRITE	sqlite3.c	1087;"	d	file:
SQLITE_FCNTL_POWERSAFE_OVERWRITE	sqlite3.h	963;"	d
SQLITE_FCNTL_PRAGMA	sqlite3.c	1088;"	d	file:
SQLITE_FCNTL_PRAGMA	sqlite3.h	964;"	d
SQLITE_FCNTL_SIZE_HINT	sqlite3.c	1079;"	d	file:
SQLITE_FCNTL_SIZE_HINT	sqlite3.h	955;"	d
SQLITE_FCNTL_SYNC	sqlite3.c	1094;"	d	file:
SQLITE_FCNTL_SYNC	sqlite3.h	970;"	d
SQLITE_FCNTL_SYNC_OMITTED	sqlite3.c	1082;"	d	file:
SQLITE_FCNTL_SYNC_OMITTED	sqlite3.h	958;"	d
SQLITE_FCNTL_TEMPFILENAME	sqlite3.c	1090;"	d	file:
SQLITE_FCNTL_TEMPFILENAME	sqlite3.h	966;"	d
SQLITE_FCNTL_TRACE	sqlite3.c	1092;"	d	file:
SQLITE_FCNTL_TRACE	sqlite3.h	968;"	d
SQLITE_FCNTL_VFSNAME	sqlite3.c	1086;"	d	file:
SQLITE_FCNTL_VFSNAME	sqlite3.h	962;"	d
SQLITE_FCNTL_WIN32_AV_RETRY	sqlite3.c	1083;"	d	file:
SQLITE_FCNTL_WIN32_AV_RETRY	sqlite3.h	959;"	d
SQLITE_FCNTL_WIN32_SET_HANDLE	sqlite3.c	1096;"	d	file:
SQLITE_FCNTL_WIN32_SET_HANDLE	sqlite3.h	972;"	d
SQLITE_FILE_HEADER	sqlite3.c	51479;"	d	file:
SQLITE_FLOAT	sqlite3.c	3904;"	d	file:
SQLITE_FLOAT	sqlite3.h	3780;"	d
SQLITE_FORMAT	sqlite3.c	547;"	d	file:
SQLITE_FORMAT	sqlite3.h	423;"	d
SQLITE_FREE	sqlite3.c	16504;"	d	file:
SQLITE_FREE	sqlite3.c	16516;"	d	file:
SQLITE_FSFLAGS_IS_MSDOS	sqlite3.c	24721;"	d	file:
SQLITE_FTS3_DEFAULT_NEAR_PARAM	sqlite3.c	136089;"	d	file:
SQLITE_FTS3_MAX_EXPR_DEPTH	sqlite3.c	129401;"	d	file:
SQLITE_FULL	sqlite3.c	536;"	d	file:
SQLITE_FULL	sqlite3.h	412;"	d
SQLITE_FUNCTION	sqlite3.c	2710;"	d	file:
SQLITE_FUNCTION	sqlite3.h	2586;"	d
SQLITE_FUNC_CASE	sqlite3.c	10818;"	d	file:
SQLITE_FUNC_COALESCE	sqlite3.c	10824;"	d	file:
SQLITE_FUNC_CONSTANT	sqlite3.c	10826;"	d	file:
SQLITE_FUNC_COUNT	sqlite3.c	10823;"	d	file:
SQLITE_FUNC_ENCMASK	sqlite3.c	10816;"	d	file:
SQLITE_FUNC_EPHEM	sqlite3.c	10819;"	d	file:
SQLITE_FUNC_LENGTH	sqlite3.c	10821;"	d	file:
SQLITE_FUNC_LIKE	sqlite3.c	10817;"	d	file:
SQLITE_FUNC_MINMAX	sqlite3.c	10827;"	d	file:
SQLITE_FUNC_NEEDCOLL	sqlite3.c	10820;"	d	file:
SQLITE_FUNC_TYPEOF	sqlite3.c	10822;"	d	file:
SQLITE_FUNC_UNLIKELY	sqlite3.c	10825;"	d	file:
SQLITE_FactorOutConst	sqlite3.c	10732;"	d	file:
SQLITE_ForeignKeys	sqlite3.c	10714;"	d	file:
SQLITE_FullColNames	sqlite3.c	10697;"	d	file:
SQLITE_FullFSync	sqlite3.c	10694;"	d	file:
SQLITE_GET_LOCKPROXYFILE	sqlite3.c	1076;"	d	file:
SQLITE_GET_LOCKPROXYFILE	sqlite3.h	952;"	d
SQLITE_GroupByOrder	sqlite3.c	10731;"	d	file:
SQLITE_HAVE_ISNAN	sqlite3.c	8442;"	d	file:
SQLITE_IDXTYPE_APPDEF	sqlite3.c	11334;"	d	file:
SQLITE_IDXTYPE_PRIMARYKEY	sqlite3.c	11336;"	d	file:
SQLITE_IDXTYPE_UNIQUE	sqlite3.c	11335;"	d	file:
SQLITE_IGNORE	sqlite3.c	2658;"	d	file:
SQLITE_IGNORE	sqlite3.h	2534;"	d
SQLITE_INDEX_CONSTRAINT_EQ	sqlite3.c	5612;"	d	file:
SQLITE_INDEX_CONSTRAINT_EQ	sqlite3.h	5488;"	d
SQLITE_INDEX_CONSTRAINT_GE	sqlite3.c	5616;"	d	file:
SQLITE_INDEX_CONSTRAINT_GE	sqlite3.h	5492;"	d
SQLITE_INDEX_CONSTRAINT_GT	sqlite3.c	5613;"	d	file:
SQLITE_INDEX_CONSTRAINT_GT	sqlite3.h	5489;"	d
SQLITE_INDEX_CONSTRAINT_LE	sqlite3.c	5614;"	d	file:
SQLITE_INDEX_CONSTRAINT_LE	sqlite3.h	5490;"	d
SQLITE_INDEX_CONSTRAINT_LT	sqlite3.c	5615;"	d	file:
SQLITE_INDEX_CONSTRAINT_LT	sqlite3.h	5491;"	d
SQLITE_INDEX_CONSTRAINT_MATCH	sqlite3.c	5617;"	d	file:
SQLITE_INDEX_CONSTRAINT_MATCH	sqlite3.h	5493;"	d
SQLITE_INSERT	sqlite3.c	2697;"	d	file:
SQLITE_INSERT	sqlite3.h	2573;"	d
SQLITE_INTEGER	sqlite3.c	3903;"	d	file:
SQLITE_INTEGER	sqlite3.h	3779;"	d
SQLITE_INTEGRITY_CHECK_ERROR_MAX	sqlite3.c	102579;"	d	file:
SQLITE_INTERNAL	sqlite3.c	525;"	d	file:
SQLITE_INTERNAL	sqlite3.h	401;"	d
SQLITE_INTERRUPT	sqlite3.c	532;"	d	file:
SQLITE_INTERRUPT	sqlite3.h	408;"	d
SQLITE_INT_TO_PTR	sqlite3.c	7930;"	d	file:
SQLITE_INT_TO_PTR	sqlite3.c	7933;"	d	file:
SQLITE_INT_TO_PTR	sqlite3.c	7936;"	d	file:
SQLITE_INT_TO_PTR	sqlite3.c	7939;"	d	file:
SQLITE_IOCAP_ATOMIC	sqlite3.c	684;"	d	file:
SQLITE_IOCAP_ATOMIC	sqlite3.h	560;"	d
SQLITE_IOCAP_ATOMIC16K	sqlite3.c	690;"	d	file:
SQLITE_IOCAP_ATOMIC16K	sqlite3.h	566;"	d
SQLITE_IOCAP_ATOMIC1K	sqlite3.c	686;"	d	file:
SQLITE_IOCAP_ATOMIC1K	sqlite3.h	562;"	d
SQLITE_IOCAP_ATOMIC2K	sqlite3.c	687;"	d	file:
SQLITE_IOCAP_ATOMIC2K	sqlite3.h	563;"	d
SQLITE_IOCAP_ATOMIC32K	sqlite3.c	691;"	d	file:
SQLITE_IOCAP_ATOMIC32K	sqlite3.h	567;"	d
SQLITE_IOCAP_ATOMIC4K	sqlite3.c	688;"	d	file:
SQLITE_IOCAP_ATOMIC4K	sqlite3.h	564;"	d
SQLITE_IOCAP_ATOMIC512	sqlite3.c	685;"	d	file:
SQLITE_IOCAP_ATOMIC512	sqlite3.h	561;"	d
SQLITE_IOCAP_ATOMIC64K	sqlite3.c	692;"	d	file:
SQLITE_IOCAP_ATOMIC64K	sqlite3.h	568;"	d
SQLITE_IOCAP_ATOMIC8K	sqlite3.c	689;"	d	file:
SQLITE_IOCAP_ATOMIC8K	sqlite3.h	565;"	d
SQLITE_IOCAP_IMMUTABLE	sqlite3.c	697;"	d	file:
SQLITE_IOCAP_IMMUTABLE	sqlite3.h	573;"	d
SQLITE_IOCAP_POWERSAFE_OVERWRITE	sqlite3.c	696;"	d	file:
SQLITE_IOCAP_POWERSAFE_OVERWRITE	sqlite3.h	572;"	d
SQLITE_IOCAP_SAFE_APPEND	sqlite3.c	693;"	d	file:
SQLITE_IOCAP_SAFE_APPEND	sqlite3.h	569;"	d
SQLITE_IOCAP_SEQUENTIAL	sqlite3.c	694;"	d	file:
SQLITE_IOCAP_SEQUENTIAL	sqlite3.h	570;"	d
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	sqlite3.c	695;"	d	file:
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	sqlite3.h	571;"	d
SQLITE_IOERR	sqlite3.c	533;"	d	file:
SQLITE_IOERR	sqlite3.h	409;"	d
SQLITE_IOERR_ACCESS	sqlite3.c	584;"	d	file:
SQLITE_IOERR_ACCESS	sqlite3.h	460;"	d
SQLITE_IOERR_BLOCKED	sqlite3.c	582;"	d	file:
SQLITE_IOERR_BLOCKED	sqlite3.h	458;"	d
SQLITE_IOERR_CHECKRESERVEDLOCK	sqlite3.c	585;"	d	file:
SQLITE_IOERR_CHECKRESERVEDLOCK	sqlite3.h	461;"	d
SQLITE_IOERR_CLOSE	sqlite3.c	587;"	d	file:
SQLITE_IOERR_CLOSE	sqlite3.h	463;"	d
SQLITE_IOERR_CONVPATH	sqlite3.c	597;"	d	file:
SQLITE_IOERR_CONVPATH	sqlite3.h	473;"	d
SQLITE_IOERR_DELETE	sqlite3.c	581;"	d	file:
SQLITE_IOERR_DELETE	sqlite3.h	457;"	d
SQLITE_IOERR_DELETE_NOENT	sqlite3.c	594;"	d	file:
SQLITE_IOERR_DELETE_NOENT	sqlite3.h	470;"	d
SQLITE_IOERR_DIR_CLOSE	sqlite3.c	588;"	d	file:
SQLITE_IOERR_DIR_CLOSE	sqlite3.h	464;"	d
SQLITE_IOERR_DIR_FSYNC	sqlite3.c	576;"	d	file:
SQLITE_IOERR_DIR_FSYNC	sqlite3.h	452;"	d
SQLITE_IOERR_FSTAT	sqlite3.c	578;"	d	file:
SQLITE_IOERR_FSTAT	sqlite3.h	454;"	d
SQLITE_IOERR_FSYNC	sqlite3.c	575;"	d	file:
SQLITE_IOERR_FSYNC	sqlite3.h	451;"	d
SQLITE_IOERR_GETTEMPPATH	sqlite3.c	596;"	d	file:
SQLITE_IOERR_GETTEMPPATH	sqlite3.h	472;"	d
SQLITE_IOERR_LOCK	sqlite3.c	586;"	d	file:
SQLITE_IOERR_LOCK	sqlite3.h	462;"	d
SQLITE_IOERR_MMAP	sqlite3.c	595;"	d	file:
SQLITE_IOERR_MMAP	sqlite3.h	471;"	d
SQLITE_IOERR_NOMEM	sqlite3.c	583;"	d	file:
SQLITE_IOERR_NOMEM	sqlite3.h	459;"	d
SQLITE_IOERR_RDLOCK	sqlite3.c	580;"	d	file:
SQLITE_IOERR_RDLOCK	sqlite3.h	456;"	d
SQLITE_IOERR_READ	sqlite3.c	572;"	d	file:
SQLITE_IOERR_READ	sqlite3.h	448;"	d
SQLITE_IOERR_SEEK	sqlite3.c	593;"	d	file:
SQLITE_IOERR_SEEK	sqlite3.h	469;"	d
SQLITE_IOERR_SHMLOCK	sqlite3.c	591;"	d	file:
SQLITE_IOERR_SHMLOCK	sqlite3.h	467;"	d
SQLITE_IOERR_SHMMAP	sqlite3.c	592;"	d	file:
SQLITE_IOERR_SHMMAP	sqlite3.h	468;"	d
SQLITE_IOERR_SHMOPEN	sqlite3.c	589;"	d	file:
SQLITE_IOERR_SHMOPEN	sqlite3.h	465;"	d
SQLITE_IOERR_SHMSIZE	sqlite3.c	590;"	d	file:
SQLITE_IOERR_SHMSIZE	sqlite3.h	466;"	d
SQLITE_IOERR_SHORT_READ	sqlite3.c	573;"	d	file:
SQLITE_IOERR_SHORT_READ	sqlite3.h	449;"	d
SQLITE_IOERR_TRUNCATE	sqlite3.c	577;"	d	file:
SQLITE_IOERR_TRUNCATE	sqlite3.h	453;"	d
SQLITE_IOERR_UNLOCK	sqlite3.c	579;"	d	file:
SQLITE_IOERR_UNLOCK	sqlite3.h	455;"	d
SQLITE_IOERR_WRITE	sqlite3.c	574;"	d	file:
SQLITE_IOERR_WRITE	sqlite3.h	450;"	d
SQLITE_IgnoreChecks	sqlite3.c	10708;"	d	file:
SQLITE_InternChanges	sqlite3.c	10693;"	d	file:
SQLITE_JUMPIFNULL	sqlite3.c	10994;"	d	file:
SQLITE_LAST_ERRNO	sqlite3.c	1078;"	d	file:
SQLITE_LAST_ERRNO	sqlite3.h	954;"	d
SQLITE_LIMIT_ATTACHED	sqlite3.c	3239;"	d	file:
SQLITE_LIMIT_ATTACHED	sqlite3.h	3115;"	d
SQLITE_LIMIT_COLUMN	sqlite3.c	3234;"	d	file:
SQLITE_LIMIT_COLUMN	sqlite3.h	3110;"	d
SQLITE_LIMIT_COMPOUND_SELECT	sqlite3.c	3236;"	d	file:
SQLITE_LIMIT_COMPOUND_SELECT	sqlite3.h	3112;"	d
SQLITE_LIMIT_EXPR_DEPTH	sqlite3.c	3235;"	d	file:
SQLITE_LIMIT_EXPR_DEPTH	sqlite3.h	3111;"	d
SQLITE_LIMIT_FUNCTION_ARG	sqlite3.c	3238;"	d	file:
SQLITE_LIMIT_FUNCTION_ARG	sqlite3.h	3114;"	d
SQLITE_LIMIT_LENGTH	sqlite3.c	3232;"	d	file:
SQLITE_LIMIT_LENGTH	sqlite3.h	3108;"	d
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	sqlite3.c	3240;"	d	file:
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	sqlite3.h	3116;"	d
SQLITE_LIMIT_SQL_LENGTH	sqlite3.c	3233;"	d	file:
SQLITE_LIMIT_SQL_LENGTH	sqlite3.h	3109;"	d
SQLITE_LIMIT_TRIGGER_DEPTH	sqlite3.c	3242;"	d	file:
SQLITE_LIMIT_TRIGGER_DEPTH	sqlite3.h	3118;"	d
SQLITE_LIMIT_VARIABLE_NUMBER	sqlite3.c	3241;"	d	file:
SQLITE_LIMIT_VARIABLE_NUMBER	sqlite3.h	3117;"	d
SQLITE_LIMIT_VDBE_OP	sqlite3.c	3237;"	d	file:
SQLITE_LIMIT_VDBE_OP	sqlite3.h	3113;"	d
SQLITE_LIMIT_WORKER_THREADS	sqlite3.c	3243;"	d	file:
SQLITE_LIMIT_WORKER_THREADS	sqlite3.h	3119;"	d
SQLITE_LITTLEENDIAN	sqlite3.c	8655;"	d	file:
SQLITE_LITTLEENDIAN	sqlite3.c	8662;"	d	file:
SQLITE_LITTLEENDIAN	sqlite3.c	8668;"	d	file:
SQLITE_LOCKED	sqlite3.c	529;"	d	file:
SQLITE_LOCKED	sqlite3.h	405;"	d
SQLITE_LOCKED_SHAREDCACHE	sqlite3.c	598;"	d	file:
SQLITE_LOCKED_SHAREDCACHE	sqlite3.h	474;"	d
SQLITE_LOCKFILEEX_FLAGS	sqlite3.c	35386;"	d	file:
SQLITE_LOCKFILE_FLAGS	sqlite3.c	35377;"	d	file:
SQLITE_LOCK_EXCLUSIVE	sqlite3.c	710;"	d	file:
SQLITE_LOCK_EXCLUSIVE	sqlite3.h	586;"	d
SQLITE_LOCK_NONE	sqlite3.c	706;"	d	file:
SQLITE_LOCK_NONE	sqlite3.h	582;"	d
SQLITE_LOCK_PENDING	sqlite3.c	709;"	d	file:
SQLITE_LOCK_PENDING	sqlite3.h	585;"	d
SQLITE_LOCK_RESERVED	sqlite3.c	708;"	d	file:
SQLITE_LOCK_RESERVED	sqlite3.h	584;"	d
SQLITE_LOCK_SHARED	sqlite3.c	707;"	d	file:
SQLITE_LOCK_SHARED	sqlite3.h	583;"	d
SQLITE_LegacyFileFmt	sqlite3.c	10710;"	d	file:
SQLITE_LoadExtension	sqlite3.c	10717;"	d	file:
SQLITE_MAGIC_BUSY	sqlite3.c	10768;"	d	file:
SQLITE_MAGIC_CLOSED	sqlite3.c	10766;"	d	file:
SQLITE_MAGIC_ERROR	sqlite3.c	10769;"	d	file:
SQLITE_MAGIC_OPEN	sqlite3.c	10765;"	d	file:
SQLITE_MAGIC_SICK	sqlite3.c	10767;"	d	file:
SQLITE_MAGIC_ZOMBIE	sqlite3.c	10770;"	d	file:
SQLITE_MALLOC	sqlite3.c	16503;"	d	file:
SQLITE_MALLOC	sqlite3.c	16515;"	d	file:
SQLITE_MALLOCSIZE	sqlite3.c	16506;"	d	file:
SQLITE_MALLOCSIZE	sqlite3.c	16548;"	d	file:
SQLITE_MALLOCSIZE	sqlite3.c	16552;"	d	file:
SQLITE_MALLOC_SOFT_LIMIT	sqlite3.c	8030;"	d	file:
SQLITE_MAX_ATTACHED	sqlite3.c	7806;"	d	file:
SQLITE_MAX_COLUMN	sqlite3.c	7726;"	d	file:
SQLITE_MAX_COMPOUND_SELECT	sqlite3.c	7763;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	sqlite3.c	7853;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	sqlite3.c	7856;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	sqlite3.c	7857;"	d	file:
SQLITE_MAX_EXPR_DEPTH	sqlite3.c	7751;"	d	file:
SQLITE_MAX_FILE_FORMAT	sqlite3.c	8465;"	d	file:
SQLITE_MAX_FUNCTION_ARG	sqlite3.c	7778;"	d	file:
SQLITE_MAX_LENGTH	sqlite3.c	7705;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	sqlite3.c	150991;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	sqlite3.c	7877;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite3.c	8710;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite3.c	8711;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite3.c	8720;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite3.c	8721;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite3.c	8729;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite3.c	8731;"	d	file:
SQLITE_MAX_MMAP_SIZE_xc	sqlite3.c	8733;"	d	file:
SQLITE_MAX_PAGE_COUNT	sqlite3.c	7869;"	d	file:
SQLITE_MAX_PAGE_SIZE	sqlite3.c	7829;"	d	file:
SQLITE_MAX_PAGE_SIZE	sqlite3.c	7831;"	d	file:
SQLITE_MAX_SCHEMA_RETRY	sqlite3.c	14050;"	d	file:
SQLITE_MAX_SQL_LENGTH	sqlite3.c	7737;"	d	file:
SQLITE_MAX_TRIGGER_DEPTH	sqlite3.c	7888;"	d	file:
SQLITE_MAX_U32	sqlite3.c	8596;"	d	file:
SQLITE_MAX_VARIABLE_NUMBER	sqlite3.c	7814;"	d	file:
SQLITE_MAX_VDBE_OP	sqlite3.c	7771;"	d	file:
SQLITE_MAX_WORKER_THREADS	sqlite3.c	8493;"	d	file:
SQLITE_MAX_WORKER_THREADS	sqlite3.c	8494;"	d	file:
SQLITE_MAX_WORKER_THREADS	sqlite3.c	8497;"	d	file:
SQLITE_MAX_WORKER_THREADS	sqlite3.c	8503;"	d	file:
SQLITE_MAX_WORKER_THREADS	sqlite3.c	8504;"	d	file:
SQLITE_MINIMUM_FILE_DESCRIPTOR	sqlite3.c	25362;"	d	file:
SQLITE_MISMATCH	sqlite3.c	543;"	d	file:
SQLITE_MISMATCH	sqlite3.h	419;"	d
SQLITE_MISUSE	sqlite3.c	544;"	d	file:
SQLITE_MISUSE	sqlite3.h	420;"	d
SQLITE_MISUSE_BKPT	sqlite3.c	12488;"	d	file:
SQLITE_MIXED_ENDIAN_64BIT_FLOAT	sqlite3.c	8441;"	d	file:
SQLITE_MUTEX_FAST	sqlite3.c	6231;"	d	file:
SQLITE_MUTEX_FAST	sqlite3.h	6107;"	d
SQLITE_MUTEX_NOOP	sqlite3.c	10384;"	d	file:
SQLITE_MUTEX_NREF	sqlite3.c	18931;"	d	file:
SQLITE_MUTEX_NREF	sqlite3.c	18933;"	d	file:
SQLITE_MUTEX_OMIT	sqlite3.c	10376;"	d	file:
SQLITE_MUTEX_PTHREADS	sqlite3.c	10380;"	d	file:
SQLITE_MUTEX_RECURSIVE	sqlite3.c	6232;"	d	file:
SQLITE_MUTEX_RECURSIVE	sqlite3.h	6108;"	d
SQLITE_MUTEX_STATIC_APP1	sqlite3.c	6241;"	d	file:
SQLITE_MUTEX_STATIC_APP1	sqlite3.h	6117;"	d
SQLITE_MUTEX_STATIC_APP2	sqlite3.c	6242;"	d	file:
SQLITE_MUTEX_STATIC_APP2	sqlite3.h	6118;"	d
SQLITE_MUTEX_STATIC_APP3	sqlite3.c	6243;"	d	file:
SQLITE_MUTEX_STATIC_APP3	sqlite3.h	6119;"	d
SQLITE_MUTEX_STATIC_LRU	sqlite3.c	6238;"	d	file:
SQLITE_MUTEX_STATIC_LRU	sqlite3.h	6114;"	d
SQLITE_MUTEX_STATIC_LRU2	sqlite3.c	6239;"	d	file:
SQLITE_MUTEX_STATIC_LRU2	sqlite3.h	6115;"	d
SQLITE_MUTEX_STATIC_MASTER	sqlite3.c	6233;"	d	file:
SQLITE_MUTEX_STATIC_MASTER	sqlite3.h	6109;"	d
SQLITE_MUTEX_STATIC_MEM	sqlite3.c	6234;"	d	file:
SQLITE_MUTEX_STATIC_MEM	sqlite3.h	6110;"	d
SQLITE_MUTEX_STATIC_MEM2	sqlite3.c	6235;"	d	file:
SQLITE_MUTEX_STATIC_MEM2	sqlite3.h	6111;"	d
SQLITE_MUTEX_STATIC_OPEN	sqlite3.c	6236;"	d	file:
SQLITE_MUTEX_STATIC_OPEN	sqlite3.h	6112;"	d
SQLITE_MUTEX_STATIC_PMEM	sqlite3.c	6240;"	d	file:
SQLITE_MUTEX_STATIC_PMEM	sqlite3.h	6116;"	d
SQLITE_MUTEX_STATIC_PRNG	sqlite3.c	6237;"	d	file:
SQLITE_MUTEX_STATIC_PRNG	sqlite3.h	6113;"	d
SQLITE_MUTEX_W32	sqlite3.c	10382;"	d	file:
SQLITE_NOINLINE	sqlite3.c	7948;"	d	file:
SQLITE_NOINLINE	sqlite3.c	7950;"	d	file:
SQLITE_NOINLINE	sqlite3.c	7952;"	d	file:
SQLITE_NOLFS	sqlite3.c	545;"	d	file:
SQLITE_NOLFS	sqlite3.h	421;"	d
SQLITE_NOMEM	sqlite3.c	530;"	d	file:
SQLITE_NOMEM	sqlite3.h	406;"	d
SQLITE_NOTADB	sqlite3.c	549;"	d	file:
SQLITE_NOTADB	sqlite3.h	425;"	d
SQLITE_NOTFOUND	sqlite3.c	535;"	d	file:
SQLITE_NOTFOUND	sqlite3.h	411;"	d
SQLITE_NOTICE	sqlite3.c	550;"	d	file:
SQLITE_NOTICE	sqlite3.h	426;"	d
SQLITE_NOTICE_RECOVER_ROLLBACK	sqlite3.c	622;"	d	file:
SQLITE_NOTICE_RECOVER_ROLLBACK	sqlite3.h	498;"	d
SQLITE_NOTICE_RECOVER_WAL	sqlite3.c	621;"	d	file:
SQLITE_NOTICE_RECOVER_WAL	sqlite3.h	497;"	d
SQLITE_NOTNULL	sqlite3.c	10997;"	d	file:
SQLITE_NULL	sqlite3.c	3906;"	d	file:
SQLITE_NULL	sqlite3.h	3782;"	d
SQLITE_NULLEQ	sqlite3.c	10996;"	d	file:
SQLITE_N_BTREE_META	sqlite3.c	8952;"	d	file:
SQLITE_N_COLCACHE	sqlite3.c	11996;"	d	file:
SQLITE_N_KEYWORD	sqlite3.c	124129;"	d	file:
SQLITE_N_LIMIT	sqlite3.c	10483;"	d	file:
SQLITE_NullCallback	sqlite3.c	10702;"	d	file:
SQLITE_OK	sqlite3.c	522;"	d	file:
SQLITE_OK	sqlite3.h	398;"	d
SQLITE_OMIT_DATETIME_FUNCS	sqlite3.c	8439;"	d	file:
SQLITE_OMIT_TRACE	sqlite3.c	8440;"	d	file:
SQLITE_OPEN_AUTOPROXY	sqlite3.c	638;"	d	file:
SQLITE_OPEN_AUTOPROXY	sqlite3.h	514;"	d
SQLITE_OPEN_CREATE	sqlite3.c	635;"	d	file:
SQLITE_OPEN_CREATE	sqlite3.h	511;"	d
SQLITE_OPEN_DELETEONCLOSE	sqlite3.c	636;"	d	file:
SQLITE_OPEN_DELETEONCLOSE	sqlite3.h	512;"	d
SQLITE_OPEN_EXCLUSIVE	sqlite3.c	637;"	d	file:
SQLITE_OPEN_EXCLUSIVE	sqlite3.h	513;"	d
SQLITE_OPEN_FULLMUTEX	sqlite3.c	649;"	d	file:
SQLITE_OPEN_FULLMUTEX	sqlite3.h	525;"	d
SQLITE_OPEN_MAIN_DB	sqlite3.c	641;"	d	file:
SQLITE_OPEN_MAIN_DB	sqlite3.h	517;"	d
SQLITE_OPEN_MAIN_JOURNAL	sqlite3.c	644;"	d	file:
SQLITE_OPEN_MAIN_JOURNAL	sqlite3.h	520;"	d
SQLITE_OPEN_MASTER_JOURNAL	sqlite3.c	647;"	d	file:
SQLITE_OPEN_MASTER_JOURNAL	sqlite3.h	523;"	d
SQLITE_OPEN_MEMORY	sqlite3.c	640;"	d	file:
SQLITE_OPEN_MEMORY	sqlite3.h	516;"	d
SQLITE_OPEN_NOMUTEX	sqlite3.c	648;"	d	file:
SQLITE_OPEN_NOMUTEX	sqlite3.h	524;"	d
SQLITE_OPEN_PRIVATECACHE	sqlite3.c	651;"	d	file:
SQLITE_OPEN_PRIVATECACHE	sqlite3.h	527;"	d
SQLITE_OPEN_READONLY	sqlite3.c	633;"	d	file:
SQLITE_OPEN_READONLY	sqlite3.h	509;"	d
SQLITE_OPEN_READWRITE	sqlite3.c	634;"	d	file:
SQLITE_OPEN_READWRITE	sqlite3.h	510;"	d
SQLITE_OPEN_SHAREDCACHE	sqlite3.c	650;"	d	file:
SQLITE_OPEN_SHAREDCACHE	sqlite3.h	526;"	d
SQLITE_OPEN_SUBJOURNAL	sqlite3.c	646;"	d	file:
SQLITE_OPEN_SUBJOURNAL	sqlite3.h	522;"	d
SQLITE_OPEN_TEMP_DB	sqlite3.c	642;"	d	file:
SQLITE_OPEN_TEMP_DB	sqlite3.h	518;"	d
SQLITE_OPEN_TEMP_JOURNAL	sqlite3.c	645;"	d	file:
SQLITE_OPEN_TEMP_JOURNAL	sqlite3.h	521;"	d
SQLITE_OPEN_TRANSIENT_DB	sqlite3.c	643;"	d	file:
SQLITE_OPEN_TRANSIENT_DB	sqlite3.h	519;"	d
SQLITE_OPEN_URI	sqlite3.c	639;"	d	file:
SQLITE_OPEN_URI	sqlite3.h	515;"	d
SQLITE_OPEN_WAL	sqlite3.c	652;"	d	file:
SQLITE_OPEN_WAL	sqlite3.h	528;"	d
SQLITE_OS_OTHER	sqlite3.c	10122;"	d	file:
SQLITE_OS_OTHER	sqlite3.c	10126;"	d	file:
SQLITE_OS_UNIX	sqlite3.c	10117;"	d	file:
SQLITE_OS_UNIX	sqlite3.c	10118;"	d	file:
SQLITE_OS_UNIX	sqlite3.c	10131;"	d	file:
SQLITE_OS_UNIX	sqlite3.c	10134;"	d	file:
SQLITE_OS_UNIX	sqlite3.c	10137;"	d	file:
SQLITE_OS_WIN	sqlite3.c	10119;"	d	file:
SQLITE_OS_WIN	sqlite3.c	10120;"	d	file:
SQLITE_OS_WIN	sqlite3.c	10130;"	d	file:
SQLITE_OS_WIN	sqlite3.c	10133;"	d	file:
SQLITE_OS_WIN	sqlite3.c	10141;"	d	file:
SQLITE_OS_WINCE	sqlite3.c	19545;"	d	file:
SQLITE_OS_WINCE	sqlite3.c	19547;"	d	file:
SQLITE_OS_WINNT	sqlite3.c	19537;"	d	file:
SQLITE_OS_WINRT	sqlite3.c	19555;"	d	file:
SQLITE_OmitNoopJoin	sqlite3.c	10739;"	d	file:
SQLITE_OrderByIdxJoin	sqlite3.c	10736;"	d	file:
SQLITE_PERM	sqlite3.c	526;"	d	file:
SQLITE_PERM	sqlite3.h	402;"	d
SQLITE_POWERSAFE_OVERWRITE	sqlite3.c	7979;"	d	file:
SQLITE_PRAGMA	sqlite3.c	2698;"	d	file:
SQLITE_PRAGMA	sqlite3.h	2574;"	d
SQLITE_PRINTF_INTERNAL	sqlite3.c	12617;"	d	file:
SQLITE_PRINTF_SQLFUNC	sqlite3.c	12618;"	d	file:
SQLITE_PRINT_BUF_SIZE	sqlite3.c	20914;"	d	file:
SQLITE_PRIVATE	sqlite3.c	23;"	d	file:
SQLITE_PROTOCOL	sqlite3.c	538;"	d	file:
SQLITE_PROTOCOL	sqlite3.h	414;"	d
SQLITE_PTR_TO_INT	sqlite3.c	7931;"	d	file:
SQLITE_PTR_TO_INT	sqlite3.c	7934;"	d	file:
SQLITE_PTR_TO_INT	sqlite3.c	7937;"	d	file:
SQLITE_PTR_TO_INT	sqlite3.c	7940;"	d	file:
SQLITE_PreferBuiltin	sqlite3.c	10716;"	d	file:
SQLITE_QueryFlattener	sqlite3.c	10729;"	d	file:
SQLITE_QueryOnly	sqlite3.c	10720;"	d	file:
SQLITE_RANGE	sqlite3.c	548;"	d	file:
SQLITE_RANGE	sqlite3.h	424;"	d
SQLITE_READ	sqlite3.c	2699;"	d	file:
SQLITE_READ	sqlite3.h	2575;"	d
SQLITE_READONLY	sqlite3.c	531;"	d	file:
SQLITE_READONLY	sqlite3.h	407;"	d
SQLITE_READONLY_CANTLOCK	sqlite3.c	607;"	d	file:
SQLITE_READONLY_CANTLOCK	sqlite3.h	483;"	d
SQLITE_READONLY_DBMOVED	sqlite3.c	609;"	d	file:
SQLITE_READONLY_DBMOVED	sqlite3.h	485;"	d
SQLITE_READONLY_RECOVERY	sqlite3.c	606;"	d	file:
SQLITE_READONLY_RECOVERY	sqlite3.h	482;"	d
SQLITE_READONLY_ROLLBACK	sqlite3.c	608;"	d	file:
SQLITE_READONLY_ROLLBACK	sqlite3.h	484;"	d
SQLITE_REALLOC	sqlite3.c	16505;"	d	file:
SQLITE_REALLOC	sqlite3.c	16517;"	d	file:
SQLITE_RECURSIVE	sqlite3.c	2713;"	d	file:
SQLITE_RECURSIVE	sqlite3.h	2589;"	d
SQLITE_REINDEX	sqlite3.c	2706;"	d	file:
SQLITE_REINDEX	sqlite3.h	2582;"	d
SQLITE_REPLACE	sqlite3.c	7536;"	d	file:
SQLITE_REPLACE	sqlite3.h	7412;"	d
SQLITE_ROLLBACK	sqlite3.c	7532;"	d	file:
SQLITE_ROLLBACK	sqlite3.h	7408;"	d
SQLITE_ROW	sqlite3.c	552;"	d	file:
SQLITE_ROW	sqlite3.h	428;"	d
SQLITE_ReadUncommitted	sqlite3.c	10709;"	d	file:
SQLITE_RecTriggers	sqlite3.c	10713;"	d	file:
SQLITE_RecoveryMode	sqlite3.c	10711;"	d	file:
SQLITE_ReverseOrder	sqlite3.c	10712;"	d	file:
SQLITE_SAVEPOINT	sqlite3.c	2711;"	d	file:
SQLITE_SAVEPOINT	sqlite3.h	2587;"	d
SQLITE_SCHEMA	sqlite3.c	540;"	d	file:
SQLITE_SCHEMA	sqlite3.h	416;"	d
SQLITE_SELECT	sqlite3.c	2700;"	d	file:
SQLITE_SELECT	sqlite3.h	2576;"	d
SQLITE_SET_LOCKPROXYFILE	sqlite3.c	1077;"	d	file:
SQLITE_SET_LOCKPROXYFILE	sqlite3.h	953;"	d
SQLITE_SHM_EXCLUSIVE	sqlite3.c	1357;"	d	file:
SQLITE_SHM_EXCLUSIVE	sqlite3.h	1233;"	d
SQLITE_SHM_LOCK	sqlite3.c	1355;"	d	file:
SQLITE_SHM_LOCK	sqlite3.h	1231;"	d
SQLITE_SHM_NLOCK	sqlite3.c	1367;"	d	file:
SQLITE_SHM_NLOCK	sqlite3.h	1243;"	d
SQLITE_SHM_SHARED	sqlite3.c	1356;"	d	file:
SQLITE_SHM_SHARED	sqlite3.h	1232;"	d
SQLITE_SHM_UNLOCK	sqlite3.c	1354;"	d	file:
SQLITE_SHM_UNLOCK	sqlite3.h	1230;"	d
SQLITE_SKIP_UTF8	sqlite3.c	12471;"	d	file:
SQLITE_SOURCE_ID	sqlite3.c	236;"	d	file:
SQLITE_SOURCE_ID	sqlite3.h	112;"	d
SQLITE_SO_ASC	sqlite3.c	10954;"	d	file:
SQLITE_SO_DESC	sqlite3.c	10955;"	d	file:
SQLITE_STAT4_SAMPLES	sqlite3.c	85984;"	d	file:
SQLITE_STAT4_SAMPLES	sqlite3.c	85985;"	d	file:
SQLITE_STAT4_SAMPLES	sqlite3.c	86087;"	d	file:
SQLITE_STATIC	sqlite3.c	4508;"	d	file:
SQLITE_STATIC	sqlite3.h	4384;"	d
SQLITE_STATUS_MALLOC_COUNT	sqlite3.c	6466;"	d	file:
SQLITE_STATUS_MALLOC_COUNT	sqlite3.h	6342;"	d
SQLITE_STATUS_MALLOC_SIZE	sqlite3.c	6462;"	d	file:
SQLITE_STATUS_MALLOC_SIZE	sqlite3.h	6338;"	d
SQLITE_STATUS_MEMORY_USED	sqlite3.c	6457;"	d	file:
SQLITE_STATUS_MEMORY_USED	sqlite3.h	6333;"	d
SQLITE_STATUS_PAGECACHE_OVERFLOW	sqlite3.c	6459;"	d	file:
SQLITE_STATUS_PAGECACHE_OVERFLOW	sqlite3.h	6335;"	d
SQLITE_STATUS_PAGECACHE_SIZE	sqlite3.c	6464;"	d	file:
SQLITE_STATUS_PAGECACHE_SIZE	sqlite3.h	6340;"	d
SQLITE_STATUS_PAGECACHE_USED	sqlite3.c	6458;"	d	file:
SQLITE_STATUS_PAGECACHE_USED	sqlite3.h	6334;"	d
SQLITE_STATUS_PARSER_STACK	sqlite3.c	6463;"	d	file:
SQLITE_STATUS_PARSER_STACK	sqlite3.h	6339;"	d
SQLITE_STATUS_SCRATCH_OVERFLOW	sqlite3.c	6461;"	d	file:
SQLITE_STATUS_SCRATCH_OVERFLOW	sqlite3.h	6337;"	d
SQLITE_STATUS_SCRATCH_SIZE	sqlite3.c	6465;"	d	file:
SQLITE_STATUS_SCRATCH_SIZE	sqlite3.h	6341;"	d
SQLITE_STATUS_SCRATCH_USED	sqlite3.c	6460;"	d	file:
SQLITE_STATUS_SCRATCH_USED	sqlite3.h	6336;"	d
SQLITE_STMTSTATUS_AUTOINDEX	sqlite3.c	6660;"	d	file:
SQLITE_STMTSTATUS_AUTOINDEX	sqlite3.h	6536;"	d
SQLITE_STMTSTATUS_FULLSCAN_STEP	sqlite3.c	6658;"	d	file:
SQLITE_STMTSTATUS_FULLSCAN_STEP	sqlite3.h	6534;"	d
SQLITE_STMTSTATUS_SORT	sqlite3.c	6659;"	d	file:
SQLITE_STMTSTATUS_SORT	sqlite3.h	6535;"	d
SQLITE_STMTSTATUS_VM_STEP	sqlite3.c	6661;"	d	file:
SQLITE_STMTSTATUS_VM_STEP	sqlite3.h	6537;"	d
SQLITE_STOREP2	sqlite3.c	10995;"	d	file:
SQLITE_SYNC_DATAONLY	sqlite3.c	740;"	d	file:
SQLITE_SYNC_DATAONLY	sqlite3.h	616;"	d
SQLITE_SYNC_FULL	sqlite3.c	739;"	d	file:
SQLITE_SYNC_FULL	sqlite3.h	615;"	d
SQLITE_SYNC_MASK	sqlite3.c	40776;"	d	file:
SQLITE_SYNC_NORMAL	sqlite3.c	738;"	d	file:
SQLITE_SYNC_NORMAL	sqlite3.h	614;"	d
SQLITE_SYSTEM_MALLOC	sqlite3.c	8022;"	d	file:
SQLITE_ShortColNames	sqlite3.c	10698;"	d	file:
SQLITE_SqlTrace	sqlite3.c	10704;"	d	file:
SQLITE_Stat3	sqlite3.c	10740;"	d	file:
SQLITE_SubqCoroutine	sqlite3.c	10737;"	d	file:
SQLITE_TEMP_FILE_PREFIX	sqlite3.c	10186;"	d	file:
SQLITE_TEMP_STORE	sqlite3.c	8483;"	d	file:
SQLITE_TEMP_STORE_xc	sqlite3.c	8484;"	d	file:
SQLITE_TESTCTRL_ALWAYS	sqlite3.c	6329;"	d	file:
SQLITE_TESTCTRL_ALWAYS	sqlite3.h	6205;"	d
SQLITE_TESTCTRL_ASSERT	sqlite3.c	6328;"	d	file:
SQLITE_TESTCTRL_ASSERT	sqlite3.h	6204;"	d
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	sqlite3.c	6326;"	d	file:
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	sqlite3.h	6202;"	d
SQLITE_TESTCTRL_BITVEC_TEST	sqlite3.c	6324;"	d	file:
SQLITE_TESTCTRL_BITVEC_TEST	sqlite3.h	6200;"	d
SQLITE_TESTCTRL_BYTEORDER	sqlite3.c	6338;"	d	file:
SQLITE_TESTCTRL_BYTEORDER	sqlite3.h	6214;"	d
SQLITE_TESTCTRL_EXPLAIN_STMT	sqlite3.c	6335;"	d	file:
SQLITE_TESTCTRL_EXPLAIN_STMT	sqlite3.h	6211;"	d
SQLITE_TESTCTRL_FAULT_INSTALL	sqlite3.c	6325;"	d	file:
SQLITE_TESTCTRL_FAULT_INSTALL	sqlite3.h	6201;"	d
SQLITE_TESTCTRL_FIRST	sqlite3.c	6320;"	d	file:
SQLITE_TESTCTRL_FIRST	sqlite3.h	6196;"	d
SQLITE_TESTCTRL_ISINIT	sqlite3.c	6339;"	d	file:
SQLITE_TESTCTRL_ISINIT	sqlite3.h	6215;"	d
SQLITE_TESTCTRL_ISKEYWORD	sqlite3.c	6332;"	d	file:
SQLITE_TESTCTRL_ISKEYWORD	sqlite3.h	6208;"	d
SQLITE_TESTCTRL_LAST	sqlite3.c	6341;"	d	file:
SQLITE_TESTCTRL_LAST	sqlite3.h	6217;"	d
SQLITE_TESTCTRL_LOCALTIME_FAULT	sqlite3.c	6334;"	d	file:
SQLITE_TESTCTRL_LOCALTIME_FAULT	sqlite3.h	6210;"	d
SQLITE_TESTCTRL_NEVER_CORRUPT	sqlite3.c	6336;"	d	file:
SQLITE_TESTCTRL_NEVER_CORRUPT	sqlite3.h	6212;"	d
SQLITE_TESTCTRL_OPTIMIZATIONS	sqlite3.c	6331;"	d	file:
SQLITE_TESTCTRL_OPTIMIZATIONS	sqlite3.h	6207;"	d
SQLITE_TESTCTRL_PENDING_BYTE	sqlite3.c	6327;"	d	file:
SQLITE_TESTCTRL_PENDING_BYTE	sqlite3.h	6203;"	d
SQLITE_TESTCTRL_PRNG_RESET	sqlite3.c	6323;"	d	file:
SQLITE_TESTCTRL_PRNG_RESET	sqlite3.h	6199;"	d
SQLITE_TESTCTRL_PRNG_RESTORE	sqlite3.c	6322;"	d	file:
SQLITE_TESTCTRL_PRNG_RESTORE	sqlite3.h	6198;"	d
SQLITE_TESTCTRL_PRNG_SAVE	sqlite3.c	6321;"	d	file:
SQLITE_TESTCTRL_PRNG_SAVE	sqlite3.h	6197;"	d
SQLITE_TESTCTRL_RESERVE	sqlite3.c	6330;"	d	file:
SQLITE_TESTCTRL_RESERVE	sqlite3.h	6206;"	d
SQLITE_TESTCTRL_SCRATCHMALLOC	sqlite3.c	6333;"	d	file:
SQLITE_TESTCTRL_SCRATCHMALLOC	sqlite3.h	6209;"	d
SQLITE_TESTCTRL_SORTER_MMAP	sqlite3.c	6340;"	d	file:
SQLITE_TESTCTRL_SORTER_MMAP	sqlite3.h	6216;"	d
SQLITE_TESTCTRL_VDBE_COVERAGE	sqlite3.c	6337;"	d	file:
SQLITE_TESTCTRL_VDBE_COVERAGE	sqlite3.h	6213;"	d
SQLITE_TEXT	sqlite3.c	3908;"	d	file:
SQLITE_TEXT	sqlite3.c	3910;"	d	file:
SQLITE_TEXT	sqlite3.h	3784;"	d
SQLITE_TEXT	sqlite3.h	3786;"	d
SQLITE_THREADSAFE	sqlite3.c	7968;"	d	file:
SQLITE_THREADSAFE	sqlite3.c	7970;"	d	file:
SQLITE_THREADS_IMPLEMENTED	sqlite3.c	22032;"	d	file:
SQLITE_THREADS_IMPLEMENTED	sqlite3.c	22100;"	d	file:
SQLITE_TOOBIG	sqlite3.c	541;"	d	file:
SQLITE_TOOBIG	sqlite3.h	417;"	d
SQLITE_TRANSACTION	sqlite3.c	2701;"	d	file:
SQLITE_TRANSACTION	sqlite3.h	2577;"	d
SQLITE_TRANSIENT	sqlite3.c	4509;"	d	file:
SQLITE_TRANSIENT	sqlite3.h	4385;"	d
SQLITE_Transitive	sqlite3.c	10738;"	d	file:
SQLITE_UNIX_THREADS	sqlite3.c	24729;"	d	file:
SQLITE_UPDATE	sqlite3.c	2702;"	d	file:
SQLITE_UPDATE	sqlite3.h	2578;"	d
SQLITE_USE_MALLOC_H	sqlite3.c	16524;"	d	file:
SQLITE_USE_MALLOC_H	sqlite3.c	16533;"	d	file:
SQLITE_USE_MALLOC_USABLE_SIZE	sqlite3.c	16525;"	d	file:
SQLITE_USE_MSIZE	sqlite3.c	16534;"	d	file:
SQLITE_USE_URI	sqlite3.c	13480;"	d	file:
SQLITE_UTF16	sqlite3.c	4278;"	d	file:
SQLITE_UTF16	sqlite3.h	4154;"	d
SQLITE_UTF16BE	sqlite3.c	4277;"	d	file:
SQLITE_UTF16BE	sqlite3.h	4153;"	d
SQLITE_UTF16LE	sqlite3.c	4276;"	d	file:
SQLITE_UTF16LE	sqlite3.h	4152;"	d
SQLITE_UTF16NATIVE	sqlite3.c	8656;"	d	file:
SQLITE_UTF16NATIVE	sqlite3.c	8663;"	d	file:
SQLITE_UTF16NATIVE	sqlite3.c	8669;"	d	file:
SQLITE_UTF16_ALIGNED	sqlite3.c	4280;"	d	file:
SQLITE_UTF16_ALIGNED	sqlite3.h	4156;"	d
SQLITE_UTF8	sqlite3.c	4275;"	d	file:
SQLITE_UTF8	sqlite3.h	4151;"	d
SQLITE_VERSION	sqlite3.c	201;"	d	file:
SQLITE_VERSION	sqlite3.c	234;"	d	file:
SQLITE_VERSION	sqlite3.h	110;"	d
SQLITE_VERSION	sqlite3.h	77;"	d
SQLITE_VERSION_NUMBER	sqlite3.c	204;"	d	file:
SQLITE_VERSION_NUMBER	sqlite3.c	235;"	d	file:
SQLITE_VERSION_NUMBER	sqlite3.h	111;"	d
SQLITE_VERSION_NUMBER	sqlite3.h	80;"	d
SQLITE_VTAB_CONSTRAINT_SUPPORT	sqlite3.c	7506;"	d	file:
SQLITE_VTAB_CONSTRAINT_SUPPORT	sqlite3.h	7382;"	d
SQLITE_VdbeAddopTrace	sqlite3.c	10707;"	d	file:
SQLITE_VdbeEQP	sqlite3.c	10721;"	d	file:
SQLITE_VdbeListing	sqlite3.c	10705;"	d	file:
SQLITE_VdbeTrace	sqlite3.c	10692;"	d	file:
SQLITE_W32_MUTEX_INITIALIZER	sqlite3.c	19598;"	d	file:
SQLITE_WARNING	sqlite3.c	551;"	d	file:
SQLITE_WARNING	sqlite3.h	427;"	d
SQLITE_WARNING_AUTOINDEX	sqlite3.c	623;"	d	file:
SQLITE_WARNING_AUTOINDEX	sqlite3.h	499;"	d
SQLITE_WIN32_DATA_DIRECTORY_TYPE	sqlite3.c	32835;"	d	file:
SQLITE_WIN32_DBG_BUF_SIZE	sqlite3.c	32827;"	d	file:
SQLITE_WIN32_GETVERSIONEX	sqlite3.c	32628;"	d	file:
SQLITE_WIN32_GETVERSIONEX	sqlite3.c	32630;"	d	file:
SQLITE_WIN32_HAS_ANSI	sqlite3.c	32590;"	d	file:
SQLITE_WIN32_HAS_WIDE	sqlite3.c	32599;"	d	file:
SQLITE_WIN32_HEAP_CREATE	sqlite3.c	32867;"	d	file:
SQLITE_WIN32_HEAP_FLAGS	sqlite3.c	32890;"	d	file:
SQLITE_WIN32_HEAP_INIT_SIZE	sqlite3.c	32874;"	d	file:
SQLITE_WIN32_HEAP_MAX_SIZE	sqlite3.c	32882;"	d	file:
SQLITE_WIN32_IOERR_RETRY	sqlite3.c	34425;"	d	file:
SQLITE_WIN32_IOERR_RETRY_DELAY	sqlite3.c	34428;"	d	file:
SQLITE_WIN32_MAX_ERRMSG_CHARS	sqlite3.c	32686;"	d	file:
SQLITE_WIN32_MAX_PATH_BYTES	sqlite3.c	32670;"	d	file:
SQLITE_WIN32_MAX_PATH_CHARS	sqlite3.c	32646;"	d	file:
SQLITE_WIN32_TEMP_DIRECTORY_TYPE	sqlite3.c	32843;"	d	file:
SQLITE_WIN32_VOLATILE	sqlite3.c	19563;"	d	file:
SQLITE_WIN32_VOLATILE	sqlite3.c	19565;"	d	file:
SQLITE_WINNT_MAX_PATH_BYTES	sqlite3.c	32678;"	d	file:
SQLITE_WINNT_MAX_PATH_CHARS	sqlite3.c	32661;"	d	file:
SQLITE_WSD	sqlite3.c	8844;"	d	file:
SQLITE_WSD	sqlite3.c	8850;"	d	file:
SQLITE_WriteSchema	sqlite3.c	10706;"	d	file:
SQL_CHOMP_SEGDIR	sqlite3.c	139790;"	d	file:
SQL_CONTENT_INSERT	sqlite3.c	139774;"	d	file:
SQL_DELETE_ALL_CONTENT	sqlite3.c	139758;"	d	file:
SQL_DELETE_ALL_DOCSIZE	sqlite3.c	139761;"	d	file:
SQL_DELETE_ALL_SEGDIR	sqlite3.c	139760;"	d	file:
SQL_DELETE_ALL_SEGMENTS	sqlite3.c	139759;"	d	file:
SQL_DELETE_ALL_STAT	sqlite3.c	139762;"	d	file:
SQL_DELETE_ALL_TERMS_SEGDIR	sqlite3.c	139782;"	d	file:
SQL_DELETE_CONTENT	sqlite3.c	139756;"	d	file:
SQL_DELETE_DOCSIZE	sqlite3.c	139775;"	d	file:
SQL_DELETE_SEGDIR_ENTRY	sqlite3.c	139787;"	d	file:
SQL_DELETE_SEGDIR_LEVEL	sqlite3.c	139772;"	d	file:
SQL_DELETE_SEGDIR_RANGE	sqlite3.c	139783;"	d	file:
SQL_DELETE_SEGMENTS_RANGE	sqlite3.c	139773;"	d	file:
SQL_FIND_MERGE_LEVEL	sqlite3.c	139785;"	d	file:
SQL_INSERT_SEGDIR	sqlite3.c	139767;"	d	file:
SQL_INSERT_SEGMENTS	sqlite3.c	139765;"	d	file:
SQL_IS_EMPTY	sqlite3.c	139757;"	d	file:
SQL_MAX_LEAF_NODE_ESTIMATE	sqlite3.c	139786;"	d	file:
SQL_NEXT_SEGMENTS_ID	sqlite3.c	139766;"	d	file:
SQL_NEXT_SEGMENT_INDEX	sqlite3.c	139764;"	d	file:
SQL_REPLACE_DOCSIZE	sqlite3.c	139776;"	d	file:
SQL_REPLACE_STAT	sqlite3.c	139779;"	d	file:
SQL_SEGMENT_IS_APPENDABLE	sqlite3.c	139791;"	d	file:
SQL_SELECT_ALL_LANGID	sqlite3.c	139784;"	d	file:
SQL_SELECT_ALL_PREFIX_LEVEL	sqlite3.c	139781;"	d	file:
SQL_SELECT_CONTENT_BY_ROWID	sqlite3.c	139763;"	d	file:
SQL_SELECT_DOCSIZE	sqlite3.c	139777;"	d	file:
SQL_SELECT_INDEXES	sqlite3.c	139792;"	d	file:
SQL_SELECT_LEVEL	sqlite3.c	139768;"	d	file:
SQL_SELECT_LEVEL_COUNT	sqlite3.c	139770;"	d	file:
SQL_SELECT_LEVEL_RANGE	sqlite3.c	139769;"	d	file:
SQL_SELECT_LEVEL_RANGE2	sqlite3.c	139795;"	d	file:
SQL_SELECT_MXLEVEL	sqlite3.c	139793;"	d	file:
SQL_SELECT_SEGDIR	sqlite3.c	139789;"	d	file:
SQL_SELECT_SEGDIR_MAX_LEVEL	sqlite3.c	139771;"	d	file:
SQL_SELECT_STAT	sqlite3.c	139778;"	d	file:
SQL_SHIFT_SEGDIR_ENTRY	sqlite3.c	139788;"	d	file:
SQL_UPDATE_LEVEL	sqlite3.c	139797;"	d	file:
SQL_UPDATE_LEVEL_IDX	sqlite3.c	139796;"	d	file:
SQLiteThread	sqlite3.c	/^struct SQLiteThread {$/;"	s	file:
SQLiteThread	sqlite3.c	/^typedef struct SQLiteThread SQLiteThread;$/;"	t	typeref:struct:SQLiteThread	file:
SQLiteThread::done	sqlite3.c	/^  int done;                      \/* Set to true when thread finishes *\/$/;"	m	struct:SQLiteThread	file:	access:public
SQLiteThread::id	sqlite3.c	/^  unsigned id;             \/* The thread identifier *\/$/;"	m	struct:SQLiteThread	file:	access:public
SQLiteThread::pIn	sqlite3.c	/^  void *pIn;                     \/* Argument to the thread *\/$/;"	m	struct:SQLiteThread	file:	access:public
SQLiteThread::pIn	sqlite3.c	/^  void *pIn;               \/* Argument to xTask *\/$/;"	m	struct:SQLiteThread	file:	access:public
SQLiteThread::pOut	sqlite3.c	/^  void *pOut;                    \/* Result returned by the thread *\/$/;"	m	struct:SQLiteThread	file:	access:public
SQLiteThread::pResult	sqlite3.c	/^  void *pResult;           \/* Result of xTask *\/$/;"	m	struct:SQLiteThread	file:	access:public
SQLiteThread::tid	sqlite3.c	/^  pthread_t tid;                 \/* Thread ID *\/$/;"	m	struct:SQLiteThread	file:	access:public
SQLiteThread::tid	sqlite3.c	/^  void *tid;               \/* The thread handle *\/$/;"	m	struct:SQLiteThread	file:	access:public
SQLiteThread::xTask	sqlite3.c	/^  void *(*xTask)(void*);         \/* The thread routine *\/$/;"	m	struct:SQLiteThread	file:	access:public
SQLiteThread::xTask	sqlite3.c	/^  void *(*xTask)(void*);   \/* The routine to run as a thread *\/$/;"	m	struct:SQLiteThread	file:	access:public
SRT_Coroutine	sqlite3.c	11960;"	d	file:
SRT_Discard	sqlite3.c	11947;"	d	file:
SRT_DistFifo	sqlite3.c	11949;"	d	file:
SRT_DistQueue	sqlite3.c	11951;"	d	file:
SRT_EphemTab	sqlite3.c	11959;"	d	file:
SRT_Except	sqlite3.c	11945;"	d	file:
SRT_Exists	sqlite3.c	11946;"	d	file:
SRT_Fifo	sqlite3.c	11948;"	d	file:
SRT_Mem	sqlite3.c	11957;"	d	file:
SRT_Output	sqlite3.c	11956;"	d	file:
SRT_Queue	sqlite3.c	11950;"	d	file:
SRT_Set	sqlite3.c	11958;"	d	file:
SRT_Table	sqlite3.c	11961;"	d	file:
SRT_Union	sqlite3.c	11944;"	d	file:
SRVAL	sqlite3.c	76432;"	d	file:
STAT_GET_NDLT	sqlite3.c	86624;"	d	file:
STAT_GET_NEQ	sqlite3.c	86622;"	d	file:
STAT_GET_NLT	sqlite3.c	86623;"	d	file:
STAT_GET_ROWID	sqlite3.c	86621;"	d	file:
STAT_GET_STAT1	sqlite3.c	86620;"	d	file:
STRACCUM_NOMEM	sqlite3.c	12318;"	d	file:
STRACCUM_TOOBIG	sqlite3.c	12319;"	d	file:
STRICMP	sqlite3.c	89606;"	d	file:
STR_FUNCTION	sqlite3.c	10866;"	d	file:
SWAP	sqlite3.c	8525;"	d	file:
SYSCALL	sqlite3.c	32967;"	d	file:
Savepoint	sqlite3.c	/^struct Savepoint {$/;"	s	file:
Savepoint	sqlite3.c	/^typedef struct Savepoint Savepoint;$/;"	t	typeref:struct:Savepoint	file:
Savepoint::nDeferredCons	sqlite3.c	/^  i64 nDeferredCons;                  \/* Number of deferred fk violations *\/$/;"	m	struct:Savepoint	file:	access:public
Savepoint::nDeferredImmCons	sqlite3.c	/^  i64 nDeferredImmCons;               \/* Number of deferred imm fk. *\/$/;"	m	struct:Savepoint	file:	access:public
Savepoint::pNext	sqlite3.c	/^  Savepoint *pNext;                   \/* Parent savepoint (if any) *\/$/;"	m	struct:Savepoint	file:	access:public
Savepoint::zName	sqlite3.c	/^  char *zName;                        \/* Savepoint name (nul-terminated) *\/$/;"	m	struct:Savepoint	file:	access:public
Schema	sqlite3.c	/^struct Schema {$/;"	s	file:
Schema	sqlite3.c	/^typedef struct Schema Schema;$/;"	t	typeref:struct:Schema	file:
Schema::cache_size	sqlite3.c	/^  int cache_size;      \/* Number of pages to use in the cache *\/$/;"	m	struct:Schema	file:	access:public
Schema::enc	sqlite3.c	/^  u8 enc;              \/* Text encoding used by this database *\/$/;"	m	struct:Schema	file:	access:public
Schema::file_format	sqlite3.c	/^  u8 file_format;      \/* Schema format version for this file *\/$/;"	m	struct:Schema	file:	access:public
Schema::fkeyHash	sqlite3.c	/^  Hash fkeyHash;       \/* All foreign keys by referenced table name *\/$/;"	m	struct:Schema	file:	access:public
Schema::iGeneration	sqlite3.c	/^  int iGeneration;     \/* Generation counter.  Incremented with each change *\/$/;"	m	struct:Schema	file:	access:public
Schema::idxHash	sqlite3.c	/^  Hash idxHash;        \/* All (named) indices indexed by name *\/$/;"	m	struct:Schema	file:	access:public
Schema::pSeqTab	sqlite3.c	/^  Table *pSeqTab;      \/* The sqlite_sequence table used by AUTOINCREMENT *\/$/;"	m	struct:Schema	file:	access:public
Schema::schemaFlags	sqlite3.c	/^  u16 schemaFlags;     \/* Flags associated with this schema *\/$/;"	m	struct:Schema	file:	access:public
Schema::schema_cookie	sqlite3.c	/^  int schema_cookie;   \/* Database schema version number for this file *\/$/;"	m	struct:Schema	file:	access:public
Schema::tblHash	sqlite3.c	/^  Hash tblHash;        \/* All tables indexed by name *\/$/;"	m	struct:Schema	file:	access:public
Schema::trigHash	sqlite3.c	/^  Hash trigHash;       \/* All triggers indexed by name *\/$/;"	m	struct:Schema	file:	access:public
ScratchFreeslot	sqlite3.c	/^typedef struct ScratchFreeslot {$/;"	s	file:
ScratchFreeslot	sqlite3.c	/^} ScratchFreeslot;$/;"	t	typeref:struct:ScratchFreeslot	file:
ScratchFreeslot::pNext	sqlite3.c	/^  struct ScratchFreeslot *pNext;   \/* Next unused scratch buffer *\/$/;"	m	struct:ScratchFreeslot	typeref:struct:ScratchFreeslot::ScratchFreeslot	file:	access:public
SegmentNode	sqlite3.c	/^struct SegmentNode {$/;"	s	file:
SegmentNode	sqlite3.c	/^typedef struct SegmentNode SegmentNode;$/;"	t	typeref:struct:SegmentNode	file:
SegmentNode::aData	sqlite3.c	/^  char *aData;                    \/* Node data *\/$/;"	m	struct:SegmentNode	file:	access:public
SegmentNode::nData	sqlite3.c	/^  int nData;                      \/* Bytes of valid data so far *\/$/;"	m	struct:SegmentNode	file:	access:public
SegmentNode::nEntry	sqlite3.c	/^  int nEntry;                     \/* Number of terms written to node so far *\/$/;"	m	struct:SegmentNode	file:	access:public
SegmentNode::nMalloc	sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentNode	file:	access:public
SegmentNode::nTerm	sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentNode	file:	access:public
SegmentNode::pLeftmost	sqlite3.c	/^  SegmentNode *pLeftmost;         \/* Pointer to left-most node of this depth *\/$/;"	m	struct:SegmentNode	file:	access:public
SegmentNode::pParent	sqlite3.c	/^  SegmentNode *pParent;           \/* Parent node (or NULL for root node) *\/$/;"	m	struct:SegmentNode	file:	access:public
SegmentNode::pRight	sqlite3.c	/^  SegmentNode *pRight;            \/* Pointer to right-sibling *\/$/;"	m	struct:SegmentNode	file:	access:public
SegmentNode::zMalloc	sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentNode	file:	access:public
SegmentNode::zTerm	sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentNode	file:	access:public
SegmentWriter	sqlite3.c	/^struct SegmentWriter {$/;"	s	file:
SegmentWriter	sqlite3.c	/^typedef struct SegmentWriter SegmentWriter;$/;"	t	typeref:struct:SegmentWriter	file:
SegmentWriter::aData	sqlite3.c	/^  char *aData;                    \/* Pointer to block from malloc() *\/$/;"	m	struct:SegmentWriter	file:	access:public
SegmentWriter::iFirst	sqlite3.c	/^  sqlite3_int64 iFirst;           \/* First slot in %_segments written *\/$/;"	m	struct:SegmentWriter	file:	access:public
SegmentWriter::iFree	sqlite3.c	/^  sqlite3_int64 iFree;            \/* Next free slot in %_segments *\/$/;"	m	struct:SegmentWriter	file:	access:public
SegmentWriter::nData	sqlite3.c	/^  int nData;                      \/* Bytes of data in aData *\/$/;"	m	struct:SegmentWriter	file:	access:public
SegmentWriter::nLeafData	sqlite3.c	/^  i64 nLeafData;                  \/* Number of bytes of leaf data written *\/$/;"	m	struct:SegmentWriter	file:	access:public
SegmentWriter::nMalloc	sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentWriter	file:	access:public
SegmentWriter::nSize	sqlite3.c	/^  int nSize;                      \/* Size of allocation at aData *\/$/;"	m	struct:SegmentWriter	file:	access:public
SegmentWriter::nTerm	sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentWriter	file:	access:public
SegmentWriter::pTree	sqlite3.c	/^  SegmentNode *pTree;             \/* Pointer to interior tree structure *\/$/;"	m	struct:SegmentWriter	file:	access:public
SegmentWriter::zMalloc	sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentWriter	file:	access:public
SegmentWriter::zTerm	sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentWriter	file:	access:public
Select	sqlite3.c	/^struct Select {$/;"	s	file:
Select	sqlite3.c	/^typedef struct Select Select;$/;"	t	typeref:struct:Select	file:
Select::addrOpenEphm	sqlite3.c	/^  int addrOpenEphm[2];   \/* OP_OpenEphem opcodes related to this select *\/$/;"	m	struct:Select	file:	access:public
Select::iLimit	sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:	access:public
Select::iOffset	sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:	access:public
Select::nSelectRow	sqlite3.c	/^  u64 nSelectRow;        \/* Estimated number of result rows *\/$/;"	m	struct:Select	file:	access:public
Select::op	sqlite3.c	/^  u8 op;                 \/* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT *\/$/;"	m	struct:Select	file:	access:public
Select::pEList	sqlite3.c	/^  ExprList *pEList;      \/* The fields of the result *\/$/;"	m	struct:Select	file:	access:public
Select::pGroupBy	sqlite3.c	/^  ExprList *pGroupBy;    \/* The GROUP BY clause *\/$/;"	m	struct:Select	file:	access:public
Select::pHaving	sqlite3.c	/^  Expr *pHaving;         \/* The HAVING clause *\/$/;"	m	struct:Select	file:	access:public
Select::pLimit	sqlite3.c	/^  Expr *pLimit;          \/* LIMIT expression. NULL means not used. *\/$/;"	m	struct:Select	file:	access:public
Select::pNext	sqlite3.c	/^  Select *pNext;         \/* Next select to the left in a compound *\/$/;"	m	struct:Select	file:	access:public
Select::pOffset	sqlite3.c	/^  Expr *pOffset;         \/* OFFSET expression. NULL means not used. *\/$/;"	m	struct:Select	file:	access:public
Select::pOrderBy	sqlite3.c	/^  ExprList *pOrderBy;    \/* The ORDER BY clause *\/$/;"	m	struct:Select	file:	access:public
Select::pPrior	sqlite3.c	/^  Select *pPrior;        \/* Prior select in a compound select statement *\/$/;"	m	struct:Select	file:	access:public
Select::pSrc	sqlite3.c	/^  SrcList *pSrc;         \/* The FROM clause *\/$/;"	m	struct:Select	file:	access:public
Select::pWhere	sqlite3.c	/^  Expr *pWhere;          \/* The WHERE clause *\/$/;"	m	struct:Select	file:	access:public
Select::pWith	sqlite3.c	/^  With *pWith;           \/* WITH clause attached to this select. Or NULL. *\/$/;"	m	struct:Select	file:	access:public
Select::selFlags	sqlite3.c	/^  u16 selFlags;          \/* Various SF_* values *\/$/;"	m	struct:Select	file:	access:public
Select::zSelName	sqlite3.c	/^  char zSelName[12];     \/* Symbolic name of this SELECT use for debugging *\/$/;"	m	struct:Select	file:	access:public
SelectDest	sqlite3.c	/^struct SelectDest {$/;"	s	file:
SelectDest	sqlite3.c	/^typedef struct SelectDest SelectDest;$/;"	t	typeref:struct:SelectDest	file:
SelectDest::affSdst	sqlite3.c	/^  char affSdst;        \/* Affinity used when eDest==SRT_Set *\/$/;"	m	struct:SelectDest	file:	access:public
SelectDest::eDest	sqlite3.c	/^  u8 eDest;            \/* How to dispose of the results.  On of SRT_* above. *\/$/;"	m	struct:SelectDest	file:	access:public
SelectDest::iSDParm	sqlite3.c	/^  int iSDParm;         \/* A parameter used by the eDest disposal method *\/$/;"	m	struct:SelectDest	file:	access:public
SelectDest::iSdst	sqlite3.c	/^  int iSdst;           \/* Base register where results are written *\/$/;"	m	struct:SelectDest	file:	access:public
SelectDest::nSdst	sqlite3.c	/^  int nSdst;           \/* Number of registers allocated *\/$/;"	m	struct:SelectDest	file:	access:public
SelectDest::pOrderBy	sqlite3.c	/^  ExprList *pOrderBy;  \/* Key columns for SRT_Queue and SRT_DistQueue *\/$/;"	m	struct:SelectDest	file:	access:public
ShmRegion	sqlite3.c	/^  struct ShmRegion {$/;"	s	struct:winShmNode	file:	access:public
SimulateDiskfullError	sqlite3.c	19455;"	d	file:
SimulateDiskfullError	sqlite3.c	19469;"	d	file:
SimulateDiskfullError	sqlite3.c	25039;"	d	file:
SimulateDiskfullError	sqlite3.c	25053;"	d	file:
SimulateDiskfullError	sqlite3.c	32540;"	d	file:
SimulateDiskfullError	sqlite3.c	32554;"	d	file:
SimulateIOError	sqlite3.c	19446;"	d	file:
SimulateIOError	sqlite3.c	19468;"	d	file:
SimulateIOError	sqlite3.c	25030;"	d	file:
SimulateIOError	sqlite3.c	25052;"	d	file:
SimulateIOError	sqlite3.c	32531;"	d	file:
SimulateIOError	sqlite3.c	32553;"	d	file:
SimulateIOErrorBenign	sqlite3.c	19445;"	d	file:
SimulateIOErrorBenign	sqlite3.c	19467;"	d	file:
SimulateIOErrorBenign	sqlite3.c	25029;"	d	file:
SimulateIOErrorBenign	sqlite3.c	25051;"	d	file:
SimulateIOErrorBenign	sqlite3.c	32530;"	d	file:
SimulateIOErrorBenign	sqlite3.c	32552;"	d	file:
SizeofArray	sqlite3.c	129427;"	d	file:
SnippetFragment	sqlite3.c	/^struct SnippetFragment {$/;"	s	file:
SnippetFragment	sqlite3.c	/^typedef struct SnippetFragment SnippetFragment;$/;"	t	typeref:struct:SnippetFragment	file:
SnippetFragment::covered	sqlite3.c	/^  u64 covered;                    \/* Mask of query phrases covered *\/$/;"	m	struct:SnippetFragment	file:	access:public
SnippetFragment::hlmask	sqlite3.c	/^  u64 hlmask;                     \/* Mask of snippet terms to highlight *\/$/;"	m	struct:SnippetFragment	file:	access:public
SnippetFragment::iCol	sqlite3.c	/^  int iCol;                       \/* Column snippet is extracted from *\/$/;"	m	struct:SnippetFragment	file:	access:public
SnippetFragment::iPos	sqlite3.c	/^  int iPos;                       \/* Index of first token in snippet *\/$/;"	m	struct:SnippetFragment	file:	access:public
SnippetIter	sqlite3.c	/^struct SnippetIter {$/;"	s	file:
SnippetIter	sqlite3.c	/^typedef struct SnippetIter SnippetIter;$/;"	t	typeref:struct:SnippetIter	file:
SnippetIter::aPhrase	sqlite3.c	/^  SnippetPhrase *aPhrase;         \/* Array of size nPhrase *\/$/;"	m	struct:SnippetIter	file:	access:public
SnippetIter::iCol	sqlite3.c	/^  int iCol;                       \/* Extract snippet from this column *\/$/;"	m	struct:SnippetIter	file:	access:public
SnippetIter::iCurrent	sqlite3.c	/^  int iCurrent;                   \/* First token of current snippet *\/$/;"	m	struct:SnippetIter	file:	access:public
SnippetIter::nPhrase	sqlite3.c	/^  int nPhrase;                    \/* Number of phrases in query *\/$/;"	m	struct:SnippetIter	file:	access:public
SnippetIter::nSnippet	sqlite3.c	/^  int nSnippet;                   \/* Requested snippet length (in tokens) *\/$/;"	m	struct:SnippetIter	file:	access:public
SnippetIter::pCsr	sqlite3.c	/^  Fts3Cursor *pCsr;               \/* Cursor snippet is being generated from *\/$/;"	m	struct:SnippetIter	file:	access:public
SnippetPhrase	sqlite3.c	/^struct SnippetPhrase {$/;"	s	file:
SnippetPhrase	sqlite3.c	/^typedef struct SnippetPhrase SnippetPhrase;$/;"	t	typeref:struct:SnippetPhrase	file:
SnippetPhrase::iHead	sqlite3.c	/^  int iHead;                      \/* Next value in position list *\/$/;"	m	struct:SnippetPhrase	file:	access:public
SnippetPhrase::iTail	sqlite3.c	/^  int iTail;                      \/* Next value in trailing position list *\/$/;"	m	struct:SnippetPhrase	file:	access:public
SnippetPhrase::nToken	sqlite3.c	/^  int nToken;                     \/* Number of tokens in phrase *\/$/;"	m	struct:SnippetPhrase	file:	access:public
SnippetPhrase::pHead	sqlite3.c	/^  char *pHead;                    \/* Position list data following iHead *\/$/;"	m	struct:SnippetPhrase	file:	access:public
SnippetPhrase::pList	sqlite3.c	/^  char *pList;                    \/* Pointer to start of phrase position list *\/$/;"	m	struct:SnippetPhrase	file:	access:public
SnippetPhrase::pTail	sqlite3.c	/^  char *pTail;                    \/* Position list data following iTail *\/$/;"	m	struct:SnippetPhrase	file:	access:public
SortByDimension	sqlite3.c	/^static void SortByDimension($/;"	f	file:	signature:( Rtree *pRtree, int *aIdx, int nIdx, int iDim, RtreeCell *aCell, int *aSpare )
SortByDistance	sqlite3.c	/^static void SortByDistance($/;"	f	file:	signature:( int *aIdx, int nIdx, RtreeDValue *aDistance, int *aSpare )
SortCtx	sqlite3.c	/^struct SortCtx {$/;"	s	file:
SortCtx	sqlite3.c	/^typedef struct SortCtx SortCtx;$/;"	t	typeref:struct:SortCtx	file:
SortCtx::addrSortIndex	sqlite3.c	/^  int addrSortIndex;    \/* Address of the OP_SorterOpen or OP_OpenEphemeral *\/$/;"	m	struct:SortCtx	file:	access:public
SortCtx::iECursor	sqlite3.c	/^  int iECursor;         \/* Cursor number for the sorter *\/$/;"	m	struct:SortCtx	file:	access:public
SortCtx::labelBkOut	sqlite3.c	/^  int labelBkOut;       \/* Start label for the block-output subroutine *\/$/;"	m	struct:SortCtx	file:	access:public
SortCtx::nOBSat	sqlite3.c	/^  int nOBSat;           \/* Number of ORDER BY terms satisfied by indices *\/$/;"	m	struct:SortCtx	file:	access:public
SortCtx::pOrderBy	sqlite3.c	/^  ExprList *pOrderBy;   \/* The ORDER BY (or GROUP BY clause) *\/$/;"	m	struct:SortCtx	file:	access:public
SortCtx::regReturn	sqlite3.c	/^  int regReturn;        \/* Register holding block-output return address *\/$/;"	m	struct:SortCtx	file:	access:public
SortCtx::sortFlags	sqlite3.c	/^  u8 sortFlags;         \/* Zero or more SORTFLAG_* bits *\/$/;"	m	struct:SortCtx	file:	access:public
SortSubtask	sqlite3.c	/^struct SortSubtask {$/;"	s	file:
SortSubtask	sqlite3.c	/^typedef struct SortSubtask SortSubtask;     \/* A sub-task in the sort process *\/$/;"	t	typeref:struct:SortSubtask	file:
SortSubtask::bDone	sqlite3.c	/^  int bDone;                      \/* Set if thread is finished but not joined *\/$/;"	m	struct:SortSubtask	file:	access:public
SortSubtask::file	sqlite3.c	/^  SorterFile file;                \/* Temp file for level-0 PMAs *\/$/;"	m	struct:SortSubtask	file:	access:public
SortSubtask::file2	sqlite3.c	/^  SorterFile file2;               \/* Space for other PMAs *\/$/;"	m	struct:SortSubtask	file:	access:public
SortSubtask::list	sqlite3.c	/^  SorterList list;                \/* List for thread to write to a PMA *\/$/;"	m	struct:SortSubtask	file:	access:public
SortSubtask::nPMA	sqlite3.c	/^  int nPMA;                       \/* Number of PMAs currently in file *\/$/;"	m	struct:SortSubtask	file:	access:public
SortSubtask::pSorter	sqlite3.c	/^  VdbeSorter *pSorter;            \/* Sorter that owns this sub-task *\/$/;"	m	struct:SortSubtask	file:	access:public
SortSubtask::pThread	sqlite3.c	/^  SQLiteThread *pThread;          \/* Background thread, if any *\/$/;"	m	struct:SortSubtask	file:	access:public
SortSubtask::pUnpacked	sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Space to unpack a record *\/$/;"	m	struct:SortSubtask	file:	access:public
SorterFile	sqlite3.c	/^struct SorterFile {$/;"	s	file:
SorterFile	sqlite3.c	/^typedef struct SorterFile SorterFile;       \/* Temporary file object wrapper *\/$/;"	t	typeref:struct:SorterFile	file:
SorterFile::iEof	sqlite3.c	/^  i64 iEof;                       \/* Bytes of data stored in pFd *\/$/;"	m	struct:SorterFile	file:	access:public
SorterFile::pFd	sqlite3.c	/^  sqlite3_file *pFd;              \/* File handle *\/$/;"	m	struct:SorterFile	file:	access:public
SorterList	sqlite3.c	/^struct SorterList {$/;"	s	file:
SorterList	sqlite3.c	/^typedef struct SorterList SorterList;       \/* In-memory list of records *\/$/;"	t	typeref:struct:SorterList	file:
SorterList::aMemory	sqlite3.c	/^  u8 *aMemory;                    \/* If non-NULL, bulk memory to hold pList *\/$/;"	m	struct:SorterList	file:	access:public
SorterList::pList	sqlite3.c	/^  SorterRecord *pList;            \/* Linked list of records *\/$/;"	m	struct:SorterList	file:	access:public
SorterList::szPMA	sqlite3.c	/^  int szPMA;                      \/* Size of pList as PMA in bytes *\/$/;"	m	struct:SorterList	file:	access:public
SorterRecord	sqlite3.c	/^struct SorterRecord {$/;"	s	file:
SorterRecord	sqlite3.c	/^typedef struct SorterRecord SorterRecord;   \/* A record being sorted *\/$/;"	t	typeref:struct:SorterRecord	file:
SorterRecord::__anon14::iNext	sqlite3.c	/^    int iNext;                    \/* Offset within aMemory of next record *\/$/;"	m	union:SorterRecord::__anon14	file:	access:public
SorterRecord::__anon14::pNext	sqlite3.c	/^    SorterRecord *pNext;          \/* Pointer to next record in list *\/$/;"	m	union:SorterRecord::__anon14	file:	access:public
SorterRecord::nVal	sqlite3.c	/^  int nVal;                       \/* Size of the record in bytes *\/$/;"	m	struct:SorterRecord	file:	access:public
SorterRecord::u	sqlite3.c	/^  } u;$/;"	m	struct:SorterRecord	typeref:union:SorterRecord::__anon14	file:	access:public
SplitNode	sqlite3.c	/^static int SplitNode($/;"	f	file:	signature:( Rtree *pRtree, RtreeNode *pNode, RtreeCell *pCell, int iHeight )
Sqlite3Config	sqlite3.c	/^struct Sqlite3Config {$/;"	s	file:
Sqlite3Config::bCoreMutex	sqlite3.c	/^  int bCoreMutex;                   \/* True to enable core mutexing *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::bFullMutex	sqlite3.c	/^  int bFullMutex;                   \/* True to enable full mutexing *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::bLocaltimeFault	sqlite3.c	/^  int bLocaltimeFault;              \/* True to fail localtime() calls *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::bMemstat	sqlite3.c	/^  int bMemstat;                     \/* True to enable memory status *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::bOpenUri	sqlite3.c	/^  int bOpenUri;                     \/* True to interpret filenames as URIs *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::bUseCis	sqlite3.c	/^  int bUseCis;                      \/* Use covering indices for full-scans *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::inProgress	sqlite3.c	/^  int inProgress;                   \/* True while initialization in progress *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::isInit	sqlite3.c	/^  int isInit;                       \/* True after initialization has finished *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::isMallocInit	sqlite3.c	/^  int isMallocInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::isMutexInit	sqlite3.c	/^  int isMutexInit;                  \/* True after mutexes are initialized *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::isPCacheInit	sqlite3.c	/^  int isPCacheInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::m	sqlite3.c	/^  sqlite3_mem_methods m;            \/* Low-level memory allocation interface *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::mnReq	sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::mutex	sqlite3.c	/^  sqlite3_mutex_methods mutex;      \/* Low-level mutex interface *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::mxMmap	sqlite3.c	/^  sqlite3_int64 mxMmap;             \/* Maximum value for szMmap *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::mxParserStack	sqlite3.c	/^  int mxParserStack;                \/* maximum depth of the parser stack *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::mxReq	sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::mxStrlen	sqlite3.c	/^  int mxStrlen;                     \/* Maximum string length *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::nHeap	sqlite3.c	/^  int nHeap;                        \/* Size of pHeap[] *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::nLookaside	sqlite3.c	/^  int nLookaside;                   \/* Default lookaside buffer count *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::nPage	sqlite3.c	/^  int nPage;                        \/* Number of pages in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::nRefInitMutex	sqlite3.c	/^  int nRefInitMutex;                \/* Number of users of pInitMutex *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::nScratch	sqlite3.c	/^  int nScratch;                     \/* Number of scratch buffers *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::neverCorrupt	sqlite3.c	/^  int neverCorrupt;                 \/* Database is always well-formed *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::pHeap	sqlite3.c	/^  void *pHeap;                      \/* Heap storage space *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::pInitMutex	sqlite3.c	/^  sqlite3_mutex *pInitMutex;        \/* Mutex used by sqlite3_initialize() *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::pLogArg	sqlite3.c	/^  void *pLogArg;                       \/* First argument to xLog() *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::pPage	sqlite3.c	/^  void *pPage;                      \/* Page cache memory *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::pScratch	sqlite3.c	/^  void *pScratch;                   \/* Scratch memory *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::pSqllogArg	sqlite3.c	/^  void *pSqllogArg;$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::pVdbeBranchArg	sqlite3.c	/^  void *pVdbeBranchArg;                                     \/* 1st argument *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::pcache2	sqlite3.c	/^  sqlite3_pcache_methods2 pcache2;  \/* Low-level page-cache interface *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::sharedCacheEnabled	sqlite3.c	/^  int sharedCacheEnabled;           \/* true if shared-cache mode enabled *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::szLookaside	sqlite3.c	/^  int szLookaside;                  \/* Default lookaside buffer size *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::szMmap	sqlite3.c	/^  sqlite3_int64 szMmap;             \/* mmap() space per open file *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::szPage	sqlite3.c	/^  int szPage;                       \/* Size of each page in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::szScratch	sqlite3.c	/^  int szScratch;                    \/* Size of each scratch buffer *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::xLog	sqlite3.c	/^  void (*xLog)(void*,int,const char*); \/* Function for logging *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::xSqllog	sqlite3.c	/^  void(*xSqllog)(void*,sqlite3*,const char*, int);$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::xTestCallback	sqlite3.c	/^  int (*xTestCallback)(int);        \/* Invoked by sqlite3FaultSim() *\/$/;"	m	struct:Sqlite3Config	file:	access:public
Sqlite3Config::xVdbeBranch	sqlite3.c	/^  void (*xVdbeBranch)(void*,int iSrcLine,u8 eThis,u8 eMx);  \/* Callback *\/$/;"	m	struct:Sqlite3Config	file:	access:public
SrcCount	sqlite3.c	/^struct SrcCount {$/;"	s	file:
SrcCount::nOther	sqlite3.c	/^  int nOther;      \/* Number of references to columns in other FROM clauses *\/$/;"	m	struct:SrcCount	file:	access:public
SrcCount::nThis	sqlite3.c	/^  int nThis;       \/* Number of references to columns in pSrcList *\/$/;"	m	struct:SrcCount	file:	access:public
SrcCount::pSrc	sqlite3.c	/^  SrcList *pSrc;   \/* One particular FROM clause in a nested query *\/$/;"	m	struct:SrcCount	file:	access:public
SrcList	sqlite3.c	/^struct SrcList {$/;"	s	file:
SrcList	sqlite3.c	/^typedef struct SrcList SrcList;$/;"	t	typeref:struct:SrcList	file:
SrcList::SrcList_item	sqlite3.c	/^  struct SrcList_item {$/;"	s	struct:SrcList	file:	access:public
SrcList::SrcList_item::addrFillSub	sqlite3.c	/^    int addrFillSub;  \/* Address of subroutine to manifest a subquery *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::colUsed	sqlite3.c	/^    Bitmask colUsed;  \/* Bit N (1<<N) set if column N of pTab is used *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::iCursor	sqlite3.c	/^    int iCursor;      \/* The VDBE cursor number used to access this table *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::iSelectId	sqlite3.c	/^    u8 iSelectId;     \/* If pSelect!=0, the id of the sub-select in EQP *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::isCorrelated	sqlite3.c	/^    unsigned isCorrelated :1;  \/* True if sub-query is correlated *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::isRecursive	sqlite3.c	/^    unsigned isRecursive :1;   \/* True for recursive reference in WITH *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::jointype	sqlite3.c	/^    u8 jointype;      \/* Type of join between this able and the previous *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::notIndexed	sqlite3.c	/^    unsigned notIndexed :1;    \/* True if there is a NOT INDEXED clause *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::pIndex	sqlite3.c	/^    Index *pIndex;    \/* Index structure corresponding to zIndex, if any *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::pOn	sqlite3.c	/^    Expr *pOn;        \/* The ON clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::pSchema	sqlite3.c	/^    Schema *pSchema;  \/* Schema to which this item is fixed *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::pSelect	sqlite3.c	/^    Select *pSelect;  \/* A SELECT statement used in place of a table name *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::pTab	sqlite3.c	/^    Table *pTab;      \/* An SQL table corresponding to zName *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::pUsing	sqlite3.c	/^    IdList *pUsing;   \/* The USING clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::regResult	sqlite3.c	/^    int regResult;    \/* Registers holding results of a co-routine *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::regReturn	sqlite3.c	/^    int regReturn;    \/* Register holding return address of addrFillSub *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::viaCoroutine	sqlite3.c	/^    unsigned viaCoroutine :1;  \/* Implemented as a co-routine *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::zAlias	sqlite3.c	/^    char *zAlias;     \/* The "B" part of a "A AS B" phrase.  zName is the "A" *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::zDatabase	sqlite3.c	/^    char *zDatabase;  \/* Name of database holding this table *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::zIndex	sqlite3.c	/^    char *zIndex;     \/* Identifier from "INDEXED BY <zIndex>" clause *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::SrcList_item::zName	sqlite3.c	/^    char *zName;      \/* Name of the table *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
SrcList::a	sqlite3.c	/^  } a[1];             \/* One entry for each identifier on the list *\/$/;"	m	struct:SrcList	typeref:struct:SrcList::SrcList_item	file:	access:public
SrcList::nAlloc	sqlite3.c	/^  u32 nAlloc;      \/* Number of entries allocated in a[] below *\/$/;"	m	struct:SrcList	file:	access:public
SrcList::nSrc	sqlite3.c	/^  int nSrc;        \/* Number of tables or subqueries in the FROM clause *\/$/;"	m	struct:SrcList	file:	access:public
SrcList_item	sqlite3.c	/^  struct SrcList_item {$/;"	s	struct:SrcList	file:	access:public
Stat4Accum	sqlite3.c	/^struct Stat4Accum {$/;"	s	file:
Stat4Accum	sqlite3.c	/^typedef struct Stat4Accum Stat4Accum;$/;"	t	typeref:struct:Stat4Accum	file:
Stat4Accum::a	sqlite3.c	/^  Stat4Sample *a;           \/* Array of mxSample Stat4Sample objects *\/$/;"	m	struct:Stat4Accum	file:	access:public
Stat4Accum::aBest	sqlite3.c	/^  Stat4Sample *aBest;       \/* Array of nCol best samples *\/$/;"	m	struct:Stat4Accum	file:	access:public
Stat4Accum::current	sqlite3.c	/^  Stat4Sample current;      \/* Current row as a Stat4Sample *\/$/;"	m	struct:Stat4Accum	file:	access:public
Stat4Accum::db	sqlite3.c	/^  sqlite3 *db;              \/* Database connection, for malloc() *\/$/;"	m	struct:Stat4Accum	file:	access:public
Stat4Accum::iGet	sqlite3.c	/^  int iGet;                 \/* Index of current sample accessed by stat_get() *\/$/;"	m	struct:Stat4Accum	file:	access:public
Stat4Accum::iMin	sqlite3.c	/^  int iMin;                 \/* Index in a[] of entry with minimum score *\/$/;"	m	struct:Stat4Accum	file:	access:public
Stat4Accum::iPrn	sqlite3.c	/^  u32 iPrn;                 \/* Pseudo-random number used for sampling *\/$/;"	m	struct:Stat4Accum	file:	access:public
Stat4Accum::mxSample	sqlite3.c	/^  int mxSample;             \/* Maximum number of samples to accumulate *\/$/;"	m	struct:Stat4Accum	file:	access:public
Stat4Accum::nCol	sqlite3.c	/^  int nCol;                 \/* Number of columns in index + pk\/rowid *\/$/;"	m	struct:Stat4Accum	file:	access:public
Stat4Accum::nKeyCol	sqlite3.c	/^  int nKeyCol;              \/* Number of index columns w\/o the pk\/rowid *\/$/;"	m	struct:Stat4Accum	file:	access:public
Stat4Accum::nPSample	sqlite3.c	/^  tRowcnt nPSample;         \/* How often to do a periodic sample *\/$/;"	m	struct:Stat4Accum	file:	access:public
Stat4Accum::nRow	sqlite3.c	/^  tRowcnt nRow;             \/* Number of rows in the entire table *\/$/;"	m	struct:Stat4Accum	file:	access:public
Stat4Accum::nSample	sqlite3.c	/^  int nSample;              \/* Current number of samples *\/$/;"	m	struct:Stat4Accum	file:	access:public
Stat4Sample	sqlite3.c	/^struct Stat4Sample {$/;"	s	file:
Stat4Sample	sqlite3.c	/^typedef struct Stat4Sample Stat4Sample;$/;"	t	typeref:struct:Stat4Sample	file:
Stat4Sample::__anon15::aRowid	sqlite3.c	/^    u8 *aRowid;                     \/* Key for WITHOUT ROWID tables *\/$/;"	m	union:Stat4Sample::__anon15	file:	access:public
Stat4Sample::__anon15::iRowid	sqlite3.c	/^    i64 iRowid;                     \/* Rowid in main table of the key *\/$/;"	m	union:Stat4Sample::__anon15	file:	access:public
Stat4Sample::anDLt	sqlite3.c	/^  tRowcnt *anDLt;                 \/* sqlite_stat4.nDLt *\/$/;"	m	struct:Stat4Sample	file:	access:public
Stat4Sample::anEq	sqlite3.c	/^  tRowcnt *anEq;                  \/* sqlite_stat4.nEq *\/$/;"	m	struct:Stat4Sample	file:	access:public
Stat4Sample::anLt	sqlite3.c	/^  tRowcnt *anLt;                  \/* sqlite_stat4.nLt *\/$/;"	m	struct:Stat4Sample	file:	access:public
Stat4Sample::iCol	sqlite3.c	/^  int iCol;                       \/* If !isPSample, the reason for inclusion *\/$/;"	m	struct:Stat4Sample	file:	access:public
Stat4Sample::iHash	sqlite3.c	/^  u32 iHash;                      \/* Tiebreaker hash *\/$/;"	m	struct:Stat4Sample	file:	access:public
Stat4Sample::isPSample	sqlite3.c	/^  u8 isPSample;                   \/* True if a periodic sample *\/$/;"	m	struct:Stat4Sample	file:	access:public
Stat4Sample::nRowid	sqlite3.c	/^  u32 nRowid;                     \/* Sizeof aRowid[] *\/$/;"	m	struct:Stat4Sample	file:	access:public
Stat4Sample::u	sqlite3.c	/^  } u;$/;"	m	struct:Stat4Sample	typeref:union:Stat4Sample::__anon15	file:	access:public
StrAccum	sqlite3.c	/^struct StrAccum {$/;"	s	file:
StrAccum	sqlite3.c	/^typedef struct StrAccum StrAccum;$/;"	t	typeref:struct:StrAccum	file:
StrAccum::accError	sqlite3.c	/^  u8   accError;       \/* STRACCUM_NOMEM or STRACCUM_TOOBIG *\/$/;"	m	struct:StrAccum	file:	access:public
StrAccum::db	sqlite3.c	/^  sqlite3 *db;         \/* Optional database for lookaside.  Can be NULL *\/$/;"	m	struct:StrAccum	file:	access:public
StrAccum::mxAlloc	sqlite3.c	/^  int  mxAlloc;        \/* Maximum allowed string length *\/$/;"	m	struct:StrAccum	file:	access:public
StrAccum::nAlloc	sqlite3.c	/^  int  nAlloc;         \/* Amount of space allocated in zText *\/$/;"	m	struct:StrAccum	file:	access:public
StrAccum::nChar	sqlite3.c	/^  int  nChar;          \/* Length of the string so far *\/$/;"	m	struct:StrAccum	file:	access:public
StrAccum::useMalloc	sqlite3.c	/^  u8   useMalloc;      \/* 0: none,  1: sqlite3DbMalloc,  2: sqlite3_malloc *\/$/;"	m	struct:StrAccum	file:	access:public
StrAccum::zBase	sqlite3.c	/^  char *zBase;         \/* A base allocation.  Not from malloc. *\/$/;"	m	struct:StrAccum	file:	access:public
StrAccum::zText	sqlite3.c	/^  char *zText;         \/* The string collected so far *\/$/;"	m	struct:StrAccum	file:	access:public
StrBuffer	sqlite3.c	/^struct StrBuffer {$/;"	s	file:
StrBuffer	sqlite3.c	/^typedef struct StrBuffer StrBuffer;$/;"	t	typeref:struct:StrBuffer	file:
StrBuffer::n	sqlite3.c	/^  int n;                          \/* Length of z in bytes (excl. nul-term) *\/$/;"	m	struct:StrBuffer	file:	access:public
StrBuffer::nAlloc	sqlite3.c	/^  int nAlloc;                     \/* Allocated size of buffer z in bytes *\/$/;"	m	struct:StrBuffer	file:	access:public
StrBuffer::z	sqlite3.c	/^  char *z;                        \/* Pointer to buffer containing string *\/$/;"	m	struct:StrBuffer	file:	access:public
Stringify	sqlite3.c	69103;"	d	file:
SubProgram	sqlite3.c	/^struct SubProgram {$/;"	s	file:
SubProgram	sqlite3.c	/^typedef struct SubProgram SubProgram;$/;"	t	typeref:struct:SubProgram	file:
SubProgram::aOp	sqlite3.c	/^  VdbeOp *aOp;                  \/* Array of opcodes for sub-program *\/$/;"	m	struct:SubProgram	file:	access:public
SubProgram::nCsr	sqlite3.c	/^  int nCsr;                     \/* Number of cursors required *\/$/;"	m	struct:SubProgram	file:	access:public
SubProgram::nMem	sqlite3.c	/^  int nMem;                     \/* Number of memory cells required *\/$/;"	m	struct:SubProgram	file:	access:public
SubProgram::nOnce	sqlite3.c	/^  int nOnce;                    \/* Number of OP_Once instructions *\/$/;"	m	struct:SubProgram	file:	access:public
SubProgram::nOp	sqlite3.c	/^  int nOp;                      \/* Elements in aOp[] *\/$/;"	m	struct:SubProgram	file:	access:public
SubProgram::pNext	sqlite3.c	/^  SubProgram *pNext;            \/* Next sub-program already visited *\/$/;"	m	struct:SubProgram	file:	access:public
SubProgram::token	sqlite3.c	/^  void *token;                  \/* id that may be used to recursive triggers *\/$/;"	m	struct:SubProgram	file:	access:public
SumCtx	sqlite3.c	/^struct SumCtx {$/;"	s	file:
SumCtx	sqlite3.c	/^typedef struct SumCtx SumCtx;$/;"	t	typeref:struct:SumCtx	file:
SumCtx::approx	sqlite3.c	/^  u8 approx;        \/* True if non-integer value was input to the sum *\/$/;"	m	struct:SumCtx	file:	access:public
SumCtx::cnt	sqlite3.c	/^  i64 cnt;          \/* Number of elements summed *\/$/;"	m	struct:SumCtx	file:	access:public
SumCtx::iSum	sqlite3.c	/^  i64 iSum;         \/* Integer sum *\/   $/;"	m	struct:SumCtx	file:	access:public
SumCtx::overflow	sqlite3.c	/^  u8 overflow;      \/* True if integer overflow seen *\/$/;"	m	struct:SumCtx	file:	access:public
SumCtx::rSum	sqlite3.c	/^  double rSum;      \/* Floating point sum *\/$/;"	m	struct:SumCtx	file:	access:public
TEMP_MASTER_NAME	sqlite3.c	8796;"	d	file:
TERM_ANDINFO	sqlite3.c	113441;"	d	file:
TERM_CODED	sqlite3.c	113438;"	d	file:
TERM_COPIED	sqlite3.c	113439;"	d	file:
TERM_DYNAMIC	sqlite3.c	113436;"	d	file:
TERM_ORINFO	sqlite3.c	113440;"	d	file:
TERM_OR_OK	sqlite3.c	113442;"	d	file:
TERM_VIRTUAL	sqlite3.c	113437;"	d	file:
TERM_VNULL	sqlite3.c	113444;"	d	file:
TERM_VNULL	sqlite3.c	113446;"	d	file:
TESTBIT	sqlite3.c	38400;"	d	file:
TESTONLY	sqlite3.c	129520;"	d	file:
TESTONLY	sqlite3.c	129522;"	d	file:
TESTONLY	sqlite3.c	8095;"	d	file:
TESTONLY	sqlite3.c	8097;"	d	file:
TF_Autoincrement	sqlite3.c	11121;"	d	file:
TF_Ephemeral	sqlite3.c	11119;"	d	file:
TF_HasPrimaryKey	sqlite3.c	11120;"	d	file:
TF_Readonly	sqlite3.c	11118;"	d	file:
TF_Virtual	sqlite3.c	11122;"	d	file:
TF_WithoutRowid	sqlite3.c	11123;"	d	file:
THREE_BYTE_INT	sqlite3.c	66218;"	d	file:
TIMER_ELAPSED	sqlite3.c	19425;"	d	file:
TIMER_ELAPSED	sqlite3.c	19429;"	d	file:
TIMER_ELAPSED	sqlite3.c	25009;"	d	file:
TIMER_ELAPSED	sqlite3.c	25013;"	d	file:
TIMER_ELAPSED	sqlite3.c	32510;"	d	file:
TIMER_ELAPSED	sqlite3.c	32514;"	d	file:
TIMER_END	sqlite3.c	19424;"	d	file:
TIMER_END	sqlite3.c	19428;"	d	file:
TIMER_END	sqlite3.c	25008;"	d	file:
TIMER_END	sqlite3.c	25012;"	d	file:
TIMER_END	sqlite3.c	32509;"	d	file:
TIMER_END	sqlite3.c	32513;"	d	file:
TIMER_START	sqlite3.c	19423;"	d	file:
TIMER_START	sqlite3.c	19427;"	d	file:
TIMER_START	sqlite3.c	25007;"	d	file:
TIMER_START	sqlite3.c	25011;"	d	file:
TIMER_START	sqlite3.c	32508;"	d	file:
TIMER_START	sqlite3.c	32512;"	d	file:
TK_ABORT	sqlite3.c	8288;"	d	file:
TK_ACTION	sqlite3.c	8289;"	d	file:
TK_ADD	sqlite3.c	8401;"	d	file:
TK_AFTER	sqlite3.c	8290;"	d	file:
TK_AGG_COLUMN	sqlite3.c	8415;"	d	file:
TK_AGG_FUNCTION	sqlite3.c	8414;"	d	file:
TK_ALL	sqlite3.c	8375;"	d	file:
TK_ALTER	sqlite3.c	8400;"	d	file:
TK_ANALYZE	sqlite3.c	8291;"	d	file:
TK_AND	sqlite3.c	8331;"	d	file:
TK_ANY	sqlite3.c	8329;"	d	file:
TK_AS	sqlite3.c	8283;"	d	file:
TK_ASC	sqlite3.c	8292;"	d	file:
TK_ATTACH	sqlite3.c	8293;"	d	file:
TK_AUTOINCR	sqlite3.c	8365;"	d	file:
TK_BEFORE	sqlite3.c	8294;"	d	file:
TK_BEGIN	sqlite3.c	8264;"	d	file:
TK_BETWEEN	sqlite3.c	8333;"	d	file:
TK_BITAND	sqlite3.c	8344;"	d	file:
TK_BITNOT	sqlite3.c	8355;"	d	file:
TK_BITOR	sqlite3.c	8345;"	d	file:
TK_BLOB	sqlite3.c	8393;"	d	file:
TK_BY	sqlite3.c	8295;"	d	file:
TK_CASCADE	sqlite3.c	8296;"	d	file:
TK_CASE	sqlite3.c	8395;"	d	file:
TK_CAST	sqlite3.c	8297;"	d	file:
TK_CHECK	sqlite3.c	8363;"	d	file:
TK_COLLATE	sqlite3.c	8354;"	d	file:
TK_COLUMN	sqlite3.c	8413;"	d	file:
TK_COLUMNKW	sqlite3.c	8298;"	d	file:
TK_COMMA	sqlite3.c	8285;"	d	file:
TK_COMMIT	sqlite3.c	8269;"	d	file:
TK_CONCAT	sqlite3.c	8353;"	d	file:
TK_CONFLICT	sqlite3.c	8299;"	d	file:
TK_CONSTRAINT	sqlite3.c	8358;"	d	file:
TK_CREATE	sqlite3.c	8276;"	d	file:
TK_CTIME_KW	sqlite3.c	8328;"	d	file:
TK_DATABASE	sqlite3.c	8300;"	d	file:
TK_DEFAULT	sqlite3.c	8359;"	d	file:
TK_DEFERRABLE	sqlite3.c	8371;"	d	file:
TK_DEFERRED	sqlite3.c	8266;"	d	file:
TK_DELETE	sqlite3.c	8368;"	d	file:
TK_DESC	sqlite3.c	8301;"	d	file:
TK_DETACH	sqlite3.c	8302;"	d	file:
TK_DISTINCT	sqlite3.c	8380;"	d	file:
TK_DOT	sqlite3.c	8381;"	d	file:
TK_DROP	sqlite3.c	8373;"	d	file:
TK_EACH	sqlite3.c	8303;"	d	file:
TK_ELSE	sqlite3.c	8398;"	d	file:
TK_END	sqlite3.c	8270;"	d	file:
TK_END_OF_FILE	sqlite3.c	8408;"	d	file:
TK_EQ	sqlite3.c	8338;"	d	file:
TK_ESCAPE	sqlite3.c	8343;"	d	file:
TK_EXCEPT	sqlite3.c	8376;"	d	file:
TK_EXCLUSIVE	sqlite3.c	8268;"	d	file:
TK_EXISTS	sqlite3.c	8279;"	d	file:
TK_EXPLAIN	sqlite3.c	8261;"	d	file:
TK_FAIL	sqlite3.c	8304;"	d	file:
TK_FLOAT	sqlite3.c	8392;"	d	file:
TK_FOR	sqlite3.c	8305;"	d	file:
TK_FOREIGN	sqlite3.c	8372;"	d	file:
TK_FROM	sqlite3.c	8382;"	d	file:
TK_FUNCTION	sqlite3.c	8412;"	d	file:
TK_GE	sqlite3.c	8342;"	d	file:
TK_GROUP	sqlite3.c	8386;"	d	file:
TK_GT	sqlite3.c	8339;"	d	file:
TK_HAVING	sqlite3.c	8387;"	d	file:
TK_ID	sqlite3.c	8286;"	d	file:
TK_IF	sqlite3.c	8277;"	d	file:
TK_IGNORE	sqlite3.c	8306;"	d	file:
TK_ILLEGAL	sqlite3.c	8409;"	d	file:
TK_IMMEDIATE	sqlite3.c	8267;"	d	file:
TK_IN	sqlite3.c	8334;"	d	file:
TK_INDEX	sqlite3.c	8399;"	d	file:
TK_INDEXED	sqlite3.c	8287;"	d	file:
TK_INITIALLY	sqlite3.c	8307;"	d	file:
TK_INSERT	sqlite3.c	8367;"	d	file:
TK_INSTEAD	sqlite3.c	8308;"	d	file:
TK_INTEGER	sqlite3.c	8391;"	d	file:
TK_INTERSECT	sqlite3.c	8377;"	d	file:
TK_INTO	sqlite3.c	8390;"	d	file:
TK_IS	sqlite3.c	8332;"	d	file:
TK_ISNOT	sqlite3.c	8407;"	d	file:
TK_ISNULL	sqlite3.c	8335;"	d	file:
TK_JOIN	sqlite3.c	8383;"	d	file:
TK_JOIN_KW	sqlite3.c	8357;"	d	file:
TK_KEY	sqlite3.c	8312;"	d	file:
TK_LE	sqlite3.c	8340;"	d	file:
TK_LIKE_KW	sqlite3.c	8309;"	d	file:
TK_LIMIT	sqlite3.c	8388;"	d	file:
TK_LP	sqlite3.c	8281;"	d	file:
TK_LSHIFT	sqlite3.c	8346;"	d	file:
TK_LT	sqlite3.c	8341;"	d	file:
TK_MATCH	sqlite3.c	8310;"	d	file:
TK_MINUS	sqlite3.c	8349;"	d	file:
TK_NE	sqlite3.c	8337;"	d	file:
TK_NO	sqlite3.c	8311;"	d	file:
TK_NOT	sqlite3.c	8278;"	d	file:
TK_NOTNULL	sqlite3.c	8336;"	d	file:
TK_NULL	sqlite3.c	8360;"	d	file:
TK_OF	sqlite3.c	8313;"	d	file:
TK_OFFSET	sqlite3.c	8314;"	d	file:
TK_ON	sqlite3.c	8366;"	d	file:
TK_OR	sqlite3.c	8330;"	d	file:
TK_ORDER	sqlite3.c	8385;"	d	file:
TK_PLAN	sqlite3.c	8263;"	d	file:
TK_PLUS	sqlite3.c	8348;"	d	file:
TK_PRAGMA	sqlite3.c	8315;"	d	file:
TK_PRIMARY	sqlite3.c	8361;"	d	file:
TK_QUERY	sqlite3.c	8262;"	d	file:
TK_RAISE	sqlite3.c	8316;"	d	file:
TK_RECURSIVE	sqlite3.c	8317;"	d	file:
TK_REFERENCES	sqlite3.c	8364;"	d	file:
TK_REGISTER	sqlite3.c	8418;"	d	file:
TK_REINDEX	sqlite3.c	8326;"	d	file:
TK_RELEASE	sqlite3.c	8273;"	d	file:
TK_REM	sqlite3.c	8352;"	d	file:
TK_RENAME	sqlite3.c	8327;"	d	file:
TK_REPLACE	sqlite3.c	8318;"	d	file:
TK_RESTRICT	sqlite3.c	8319;"	d	file:
TK_ROLLBACK	sqlite3.c	8271;"	d	file:
TK_ROW	sqlite3.c	8320;"	d	file:
TK_RP	sqlite3.c	8282;"	d	file:
TK_RSHIFT	sqlite3.c	8347;"	d	file:
TK_SAVEPOINT	sqlite3.c	8272;"	d	file:
TK_SELECT	sqlite3.c	8378;"	d	file:
TK_SEMI	sqlite3.c	8260;"	d	file:
TK_SET	sqlite3.c	8370;"	d	file:
TK_SLASH	sqlite3.c	8351;"	d	file:
TK_SPACE	sqlite3.c	8410;"	d	file:
TK_STAR	sqlite3.c	8350;"	d	file:
TK_STRING	sqlite3.c	8356;"	d	file:
TK_TABLE	sqlite3.c	8275;"	d	file:
TK_TEMP	sqlite3.c	8280;"	d	file:
TK_THEN	sqlite3.c	8397;"	d	file:
TK_TO	sqlite3.c	8274;"	d	file:
TK_TO_BLOB	sqlite3.c	8403;"	d	file:
TK_TO_INT	sqlite3.c	8405;"	d	file:
TK_TO_NUMERIC	sqlite3.c	8404;"	d	file:
TK_TO_REAL	sqlite3.c	8406;"	d	file:
TK_TO_TEXT	sqlite3.c	8402;"	d	file:
TK_TRANSACTION	sqlite3.c	8265;"	d	file:
TK_TRIGGER	sqlite3.c	8321;"	d	file:
TK_UMINUS	sqlite3.c	8416;"	d	file:
TK_UNCLOSED_STRING	sqlite3.c	8411;"	d	file:
TK_UNION	sqlite3.c	8374;"	d	file:
TK_UNIQUE	sqlite3.c	8362;"	d	file:
TK_UPDATE	sqlite3.c	8369;"	d	file:
TK_UPLUS	sqlite3.c	8417;"	d	file:
TK_USING	sqlite3.c	8384;"	d	file:
TK_VACUUM	sqlite3.c	8322;"	d	file:
TK_VALUES	sqlite3.c	8379;"	d	file:
TK_VARIABLE	sqlite3.c	8394;"	d	file:
TK_VIEW	sqlite3.c	8323;"	d	file:
TK_VIRTUAL	sqlite3.c	8324;"	d	file:
TK_WHEN	sqlite3.c	8396;"	d	file:
TK_WHERE	sqlite3.c	8389;"	d	file:
TK_WITH	sqlite3.c	8325;"	d	file:
TK_WITHOUT	sqlite3.c	8284;"	d	file:
TOKEN	sqlite3.c	123590;"	d	file:
TRACE	sqlite3.c	52227;"	d	file:
TRACE_IDX_INPUTS	sqlite3.c	/^static void TRACE_IDX_INPUTS(sqlite3_index_info *p){$/;"	f	file:	signature:(sqlite3_index_info *p)
TRACE_IDX_INPUTS	sqlite3.c	115153;"	d	file:
TRACE_IDX_OUTPUTS	sqlite3.c	/^static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){$/;"	f	file:	signature:(sqlite3_index_info *p)
TRACE_IDX_OUTPUTS	sqlite3.c	115154;"	d	file:
TRANS_NONE	sqlite3.c	51599;"	d	file:
TRANS_READ	sqlite3.c	51600;"	d	file:
TRANS_WRITE	sqlite3.c	51601;"	d	file:
TRIGGER_AFTER	sqlite3.c	12236;"	d	file:
TRIGGER_BEFORE	sqlite3.c	12235;"	d	file:
TWOPOWER31	sqlite3.c	24006;"	d	file:
TWOPOWER32	sqlite3.c	24005;"	d	file:
TWO_BYTE_INT	sqlite3.c	66217;"	d	file:
TabResult	sqlite3.c	/^typedef struct TabResult {$/;"	s	file:
TabResult	sqlite3.c	/^} TabResult;$/;"	t	typeref:struct:TabResult	file:
TabResult::azResult	sqlite3.c	/^  char **azResult;   \/* Accumulated output *\/$/;"	m	struct:TabResult	file:	access:public
TabResult::nAlloc	sqlite3.c	/^  u32 nAlloc;        \/* Slots allocated for azResult[] *\/$/;"	m	struct:TabResult	file:	access:public
TabResult::nColumn	sqlite3.c	/^  u32 nColumn;       \/* Number of columns in the result *\/$/;"	m	struct:TabResult	file:	access:public
TabResult::nData	sqlite3.c	/^  u32 nData;         \/* Slots used in azResult[].  (nRow+1)*nColumn *\/$/;"	m	struct:TabResult	file:	access:public
TabResult::nRow	sqlite3.c	/^  u32 nRow;          \/* Number of rows in the result *\/$/;"	m	struct:TabResult	file:	access:public
TabResult::rc	sqlite3.c	/^  int rc;            \/* Return code from sqlite3_exec() *\/$/;"	m	struct:TabResult	file:	access:public
TabResult::zErrMsg	sqlite3.c	/^  char *zErrMsg;     \/* Error message text, if an error occurs *\/$/;"	m	struct:TabResult	file:	access:public
Table	sqlite3.c	/^struct Table {$/;"	s	file:
Table	sqlite3.c	/^typedef struct Table Table;$/;"	t	typeref:struct:Table	file:
Table::aCol	sqlite3.c	/^  Column *aCol;        \/* Information about each column *\/$/;"	m	struct:Table	file:	access:public
Table::addColOffset	sqlite3.c	/^  int addColOffset;    \/* Offset in CREATE TABLE stmt to add a new column *\/$/;"	m	struct:Table	file:	access:public
Table::azModuleArg	sqlite3.c	/^  char **azModuleArg;  \/* Text of all module args. [0] is module name *\/$/;"	m	struct:Table	file:	access:public
Table::costMult	sqlite3.c	/^  LogEst costMult;     \/* Cost multiplier for using this table *\/$/;"	m	struct:Table	file:	access:public
Table::iPKey	sqlite3.c	/^  i16 iPKey;           \/* If not negative, use aCol[iPKey] as the primary key *\/$/;"	m	struct:Table	file:	access:public
Table::keyConf	sqlite3.c	/^  u8 keyConf;          \/* What to do in case of uniqueness conflict on iPKey *\/$/;"	m	struct:Table	file:	access:public
Table::nCol	sqlite3.c	/^  i16 nCol;            \/* Number of columns in this table *\/$/;"	m	struct:Table	file:	access:public
Table::nModuleArg	sqlite3.c	/^  int nModuleArg;      \/* Number of arguments to the module *\/$/;"	m	struct:Table	file:	access:public
Table::nRef	sqlite3.c	/^  u16 nRef;            \/* Number of pointers to this Table *\/$/;"	m	struct:Table	file:	access:public
Table::nRowLogEst	sqlite3.c	/^  LogEst nRowLogEst;   \/* Estimated rows in table - from sqlite_stat1 table *\/$/;"	m	struct:Table	file:	access:public
Table::pCheck	sqlite3.c	/^  ExprList *pCheck;    \/* All CHECK constraints *\/$/;"	m	struct:Table	file:	access:public
Table::pFKey	sqlite3.c	/^  FKey *pFKey;         \/* Linked list of all foreign keys in this table *\/$/;"	m	struct:Table	file:	access:public
Table::pIndex	sqlite3.c	/^  Index *pIndex;       \/* List of SQL indexes on this table. *\/$/;"	m	struct:Table	file:	access:public
Table::pNextZombie	sqlite3.c	/^  Table *pNextZombie;  \/* Next on the Parse.pZombieTab list *\/$/;"	m	struct:Table	file:	access:public
Table::pSchema	sqlite3.c	/^  Schema *pSchema;     \/* Schema that contains this table *\/$/;"	m	struct:Table	file:	access:public
Table::pSelect	sqlite3.c	/^  Select *pSelect;     \/* NULL for tables.  Points to definition if a view. *\/$/;"	m	struct:Table	file:	access:public
Table::pTrigger	sqlite3.c	/^  Trigger *pTrigger;   \/* List of triggers stored in pSchema *\/$/;"	m	struct:Table	file:	access:public
Table::pVTable	sqlite3.c	/^  VTable *pVTable;     \/* List of VTable objects. *\/$/;"	m	struct:Table	file:	access:public
Table::szTabRow	sqlite3.c	/^  LogEst szTabRow;     \/* Estimated size of each table row in bytes *\/$/;"	m	struct:Table	file:	access:public
Table::tabFlags	sqlite3.c	/^  u8 tabFlags;         \/* Mask of TF_* values *\/$/;"	m	struct:Table	file:	access:public
Table::tnum	sqlite3.c	/^  int tnum;            \/* Root BTree node for this table (see note above) *\/$/;"	m	struct:Table	file:	access:public
Table::zColAff	sqlite3.c	/^  char *zColAff;       \/* String defining the affinity of each column *\/$/;"	m	struct:Table	file:	access:public
Table::zName	sqlite3.c	/^  char *zName;         \/* Name of the table or view *\/$/;"	m	struct:Table	file:	access:public
TableLock	sqlite3.c	/^struct TableLock {$/;"	s	file:
TableLock	sqlite3.c	/^typedef struct TableLock TableLock;$/;"	t	typeref:struct:TableLock	file:
TableLock::iDb	sqlite3.c	/^  int iDb;             \/* The database containing the table to be locked *\/$/;"	m	struct:TableLock	file:	access:public
TableLock::iTab	sqlite3.c	/^  int iTab;            \/* The root page of the table to be locked *\/$/;"	m	struct:TableLock	file:	access:public
TableLock::isWriteLock	sqlite3.c	/^  u8 isWriteLock;      \/* True for write lock.  False for a read lock *\/$/;"	m	struct:TableLock	file:	access:public
TableLock::zName	sqlite3.c	/^  const char *zName;   \/* Name of the table *\/$/;"	m	struct:TableLock	file:	access:public
TermOffset	sqlite3.c	/^struct TermOffset {$/;"	s	file:
TermOffset	sqlite3.c	/^typedef struct TermOffset TermOffset;$/;"	t	typeref:struct:TermOffset	file:
TermOffset::iOff	sqlite3.c	/^  int iOff;                       \/* Offset of this term from read positions *\/$/;"	m	struct:TermOffset	file:	access:public
TermOffset::iPos	sqlite3.c	/^  int iPos;                       \/* Position just read from pList *\/$/;"	m	struct:TermOffset	file:	access:public
TermOffset::pList	sqlite3.c	/^  char *pList;                    \/* Position-list *\/$/;"	m	struct:TermOffset	file:	access:public
TermOffsetCtx	sqlite3.c	/^struct TermOffsetCtx {$/;"	s	file:
TermOffsetCtx	sqlite3.c	/^typedef struct TermOffsetCtx TermOffsetCtx;$/;"	t	typeref:struct:TermOffsetCtx	file:
TermOffsetCtx::aTerm	sqlite3.c	/^  TermOffset *aTerm;$/;"	m	struct:TermOffsetCtx	file:	access:public
TermOffsetCtx::iCol	sqlite3.c	/^  int iCol;                       \/* Column of table to populate aTerm for *\/$/;"	m	struct:TermOffsetCtx	file:	access:public
TermOffsetCtx::iDocid	sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TermOffsetCtx	file:	access:public
TermOffsetCtx::iTerm	sqlite3.c	/^  int iTerm;$/;"	m	struct:TermOffsetCtx	file:	access:public
TermOffsetCtx::pCsr	sqlite3.c	/^  Fts3Cursor *pCsr;$/;"	m	struct:TermOffsetCtx	file:	access:public
TermSelect	sqlite3.c	/^struct TermSelect {$/;"	s	file:
TermSelect	sqlite3.c	/^typedef struct TermSelect TermSelect;$/;"	t	typeref:struct:TermSelect	file:
TermSelect::aaOutput	sqlite3.c	/^  char *aaOutput[16];             \/* Malloc'd output buffers *\/$/;"	m	struct:TermSelect	file:	access:public
TermSelect::anOutput	sqlite3.c	/^  int anOutput[16];               \/* Size each output buffer in bytes *\/$/;"	m	struct:TermSelect	file:	access:public
Token	sqlite3.c	/^struct Token {$/;"	s	file:
Token	sqlite3.c	/^typedef struct Token Token;$/;"	t	typeref:struct:Token	file:
Token::n	sqlite3.c	/^  unsigned int n;    \/* Number of characters in this token *\/$/;"	m	struct:Token	file:	access:public
Token::z	sqlite3.c	/^  const char *z;     \/* Text of the token.  Not NULL-terminated! *\/$/;"	m	struct:Token	file:	access:public
TokenDoclist	sqlite3.c	/^struct TokenDoclist {$/;"	s	file:
TokenDoclist	sqlite3.c	/^typedef struct TokenDoclist TokenDoclist;$/;"	t	typeref:struct:TokenDoclist	file:
TokenDoclist::bIgnore	sqlite3.c	/^  int bIgnore;$/;"	m	struct:TokenDoclist	file:	access:public
TokenDoclist::iDocid	sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TokenDoclist	file:	access:public
TokenDoclist::nList	sqlite3.c	/^  int nList;$/;"	m	struct:TokenDoclist	file:	access:public
TokenDoclist::pList	sqlite3.c	/^  char *pList;$/;"	m	struct:TokenDoclist	file:	access:public
TreeView	sqlite3.c	/^struct TreeView {$/;"	s	file:
TreeView	sqlite3.c	/^typedef struct TreeView TreeView;$/;"	t	typeref:struct:TreeView	file:
TreeView::bLine	sqlite3.c	/^  u8  bLine[100];         \/* Draw vertical in column i if bLine[i] is true *\/$/;"	m	struct:TreeView	file:	access:public
TreeView::iLevel	sqlite3.c	/^  int iLevel;             \/* Which level of the tree we are on *\/$/;"	m	struct:TreeView	file:	access:public
TrigEvent	sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	s	file:
TrigEvent::a	sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:	access:public
TrigEvent::b	sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:	access:public
Trigger	sqlite3.c	/^struct Trigger {$/;"	s	file:
Trigger	sqlite3.c	/^typedef struct Trigger Trigger;$/;"	t	typeref:struct:Trigger	file:
Trigger::op	sqlite3.c	/^  u8 op;                  \/* One of TK_DELETE, TK_UPDATE, TK_INSERT         *\/$/;"	m	struct:Trigger	file:	access:public
Trigger::pColumns	sqlite3.c	/^  IdList *pColumns;       \/* If this is an UPDATE OF <column-list> trigger,$/;"	m	struct:Trigger	file:	access:public
Trigger::pNext	sqlite3.c	/^  Trigger *pNext;         \/* Next trigger associated with the table *\/$/;"	m	struct:Trigger	file:	access:public
Trigger::pSchema	sqlite3.c	/^  Schema *pSchema;        \/* Schema containing the trigger *\/$/;"	m	struct:Trigger	file:	access:public
Trigger::pTabSchema	sqlite3.c	/^  Schema *pTabSchema;     \/* Schema containing the table *\/$/;"	m	struct:Trigger	file:	access:public
Trigger::pWhen	sqlite3.c	/^  Expr *pWhen;            \/* The WHEN clause of the expression (may be NULL) *\/$/;"	m	struct:Trigger	file:	access:public
Trigger::step_list	sqlite3.c	/^  TriggerStep *step_list; \/* Link list of trigger program steps             *\/$/;"	m	struct:Trigger	file:	access:public
Trigger::table	sqlite3.c	/^  char *table;            \/* The table or view to which the trigger applies *\/$/;"	m	struct:Trigger	file:	access:public
Trigger::tr_tm	sqlite3.c	/^  u8 tr_tm;               \/* One of TRIGGER_BEFORE, TRIGGER_AFTER *\/$/;"	m	struct:Trigger	file:	access:public
Trigger::zName	sqlite3.c	/^  char *zName;            \/* The name of the trigger                        *\/$/;"	m	struct:Trigger	file:	access:public
TriggerPrg	sqlite3.c	/^struct TriggerPrg {$/;"	s	file:
TriggerPrg	sqlite3.c	/^typedef struct TriggerPrg TriggerPrg;$/;"	t	typeref:struct:TriggerPrg	file:
TriggerPrg::aColmask	sqlite3.c	/^  u32 aColmask[2];        \/* Masks of old.*, new.* columns accessed *\/$/;"	m	struct:TriggerPrg	file:	access:public
TriggerPrg::orconf	sqlite3.c	/^  int orconf;             \/* Default ON CONFLICT policy *\/$/;"	m	struct:TriggerPrg	file:	access:public
TriggerPrg::pNext	sqlite3.c	/^  TriggerPrg *pNext;      \/* Next entry in Parse.pTriggerPrg list *\/$/;"	m	struct:TriggerPrg	file:	access:public
TriggerPrg::pProgram	sqlite3.c	/^  SubProgram *pProgram;   \/* Program implementing pTrigger\/orconf *\/$/;"	m	struct:TriggerPrg	file:	access:public
TriggerPrg::pTrigger	sqlite3.c	/^  Trigger *pTrigger;      \/* Trigger this program was coded from *\/$/;"	m	struct:TriggerPrg	file:	access:public
TriggerStep	sqlite3.c	/^struct TriggerStep {$/;"	s	file:
TriggerStep	sqlite3.c	/^typedef struct TriggerStep TriggerStep;$/;"	t	typeref:struct:TriggerStep	file:
TriggerStep::op	sqlite3.c	/^  u8 op;               \/* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT *\/$/;"	m	struct:TriggerStep	file:	access:public
TriggerStep::orconf	sqlite3.c	/^  u8 orconf;           \/* OE_Rollback etc. *\/$/;"	m	struct:TriggerStep	file:	access:public
TriggerStep::pExprList	sqlite3.c	/^  ExprList *pExprList; \/* SET clause for UPDATE. *\/$/;"	m	struct:TriggerStep	file:	access:public
TriggerStep::pIdList	sqlite3.c	/^  IdList *pIdList;     \/* Column names for INSERT *\/$/;"	m	struct:TriggerStep	file:	access:public
TriggerStep::pLast	sqlite3.c	/^  TriggerStep *pLast;  \/* Last element in link-list. Valid for 1st elem only *\/$/;"	m	struct:TriggerStep	file:	access:public
TriggerStep::pNext	sqlite3.c	/^  TriggerStep *pNext;  \/* Next in the link-list *\/$/;"	m	struct:TriggerStep	file:	access:public
TriggerStep::pSelect	sqlite3.c	/^  Select *pSelect;     \/* SELECT statment or RHS of INSERT INTO .. SELECT ... *\/$/;"	m	struct:TriggerStep	file:	access:public
TriggerStep::pTrig	sqlite3.c	/^  Trigger *pTrig;      \/* The trigger that this step is a part of *\/$/;"	m	struct:TriggerStep	file:	access:public
TriggerStep::pWhere	sqlite3.c	/^  Expr *pWhere;        \/* The WHERE clause for DELETE or UPDATE steps *\/$/;"	m	struct:TriggerStep	file:	access:public
TriggerStep::target	sqlite3.c	/^  Token target;        \/* Target table for DELETE, UPDATE, INSERT *\/$/;"	m	struct:TriggerStep	file:	access:public
UAUTH_Admin	sqlite3.c	10547;"	d	file:
UAUTH_Fail	sqlite3.c	10545;"	d	file:
UAUTH_Unknown	sqlite3.c	10544;"	d	file:
UAUTH_User	sqlite3.c	10546;"	d	file:
UINT16_TYPE	sqlite3.c	8553;"	d	file:
UINT16_TYPE	sqlite3.c	8555;"	d	file:
UINT32_TYPE	sqlite3.c	8546;"	d	file:
UINT32_TYPE	sqlite3.c	8548;"	d	file:
UINT8_TYPE	sqlite3.c	8567;"	d	file:
UINT8_TYPE	sqlite3.c	8569;"	d	file:
UNICODE_STRING_MAX_CHARS	sqlite3.c	32653;"	d	file:
UNIXFILE_DELETE	sqlite3.c	24853;"	d	file:
UNIXFILE_DIRSYNC	sqlite3.c	24848;"	d	file:
UNIXFILE_DIRSYNC	sqlite3.c	24850;"	d	file:
UNIXFILE_EXCL	sqlite3.c	24844;"	d	file:
UNIXFILE_NOLOCK	sqlite3.c	24855;"	d	file:
UNIXFILE_PERSIST_WAL	sqlite3.c	24846;"	d	file:
UNIXFILE_PSOW	sqlite3.c	24852;"	d	file:
UNIXFILE_RDONLY	sqlite3.c	24845;"	d	file:
UNIXFILE_URI	sqlite3.c	24854;"	d	file:
UNIXFILE_WARNED	sqlite3.c	24856;"	d	file:
UNIXVFS	sqlite3.c	32259;"	d	file:
UNIX_SHM_BASE	sqlite3.c	28882;"	d	file:
UNIX_SHM_DMS	sqlite3.c	28883;"	d	file:
UNKNOWN_LOCK	sqlite3.c	41274;"	d	file:
UNUSED_PARAMETER	sqlite3.c	129505;"	d	file:
UNUSED_PARAMETER	sqlite3.c	147548;"	d	file:
UNUSED_PARAMETER	sqlite3.c	8871;"	d	file:
UNUSED_PARAMETER2	sqlite3.c	8872;"	d	file:
UNUSED_VARIABLE_VALUE	sqlite3.c	32702;"	d	file:
UPDATE_MAX_BLOBSIZE	sqlite3.c	69060;"	d	file:
UPDATE_MAX_BLOBSIZE	sqlite3.c	69062;"	d	file:
USEFETCH	sqlite3.c	41654;"	d	file:
USEFETCH	sqlite3.c	41656;"	d	file:
UnixUnusedFd	sqlite3.c	/^struct UnixUnusedFd {$/;"	s	file:
UnixUnusedFd	sqlite3.c	/^typedef struct UnixUnusedFd UnixUnusedFd;     \/* An unused file descriptor *\/$/;"	t	typeref:struct:UnixUnusedFd	file:
UnixUnusedFd::fd	sqlite3.c	/^  int fd;                   \/* File descriptor to close *\/$/;"	m	struct:UnixUnusedFd	file:	access:public
UnixUnusedFd::flags	sqlite3.c	/^  int flags;                \/* Flags this file descriptor was opened with *\/$/;"	m	struct:UnixUnusedFd	file:	access:public
UnixUnusedFd::pNext	sqlite3.c	/^  UnixUnusedFd *pNext;      \/* Next unused file descriptor on same file *\/$/;"	m	struct:UnixUnusedFd	file:	access:public
UnmapViewOfFile	sqlite3.c	/^WINBASEAPI BOOL WINAPI UnmapViewOfFile(LPCVOID);$/;"	p	file:
UnpackedRecord	sqlite3.c	/^struct UnpackedRecord {$/;"	s	file:
UnpackedRecord	sqlite3.c	/^typedef struct UnpackedRecord UnpackedRecord;$/;"	t	typeref:struct:UnpackedRecord	file:
UnpackedRecord::aMem	sqlite3.c	/^  Mem *aMem;          \/* Values *\/$/;"	m	struct:UnpackedRecord	file:	access:public
UnpackedRecord::default_rc	sqlite3.c	/^  i8 default_rc;      \/* Comparison result if keys are equal *\/$/;"	m	struct:UnpackedRecord	file:	access:public
UnpackedRecord::errCode	sqlite3.c	/^  u8 errCode;         \/* Error detected by xRecordCompare (CORRUPT or NOMEM) *\/$/;"	m	struct:UnpackedRecord	file:	access:public
UnpackedRecord::nField	sqlite3.c	/^  u16 nField;         \/* Number of entries in apMem[] *\/$/;"	m	struct:UnpackedRecord	file:	access:public
UnpackedRecord::pKeyInfo	sqlite3.c	/^  KeyInfo *pKeyInfo;  \/* Collation and sort-order information *\/$/;"	m	struct:UnpackedRecord	file:	access:public
UnpackedRecord::r1	sqlite3.c	/^  int r1;             \/* Value to return if (lhs > rhs) *\/$/;"	m	struct:UnpackedRecord	file:	access:public
UnpackedRecord::r2	sqlite3.c	/^  int r2;             \/* Value to return if (rhs < lhs) *\/$/;"	m	struct:UnpackedRecord	file:	access:public
UpperToLower	sqlite3.c	23032;"	d	file:
VDBE_MAGIC_DEAD	sqlite3.c	14402;"	d	file:
VDBE_MAGIC_HALT	sqlite3.c	14401;"	d	file:
VDBE_MAGIC_INIT	sqlite3.c	14399;"	d	file:
VDBE_MAGIC_RUN	sqlite3.c	14400;"	d	file:
VDBE_OFFSET_LINENO	sqlite3.c	9662;"	d	file:
VDBE_OFFSET_LINENO	sqlite3.c	9668;"	d	file:
VFUNCTION	sqlite3.c	10860;"	d	file:
VTable	sqlite3.c	/^struct VTable {$/;"	s	file:
VTable	sqlite3.c	/^typedef struct VTable VTable;$/;"	t	typeref:struct:VTable	file:
VTable::bConstraint	sqlite3.c	/^  u8 bConstraint;           \/* True if constraints are supported *\/$/;"	m	struct:VTable	file:	access:public
VTable::db	sqlite3.c	/^  sqlite3 *db;              \/* Database connection associated with this table *\/$/;"	m	struct:VTable	file:	access:public
VTable::iSavepoint	sqlite3.c	/^  int iSavepoint;           \/* Depth of the SAVEPOINT stack *\/$/;"	m	struct:VTable	file:	access:public
VTable::nRef	sqlite3.c	/^  int nRef;                 \/* Number of pointers to this structure *\/$/;"	m	struct:VTable	file:	access:public
VTable::pMod	sqlite3.c	/^  Module *pMod;             \/* Pointer to module implementation *\/$/;"	m	struct:VTable	file:	access:public
VTable::pNext	sqlite3.c	/^  VTable *pNext;            \/* Next in linked list (see above) *\/$/;"	m	struct:VTable	file:	access:public
VTable::pVtab	sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Pointer to vtab instance *\/$/;"	m	struct:VTable	file:	access:public
VVA_ONLY	sqlite3.c	8109;"	d	file:
VVA_ONLY	sqlite3.c	8111;"	d	file:
ValueNewStat4Ctx	sqlite3.c	/^struct ValueNewStat4Ctx {$/;"	s	file:
ValueNewStat4Ctx::iVal	sqlite3.c	/^  int iVal;$/;"	m	struct:ValueNewStat4Ctx	file:	access:public
ValueNewStat4Ctx::pIdx	sqlite3.c	/^  Index *pIdx;$/;"	m	struct:ValueNewStat4Ctx	file:	access:public
ValueNewStat4Ctx::pParse	sqlite3.c	/^  Parse *pParse;$/;"	m	struct:ValueNewStat4Ctx	file:	access:public
ValueNewStat4Ctx::ppRec	sqlite3.c	/^  UnpackedRecord **ppRec;$/;"	m	struct:ValueNewStat4Ctx	file:	access:public
Vdbe	sqlite3.c	/^struct Vdbe {$/;"	s	file:
Vdbe	sqlite3.c	/^typedef struct Vdbe Vdbe;$/;"	t	typeref:struct:Vdbe	file:
Vdbe::aColName	sqlite3.c	/^  Mem *aColName;          \/* Column names to return *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::aCounter	sqlite3.c	/^  u32 aCounter[5];        \/* Counters used by sqlite3_stmt_status() *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::aMem	sqlite3.c	/^  Mem *aMem;              \/* The memory locations *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::aOnceFlag	sqlite3.c	/^  u8 *aOnceFlag;          \/* Flags for OP_Once *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::aOp	sqlite3.c	/^  Op *aOp;                \/* Space to hold the virtual machine's program *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::aVar	sqlite3.c	/^  Mem *aVar;              \/* Values for the OP_Variable opcode. *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::apArg	sqlite3.c	/^  Mem **apArg;            \/* Arguments to currently executing user function *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::apCsr	sqlite3.c	/^  VdbeCursor **apCsr;     \/* One element of this array for each open cursor *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::azVar	sqlite3.c	/^  char **azVar;           \/* Name of variables *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::bIsReader	sqlite3.c	/^  bft bIsReader:1;        \/* True for statements that read *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::btreeMask	sqlite3.c	/^  yDbMask btreeMask;      \/* Bitmask of db->aDb[] entries referenced *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::cacheCtr	sqlite3.c	/^  u32 cacheCtr;           \/* VdbeCursor row cache generation counter *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::changeCntOn	sqlite3.c	/^  bft changeCntOn:1;      \/* True to update the change-counter *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::db	sqlite3.c	/^  sqlite3 *db;            \/* The database connection that owns this statement *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::doingRerun	sqlite3.c	/^  bft doingRerun:1;       \/* True if rerunning after an auto-reprepare *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::errorAction	sqlite3.c	/^  u8 errorAction;         \/* Recovery action to do in case of an error *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::expired	sqlite3.c	/^  bft expired:1;          \/* True if the VM needs to be recompiled *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::explain	sqlite3.c	/^  bft explain:2;          \/* True if EXPLAIN present on SQL command *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::expmask	sqlite3.c	/^  u32 expmask;            \/* Binding to these vars invalidates VM *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::iCurrentTime	sqlite3.c	/^  i64 iCurrentTime;       \/* Value of julianday('now') for this statement *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::iStatement	sqlite3.c	/^  int iStatement;         \/* Statement number (or 0 if has not opened stmt) *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::inVtabMethod	sqlite3.c	/^  bft inVtabMethod:2;     \/* See comments above *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::isPrepareV2	sqlite3.c	/^  bft isPrepareV2:1;      \/* True if prepared with prepare_v2() *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::lockMask	sqlite3.c	/^  yDbMask lockMask;       \/* Subset of btreeMask that requires a lock *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::magic	sqlite3.c	/^  u32 magic;              \/* Magic number for sanity checking *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::minWriteFileFormat	sqlite3.c	/^  u8 minWriteFileFormat;  \/* Minimum file format for writable database files *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::nChange	sqlite3.c	/^  int nChange;            \/* Number of db changes made since last reset *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::nCursor	sqlite3.c	/^  int nCursor;            \/* Number of slots in apCsr[] *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::nFkConstraint	sqlite3.c	/^  i64 nFkConstraint;      \/* Number of imm. FK constraints this VM *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::nFrame	sqlite3.c	/^  int nFrame;             \/* Number of frames in pFrame list *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::nMem	sqlite3.c	/^  int nMem;               \/* Number of memory locations currently allocated *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::nOnceFlag	sqlite3.c	/^  int nOnceFlag;          \/* Size of array aOnceFlag[] *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::nOp	sqlite3.c	/^  int nOp;                \/* Number of instructions in the program *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::nResColumn	sqlite3.c	/^  u16 nResColumn;         \/* Number of columns in one row of the result set *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::nStmtDefCons	sqlite3.c	/^  i64 nStmtDefCons;       \/* Number of def. constraints when stmt started *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::nStmtDefImmCons	sqlite3.c	/^  i64 nStmtDefImmCons;    \/* Number of def. imm constraints when stmt started *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::nVar	sqlite3.c	/^  ynVar nVar;             \/* Number of entries in aVar[] *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::nzVar	sqlite3.c	/^  ynVar nzVar;            \/* Number of entries in azVar[] *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::pAuxData	sqlite3.c	/^  AuxData *pAuxData;      \/* Linked list of auxdata allocations *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::pDelFrame	sqlite3.c	/^  VdbeFrame *pDelFrame;   \/* List of frame objects to free on VM reset *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::pFrame	sqlite3.c	/^  VdbeFrame *pFrame;      \/* Parent frame *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::pFree	sqlite3.c	/^  void *pFree;            \/* Free this when deleting the vdbe *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::pNext	sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::pParse	sqlite3.c	/^  Parse *pParse;          \/* Parsing context used to create this Vdbe *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::pPrev	sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::pProgram	sqlite3.c	/^  SubProgram *pProgram;   \/* Linked list of all sub-programs used by VM *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::pResultSet	sqlite3.c	/^  Mem *pResultSet;        \/* Pointer to an array of results *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::pc	sqlite3.c	/^  int pc;                 \/* The program counter *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::rc	sqlite3.c	/^  int rc;                 \/* Value to return *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::readOnly	sqlite3.c	/^  bft readOnly:1;         \/* True for statements that do not write *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::runOnlyOnce	sqlite3.c	/^  bft runOnlyOnce:1;      \/* Automatically expire on reset *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::startTime	sqlite3.c	/^  i64 startTime;          \/* Time when query started - used for profiling *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::usesStmtJournal	sqlite3.c	/^  bft usesStmtJournal:1;  \/* True if uses a statement journal *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::zErrMsg	sqlite3.c	/^  char *zErrMsg;          \/* Error message written here *\/$/;"	m	struct:Vdbe	file:	access:public
Vdbe::zSql	sqlite3.c	/^  char *zSql;             \/* Text of the SQL statement that generated this *\/$/;"	m	struct:Vdbe	file:	access:public
VdbeBranchTaken	sqlite3.c	69082;"	d	file:
VdbeBranchTaken	sqlite3.c	69084;"	d	file:
VdbeComment	sqlite3.c	9620;"	d	file:
VdbeComment	sqlite3.c	9629;"	d	file:
VdbeCoverage	sqlite3.c	9658;"	d	file:
VdbeCoverage	sqlite3.c	9664;"	d	file:
VdbeCoverageAlwaysTaken	sqlite3.c	9660;"	d	file:
VdbeCoverageAlwaysTaken	sqlite3.c	9666;"	d	file:
VdbeCoverageIf	sqlite3.c	9659;"	d	file:
VdbeCoverageIf	sqlite3.c	9665;"	d	file:
VdbeCoverageNeverTaken	sqlite3.c	9661;"	d	file:
VdbeCoverageNeverTaken	sqlite3.c	9667;"	d	file:
VdbeCursor	sqlite3.c	/^struct VdbeCursor {$/;"	s	file:
VdbeCursor	sqlite3.c	/^typedef struct VdbeCursor VdbeCursor;$/;"	t	typeref:struct:VdbeCursor	file:
VdbeCursor::aOffset	sqlite3.c	/^  u32 *aOffset;         \/* Pointer to aType[nField] *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::aRow	sqlite3.c	/^  const u8 *aRow;       \/* Data for the current row, if all on one page *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::aType	sqlite3.c	/^  u32 aType[1];         \/* Type values for all entries in the record *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::cacheStatus	sqlite3.c	/^  u32 cacheStatus;      \/* Cache is valid if this matches Vdbe.cacheCtr *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::deferredMoveto	sqlite3.c	/^  u8 deferredMoveto;    \/* A call to sqlite3BtreeMoveto() is needed *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::iDb	sqlite3.c	/^  i8 iDb;               \/* Index of cursor database in db->aDb[] (or -1) *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::iHdrOffset	sqlite3.c	/^  u32 iHdrOffset;       \/* Offset to next unparsed byte of the header *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::isEphemeral	sqlite3.c	/^  Bool isEphemeral:1;   \/* True for an ephemeral table *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::isOrdered	sqlite3.c	/^  Bool isOrdered:1;     \/* True if the underlying table is BTREE_UNORDERED *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::isTable	sqlite3.c	/^  Bool isTable:1;       \/* True if a table requiring integer keys *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::movetoTarget	sqlite3.c	/^  i64 movetoTarget;     \/* Argument to the deferred sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::nField	sqlite3.c	/^  i16 nField;           \/* Number of fields in the header *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::nHdrParsed	sqlite3.c	/^  u16 nHdrParsed;       \/* Number of header fields parsed so far *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::nullRow	sqlite3.c	/^  u8 nullRow;           \/* True if pointing to a row with no data *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::pBt	sqlite3.c	/^  Btree *pBt;           \/* Separate file holding temporary table *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::pCursor	sqlite3.c	/^  BtCursor *pCursor;    \/* The cursor structure of the backend *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::pKeyInfo	sqlite3.c	/^  KeyInfo *pKeyInfo;    \/* Info about index keys needed by index cursors *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::pSorter	sqlite3.c	/^  VdbeSorter *pSorter;  \/* Sorter object for OP_SorterOpen cursors *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::pVtabCursor	sqlite3.c	/^  sqlite3_vtab_cursor *pVtabCursor;  \/* The cursor for a virtual table *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::payloadSize	sqlite3.c	/^  u32 payloadSize;      \/* Total number of bytes in the record *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::pgnoRoot	sqlite3.c	/^  Pgno pgnoRoot;        \/* Root page of the open btree cursor *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::pseudoTableReg	sqlite3.c	/^  int pseudoTableReg;   \/* Register holding pseudotable content. *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::seekOp	sqlite3.c	/^  u8 seekOp;            \/* Most recent seek operation on this cursor *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::seekResult	sqlite3.c	/^  int seekResult;       \/* Result of previous sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::seqCount	sqlite3.c	/^  i64 seqCount;         \/* Sequence counter *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::szRow	sqlite3.c	/^  u32 szRow;            \/* Byte available in aRow *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeCursor::useRandomRowid	sqlite3.c	/^  Bool useRandomRowid:1;\/* Generate new record numbers semi-randomly *\/$/;"	m	struct:VdbeCursor	file:	access:public
VdbeFrame	sqlite3.c	/^struct VdbeFrame {$/;"	s	file:
VdbeFrame	sqlite3.c	/^typedef struct VdbeFrame VdbeFrame;$/;"	t	typeref:struct:VdbeFrame	file:
VdbeFrame::aMem	sqlite3.c	/^  Mem *aMem;              \/* Array of memory cells for parent frame *\/$/;"	m	struct:VdbeFrame	file:	access:public
VdbeFrame::aOnceFlag	sqlite3.c	/^  u8 *aOnceFlag;          \/* Array of OP_Once flags for parent frame *\/$/;"	m	struct:VdbeFrame	file:	access:public
VdbeFrame::aOp	sqlite3.c	/^  Op *aOp;                \/* Program instructions for parent frame *\/$/;"	m	struct:VdbeFrame	file:	access:public
VdbeFrame::apCsr	sqlite3.c	/^  VdbeCursor **apCsr;     \/* Array of Vdbe cursors for parent frame *\/$/;"	m	struct:VdbeFrame	file:	access:public
VdbeFrame::lastRowid	sqlite3.c	/^  i64 lastRowid;          \/* Last insert rowid (sqlite3.lastRowid) *\/$/;"	m	struct:VdbeFrame	file:	access:public
VdbeFrame::nChange	sqlite3.c	/^  int nChange;            \/* Statement changes (Vdbe.nChanges)     *\/$/;"	m	struct:VdbeFrame	file:	access:public
VdbeFrame::nChildCsr	sqlite3.c	/^  int nChildCsr;          \/* Number of cursors for child frame *\/$/;"	m	struct:VdbeFrame	file:	access:public
VdbeFrame::nChildMem	sqlite3.c	/^  int nChildMem;          \/* Number of memory cells for child frame *\/$/;"	m	struct:VdbeFrame	file:	access:public
VdbeFrame::nCursor	sqlite3.c	/^  int nCursor;            \/* Number of entries in apCsr *\/$/;"	m	struct:VdbeFrame	file:	access:public
VdbeFrame::nMem	sqlite3.c	/^  int nMem;               \/* Number of entries in aMem *\/$/;"	m	struct:VdbeFrame	file:	access:public
VdbeFrame::nOnceFlag	sqlite3.c	/^  int nOnceFlag;          \/* Number of entries in aOnceFlag *\/$/;"	m	struct:VdbeFrame	file:	access:public
VdbeFrame::nOp	sqlite3.c	/^  int nOp;                \/* Size of aOp array *\/$/;"	m	struct:VdbeFrame	file:	access:public
VdbeFrame::pParent	sqlite3.c	/^  VdbeFrame *pParent;     \/* Parent of this frame, or NULL if parent is main *\/$/;"	m	struct:VdbeFrame	file:	access:public
VdbeFrame::pc	sqlite3.c	/^  int pc;                 \/* Program Counter in parent (calling) frame *\/$/;"	m	struct:VdbeFrame	file:	access:public
VdbeFrame::token	sqlite3.c	/^  void *token;            \/* Copy of SubProgram.token *\/$/;"	m	struct:VdbeFrame	file:	access:public
VdbeFrame::v	sqlite3.c	/^  Vdbe *v;                \/* VM this frame belongs to *\/$/;"	m	struct:VdbeFrame	file:	access:public
VdbeFrameMem	sqlite3.c	14174;"	d	file:
VdbeMemDynamic	sqlite3.c	14454;"	d	file:
VdbeModuleComment	sqlite3.c	9624;"	d	file:
VdbeModuleComment	sqlite3.c	9626;"	d	file:
VdbeModuleComment	sqlite3.c	9631;"	d	file:
VdbeNoopComment	sqlite3.c	9622;"	d	file:
VdbeNoopComment	sqlite3.c	9630;"	d	file:
VdbeOp	sqlite3.c	/^struct VdbeOp {$/;"	s	file:
VdbeOp	sqlite3.c	/^typedef struct VdbeOp VdbeOp;$/;"	t	typeref:struct:VdbeOp	file:
VdbeOp::__anon1::ai	sqlite3.c	/^    int *ai;               \/* Used when p4type is P4_INTARRAY *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
VdbeOp::__anon1::i	sqlite3.c	/^    int i;                 \/* Integer value if p4type==P4_INT32 *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
VdbeOp::__anon1::p	sqlite3.c	/^    void *p;               \/* Generic pointer *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
VdbeOp::__anon1::pColl	sqlite3.c	/^    CollSeq *pColl;        \/* Used when p4type is P4_COLLSEQ *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
VdbeOp::__anon1::pFunc	sqlite3.c	/^    FuncDef *pFunc;        \/* Used when p4type is P4_FUNCDEF *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
VdbeOp::__anon1::pI64	sqlite3.c	/^    i64 *pI64;             \/* Used when p4type is P4_INT64 *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
VdbeOp::__anon1::pKeyInfo	sqlite3.c	/^    KeyInfo *pKeyInfo;     \/* Used when p4type is P4_KEYINFO *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
VdbeOp::__anon1::pMem	sqlite3.c	/^    Mem *pMem;             \/* Used when p4type is P4_MEM *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
VdbeOp::__anon1::pProgram	sqlite3.c	/^    SubProgram *pProgram;  \/* Used when p4type is P4_SUBPROGRAM *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
VdbeOp::__anon1::pReal	sqlite3.c	/^    double *pReal;         \/* Used when p4type is P4_REAL *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
VdbeOp::__anon1::pVtab	sqlite3.c	/^    VTable *pVtab;         \/* Used when p4type is P4_VTAB *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
VdbeOp::__anon1::xAdvance	sqlite3.c	/^    int (*xAdvance)(BtCursor *, int *);$/;"	m	union:VdbeOp::__anon1	file:	access:public
VdbeOp::__anon1::z	sqlite3.c	/^    char *z;               \/* Pointer to data for string (char array) types *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
VdbeOp::cnt	sqlite3.c	/^  u32 cnt;                 \/* Number of times this instruction was executed *\/$/;"	m	struct:VdbeOp	file:	access:public
VdbeOp::cycles	sqlite3.c	/^  u64 cycles;              \/* Total time spent executing this instruction *\/$/;"	m	struct:VdbeOp	file:	access:public
VdbeOp::iSrcLine	sqlite3.c	/^  int iSrcLine;            \/* Source-code line that generated this opcode *\/$/;"	m	struct:VdbeOp	file:	access:public
VdbeOp::opcode	sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOp	file:	access:public
VdbeOp::opflags	sqlite3.c	/^  u8 opflags;         \/* Mask of the OPFLG_* flags in opcodes.h *\/$/;"	m	struct:VdbeOp	file:	access:public
VdbeOp::p1	sqlite3.c	/^  int p1;             \/* First operand *\/$/;"	m	struct:VdbeOp	file:	access:public
VdbeOp::p2	sqlite3.c	/^  int p2;             \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOp	file:	access:public
VdbeOp::p3	sqlite3.c	/^  int p3;             \/* The third parameter *\/$/;"	m	struct:VdbeOp	file:	access:public
VdbeOp::p4	sqlite3.c	/^  } p4;$/;"	m	struct:VdbeOp	typeref:union:VdbeOp::__anon1	file:	access:public
VdbeOp::p4type	sqlite3.c	/^  signed char p4type; \/* One of the P4_xxx constants for p4 *\/$/;"	m	struct:VdbeOp	file:	access:public
VdbeOp::p5	sqlite3.c	/^  u8 p5;              \/* Fifth parameter is an unsigned character *\/$/;"	m	struct:VdbeOp	file:	access:public
VdbeOp::zComment	sqlite3.c	/^  char *zComment;          \/* Comment to improve readability *\/$/;"	m	struct:VdbeOp	file:	access:public
VdbeOpIter	sqlite3.c	/^struct VdbeOpIter {$/;"	s	file:
VdbeOpIter	sqlite3.c	/^typedef struct VdbeOpIter VdbeOpIter;$/;"	t	typeref:struct:VdbeOpIter	file:
VdbeOpIter::apSub	sqlite3.c	/^  SubProgram **apSub;        \/* Array of subprograms *\/$/;"	m	struct:VdbeOpIter	file:	access:public
VdbeOpIter::iAddr	sqlite3.c	/^  int iAddr;                 \/* Address of next instruction to return *\/$/;"	m	struct:VdbeOpIter	file:	access:public
VdbeOpIter::iSub	sqlite3.c	/^  int iSub;                  \/* 0 = main program, 1 = first sub-program etc. *\/$/;"	m	struct:VdbeOpIter	file:	access:public
VdbeOpIter::nSub	sqlite3.c	/^  int nSub;                  \/* Number of entries in apSub *\/$/;"	m	struct:VdbeOpIter	file:	access:public
VdbeOpIter::v	sqlite3.c	/^  Vdbe *v;                   \/* Vdbe to iterate through the opcodes of *\/$/;"	m	struct:VdbeOpIter	file:	access:public
VdbeOpList	sqlite3.c	/^struct VdbeOpList {$/;"	s	file:
VdbeOpList	sqlite3.c	/^typedef struct VdbeOpList VdbeOpList;$/;"	t	typeref:struct:VdbeOpList	file:
VdbeOpList::opcode	sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOpList	file:	access:public
VdbeOpList::p1	sqlite3.c	/^  signed char p1;     \/* First operand *\/$/;"	m	struct:VdbeOpList	file:	access:public
VdbeOpList::p2	sqlite3.c	/^  signed char p2;     \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOpList	file:	access:public
VdbeOpList::p3	sqlite3.c	/^  signed char p3;     \/* Third parameter *\/$/;"	m	struct:VdbeOpList	file:	access:public
VdbeSorter	sqlite3.c	/^struct VdbeSorter {$/;"	s	file:
VdbeSorter	sqlite3.c	/^typedef struct VdbeSorter VdbeSorter;$/;"	t	typeref:struct:VdbeSorter	file:
VdbeSorter::aTask	sqlite3.c	/^  SortSubtask aTask[1];           \/* One or more subtasks *\/$/;"	m	struct:VdbeSorter	file:	access:public
VdbeSorter::bUsePMA	sqlite3.c	/^  u8 bUsePMA;                     \/* True if one or more PMAs created *\/$/;"	m	struct:VdbeSorter	file:	access:public
VdbeSorter::bUseThreads	sqlite3.c	/^  u8 bUseThreads;                 \/* True to use background threads *\/$/;"	m	struct:VdbeSorter	file:	access:public
VdbeSorter::db	sqlite3.c	/^  sqlite3 *db;                    \/* Database connection *\/$/;"	m	struct:VdbeSorter	file:	access:public
VdbeSorter::iMemory	sqlite3.c	/^  int iMemory;                    \/* Offset of free space in list.aMemory *\/$/;"	m	struct:VdbeSorter	file:	access:public
VdbeSorter::iPrev	sqlite3.c	/^  u8 iPrev;                       \/* Previous thread used to flush PMA *\/$/;"	m	struct:VdbeSorter	file:	access:public
VdbeSorter::list	sqlite3.c	/^  SorterList list;                \/* List of in-memory records *\/$/;"	m	struct:VdbeSorter	file:	access:public
VdbeSorter::mnPmaSize	sqlite3.c	/^  int mnPmaSize;                  \/* Minimum PMA size, in bytes *\/$/;"	m	struct:VdbeSorter	file:	access:public
VdbeSorter::mxKeysize	sqlite3.c	/^  int mxKeysize;                  \/* Largest serialized key seen so far *\/$/;"	m	struct:VdbeSorter	file:	access:public
VdbeSorter::mxPmaSize	sqlite3.c	/^  int mxPmaSize;                  \/* Maximum PMA size, in bytes.  0==no limit *\/$/;"	m	struct:VdbeSorter	file:	access:public
VdbeSorter::nMemory	sqlite3.c	/^  int nMemory;                    \/* Size of list.aMemory allocation in bytes *\/$/;"	m	struct:VdbeSorter	file:	access:public
VdbeSorter::nTask	sqlite3.c	/^  u8 nTask;                       \/* Size of aTask[] array *\/$/;"	m	struct:VdbeSorter	file:	access:public
VdbeSorter::pKeyInfo	sqlite3.c	/^  KeyInfo *pKeyInfo;              \/* How to compare records *\/$/;"	m	struct:VdbeSorter	file:	access:public
VdbeSorter::pMerger	sqlite3.c	/^  MergeEngine *pMerger;           \/* Or here, if bUseThreads==0 *\/$/;"	m	struct:VdbeSorter	file:	access:public
VdbeSorter::pReader	sqlite3.c	/^  PmaReader *pReader;             \/* Readr data from here after Rewind() *\/$/;"	m	struct:VdbeSorter	file:	access:public
VdbeSorter::pUnpacked	sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Used by VdbeSorterCompare() *\/$/;"	m	struct:VdbeSorter	file:	access:public
VdbeSorter::pgsz	sqlite3.c	/^  int pgsz;                       \/* Main database page size *\/$/;"	m	struct:VdbeSorter	file:	access:public
VtabCtx	sqlite3.c	/^struct VtabCtx {$/;"	s	file:
VtabCtx	sqlite3.c	/^typedef struct VtabCtx VtabCtx;$/;"	t	typeref:struct:VtabCtx	file:
VtabCtx::pTab	sqlite3.c	/^  Table *pTab;        \/* The Table object to which the virtual table belongs *\/$/;"	m	struct:VtabCtx	file:	access:public
VtabCtx::pVTable	sqlite3.c	/^  VTable *pVTable;    \/* The virtual table being constructed *\/$/;"	m	struct:VtabCtx	file:	access:public
WALINDEX_HDR_SIZE	sqlite3.c	48495;"	d	file:
WALINDEX_LOCK_OFFSET	sqlite3.c	48493;"	d	file:
WALINDEX_LOCK_RESERVED	sqlite3.c	48494;"	d	file:
WALINDEX_MAX_VERSION	sqlite3.c	48388;"	d	file:
WALINDEX_PGSZ	sqlite3.c	48622;"	d	file:
WALTRACE	sqlite3.c	48369;"	d	file:
WALTRACE	sqlite3.c	48371;"	d	file:
WAL_ALL_BUT_WRITE	sqlite3.c	48395;"	d	file:
WAL_CKPT_LOCK	sqlite3.c	48396;"	d	file:
WAL_EXCLUSIVE_MODE	sqlite3.c	48559;"	d	file:
WAL_FRAME_HDRSIZE	sqlite3.c	48498;"	d	file:
WAL_HDRSIZE	sqlite3.c	48502;"	d	file:
WAL_HEAPMEMORY_MODE	sqlite3.c	48560;"	d	file:
WAL_MAGIC	sqlite3.c	48513;"	d	file:
WAL_MAX_VERSION	sqlite3.c	48387;"	d	file:
WAL_NORMAL_MODE	sqlite3.c	48558;"	d	file:
WAL_NREADER	sqlite3.c	48399;"	d	file:
WAL_RDONLY	sqlite3.c	48566;"	d	file:
WAL_RDWR	sqlite3.c	48565;"	d	file:
WAL_READ_LOCK	sqlite3.c	48398;"	d	file:
WAL_RECOVER_LOCK	sqlite3.c	48397;"	d	file:
WAL_RETRY	sqlite3.c	50141;"	d	file:
WAL_SAVEPOINT_NDATA	sqlite3.c	40799;"	d	file:
WAL_SHM_RDONLY	sqlite3.c	48567;"	d	file:
WAL_SYNC_TRANSACTIONS	sqlite3.c	40775;"	d	file:
WAL_WRITE_LOCK	sqlite3.c	48394;"	d	file:
WHERETRACE	sqlite3.c	113199;"	d	file:
WHERETRACE	sqlite3.c	113202;"	d	file:
WHERETRACE_ENABLED	sqlite3.c	113200;"	d	file:
WHERE_AUTO_INDEX	sqlite3.c	113632;"	d	file:
WHERE_BOTH_LIMIT	sqlite3.c	113624;"	d	file:
WHERE_BTM_LIMIT	sqlite3.c	113623;"	d	file:
WHERE_COLUMN_EQ	sqlite3.c	113617;"	d	file:
WHERE_COLUMN_IN	sqlite3.c	113619;"	d	file:
WHERE_COLUMN_NULL	sqlite3.c	113620;"	d	file:
WHERE_COLUMN_RANGE	sqlite3.c	113618;"	d	file:
WHERE_CONSTRAINT	sqlite3.c	113621;"	d	file:
WHERE_DISTINCTBY	sqlite3.c	11761;"	d	file:
WHERE_DISTINCT_NOOP	sqlite3.c	11768;"	d	file:
WHERE_DISTINCT_ORDERED	sqlite3.c	11770;"	d	file:
WHERE_DISTINCT_UNIQUE	sqlite3.c	11769;"	d	file:
WHERE_DISTINCT_UNORDERED	sqlite3.c	11771;"	d	file:
WHERE_DUPLICATES_OK	sqlite3.c	11755;"	d	file:
WHERE_FORCE_TABLE	sqlite3.c	11757;"	d	file:
WHERE_GROUPBY	sqlite3.c	11760;"	d	file:
WHERE_IDX_ONLY	sqlite3.c	113625;"	d	file:
WHERE_INDEXED	sqlite3.c	113627;"	d	file:
WHERE_IN_ABLE	sqlite3.c	113629;"	d	file:
WHERE_IPK	sqlite3.c	113626;"	d	file:
WHERE_LOOP_XFER_SZ	sqlite3.c	113305;"	d	file:
WHERE_MULTI_OR	sqlite3.c	113631;"	d	file:
WHERE_OMIT_OPEN_CLOSE	sqlite3.c	11756;"	d	file:
WHERE_ONEPASS_DESIRED	sqlite3.c	11754;"	d	file:
WHERE_ONEROW	sqlite3.c	113630;"	d	file:
WHERE_ONETABLE_ONLY	sqlite3.c	11758;"	d	file:
WHERE_ORDERBY_MAX	sqlite3.c	11753;"	d	file:
WHERE_ORDERBY_MIN	sqlite3.c	11752;"	d	file:
WHERE_ORDERBY_NORMAL	sqlite3.c	11751;"	d	file:
WHERE_REOPEN_IDX	sqlite3.c	11764;"	d	file:
WHERE_SKIPSCAN	sqlite3.c	113633;"	d	file:
WHERE_SORTBYGROUP	sqlite3.c	11763;"	d	file:
WHERE_TOP_LIMIT	sqlite3.c	113622;"	d	file:
WHERE_UNQ_WANTED	sqlite3.c	113634;"	d	file:
WHERE_VIRTUALTABLE	sqlite3.c	113628;"	d	file:
WHERE_WANT_DISTINCT	sqlite3.c	11762;"	d	file:
WINCE_DELETION_ATTEMPTS	sqlite3.c	34988;"	d	file:
WINFILE_PERSIST_WAL	sqlite3.c	32820;"	d	file:
WINFILE_PSOW	sqlite3.c	32821;"	d	file:
WINFILE_RDONLY	sqlite3.c	32819;"	d	file:
WINMEM_MAGIC1	sqlite3.c	32911;"	d	file:
WINMEM_MAGIC2	sqlite3.c	32912;"	d	file:
WIN_SHM_BASE	sqlite3.c	35955;"	d	file:
WIN_SHM_DMS	sqlite3.c	35956;"	d	file:
WO_ALL	sqlite3.c	113609;"	d	file:
WO_AND	sqlite3.c	113605;"	d	file:
WO_EQ	sqlite3.c	113597;"	d	file:
WO_EQUIV	sqlite3.c	113606;"	d	file:
WO_GE	sqlite3.c	113601;"	d	file:
WO_GT	sqlite3.c	113600;"	d	file:
WO_IN	sqlite3.c	113596;"	d	file:
WO_ISNULL	sqlite3.c	113603;"	d	file:
WO_LE	sqlite3.c	113599;"	d	file:
WO_LT	sqlite3.c	113598;"	d	file:
WO_MATCH	sqlite3.c	113602;"	d	file:
WO_NOOP	sqlite3.c	113607;"	d	file:
WO_OR	sqlite3.c	113604;"	d	file:
WO_SINGLE	sqlite3.c	113610;"	d	file:
WRC_Abort	sqlite3.c	12439;"	d	file:
WRC_Continue	sqlite3.c	12437;"	d	file:
WRC_Prune	sqlite3.c	12438;"	d	file:
WRITE_LOCK	sqlite3.c	51554;"	d	file:
WRITE_UTF16BE	sqlite3.c	22356;"	d	file:
WRITE_UTF16LE	sqlite3.c	22344;"	d	file:
WRITE_UTF8	sqlite3.c	146765;"	d	file:
WRITE_UTF8	sqlite3.c	22324;"	d	file:
Wal	sqlite3.c	/^struct Wal {$/;"	s	file:
Wal	sqlite3.c	/^typedef struct Wal Wal;$/;"	t	typeref:struct:Wal	file:
Wal::apWiData	sqlite3.c	/^  volatile u32 **apWiData;   \/* Pointer to wal-index content in memory *\/$/;"	m	struct:Wal	file:	access:public
Wal::ckptLock	sqlite3.c	/^  u8 ckptLock;               \/* True if holding a checkpoint lock *\/$/;"	m	struct:Wal	file:	access:public
Wal::exclusiveMode	sqlite3.c	/^  u8 exclusiveMode;          \/* Non-zero if connection is in exclusive mode *\/$/;"	m	struct:Wal	file:	access:public
Wal::hdr	sqlite3.c	/^  WalIndexHdr hdr;           \/* Wal-index header for current transaction *\/$/;"	m	struct:Wal	file:	access:public
Wal::iCallback	sqlite3.c	/^  u32 iCallback;             \/* Value to pass to log callback (or 0) *\/$/;"	m	struct:Wal	file:	access:public
Wal::lockError	sqlite3.c	/^  u8 lockError;              \/* True if a locking error has occurred *\/$/;"	m	struct:Wal	file:	access:public
Wal::mxWalSize	sqlite3.c	/^  i64 mxWalSize;             \/* Truncate WAL to this size upon reset *\/$/;"	m	struct:Wal	file:	access:public
Wal::nCkpt	sqlite3.c	/^  u32 nCkpt;                 \/* Checkpoint sequence counter in the wal-header *\/$/;"	m	struct:Wal	file:	access:public
Wal::nWiData	sqlite3.c	/^  int nWiData;               \/* Size of array apWiData *\/$/;"	m	struct:Wal	file:	access:public
Wal::pDbFd	sqlite3.c	/^  sqlite3_file *pDbFd;       \/* File handle for the database file *\/$/;"	m	struct:Wal	file:	access:public
Wal::pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;         \/* The VFS used to create pDbFd *\/$/;"	m	struct:Wal	file:	access:public
Wal::pWalFd	sqlite3.c	/^  sqlite3_file *pWalFd;      \/* File handle for WAL file *\/$/;"	m	struct:Wal	file:	access:public
Wal::padToSectorBoundary	sqlite3.c	/^  u8 padToSectorBoundary;    \/* Pad transactions out to the next sector *\/$/;"	m	struct:Wal	file:	access:public
Wal::readLock	sqlite3.c	/^  i16 readLock;              \/* Which read lock is being held.  -1 for none *\/$/;"	m	struct:Wal	file:	access:public
Wal::readOnly	sqlite3.c	/^  u8 readOnly;               \/* WAL_RDWR, WAL_RDONLY, or WAL_SHM_RDONLY *\/$/;"	m	struct:Wal	file:	access:public
Wal::syncFlags	sqlite3.c	/^  u8 syncFlags;              \/* Flags to use to sync header writes *\/$/;"	m	struct:Wal	file:	access:public
Wal::syncHeader	sqlite3.c	/^  u8 syncHeader;             \/* Fsync the WAL header if true *\/$/;"	m	struct:Wal	file:	access:public
Wal::szFirstBlock	sqlite3.c	/^  int szFirstBlock;          \/* Size of first block written to WAL file *\/$/;"	m	struct:Wal	file:	access:public
Wal::szPage	sqlite3.c	/^  u32 szPage;                \/* Database page size *\/$/;"	m	struct:Wal	file:	access:public
Wal::truncateOnCommit	sqlite3.c	/^  u8 truncateOnCommit;       \/* True to truncate WAL file on commit *\/$/;"	m	struct:Wal	file:	access:public
Wal::writeLock	sqlite3.c	/^  u8 writeLock;              \/* True if in a write transaction *\/$/;"	m	struct:Wal	file:	access:public
Wal::zWalName	sqlite3.c	/^  const char *zWalName;      \/* Name of WAL file *\/$/;"	m	struct:Wal	file:	access:public
WalCkptInfo	sqlite3.c	/^struct WalCkptInfo {$/;"	s	file:
WalCkptInfo	sqlite3.c	/^typedef struct WalCkptInfo WalCkptInfo;$/;"	t	typeref:struct:WalCkptInfo	file:
WalCkptInfo::aReadMark	sqlite3.c	/^  u32 aReadMark[WAL_NREADER];     \/* Reader marks *\/$/;"	m	struct:WalCkptInfo	file:	access:public
WalCkptInfo::nBackfill	sqlite3.c	/^  u32 nBackfill;                  \/* Number of WAL frames backfilled into DB *\/$/;"	m	struct:WalCkptInfo	file:	access:public
WalIndexHdr	sqlite3.c	/^struct WalIndexHdr {$/;"	s	file:
WalIndexHdr	sqlite3.c	/^typedef struct WalIndexHdr WalIndexHdr;$/;"	t	typeref:struct:WalIndexHdr	file:
WalIndexHdr::aCksum	sqlite3.c	/^  u32 aCksum[2];                  \/* Checksum over all prior fields *\/$/;"	m	struct:WalIndexHdr	file:	access:public
WalIndexHdr::aFrameCksum	sqlite3.c	/^  u32 aFrameCksum[2];             \/* Checksum of last frame in log *\/$/;"	m	struct:WalIndexHdr	file:	access:public
WalIndexHdr::aSalt	sqlite3.c	/^  u32 aSalt[2];                   \/* Two salt values copied from WAL header *\/$/;"	m	struct:WalIndexHdr	file:	access:public
WalIndexHdr::bigEndCksum	sqlite3.c	/^  u8 bigEndCksum;                 \/* True if checksums in WAL are big-endian *\/$/;"	m	struct:WalIndexHdr	file:	access:public
WalIndexHdr::iChange	sqlite3.c	/^  u32 iChange;                    \/* Counter incremented each transaction *\/$/;"	m	struct:WalIndexHdr	file:	access:public
WalIndexHdr::iVersion	sqlite3.c	/^  u32 iVersion;                   \/* Wal-index version *\/$/;"	m	struct:WalIndexHdr	file:	access:public
WalIndexHdr::isInit	sqlite3.c	/^  u8 isInit;                      \/* 1 when initialized *\/$/;"	m	struct:WalIndexHdr	file:	access:public
WalIndexHdr::mxFrame	sqlite3.c	/^  u32 mxFrame;                    \/* Index of last valid frame in the WAL *\/$/;"	m	struct:WalIndexHdr	file:	access:public
WalIndexHdr::nPage	sqlite3.c	/^  u32 nPage;                      \/* Size of database in pages *\/$/;"	m	struct:WalIndexHdr	file:	access:public
WalIndexHdr::szPage	sqlite3.c	/^  u16 szPage;                     \/* Database page size in bytes. 1==64K *\/$/;"	m	struct:WalIndexHdr	file:	access:public
WalIndexHdr::unused	sqlite3.c	/^  u32 unused;                     \/* Unused (padding) field *\/$/;"	m	struct:WalIndexHdr	file:	access:public
WalIterator	sqlite3.c	/^struct WalIterator {$/;"	s	file:
WalIterator	sqlite3.c	/^typedef struct WalIterator WalIterator;$/;"	t	typeref:struct:WalIterator	file:
WalIterator::WalSegment	sqlite3.c	/^  struct WalSegment {$/;"	s	struct:WalIterator	file:	access:public
WalIterator::WalSegment::aIndex	sqlite3.c	/^    ht_slot *aIndex;              \/* i0, i1, i2... such that aPgno[iN] ascend *\/$/;"	m	struct:WalIterator::WalSegment	file:	access:public
WalIterator::WalSegment::aPgno	sqlite3.c	/^    u32 *aPgno;                   \/* Array of page numbers. *\/$/;"	m	struct:WalIterator::WalSegment	file:	access:public
WalIterator::WalSegment::iNext	sqlite3.c	/^    int iNext;                    \/* Next slot in aIndex[] not yet returned *\/$/;"	m	struct:WalIterator::WalSegment	file:	access:public
WalIterator::WalSegment::iZero	sqlite3.c	/^    int iZero;                    \/* Frame number associated with aPgno[0] *\/$/;"	m	struct:WalIterator::WalSegment	file:	access:public
WalIterator::WalSegment::nEntry	sqlite3.c	/^    int nEntry;                   \/* Nr. of entries in aPgno[] and aIndex[] *\/$/;"	m	struct:WalIterator::WalSegment	file:	access:public
WalIterator::aSegment	sqlite3.c	/^  } aSegment[1];                  \/* One for every 32KB page in the wal-index *\/$/;"	m	struct:WalIterator	typeref:struct:WalIterator::WalSegment	file:	access:public
WalIterator::iPrior	sqlite3.c	/^  int iPrior;                     \/* Last result returned from the iterator *\/$/;"	m	struct:WalIterator	file:	access:public
WalIterator::nSegment	sqlite3.c	/^  int nSegment;                   \/* Number of entries in aSegment[] *\/$/;"	m	struct:WalIterator	file:	access:public
WalSegment	sqlite3.c	/^  struct WalSegment {$/;"	s	struct:WalIterator	file:	access:public
WalWriter	sqlite3.c	/^typedef struct WalWriter {$/;"	s	file:
WalWriter	sqlite3.c	/^} WalWriter;$/;"	t	typeref:struct:WalWriter	file:
WalWriter::iSyncPoint	sqlite3.c	/^  sqlite3_int64 iSyncPoint;    \/* Fsync at this offset *\/$/;"	m	struct:WalWriter	file:	access:public
WalWriter::pFd	sqlite3.c	/^  sqlite3_file *pFd;           \/* The WAL file to which we write *\/$/;"	m	struct:WalWriter	file:	access:public
WalWriter::pWal	sqlite3.c	/^  Wal *pWal;                   \/* The complete WAL information *\/$/;"	m	struct:WalWriter	file:	access:public
WalWriter::syncFlags	sqlite3.c	/^  int syncFlags;               \/* Flags for the fsync *\/$/;"	m	struct:WalWriter	file:	access:public
WalWriter::szPage	sqlite3.c	/^  int szPage;                  \/* Size of one page *\/$/;"	m	struct:WalWriter	file:	access:public
Walker	sqlite3.c	/^struct Walker {$/;"	s	file:
Walker	sqlite3.c	/^typedef struct Walker Walker;$/;"	t	typeref:struct:Walker	file:
Walker::__anon8::i	sqlite3.c	/^    int i;                                     \/* Integer value *\/$/;"	m	union:Walker::__anon8	file:	access:public
Walker::__anon8::pNC	sqlite3.c	/^    NameContext *pNC;                          \/* Naming context *\/$/;"	m	union:Walker::__anon8	file:	access:public
Walker::__anon8::pSrcCount	sqlite3.c	/^    struct SrcCount *pSrcCount;                \/* Counting column references *\/$/;"	m	union:Walker::__anon8	typeref:struct:Walker::__anon8::SrcCount	file:	access:public
Walker::__anon8::pSrcList	sqlite3.c	/^    SrcList *pSrcList;                         \/* FROM clause *\/$/;"	m	union:Walker::__anon8	file:	access:public
Walker::pParse	sqlite3.c	/^  Parse *pParse;                            \/* Parser context.  *\/$/;"	m	struct:Walker	file:	access:public
Walker::u	sqlite3.c	/^  } u;$/;"	m	struct:Walker	typeref:union:Walker::__anon8	file:	access:public
Walker::walkerDepth	sqlite3.c	/^  int walkerDepth;                          \/* Number of subqueries *\/$/;"	m	struct:Walker	file:	access:public
Walker::xExprCallback	sqlite3.c	/^  int (*xExprCallback)(Walker*, Expr*);     \/* Callback for expressions *\/$/;"	m	struct:Walker	file:	access:public
Walker::xSelectCallback	sqlite3.c	/^  int (*xSelectCallback)(Walker*,Select*);  \/* Callback for SELECTs *\/$/;"	m	struct:Walker	file:	access:public
Walker::xSelectCallback2	sqlite3.c	/^  void (*xSelectCallback2)(Walker*,Select*);\/* Second callback for SELECTs *\/$/;"	m	struct:Walker	file:	access:public
WhereAndInfo	sqlite3.c	/^struct WhereAndInfo {$/;"	s	file:
WhereAndInfo	sqlite3.c	/^typedef struct WhereAndInfo WhereAndInfo;$/;"	t	typeref:struct:WhereAndInfo	file:
WhereAndInfo::wc	sqlite3.c	/^  WhereClause wc;          \/* The subexpression broken out *\/$/;"	m	struct:WhereAndInfo	file:	access:public
WhereClause	sqlite3.c	/^struct WhereClause {$/;"	s	file:
WhereClause	sqlite3.c	/^typedef struct WhereClause WhereClause;$/;"	t	typeref:struct:WhereClause	file:
WhereClause::a	sqlite3.c	/^  WhereTerm *a;            \/* Each a[] describes a term of the WHERE cluase *\/$/;"	m	struct:WhereClause	file:	access:public
WhereClause::aStatic	sqlite3.c	/^  WhereTerm aStatic[1];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:	access:public
WhereClause::aStatic	sqlite3.c	/^  WhereTerm aStatic[8];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:	access:public
WhereClause::nSlot	sqlite3.c	/^  int nSlot;               \/* Number of entries in a[] *\/$/;"	m	struct:WhereClause	file:	access:public
WhereClause::nTerm	sqlite3.c	/^  int nTerm;               \/* Number of terms *\/$/;"	m	struct:WhereClause	file:	access:public
WhereClause::op	sqlite3.c	/^  u8 op;                   \/* Split operator.  TK_AND or TK_OR *\/$/;"	m	struct:WhereClause	file:	access:public
WhereClause::pOuter	sqlite3.c	/^  WhereClause *pOuter;     \/* Outer conjunction *\/$/;"	m	struct:WhereClause	file:	access:public
WhereClause::pWInfo	sqlite3.c	/^  WhereInfo *pWInfo;       \/* WHERE clause processing context *\/$/;"	m	struct:WhereClause	file:	access:public
WhereInfo	sqlite3.c	/^struct WhereInfo {$/;"	s	file:
WhereInfo	sqlite3.c	/^typedef struct WhereInfo WhereInfo;$/;"	t	typeref:struct:WhereInfo	file:
WhereInfo::a	sqlite3.c	/^  WhereLevel a[1];          \/* Information about each nest loop in WHERE *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::aiCurOnePass	sqlite3.c	/^  int aiCurOnePass[2];      \/* OP_OpenWrite cursors for the ONEPASS opt *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::eDistinct	sqlite3.c	/^  u8 eDistinct;             \/* One of the WHERE_DISTINCT_* values below *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::iBreak	sqlite3.c	/^  int iBreak;               \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::iContinue	sqlite3.c	/^  int iContinue;            \/* Jump here to continue with next record *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::iTop	sqlite3.c	/^  int iTop;                 \/* The very beginning of the WHERE loop *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::nLevel	sqlite3.c	/^  u8 nLevel;                \/* Number of nested loop *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::nOBSat	sqlite3.c	/^  i8 nOBSat;                \/* Number of ORDER BY terms satisfied by indices *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::nRowOut	sqlite3.c	/^  LogEst nRowOut;           \/* Estimated number of output rows *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::okOnePass	sqlite3.c	/^  u8 okOnePass;             \/* Ok to use one-pass algorithm for UPDATE\/DELETE *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::pLoops	sqlite3.c	/^  WhereLoop *pLoops;        \/* List of all WhereLoop objects *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::pOrderBy	sqlite3.c	/^  ExprList *pOrderBy;       \/* The ORDER BY clause or NULL *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::pParse	sqlite3.c	/^  Parse *pParse;            \/* Parsing and code generating context *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::pResultSet	sqlite3.c	/^  ExprList *pResultSet;     \/* Result set. DISTINCT operates on these *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::pTabList	sqlite3.c	/^  SrcList *pTabList;        \/* List of tables in the join *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::revMask	sqlite3.c	/^  Bitmask revMask;          \/* Mask of ORDER BY terms that need reversing *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::sMaskSet	sqlite3.c	/^  WhereMaskSet sMaskSet;    \/* Map cursor numbers to bitmasks *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::sWC	sqlite3.c	/^  WhereClause sWC;          \/* Decomposition of the WHERE clause *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::savedNQueryLoop	sqlite3.c	/^  int savedNQueryLoop;      \/* pParse->nQueryLoop outside the WHERE loop *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::sorted	sqlite3.c	/^  u8 sorted;                \/* True if really sorted (not just grouped) *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::untestedTerms	sqlite3.c	/^  u8 untestedTerms;         \/* Not all WHERE terms resolved by outer loop *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereInfo::wctrlFlags	sqlite3.c	/^  u16 wctrlFlags;           \/* Flags originally passed to sqlite3WhereBegin() *\/$/;"	m	struct:WhereInfo	file:	access:public
WhereLevel	sqlite3.c	/^struct WhereLevel {$/;"	s	file:
WhereLevel	sqlite3.c	/^typedef struct WhereLevel WhereLevel;$/;"	t	typeref:struct:WhereLevel	file:
WhereLevel::__anon16::__anon17::InLoop	sqlite3.c	/^      struct InLoop {$/;"	s	struct:WhereLevel::__anon16::__anon17	file:	access:public
WhereLevel::__anon16::__anon17::InLoop::addrInTop	sqlite3.c	/^        int addrInTop;         \/* Top of the IN loop *\/$/;"	m	struct:WhereLevel::__anon16::__anon17::InLoop	file:	access:public
WhereLevel::__anon16::__anon17::InLoop::eEndLoopOp	sqlite3.c	/^        u8 eEndLoopOp;         \/* IN Loop terminator. OP_Next or OP_Prev *\/$/;"	m	struct:WhereLevel::__anon16::__anon17::InLoop	file:	access:public
WhereLevel::__anon16::__anon17::InLoop::iCur	sqlite3.c	/^        int iCur;              \/* The VDBE cursor used by this IN operator *\/$/;"	m	struct:WhereLevel::__anon16::__anon17::InLoop	file:	access:public
WhereLevel::__anon16::__anon17::aInLoop	sqlite3.c	/^      } *aInLoop;           \/* Information about each nested IN operator *\/$/;"	m	struct:WhereLevel::__anon16::__anon17	typeref:struct:WhereLevel::__anon16::__anon17::InLoop	file:	access:public
WhereLevel::__anon16::__anon17::nIn	sqlite3.c	/^      int nIn;              \/* Number of entries in aInLoop[] *\/$/;"	m	struct:WhereLevel::__anon16::__anon17	file:	access:public
WhereLevel::__anon16::in	sqlite3.c	/^    } in;                 \/* Used when pWLoop->wsFlags&WHERE_IN_ABLE *\/$/;"	m	union:WhereLevel::__anon16	typeref:struct:WhereLevel::__anon16::__anon17	file:	access:public
WhereLevel::__anon16::pCovidx	sqlite3.c	/^    Index *pCovidx;       \/* Possible covering index for WHERE_MULTI_OR *\/$/;"	m	union:WhereLevel::__anon16	file:	access:public
WhereLevel::addrBody	sqlite3.c	/^  int addrBody;         \/* Beginning of the body of this loop *\/$/;"	m	struct:WhereLevel	file:	access:public
WhereLevel::addrBrk	sqlite3.c	/^  int addrBrk;          \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereLevel	file:	access:public
WhereLevel::addrCont	sqlite3.c	/^  int addrCont;         \/* Jump here to continue with the next loop cycle *\/$/;"	m	struct:WhereLevel	file:	access:public
WhereLevel::addrFirst	sqlite3.c	/^  int addrFirst;        \/* First instruction of interior of the loop *\/$/;"	m	struct:WhereLevel	file:	access:public
WhereLevel::addrNxt	sqlite3.c	/^  int addrNxt;          \/* Jump here to start the next IN combination *\/$/;"	m	struct:WhereLevel	file:	access:public
WhereLevel::addrSkip	sqlite3.c	/^  int addrSkip;         \/* Jump here for next iteration of skip-scan *\/$/;"	m	struct:WhereLevel	file:	access:public
WhereLevel::iFrom	sqlite3.c	/^  u8 iFrom;             \/* Which entry in the FROM clause *\/$/;"	m	struct:WhereLevel	file:	access:public
WhereLevel::iIdxCur	sqlite3.c	/^  int iIdxCur;          \/* The VDBE cursor used to access pIdx *\/$/;"	m	struct:WhereLevel	file:	access:public
WhereLevel::iLeftJoin	sqlite3.c	/^  int iLeftJoin;        \/* Memory cell used to implement LEFT OUTER JOIN *\/$/;"	m	struct:WhereLevel	file:	access:public
WhereLevel::iTabCur	sqlite3.c	/^  int iTabCur;          \/* The VDBE cursor used to access the table *\/$/;"	m	struct:WhereLevel	file:	access:public
WhereLevel::notReady	sqlite3.c	/^  Bitmask notReady;          \/* FROM entries not usable at this level *\/$/;"	m	struct:WhereLevel	file:	access:public
WhereLevel::op	sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:	access:public
WhereLevel::p1	sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:	access:public
WhereLevel::p2	sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:	access:public
WhereLevel::p3	sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:	access:public
WhereLevel::p5	sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:	access:public
WhereLevel::pWLoop	sqlite3.c	/^  struct WhereLoop *pWLoop;  \/* The selected WhereLoop object *\/$/;"	m	struct:WhereLevel	typeref:struct:WhereLevel::WhereLoop	file:	access:public
WhereLevel::u	sqlite3.c	/^  } u;$/;"	m	struct:WhereLevel	typeref:union:WhereLevel::__anon16	file:	access:public
WhereLoop	sqlite3.c	/^struct WhereLoop {$/;"	s	file:
WhereLoop	sqlite3.c	/^typedef struct WhereLoop WhereLoop;$/;"	t	typeref:struct:WhereLoop	file:
WhereLoop::__anon18::__anon19::nEq	sqlite3.c	/^      u16 nEq;               \/* Number of equality constraints *\/$/;"	m	struct:WhereLoop::__anon18::__anon19	file:	access:public
WhereLoop::__anon18::__anon19::nSkip	sqlite3.c	/^      u16 nSkip;             \/* Number of initial index columns to skip *\/$/;"	m	struct:WhereLoop::__anon18::__anon19	file:	access:public
WhereLoop::__anon18::__anon19::pIndex	sqlite3.c	/^      Index *pIndex;         \/* Index used, or NULL *\/$/;"	m	struct:WhereLoop::__anon18::__anon19	file:	access:public
WhereLoop::__anon18::__anon20::idxNum	sqlite3.c	/^      int idxNum;            \/* Index number *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:	access:public
WhereLoop::__anon18::__anon20::idxStr	sqlite3.c	/^      char *idxStr;          \/* Index identifier string *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:	access:public
WhereLoop::__anon18::__anon20::isOrdered	sqlite3.c	/^      i8 isOrdered;          \/* True if satisfies ORDER BY *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:	access:public
WhereLoop::__anon18::__anon20::needFree	sqlite3.c	/^      u8 needFree;           \/* True if sqlite3_free(idxStr) is needed *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:	access:public
WhereLoop::__anon18::__anon20::omitMask	sqlite3.c	/^      u16 omitMask;          \/* Terms that may be omitted *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:	access:public
WhereLoop::__anon18::btree	sqlite3.c	/^    } btree;$/;"	m	union:WhereLoop::__anon18	typeref:struct:WhereLoop::__anon18::__anon19	file:	access:public
WhereLoop::__anon18::vtab	sqlite3.c	/^    } vtab;$/;"	m	union:WhereLoop::__anon18	typeref:struct:WhereLoop::__anon18::__anon20	file:	access:public
WhereLoop::aLTerm	sqlite3.c	/^  WhereTerm **aLTerm;   \/* WhereTerms used *\/$/;"	m	struct:WhereLoop	file:	access:public
WhereLoop::aLTermSpace	sqlite3.c	/^  WhereTerm *aLTermSpace[4];  \/* Initial aLTerm[] space *\/$/;"	m	struct:WhereLoop	file:	access:public
WhereLoop::cId	sqlite3.c	/^  char cId;             \/* Symbolic ID of this loop for debugging use *\/$/;"	m	struct:WhereLoop	file:	access:public
WhereLoop::iSortIdx	sqlite3.c	/^  u8 iSortIdx;          \/* Sorting index number.  0==None *\/$/;"	m	struct:WhereLoop	file:	access:public
WhereLoop::iTab	sqlite3.c	/^  u8 iTab;              \/* Position in FROM clause of table for this loop *\/$/;"	m	struct:WhereLoop	file:	access:public
WhereLoop::maskSelf	sqlite3.c	/^  Bitmask maskSelf;     \/* Bitmask identifying table iTab *\/$/;"	m	struct:WhereLoop	file:	access:public
WhereLoop::nLSlot	sqlite3.c	/^  u16 nLSlot;           \/* Number of slots allocated for aLTerm[] *\/$/;"	m	struct:WhereLoop	file:	access:public
WhereLoop::nLTerm	sqlite3.c	/^  u16 nLTerm;           \/* Number of entries in aLTerm[] *\/$/;"	m	struct:WhereLoop	file:	access:public
WhereLoop::nOut	sqlite3.c	/^  LogEst nOut;          \/* Estimated number of output rows *\/$/;"	m	struct:WhereLoop	file:	access:public
WhereLoop::pNextLoop	sqlite3.c	/^  WhereLoop *pNextLoop; \/* Next WhereLoop object in the WhereClause *\/$/;"	m	struct:WhereLoop	file:	access:public
WhereLoop::prereq	sqlite3.c	/^  Bitmask prereq;       \/* Bitmask of other loops that must run first *\/$/;"	m	struct:WhereLoop	file:	access:public
WhereLoop::rRun	sqlite3.c	/^  LogEst rRun;          \/* Cost of running each loop *\/$/;"	m	struct:WhereLoop	file:	access:public
WhereLoop::rSetup	sqlite3.c	/^  LogEst rSetup;        \/* One-time setup cost (ex: create transient index) *\/$/;"	m	struct:WhereLoop	file:	access:public
WhereLoop::u	sqlite3.c	/^  } u;$/;"	m	struct:WhereLoop	typeref:union:WhereLoop::__anon18	file:	access:public
WhereLoop::wsFlags	sqlite3.c	/^  u32 wsFlags;          \/* WHERE_* flags describing the plan *\/$/;"	m	struct:WhereLoop	file:	access:public
WhereLoopBuilder	sqlite3.c	/^struct WhereLoopBuilder {$/;"	s	file:
WhereLoopBuilder	sqlite3.c	/^typedef struct WhereLoopBuilder WhereLoopBuilder;$/;"	t	typeref:struct:WhereLoopBuilder	file:
WhereLoopBuilder::nRecValid	sqlite3.c	/^  int nRecValid;            \/* Number of valid fields currently in pRec *\/$/;"	m	struct:WhereLoopBuilder	file:	access:public
WhereLoopBuilder::pNew	sqlite3.c	/^  WhereLoop *pNew;          \/* Template WhereLoop *\/$/;"	m	struct:WhereLoopBuilder	file:	access:public
WhereLoopBuilder::pOrSet	sqlite3.c	/^  WhereOrSet *pOrSet;       \/* Record best loops here, if not NULL *\/$/;"	m	struct:WhereLoopBuilder	file:	access:public
WhereLoopBuilder::pOrderBy	sqlite3.c	/^  ExprList *pOrderBy;       \/* ORDER BY clause *\/$/;"	m	struct:WhereLoopBuilder	file:	access:public
WhereLoopBuilder::pRec	sqlite3.c	/^  UnpackedRecord *pRec;     \/* Probe for stat4 (if required) *\/$/;"	m	struct:WhereLoopBuilder	file:	access:public
WhereLoopBuilder::pWC	sqlite3.c	/^  WhereClause *pWC;         \/* WHERE clause terms *\/$/;"	m	struct:WhereLoopBuilder	file:	access:public
WhereLoopBuilder::pWInfo	sqlite3.c	/^  WhereInfo *pWInfo;        \/* Information about this WHERE *\/$/;"	m	struct:WhereLoopBuilder	file:	access:public
WhereMaskSet	sqlite3.c	/^struct WhereMaskSet {$/;"	s	file:
WhereMaskSet	sqlite3.c	/^typedef struct WhereMaskSet WhereMaskSet;$/;"	t	typeref:struct:WhereMaskSet	file:
WhereMaskSet::ix	sqlite3.c	/^  int ix[BMS];                  \/* Cursor assigned to each bit *\/$/;"	m	struct:WhereMaskSet	file:	access:public
WhereMaskSet::n	sqlite3.c	/^  int n;                        \/* Number of assigned cursor values *\/$/;"	m	struct:WhereMaskSet	file:	access:public
WhereOrCost	sqlite3.c	/^struct WhereOrCost {$/;"	s	file:
WhereOrCost	sqlite3.c	/^typedef struct WhereOrCost WhereOrCost;$/;"	t	typeref:struct:WhereOrCost	file:
WhereOrCost::nOut	sqlite3.c	/^  LogEst nOut;        \/* Number of outputs for this subquery *\/$/;"	m	struct:WhereOrCost	file:	access:public
WhereOrCost::prereq	sqlite3.c	/^  Bitmask prereq;     \/* Prerequisites *\/$/;"	m	struct:WhereOrCost	file:	access:public
WhereOrCost::rRun	sqlite3.c	/^  LogEst rRun;        \/* Cost of running this subquery *\/$/;"	m	struct:WhereOrCost	file:	access:public
WhereOrInfo	sqlite3.c	/^struct WhereOrInfo {$/;"	s	file:
WhereOrInfo	sqlite3.c	/^typedef struct WhereOrInfo WhereOrInfo;$/;"	t	typeref:struct:WhereOrInfo	file:
WhereOrInfo::indexable	sqlite3.c	/^  Bitmask indexable;       \/* Bitmask of all indexable tables in the clause *\/$/;"	m	struct:WhereOrInfo	file:	access:public
WhereOrInfo::wc	sqlite3.c	/^  WhereClause wc;          \/* Decomposition into subterms *\/$/;"	m	struct:WhereOrInfo	file:	access:public
WhereOrSet	sqlite3.c	/^struct WhereOrSet {$/;"	s	file:
WhereOrSet	sqlite3.c	/^typedef struct WhereOrSet WhereOrSet;$/;"	t	typeref:struct:WhereOrSet	file:
WhereOrSet::a	sqlite3.c	/^  WhereOrCost a[N_OR_COST];   \/* Set of best costs *\/$/;"	m	struct:WhereOrSet	file:	access:public
WhereOrSet::n	sqlite3.c	/^  u16 n;                      \/* Number of valid a[] entries *\/$/;"	m	struct:WhereOrSet	file:	access:public
WherePath	sqlite3.c	/^struct WherePath {$/;"	s	file:
WherePath	sqlite3.c	/^typedef struct WherePath WherePath;$/;"	t	typeref:struct:WherePath	file:
WherePath::aLoop	sqlite3.c	/^  WhereLoop **aLoop;    \/* Array of WhereLoop objects implementing this path *\/$/;"	m	struct:WherePath	file:	access:public
WherePath::isOrdered	sqlite3.c	/^  i8 isOrdered;         \/* No. of ORDER BY terms satisfied. -1 for unknown *\/$/;"	m	struct:WherePath	file:	access:public
WherePath::maskLoop	sqlite3.c	/^  Bitmask maskLoop;     \/* Bitmask of all WhereLoop objects in this path *\/$/;"	m	struct:WherePath	file:	access:public
WherePath::nRow	sqlite3.c	/^  LogEst nRow;          \/* Estimated number of rows generated by this path *\/$/;"	m	struct:WherePath	file:	access:public
WherePath::rCost	sqlite3.c	/^  LogEst rCost;         \/* Total cost of this path *\/$/;"	m	struct:WherePath	file:	access:public
WherePath::rUnsorted	sqlite3.c	/^  LogEst rUnsorted;     \/* Total cost of this path ignoring sorting costs *\/$/;"	m	struct:WherePath	file:	access:public
WherePath::revLoop	sqlite3.c	/^  Bitmask revLoop;      \/* aLoop[]s that should be reversed for ORDER BY *\/$/;"	m	struct:WherePath	file:	access:public
WhereScan	sqlite3.c	/^struct WhereScan {$/;"	s	file:
WhereScan	sqlite3.c	/^typedef struct WhereScan WhereScan;$/;"	t	typeref:struct:WhereScan	file:
WhereScan::aEquiv	sqlite3.c	/^  int aEquiv[22];            \/* Cursor,Column pairs for equivalence classes *\/$/;"	m	struct:WhereScan	file:	access:public
WhereScan::iEquiv	sqlite3.c	/^  unsigned char iEquiv;      \/* Next unused slot in aEquiv[] *\/$/;"	m	struct:WhereScan	file:	access:public
WhereScan::idxaff	sqlite3.c	/^  char idxaff;               \/* Must match this affinity, if zCollName!=NULL *\/$/;"	m	struct:WhereScan	file:	access:public
WhereScan::k	sqlite3.c	/^  int k;                     \/* Resume scanning at this->pWC->a[this->k] *\/$/;"	m	struct:WhereScan	file:	access:public
WhereScan::nEquiv	sqlite3.c	/^  unsigned char nEquiv;      \/* Number of entries in aEquiv[] *\/$/;"	m	struct:WhereScan	file:	access:public
WhereScan::opMask	sqlite3.c	/^  u32 opMask;                \/* Acceptable operators *\/$/;"	m	struct:WhereScan	file:	access:public
WhereScan::pOrigWC	sqlite3.c	/^  WhereClause *pOrigWC;      \/* Original, innermost WhereClause *\/$/;"	m	struct:WhereScan	file:	access:public
WhereScan::pWC	sqlite3.c	/^  WhereClause *pWC;          \/* WhereClause currently being scanned *\/$/;"	m	struct:WhereScan	file:	access:public
WhereScan::zCollName	sqlite3.c	/^  char *zCollName;           \/* Required collating sequence, if not NULL *\/$/;"	m	struct:WhereScan	file:	access:public
WhereTerm	sqlite3.c	/^struct WhereTerm {$/;"	s	file:
WhereTerm	sqlite3.c	/^typedef struct WhereTerm WhereTerm;$/;"	t	typeref:struct:WhereTerm	file:
WhereTerm::__anon21::leftColumn	sqlite3.c	/^    int leftColumn;         \/* Column number of X in "X <op> <expr>" *\/$/;"	m	union:WhereTerm::__anon21	file:	access:public
WhereTerm::__anon21::pAndInfo	sqlite3.c	/^    WhereAndInfo *pAndInfo; \/* Extra information if (eOperator& WO_AND)!=0 *\/$/;"	m	union:WhereTerm::__anon21	file:	access:public
WhereTerm::__anon21::pOrInfo	sqlite3.c	/^    WhereOrInfo *pOrInfo;   \/* Extra information if (eOperator & WO_OR)!=0 *\/$/;"	m	union:WhereTerm::__anon21	file:	access:public
WhereTerm::eOperator	sqlite3.c	/^  u16 eOperator;          \/* A WO_xx value describing <op> *\/$/;"	m	struct:WhereTerm	file:	access:public
WhereTerm::iParent	sqlite3.c	/^  int iParent;            \/* Disable pWC->a[iParent] when this term disabled *\/$/;"	m	struct:WhereTerm	file:	access:public
WhereTerm::leftCursor	sqlite3.c	/^  int leftCursor;         \/* Cursor number of X in "X <op> <expr>" *\/$/;"	m	struct:WhereTerm	file:	access:public
WhereTerm::nChild	sqlite3.c	/^  u8 nChild;              \/* Number of children that must disable us *\/$/;"	m	struct:WhereTerm	file:	access:public
WhereTerm::pExpr	sqlite3.c	/^  Expr *pExpr;            \/* Pointer to the subexpression that is this term *\/$/;"	m	struct:WhereTerm	file:	access:public
WhereTerm::pWC	sqlite3.c	/^  WhereClause *pWC;       \/* The clause this term is part of *\/$/;"	m	struct:WhereTerm	file:	access:public
WhereTerm::prereqAll	sqlite3.c	/^  Bitmask prereqAll;      \/* Bitmask of tables referenced by pExpr *\/$/;"	m	struct:WhereTerm	file:	access:public
WhereTerm::prereqRight	sqlite3.c	/^  Bitmask prereqRight;    \/* Bitmask of tables used by pExpr->pRight *\/$/;"	m	struct:WhereTerm	file:	access:public
WhereTerm::truthProb	sqlite3.c	/^  LogEst truthProb;       \/* Probability of truth for this expression *\/$/;"	m	struct:WhereTerm	file:	access:public
WhereTerm::u	sqlite3.c	/^  } u;$/;"	m	struct:WhereTerm	typeref:union:WhereTerm::__anon21	file:	access:public
WhereTerm::wtFlags	sqlite3.c	/^  u8 wtFlags;             \/* TERM_xxx bit flags.  See below *\/$/;"	m	struct:WhereTerm	file:	access:public
With	sqlite3.c	/^struct With {$/;"	s	file:
With	sqlite3.c	/^typedef struct With With;$/;"	t	typeref:struct:With	file:
With::Cte	sqlite3.c	/^  struct Cte {                    \/* For each CTE in the WITH clause.... *\/$/;"	s	struct:With	file:	access:public
With::Cte::pCols	sqlite3.c	/^    ExprList *pCols;                \/* List of explicit column names, or NULL *\/$/;"	m	struct:With::Cte	file:	access:public
With::Cte::pSelect	sqlite3.c	/^    Select *pSelect;                \/* The definition of this CTE *\/$/;"	m	struct:With::Cte	file:	access:public
With::Cte::zErr	sqlite3.c	/^    const char *zErr;               \/* Error message for circular references *\/$/;"	m	struct:With::Cte	file:	access:public
With::Cte::zName	sqlite3.c	/^    char *zName;                    \/* Name of this CTE *\/$/;"	m	struct:With::Cte	file:	access:public
With::a	sqlite3.c	/^  } a[1];$/;"	m	struct:With	typeref:struct:With::Cte	file:	access:public
With::nCte	sqlite3.c	/^  int nCte;                       \/* Number of CTEs in the WITH clause *\/$/;"	m	struct:With	file:	access:public
With::pOuter	sqlite3.c	/^  With *pOuter;                   \/* Containing WITH clause, or NULL *\/$/;"	m	struct:With	file:	access:public
Y	sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:	access:public
YYACTIONTYPE	sqlite3.c	120413;"	d	file:
YYCODETYPE	sqlite3.c	120411;"	d	file:
YYFALLBACK	sqlite3.c	120444;"	d	file:
YYMINORTYPE	sqlite3.c	/^} YYMINORTYPE;$/;"	t	typeref:union:__anon22	file:
YYNOCODE	sqlite3.c	120412;"	d	file:
YYNOERRORRECOVERY	sqlite3.c	120248;"	d	file:
YYNRULE	sqlite3.c	120443;"	d	file:
YYNSTATE	sqlite3.c	120442;"	d	file:
YYSTACKDEPTH	sqlite3.c	120436;"	d	file:
YYWILDCARD	sqlite3.c	120414;"	d	file:
YY_ACCEPT_ACTION	sqlite3.c	120446;"	d	file:
YY_ACTTAB_COUNT	sqlite3.c	120513;"	d	file:
YY_ERROR_ACTION	sqlite3.c	120447;"	d	file:
YY_NO_ACTION	sqlite3.c	120445;"	d	file:
YY_REDUCE_COUNT	sqlite3.c	120868;"	d	file:
YY_REDUCE_MAX	sqlite3.c	120870;"	d	file:
YY_REDUCE_MIN	sqlite3.c	120869;"	d	file:
YY_REDUCE_USE_DFLT	sqlite3.c	120867;"	d	file:
YY_SHIFT_COUNT	sqlite3.c	120819;"	d	file:
YY_SHIFT_MAX	sqlite3.c	120821;"	d	file:
YY_SHIFT_MIN	sqlite3.c	120820;"	d	file:
YY_SHIFT_USE_DFLT	sqlite3.c	120818;"	d	file:
_BSD_SOURCE	sqlite3.c	84;"	d	file:
_BTREE_H_	sqlite3.c	8947;"	d	file:
_FILE_OFFSET_BITS	sqlite3.c	73;"	d	file:
_FTS3_HASH_H_	sqlite3.c	129294;"	d	file:
_FTS3_TOKENIZER_H_	sqlite3.c	129132;"	d	file:
_FTSINT_H	sqlite3.c	129088;"	d	file:
_GNU_SOURCE	sqlite3.c	80;"	d	file:
_HWTIME_H_	sqlite3.c	19348;"	d	file:
_HWTIME_H_	sqlite3.c	24932;"	d	file:
_HWTIME_H_	sqlite3.c	32433;"	d	file:
_HWTIME_H_	sqlite3.c	69466;"	d	file:
_LARGEFILE_SOURCE	sqlite3.c	75;"	d	file:
_LARGE_FILE	sqlite3.c	71;"	d	file:
_OS_COMMON_H_	sqlite3.c	19299;"	d	file:
_OS_COMMON_H_	sqlite3.c	24883;"	d	file:
_OS_COMMON_H_	sqlite3.c	32384;"	d	file:
_OS_SETUP_H_	sqlite3.c	10105;"	d	file:
_OS_WIN_H_	sqlite3.c	19507;"	d	file:
_PAGER_H_	sqlite3.c	9694;"	d	file:
_SHM_RDLCK	sqlite3.c	35962;"	d	file:
_SHM_UNLCK	sqlite3.c	35961;"	d	file:
_SHM_WRLCK	sqlite3.c	35963;"	d	file:
_SQLITE3EXT_H_	sqlite3.c	99535;"	d	file:
_SQLITE3RTREE_H_	sqlite3.c	7567;"	d	file:
_SQLITE3RTREE_H_	sqlite3.h	7443;"	d
_SQLITE3_H_	sqlite3.c	158;"	d	file:
_SQLITE3_H_	sqlite3.h	34;"	d
_SQLITEINT_H_	sqlite3.c	44;"	d	file:
_SQLITE_HASH_H_	sqlite3.c	8174;"	d	file:
_SQLITE_OS_C_	sqlite3.c	15916;"	d	file:
_SQLITE_OS_C_	sqlite3.c	15917;"	d	file:
_SQLITE_OS_H_	sqlite3.c	10081;"	d	file:
_SQLITE_VDBE_H_	sqlite3.c	9210;"	d	file:
_USE_32BIT_TIME_T	sqlite3.c	116;"	d	file:
_VDBEINT_H_	sqlite3.c	14043;"	d	file:
_WAL_H_	sqlite3.c	40769;"	d	file:
_XOPEN_SOURCE	sqlite3.c	8040;"	d	file:
__HEAD_H__	comm.h	2;"	d
__anon22::__anon23::mask	sqlite3.c	/^  struct {int value; int mask;} yy429;$/;"	m	struct:__anon22::__anon23	file:	access:public
__anon22::__anon23::value	sqlite3.c	/^  struct {int value; int mask;} yy429;$/;"	m	struct:__anon22::__anon23	file:	access:public
__anon22::yy0	sqlite3.c	/^  sqlite3ParserTOKENTYPE yy0;$/;"	m	union:__anon22	file:	access:public
__anon22::yy132	sqlite3.c	/^  Expr* yy132;$/;"	m	union:__anon22	file:	access:public
__anon22::yy14	sqlite3.c	/^  ExprList* yy14;$/;"	m	union:__anon22	file:	access:public
__anon22::yy186	sqlite3.c	/^  u8 yy186;$/;"	m	union:__anon22	file:	access:public
__anon22::yy3	sqlite3.c	/^  Select* yy3;$/;"	m	union:__anon22	file:	access:public
__anon22::yy328	sqlite3.c	/^  int yy328;$/;"	m	union:__anon22	file:	access:public
__anon22::yy346	sqlite3.c	/^  ExprSpan yy346;$/;"	m	union:__anon22	file:	access:public
__anon22::yy378	sqlite3.c	/^  struct TrigEvent yy378;$/;"	m	union:__anon22	typeref:struct:__anon22::TrigEvent	file:	access:public
__anon22::yy381	sqlite3.c	/^  u16 yy381;$/;"	m	union:__anon22	file:	access:public
__anon22::yy408	sqlite3.c	/^  IdList* yy408;$/;"	m	union:__anon22	file:	access:public
__anon22::yy429	sqlite3.c	/^  struct {int value; int mask;} yy429;$/;"	m	union:__anon22	typeref:struct:__anon22::__anon23	file:	access:public
__anon22::yy473	sqlite3.c	/^  TriggerStep* yy473;$/;"	m	union:__anon22	file:	access:public
__anon22::yy476	sqlite3.c	/^  struct LimitVal yy476;$/;"	m	union:__anon22	typeref:struct:__anon22::LimitVal	file:	access:public
__anon22::yy59	sqlite3.c	/^  With* yy59;$/;"	m	union:__anon22	file:	access:public
__anon22::yy65	sqlite3.c	/^  SrcList* yy65;$/;"	m	union:__anon22	file:	access:public
__anon22::yy96	sqlite3.c	/^  struct LikeOp yy96;$/;"	m	union:__anon22	typeref:struct:__anon22::LikeOp	file:	access:public
__anon22::yyinit	sqlite3.c	/^  int yyinit;$/;"	m	union:__anon22	file:	access:public
__anon24::lhs	sqlite3.c	/^  YYCODETYPE lhs;         \/* Symbol on the left-hand side of the rule *\/$/;"	m	struct:__anon24	file:	access:public
__anon24::nrhs	sqlite3.c	/^  unsigned char nrhs;     \/* Number of right-hand side symbols in the rule *\/$/;"	m	struct:__anon24	file:	access:public
__anon7::db	sqlite3.c	/^  sqlite3 *db;        \/* The database being initialized *\/$/;"	m	struct:__anon7	file:	access:public
__anon7::iDb	sqlite3.c	/^  int iDb;            \/* 0 for main database.  1 for TEMP, 2.. for ATTACHed *\/$/;"	m	struct:__anon7	file:	access:public
__anon7::pzErrMsg	sqlite3.c	/^  char **pzErrMsg;    \/* Error message stored here *\/$/;"	m	struct:__anon7	file:	access:public
__anon7::rc	sqlite3.c	/^  int rc;             \/* Result code stored here *\/$/;"	m	struct:__anon7	file:	access:public
__anon9::disallow	sqlite3.c	/^  int disallow; \/* Do not allow memory allocation *\/$/;"	m	struct:__anon9	file:	access:public
__anon9::mutex	sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:__anon9	file:	access:public
__anon9::mxCurrent	sqlite3.c	/^  int mxCurrent[NCSIZE];   \/* Highwater mark for nCurrent *\/$/;"	m	struct:__anon9	file:	access:public
__anon9::nAlloc	sqlite3.c	/^  int nAlloc[NCSIZE];      \/* Total number of allocations *\/$/;"	m	struct:__anon9	file:	access:public
__anon9::nBacktrace	sqlite3.c	/^  int nBacktrace;$/;"	m	struct:__anon9	file:	access:public
__anon9::nCurrent	sqlite3.c	/^  int nCurrent[NCSIZE];    \/* Current number of allocations *\/$/;"	m	struct:__anon9	file:	access:public
__anon9::nTitle	sqlite3.c	/^  int nTitle;        \/* Bytes of zTitle to save.  Includes '\\0' and padding *\/$/;"	m	struct:__anon9	file:	access:public
__anon9::pFirst	sqlite3.c	/^  struct MemBlockHdr *pFirst;$/;"	m	struct:__anon9	typeref:struct:__anon9::MemBlockHdr	file:	access:public
__anon9::pLast	sqlite3.c	/^  struct MemBlockHdr *pLast;$/;"	m	struct:__anon9	typeref:struct:__anon9::MemBlockHdr	file:	access:public
__anon9::xBacktrace	sqlite3.c	/^  void (*xBacktrace)(int, int, void **);$/;"	m	struct:__anon9	file:	access:public
__anon9::zTitle	sqlite3.c	/^  char zTitle[100];  \/* The title text *\/$/;"	m	struct:__anon9	file:	access:public
__declspec	sqlite3.c	/^  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){$/;"	f
__declspec	sqlite3.c	/^__declspec(dllexport)$/;"	f
_fts3ht	sqlite3.c	/^  struct _fts3ht {        \/* the hash table *\/$/;"	s	struct:Fts3Hash	file:	access:public
_ht	sqlite3.c	/^  struct _ht {              \/* the hash table *\/$/;"	s	struct:Hash	file:	access:public
_sqliteZone_	sqlite3.c	/^static malloc_zone_t* _sqliteZone_;$/;"	v	file:
a	sqlite3.c	/^  FuncDef *a[23];       \/* Hash table for functions *\/$/;"	m	struct:FuncDefHash	file:	access:public
a	sqlite3.c	/^  Stat4Sample *a;           \/* Array of mxSample Stat4Sample objects *\/$/;"	m	struct:Stat4Accum	file:	access:public
a	sqlite3.c	/^  WhereLevel a[1];          \/* Information about each nest loop in WHERE *\/$/;"	m	struct:WhereInfo	file:	access:public
a	sqlite3.c	/^  WhereOrCost a[N_OR_COST];   \/* Set of best costs *\/$/;"	m	struct:WhereOrSet	file:	access:public
a	sqlite3.c	/^  WhereTerm *a;            \/* Each a[] describes a term of the WHERE cluase *\/$/;"	m	struct:WhereClause	file:	access:public
a	sqlite3.c	/^  char *a;                        \/* Pointer to allocation *\/$/;"	m	struct:Blob	file:	access:public
a	sqlite3.c	/^  } *a;                  \/* Alloc a power of two greater or equal to nExpr *\/$/;"	m	struct:ExprList	typeref:struct:ExprList::ExprList_item	file:	access:public
a	sqlite3.c	/^  } *a;$/;"	m	struct:IdList	typeref:struct:IdList::IdList_item	file:	access:public
a	sqlite3.c	/^  } a[1];             \/* One entry for each identifier on the list *\/$/;"	m	struct:SrcList	typeref:struct:SrcList::SrcList_item	file:	access:public
a	sqlite3.c	/^  } a[1];$/;"	m	struct:With	typeref:struct:With::Cte	file:	access:public
a	sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:	access:public
aAction	sqlite3.c	/^  u8 aAction[2];        \/* ON DELETE and ON UPDATE actions, respectively *\/$/;"	m	struct:FKey	file:	access:public
aAll	sqlite3.c	/^  char *aAll;                    \/* Array containing doclist (or NULL) *\/$/;"	m	struct:Fts3Doclist	file:	access:public
aAlloc	sqlite3.c	/^  u8 *aAlloc;                 \/* Space for aKey if aBuffer and pMap wont work *\/$/;"	m	struct:PmaReader	file:	access:public
aAvgEq	sqlite3.c	/^  tRowcnt *aAvgEq;         \/* Average nEq values for keys not in aSample *\/$/;"	m	struct:Index	file:	access:public
aBest	sqlite3.c	/^  Stat4Sample *aBest;       \/* Array of nCol best samples *\/$/;"	m	struct:Stat4Accum	file:	access:public
aBitmap	sqlite3.c	/^    BITVEC_TELEM aBitmap[BITVEC_NELEM];    \/* Bitmap representation *\/$/;"	m	union:Bitvec::__anon13	file:	access:public
aBuffer	sqlite3.c	/^  char *aBuffer;                  \/* Buffer to merge doclists in *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
aBuffer	sqlite3.c	/^  u8 *aBuffer;                    \/* Pointer to write buffer *\/$/;"	m	struct:PmaWriter	file:	access:public
aBuffer	sqlite3.c	/^  u8 *aBuffer;                \/* Current read buffer *\/$/;"	m	struct:PmaReader	file:	access:public
aCellIdx	sqlite3.c	/^  u8 *aCellIdx;        \/* The cell index area *\/$/;"	m	struct:MemPage	file:	access:public
aChar	sqlite3.c	/^  UChar *aChar;               \/* Copy of input using utf-16 encoding *\/$/;"	m	struct:IcuCursor	file:	access:public
aCksum	sqlite3.c	/^  u32 aCksum[2];                  \/* Checksum over all prior fields *\/$/;"	m	struct:WalIndexHdr	file:	access:public
aCol	sqlite3.c	/^  Column *aCol;        \/* Information about each column *\/$/;"	m	struct:Table	file:	access:public
aCol	sqlite3.c	/^  } *aCol;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_col	file:	access:public
aCol	sqlite3.c	/^  } aCol[1];            \/* One entry for each of nCol columns *\/$/;"	m	struct:FKey	typeref:struct:FKey::sColMap	file:	access:public
aColCache	sqlite3.c	/^  } aColCache[SQLITE_N_COLCACHE];  \/* One for each column cache entry *\/$/;"	m	struct:Parse	typeref:struct:Parse::yColCache	file:	access:public
aColName	sqlite3.c	/^  Mem *aColName;          \/* Column names to return *\/$/;"	m	struct:Vdbe	file:	access:public
aColl	sqlite3.c	/^  CollSeq *aColl[1];  \/* Collating sequence for each term of the key *\/$/;"	m	struct:KeyInfo	file:	access:public
aCollSeq	sqlite3.c	/^  Hash aCollSeq;                \/* All collating sequences *\/$/;"	m	struct:sqlite3	file:	access:public
aColmask	sqlite3.c	/^  u32 aColmask[2];        \/* Masks of old.*, new.* columns accessed *\/$/;"	m	struct:TriggerPrg	file:	access:public
aConstraint	sqlite3.c	/^  RtreeConstraint *aConstraint;     \/* Search constraints. *\/$/;"	m	struct:RtreeCursor	file:	access:public
aConstraint	sqlite3.c	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint	file:	access:public
aConstraint	sqlite3.h	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint	access:public
aConstraintUsage	sqlite3.c	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:	access:public
aConstraintUsage	sqlite3.h	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage	access:public
aCoord	sqlite3.c	/^  RtreeCoord aCoord[RTREE_MAX_DIMENSIONS*2];  \/* Bounding box coordinates *\/$/;"	m	struct:RtreeCell	file:	access:public
aCoord	sqlite3.c	/^  sqlite3_rtree_dbl *aCoord;        \/* Coordinates of node or entry to check *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
aCoord	sqlite3.h	/^  sqlite3_rtree_dbl *aCoord;        \/* Coordinates of node or entry to check *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
aCounter	sqlite3.c	/^  u32 aCounter[5];        \/* Counters used by sqlite3_stmt_status() *\/$/;"	m	struct:Vdbe	file:	access:public
aCtrl	sqlite3.c	/^  u8 *aCtrl;$/;"	m	struct:Mem5Global	file:	access:public
aData	sqlite3.c	/^  char *aData;                    \/* Node data *\/$/;"	m	struct:SegmentNode	file:	access:public
aData	sqlite3.c	/^  char *aData;                    \/* Pointer to block from malloc() *\/$/;"	m	struct:SegmentWriter	file:	access:public
aData	sqlite3.c	/^  char *aData;$/;"	m	struct:PendingList	file:	access:public
aData	sqlite3.c	/^  u8 *aData;           \/* Pointer to disk image of the page data *\/$/;"	m	struct:MemPage	file:	access:public
aDataEnd	sqlite3.c	/^  u8 *aDataEnd;        \/* One byte past the end of usable data *\/$/;"	m	struct:MemPage	file:	access:public
aDb	sqlite3.c	/^  Db *aDb;                      \/* All backends *\/$/;"	m	struct:sqlite3	file:	access:public
aDbStatic	sqlite3.c	/^  Db aDbStatic[2];              \/* Static space for the 2 default backends *\/$/;"	m	struct:sqlite3	file:	access:public
aDigits	sqlite3.c	/^static const char aDigits[] = "0123456789ABCDEF0123456789abcdef";$/;"	v	file:
aDoclist	sqlite3.c	/^  char *aDoclist;                 \/* List of docids for full-text queries *\/$/;"	m	struct:Fts3Cursor	file:	access:public
aDoclist	sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
aDoclist	sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist of current entry *\/$/;"	m	struct:Fts3SegReader	file:	access:public
aDoclist	sqlite3.c	/^  const char *aDoclist;           \/* Pointer to doclist *\/$/;"	m	struct:NodeReader	file:	access:public
aEntry	sqlite3.c	/^  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; \/* Allocated entries *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetEntry	file:	access:public
aEquiv	sqlite3.c	/^  int aEquiv[22];            \/* Cursor,Column pairs for equivalence classes *\/$/;"	m	struct:WhereScan	file:	access:public
aExt	sqlite3.c	/^  void (**aExt)(void);   \/* Pointers to the extension init functions *\/$/;"	m	struct:sqlite3AutoExtList	file:	access:public
aExtension	sqlite3.c	/^  void **aExtension;            \/* Array of shared library handles *\/$/;"	m	struct:sqlite3	file:	access:public
aFile	sqlite3.c	/^  SorterFile aFile[2];            \/* aFile[0] for reading, [1] for writing *\/$/;"	m	struct:IncrMerger	file:	access:public
aFrameCksum	sqlite3.c	/^  u32 aFrameCksum[2];             \/* Checksum of last frame in log *\/$/;"	m	struct:WalIndexHdr	file:	access:public
aFunc	sqlite3.c	/^  FuncDefHash aFunc;            \/* Hash table of connection functions *\/$/;"	m	struct:sqlite3	file:	access:public
aFunc	sqlite3.c	/^  } *aFunc;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_func	file:	access:public
aHardLimit	sqlite3.c	/^static const int aHardLimit[] = {$/;"	v	file:
aHash	sqlite3.c	/^    u32 aHash[BITVEC_NINT];      \/* Hash table representation *\/$/;"	m	union:Bitvec::__anon13	file:	access:public
aHash	sqlite3.c	/^  RtreeNode *aHash[HASHSIZE]; \/* Hash table of in-memory nodes. *\/ $/;"	m	struct:Rtree	file:	access:public
aInLoop	sqlite3.c	/^      } *aInLoop;           \/* Information about each nested IN operator *\/$/;"	m	struct:WhereLevel::__anon16::__anon17	typeref:struct:WhereLevel::__anon16::__anon17::InLoop	file:	access:public
aIndent	sqlite3.c	/^  u16 aIndent[100];  \/* Levels of indentation *\/$/;"	m	struct:Explain	file:	access:public
aIndex	sqlite3.c	/^    ht_slot *aIndex;              \/* i0, i1, i2... such that aPgno[iN] ascend *\/$/;"	m	struct:WalIterator::WalSegment	file:	access:public
aIndex	sqlite3.c	/^  } *aIndex;$/;"	m	struct:Fts3Table	typeref:struct:Fts3Table::Fts3Index	file:	access:public
aInput	sqlite3.c	/^  const unsigned char *aInput;    \/* Input text being tokenized *\/$/;"	m	struct:unicode_cursor	file:	access:public
aJournalMagic	sqlite3.c	/^static const unsigned char aJournalMagic[] = {$/;"	v	file:
aKey	sqlite3.c	/^  u8 *aKey;                   \/* Pointer to current key *\/$/;"	m	struct:PmaReader	file:	access:public
aLTerm	sqlite3.c	/^  WhereTerm **aLTerm;   \/* WhereTerms used *\/$/;"	m	struct:WhereLoop	file:	access:public
aLTermSpace	sqlite3.c	/^  WhereTerm *aLTermSpace[4];  \/* Initial aLTerm[] space *\/$/;"	m	struct:WhereLoop	file:	access:public
aLabel	sqlite3.c	/^  int *aLabel;         \/* Space to hold the labels *\/$/;"	m	struct:Parse	file:	access:public
aLimit	sqlite3.c	/^  int aLimit[SQLITE_N_LIMIT];   \/* Limits *\/$/;"	m	struct:sqlite3	file:	access:public
aLoop	sqlite3.c	/^  WhereLoop **aLoop;    \/* Array of WhereLoop objects implementing this path *\/$/;"	m	struct:WherePath	file:	access:public
aMI	sqlite3.c	/^  u32 *aMI;$/;"	m	struct:Fts3Expr	file:	access:public
aMap	sqlite3.c	/^  u8 *aMap;                   \/* Pointer to mapping of entire file *\/$/;"	m	struct:PmaReader	file:	access:public
aMatchinfo	sqlite3.c	/^  u32 *aMatchinfo;                \/* Information about most recent match *\/$/;"	m	struct:Fts3Cursor	file:	access:public
aMatchinfo	sqlite3.c	/^  u32 *aMatchinfo;                \/* Pre-allocated buffer *\/$/;"	m	struct:MatchInfo	file:	access:public
aMem	sqlite3.c	/^  Mem *aMem;              \/* Array of memory cells for parent frame *\/$/;"	m	struct:VdbeFrame	file:	access:public
aMem	sqlite3.c	/^  Mem *aMem;              \/* The memory locations *\/$/;"	m	struct:Vdbe	file:	access:public
aMem	sqlite3.c	/^  Mem *aMem;          \/* Values *\/$/;"	m	struct:UnpackedRecord	file:	access:public
aMemory	sqlite3.c	/^  u8 *aMemory;                    \/* If non-NULL, bulk memory to hold pList *\/$/;"	m	struct:SorterList	file:	access:public
aModule	sqlite3.c	/^  Hash aModule;                 \/* populated by sqlite3_create_module() *\/$/;"	m	struct:sqlite3	file:	access:public
aNode	sqlite3.c	/^  RtreeNode *aNode[RTREE_CACHE_SZ]; \/* Rtree node cache *\/$/;"	m	struct:RtreeCursor	file:	access:public
aNode	sqlite3.c	/^  char *aNode;                    \/* Pointer to node data (or NULL) *\/$/;"	m	struct:Fts3SegReader	file:	access:public
aNode	sqlite3.c	/^  const char *aNode;$/;"	m	struct:NodeReader	file:	access:public
aNodeWriter	sqlite3.c	/^  NodeWriter aNodeWriter[FTS_MAX_APPENDABLE_HEIGHT];$/;"	m	struct:IncrmergeWriter	file:	access:public
aOffset	sqlite3.c	/^  int *aOffset;               \/* Offsets of each character in utf-8 input *\/$/;"	m	struct:IcuCursor	file:	access:public
aOffset	sqlite3.c	/^  u32 *aOffset;         \/* Pointer to aType[nField] *\/$/;"	m	struct:VdbeCursor	file:	access:public
aOnceFlag	sqlite3.c	/^  u8 *aOnceFlag;          \/* Array of OP_Once flags for parent frame *\/$/;"	m	struct:VdbeFrame	file:	access:public
aOnceFlag	sqlite3.c	/^  u8 *aOnceFlag;          \/* Flags for OP_Once *\/$/;"	m	struct:Vdbe	file:	access:public
aOp	sqlite3.c	/^  Op *aOp;                \/* Program instructions for parent frame *\/$/;"	m	struct:VdbeFrame	file:	access:public
aOp	sqlite3.c	/^  Op *aOp;                \/* Space to hold the virtual machine's program *\/$/;"	m	struct:Vdbe	file:	access:public
aOp	sqlite3.c	/^  VdbeOp *aOp;                  \/* Array of opcodes for sub-program *\/$/;"	m	struct:SubProgram	file:	access:public
aOrderBy	sqlite3.c	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby	file:	access:public
aOrderBy	sqlite3.h	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby	access:public
aOverflow	sqlite3.c	/^  Pgno *aOverflow;          \/* Cache of overflow page locations *\/$/;"	m	struct:BtCursor	file:	access:public
aPadding	sqlite3.c	/^  char aPadding[32];$/;"	m	struct:unixFile	file:	access:public
aParam	sqlite3.c	/^  RtreeDValue aParam[1];      \/* Values for parameters to the SQL function *\/$/;"	m	struct:RtreeMatchArg	file:	access:public
aParam	sqlite3.c	/^  sqlite3_rtree_dbl *aParam;        \/* value of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
aParam	sqlite3.c	/^  sqlite3_rtree_dbl *aParam;      \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry	file:	access:public
aParam	sqlite3.h	/^  sqlite3_rtree_dbl *aParam;        \/* value of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
aParam	sqlite3.h	/^  sqlite3_rtree_dbl *aParam;      \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry	access:public
aPgRef	sqlite3.c	/^  u8 *aPgRef;       \/* 1 bit per page in the db (see above) *\/$/;"	m	struct:IntegrityCk	file:	access:public
aPgno	sqlite3.c	/^    u32 *aPgno;                   \/* Array of page numbers. *\/$/;"	m	struct:WalIterator::WalSegment	file:	access:public
aPhrase	sqlite3.c	/^  SnippetPhrase *aPhrase;         \/* Array of size nPhrase *\/$/;"	m	struct:SnippetIter	file:	access:public
aPoint	sqlite3.c	/^  RtreeSearchPoint *aPoint;         \/* Priority queue for search points *\/$/;"	m	struct:RtreeCursor	file:	access:public
aPool	sqlite3.c	/^  Mem3Block *aPool;$/;"	m	struct:Mem3Global	file:	access:public
aPragmaNames	sqlite3.c	/^} aPragmaNames[] = {$/;"	v	typeref:struct:sPragmaNames	file:
aPrefix	sqlite3.c	/^static const char aPrefix[] = "-x0\\000X0";$/;"	v	file:
aReadMark	sqlite3.c	/^  u32 aReadMark[WAL_NREADER];     \/* Reader marks *\/$/;"	m	struct:WalCkptInfo	file:	access:public
aReadr	sqlite3.c	/^  PmaReader *aReadr;         \/* Array of PmaReaders to merge data from *\/$/;"	m	struct:MergeEngine	file:	access:public
aRegion	sqlite3.c	/^  } *aRegion;$/;"	m	struct:winShmNode	typeref:struct:winShmNode::ShmRegion	file:	access:public
aRow	sqlite3.c	/^  const u8 *aRow;       \/* Data for the current row, if all on one page *\/$/;"	m	struct:VdbeCursor	file:	access:public
aRowid	sqlite3.c	/^    u8 *aRowid;                     \/* Key for WITHOUT ROWID tables *\/$/;"	m	union:Stat4Sample::__anon15	file:	access:public
aSalt	sqlite3.c	/^  u32 aSalt[2];                   \/* Two salt values copied from WAL header *\/$/;"	m	struct:WalIndexHdr	file:	access:public
aSample	sqlite3.c	/^  IndexSample *aSample;    \/* Samples of the left-most key *\/$/;"	m	struct:Index	file:	access:public
aSavepoint	sqlite3.c	/^  PagerSavepoint *aSavepoint; \/* Array of active savepoints *\/$/;"	m	struct:Pager	file:	access:public
aSegment	sqlite3.c	/^  } aSegment[1];                  \/* One for every 32KB page in the wal-index *\/$/;"	m	struct:WalIterator	typeref:struct:WalIterator::WalSegment	file:	access:public
aSemName	sqlite3.c	/^  char aSemName[MAX_PATHNAME+2];  \/* Name of that semaphore *\/$/;"	m	struct:unixInodeInfo	file:	access:public
aSortOrder	sqlite3.c	/^  u8 *aSortOrder;          \/* for each column: True==DESC, False==ASC *\/$/;"	m	struct:Index	file:	access:public
aSortOrder	sqlite3.c	/^  u8 *aSortOrder;     \/* Sort order for each column. *\/$/;"	m	struct:KeyInfo	file:	access:public
aStat	sqlite3.c	/^  int aStat[3];               \/* Total cache hits, misses and writes *\/$/;"	m	struct:Pager	file:	access:public
aStat	sqlite3.c	/^  } *aStat;$/;"	m	struct:Fts3auxCursor	typeref:struct:Fts3auxCursor::Fts3auxColstats	file:	access:public
aStatic	sqlite3.c	/^  WhereTerm aStatic[1];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:	access:public
aStatic	sqlite3.c	/^  WhereTerm aStatic[8];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:	access:public
aStmt	sqlite3.c	/^  sqlite3_stmt *aStmt[40];$/;"	m	struct:Fts3Table	file:	access:public
aSyscall	sqlite3.c	/^} aSyscall[] = {$/;"	v	typeref:struct:unix_syscall	file:
aSyscall	sqlite3.c	/^} aSyscall[] = {$/;"	v	typeref:struct:win_syscall	file:
aTableLock	sqlite3.c	/^  TableLock *aTableLock; \/* Required table locks for shared-cache mode *\/$/;"	m	struct:Parse	file:	access:public
aTask	sqlite3.c	/^  SortSubtask aTask[1];           \/* One or more subtasks *\/$/;"	m	struct:VdbeSorter	file:	access:public
aTempReg	sqlite3.c	/^  int aTempReg[8];     \/* Holding area for temporary registers *\/$/;"	m	struct:Parse	file:	access:public
aTerm	sqlite3.c	/^  TermOffset *aTerm;$/;"	m	struct:TermOffsetCtx	file:	access:public
aToken	sqlite3.c	/^  Fts3PhraseToken aToken[1]; \/* One entry for each token in the phrase *\/$/;"	m	struct:Fts3Phrase	file:	access:public
aTree	sqlite3.c	/^  int *aTree;                \/* Current state of incremental merge *\/$/;"	m	struct:MergeEngine	file:	access:public
aType	sqlite3.c	/^  u32 aType[1];         \/* Type values for all entries in the record *\/$/;"	m	struct:VdbeCursor	file:	access:public
aVTrans	sqlite3.c	/^  VTable **aVTrans;             \/* Virtual tables with open transactions *\/$/;"	m	struct:sqlite3	file:	access:public
aVar	sqlite3.c	/^  Mem *aVar;              \/* Values for the OP_Variable opcode. *\/$/;"	m	struct:Vdbe	file:	access:public
aWalData	sqlite3.c	/^  u32 aWalData[WAL_SAVEPOINT_NDATA];        \/* WAL savepoint context *\/$/;"	m	struct:PagerSavepoint	file:	access:public
aaOutput	sqlite3.c	/^  char *aaOutput[16];             \/* Malloc'd output buffers *\/$/;"	m	struct:TermSelect	file:	access:public
abNotindexed	sqlite3.c	/^  u8 *abNotindexed;               \/* True for 'notindexed' columns *\/$/;"	m	struct:Fts3Table	file:	access:public
absFunc	sqlite3.c	/^static void absFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:	signature:(sqlite3_context *context, int argc, sqlite3_value **argv)
accError	sqlite3.c	/^  u8   accError;       \/* STRACCUM_NOMEM or STRACCUM_TOOBIG *\/$/;"	m	struct:StrAccum	file:	access:public
accessPayload	sqlite3.c	/^static int accessPayload($/;"	f	file:	signature:( BtCursor *pCur, u32 offset, u32 amt, unsigned char *pBuf, int eOp )
actionName	sqlite3.c	/^static const char *actionName(u8 action){$/;"	f	file:	signature:(u8 action)
addAggInfoColumn	sqlite3.c	/^static int addAggInfoColumn(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:	signature:(sqlite3 *db, AggInfo *pInfo)
addAggInfoFunc	sqlite3.c	/^static int addAggInfoFunc(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:	signature:(sqlite3 *db, AggInfo *pInfo)
addArgumentToVtab	sqlite3.c	/^static void addArgumentToVtab(Parse *pParse){$/;"	f	file:	signature:(Parse *pParse)
addColOffset	sqlite3.c	/^  int addColOffset;    \/* Offset in CREATE TABLE stmt to add a new column *\/$/;"	m	struct:Table	file:	access:public
addModuleArgument	sqlite3.c	/^static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){$/;"	f	file:	signature:(sqlite3 *db, Table *pTable, char *zArg)
addToBlockedList	sqlite3.c	/^static void addToBlockedList(sqlite3 *db){$/;"	f	file:	signature:(sqlite3 *db)
addToSavepointBitvecs	sqlite3.c	/^static int addToSavepointBitvecs(Pager *pPager, Pgno pgno){$/;"	f	file:	signature:(Pager *pPager, Pgno pgno)
addToVTrans	sqlite3.c	/^static void addToVTrans(sqlite3 *db, VTable *pVTab){$/;"	f	file:	signature:(sqlite3 *db, VTable *pVTab)
addWhereTerm	sqlite3.c	/^static void addWhereTerm($/;"	f	file:	signature:( Parse *pParse, SrcList *pSrc, int iLeft, int iColLeft, int iRight, int iColRight, int isOuterJoin, Expr **ppWhere )
addrBody	sqlite3.c	/^  int addrBody;         \/* Beginning of the body of this loop *\/$/;"	m	struct:WhereLevel	file:	access:public
addrBrk	sqlite3.c	/^  int addrBrk;          \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereLevel	file:	access:public
addrCont	sqlite3.c	/^  int addrCont;         \/* Jump here to continue with the next loop cycle *\/$/;"	m	struct:WhereLevel	file:	access:public
addrCrTab	sqlite3.c	/^  int addrCrTab;       \/* Address of OP_CreateTable opcode on CREATE TABLE *\/$/;"	m	struct:Parse	file:	access:public
addrFillSub	sqlite3.c	/^    int addrFillSub;  \/* Address of subroutine to manifest a subquery *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
addrFirst	sqlite3.c	/^  int addrFirst;        \/* First instruction of interior of the loop *\/$/;"	m	struct:WhereLevel	file:	access:public
addrInTop	sqlite3.c	/^        int addrInTop;         \/* Top of the IN loop *\/$/;"	m	struct:WhereLevel::__anon16::__anon17::InLoop	file:	access:public
addrNxt	sqlite3.c	/^  int addrNxt;          \/* Jump here to start the next IN combination *\/$/;"	m	struct:WhereLevel	file:	access:public
addrOpenEphm	sqlite3.c	/^  int addrOpenEphm[2];   \/* OP_OpenEphem opcodes related to this select *\/$/;"	m	struct:Select	file:	access:public
addrSkip	sqlite3.c	/^  int addrSkip;         \/* Jump here for next iteration of skip-scan *\/$/;"	m	struct:WhereLevel	file:	access:public
addrSkipPK	sqlite3.c	/^  int addrSkipPK;      \/* Address of instruction to skip PRIMARY KEY index *\/$/;"	m	struct:Parse	file:	access:public
addrSortIndex	sqlite3.c	/^  int addrSortIndex;    \/* Address of the OP_SorterOpen or OP_OpenEphemeral *\/$/;"	m	struct:SortCtx	file:	access:public
addrTnct	sqlite3.c	/^  int addrTnct;   \/* Address of OP_OpenEphemeral opcode for tabTnct *\/$/;"	m	struct:DistinctCtx	file:	access:public
adjustStats	sqlite3.c	/^static void adjustStats(int iSize, int increment){$/;"	f	file:	signature:(int iSize, int increment)
affSdst	sqlite3.c	/^  char affSdst;        \/* Affinity used when eDest==SRT_Set *\/$/;"	m	struct:SelectDest	file:	access:public
affinity	sqlite3.c	/^  char affinity;         \/* The affinity of the column or 0 if not a column *\/$/;"	m	struct:Expr	file:	access:public
affinity	sqlite3.c	/^  char affinity;   \/* One of the SQLITE_AFF_... values *\/$/;"	m	struct:Column	file:	access:public
afpCheckReservedLock	sqlite3.c	/^static int afpCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:	signature:(sqlite3_file *id, int *pResOut)
afpClose	sqlite3.c	/^static int afpClose(sqlite3_file *id) {$/;"	f	file:	signature:(sqlite3_file *id)
afpLock	sqlite3.c	/^static int afpLock(sqlite3_file *id, int eFileLock){$/;"	f	file:	signature:(sqlite3_file *id, int eFileLock)
afpLockingContext	sqlite3.c	/^struct afpLockingContext {$/;"	s	file:
afpLockingContext	sqlite3.c	/^typedef struct afpLockingContext afpLockingContext;$/;"	t	typeref:struct:afpLockingContext	file:
afpLockingContext::dbPath	sqlite3.c	/^  const char *dbPath;             \/* Name of the open file *\/$/;"	m	struct:afpLockingContext	file:	access:public
afpLockingContext::reserved	sqlite3.c	/^  int reserved;$/;"	m	struct:afpLockingContext	file:	access:public
afpSetLock	sqlite3.c	/^static int afpSetLock($/;"	f	file:	signature:( const char *path, unixFile *pFile, unsigned long long offset, unsigned long long length, int setLockFlag )
afpUnlock	sqlite3.c	/^static int afpUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:	signature:(sqlite3_file *id, int eFileLock)
afpfsByteRangeLock2FSCTL	sqlite3.c	27447;"	d	file:
aggregate_context	sqlite3.c	/^  void * (*aggregate_context)(sqlite3_context*,int nBytes);$/;"	m	struct:sqlite3_api_routines	file:	access:public
aggregate_count	sqlite3.c	/^  int  (*aggregate_count)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
ai	sqlite3.c	/^    int *ai;               \/* Used when p4type is P4_INTARRAY *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
aiColumn	sqlite3.c	/^  i16 *aiColumn;           \/* Which columns are used by this index.  1st is 0 *\/$/;"	m	struct:Index	file:	access:public
aiCurOnePass	sqlite3.c	/^  int aiCurOnePass[2];      \/* OP_OpenWrite cursors for the ONEPASS opt *\/$/;"	m	struct:WhereInfo	file:	access:public
aiException	sqlite3.c	/^  int *aiException;$/;"	m	struct:unicode_tokenizer	file:	access:public
aiFreelist	sqlite3.c	/^  int aiFreelist[LOGMAX+1];$/;"	m	struct:Mem5Global	file:	access:public
aiHash	sqlite3.c	/^  u32 aiHash[N_HASH];        \/* For sizes MX_SMALL+1 and larger *\/$/;"	m	struct:Mem3Global	file:	access:public
aiIdx	sqlite3.c	/^  u16 aiIdx[BTCURSOR_MAX_DEPTH];        \/* Current index in apPage[i] *\/$/;"	m	struct:BtCursor	file:	access:public
aiOvfl	sqlite3.c	/^  u16 aiOvfl[5];       \/* Insert the i-th overflow cell before the aiOvfl-th$/;"	m	struct:MemPage	file:	access:public
aiRowEst	sqlite3.c	/^  tRowcnt *aiRowEst;       \/* Non-logarithmic stat1 data for this table *\/$/;"	m	struct:Index	file:	access:public
aiRowLogEst	sqlite3.c	/^  LogEst *aiRowLogEst;     \/* From ANALYZE: Est. rows selected by each column *\/$/;"	m	struct:Index	file:	access:public
aiSmall	sqlite3.c	/^  u32 aiSmall[MX_SMALL-1];   \/* For sizes 2 through MX_SMALL, inclusive *\/$/;"	m	struct:Mem3Global	file:	access:public
alarmArg	sqlite3.c	/^  void *alarmArg;$/;"	m	struct:Mem0Global	file:	access:public
alarmBusy	sqlite3.c	/^  int alarmBusy;$/;"	m	struct:Mem3Global	file:	access:public
alarmCallback	sqlite3.c	/^  void (*alarmCallback)(void*, sqlite3_int64,int);$/;"	m	struct:Mem0Global	file:	access:public
alarmThreshold	sqlite3.c	/^  sqlite3_int64 alarmThreshold;$/;"	m	struct:Mem0Global	file:	access:public
allSpaces	sqlite3.c	/^static int allSpaces(const char *z, int n){$/;"	f	file:	signature:(const char *z, int n)
allocSpace	sqlite3.c	/^static void *allocSpace($/;"	f	file:	signature:( void *pBuf, int nByte, u8 **ppFrom, u8 *pEnd, int *pnByte )
allocateBtreePage	sqlite3.c	/^static int allocateBtreePage($/;"	f	file:	signature:( BtShared *pBt, MemPage **ppPage, Pgno *pPgno, Pgno nearby, u8 eMode )
allocateBtreePage	sqlite3.c	/^static int allocateBtreePage(BtShared *, MemPage **, Pgno *, Pgno, u8);$/;"	p	file:	signature:(BtShared *, MemPage **, Pgno *, Pgno, u8)
allocateCursor	sqlite3.c	/^static VdbeCursor *allocateCursor($/;"	f	file:	signature:( Vdbe *p, int iCur, int nField, int iDb, int isBtreeCursor )
allocateIndexInfo	sqlite3.c	/^static sqlite3_index_info *allocateIndexInfo($/;"	f	file:	signature:( Parse *pParse, WhereClause *pWC, struct SrcList_item *pSrc, ExprList *pOrderBy )
allocateSpace	sqlite3.c	/^static int allocateSpace(MemPage *pPage, int nByte, int *pIdx){$/;"	f	file:	signature:(MemPage *pPage, int nByte, int *pIdx)
allocateTempSpace	sqlite3.c	/^static void allocateTempSpace(BtShared *pBt){$/;"	f	file:	signature:(BtShared *pBt)
allowedOp	sqlite3.c	/^static int allowedOp(int op){$/;"	f	file:	signature:(int op)
anDLt	sqlite3.c	/^  tRowcnt *anDLt;                 \/* sqlite_stat4.nDLt *\/$/;"	m	struct:Stat4Sample	file:	access:public
anDLt	sqlite3.c	/^  tRowcnt *anDLt;   \/* Est. number of distinct keys less than this sample *\/$/;"	m	struct:IndexSample	file:	access:public
anEq	sqlite3.c	/^  tRowcnt *anEq;                  \/* sqlite_stat4.nEq *\/$/;"	m	struct:Stat4Sample	file:	access:public
anEq	sqlite3.c	/^  tRowcnt *anEq;    \/* Est. number of rows where the key equals this sample *\/$/;"	m	struct:IndexSample	file:	access:public
anLt	sqlite3.c	/^  tRowcnt *anLt;                  \/* sqlite_stat4.nLt *\/$/;"	m	struct:Stat4Sample	file:	access:public
anLt	sqlite3.c	/^  tRowcnt *anLt;    \/* Est. number of rows where key is less than this sample *\/$/;"	m	struct:IndexSample	file:	access:public
anOutput	sqlite3.c	/^  int anOutput[16];               \/* Size each output buffer in bytes *\/$/;"	m	struct:TermSelect	file:	access:public
anQueue	sqlite3.c	/^  u32 anQueue[RTREE_MAX_DEPTH+1];   \/* Number of queued entries by iLevel *\/$/;"	m	struct:RtreeCursor	file:	access:public
anQueue	sqlite3.c	/^  unsigned int *anQueue;            \/* Number of pending entries in the queue *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
anQueue	sqlite3.h	/^  unsigned int *anQueue;            \/* Number of pending entries in the queue *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
anStat	sqlite3.c	/^  int anStat[3];          \/* 0: hits.  1: size misses.  2: full misses *\/$/;"	m	struct:Lookaside	file:	access:public
analysisInfo	sqlite3.c	/^struct analysisInfo {$/;"	s	file:
analysisInfo	sqlite3.c	/^typedef struct analysisInfo analysisInfo;$/;"	t	typeref:struct:analysisInfo	file:
analysisInfo::db	sqlite3.c	/^  sqlite3 *db;$/;"	m	struct:analysisInfo	file:	access:public
analysisInfo::zDatabase	sqlite3.c	/^  const char *zDatabase;$/;"	m	struct:analysisInfo	file:	access:public
analysisLoader	sqlite3.c	/^static int analysisLoader(void *pData, int argc, char **argv, char **NotUsed){$/;"	f	file:	signature:(void *pData, int argc, char **argv, char **NotUsed)
analyzeAggregate	sqlite3.c	/^static int analyzeAggregate(Walker *pWalker, Expr *pExpr){$/;"	f	file:	signature:(Walker *pWalker, Expr *pExpr)
analyzeAggregatesInSelect	sqlite3.c	/^static int analyzeAggregatesInSelect(Walker *pWalker, Select *pSelect){$/;"	f	file:	signature:(Walker *pWalker, Select *pSelect)
analyzeDatabase	sqlite3.c	/^static void analyzeDatabase(Parse *pParse, int iDb){$/;"	f	file:	signature:(Parse *pParse, int iDb)
analyzeOneTable	sqlite3.c	/^static void analyzeOneTable($/;"	f	file:	signature:( Parse *pParse, Table *pTab, Index *pOnlyIdx, int iStatCur, int iMem, int iTab )
analyzeTable	sqlite3.c	/^static void analyzeTable(Parse *pParse, Table *pTab, Index *pOnlyIdx){$/;"	f	file:	signature:(Parse *pParse, Table *pTab, Index *pOnlyIdx)
apArg	sqlite3.c	/^  Mem **apArg;            \/* Arguments to currently executing user function *\/$/;"	m	struct:Vdbe	file:	access:public
apArg	sqlite3.c	/^  sqlite3_value **apArg;   \/* The argument values *\/$/;"	m	struct:PrintfArguments	file:	access:public
apCsr	sqlite3.c	/^  VdbeCursor **apCsr;     \/* Array of Vdbe cursors for parent frame *\/$/;"	m	struct:VdbeFrame	file:	access:public
apCsr	sqlite3.c	/^  VdbeCursor **apCsr;     \/* One element of this array for each open cursor *\/$/;"	m	struct:Vdbe	file:	access:public
apHash	sqlite3.c	/^  PgHdr1 **apHash;                    \/* Hash table for fast lookup by key *\/$/;"	m	struct:PCache1	file:	access:public
apOvfl	sqlite3.c	/^  u8 *apOvfl[5];       \/* Pointers to the body of overflow cells *\/$/;"	m	struct:MemPage	file:	access:public
apPage	sqlite3.c	/^  MemPage *apPage[BTCURSOR_MAX_DEPTH];  \/* Pages from root to current page *\/$/;"	m	struct:BtCursor	file:	access:public
apRegion	sqlite3.c	/^  char **apRegion;           \/* Array of mapped shared-memory regions *\/$/;"	m	struct:unixShmNode	file:	access:public
apSegment	sqlite3.c	/^  Fts3SegReader **apSegment;      \/* Array of Fts3SegReader objects *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
apSub	sqlite3.c	/^    Bitvec *apSub[BITVEC_NPTR];  \/* Recursive representation *\/$/;"	m	union:Bitvec::__anon13	file:	access:public
apSub	sqlite3.c	/^  SubProgram **apSub;        \/* Array of subprograms *\/$/;"	m	struct:VdbeOpIter	file:	access:public
apTrigger	sqlite3.c	/^  Trigger *apTrigger[2];\/* Triggers for aAction[] actions *\/$/;"	m	struct:FKey	file:	access:public
apVtabLock	sqlite3.c	/^  Table **apVtabLock;       \/* Pointer to virtual tables needing locking *\/$/;"	m	struct:Parse	file:	access:public
apWiData	sqlite3.c	/^  volatile u32 **apWiData;   \/* Pointer to wal-index content in memory *\/$/;"	m	struct:Wal	file:	access:public
apiOomError	sqlite3.c	/^static SQLITE_NOINLINE int apiOomError(sqlite3 *db){$/;"	f	file:	signature:(sqlite3 *db)
applyAffinity	sqlite3.c	/^static void applyAffinity($/;"	f	file:	signature:( Mem *pRec, char affinity, u8 enc )
applyNumericAffinity	sqlite3.c	/^static void applyNumericAffinity(Mem *pRec, int bTryForInt){$/;"	f	file:	signature:(Mem *pRec, int bTryForInt)
approx	sqlite3.c	/^  u8 approx;        \/* True if non-integer value was input to the sum *\/$/;"	m	struct:SumCtx	file:	access:public
argvIndex	sqlite3.c	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:	access:public
argvIndex	sqlite3.h	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	access:public
assemblePage	sqlite3.c	/^static void assemblePage($/;"	f	file:	signature:( MemPage *pPage, int nCell, u8 **apCell, u16 *aSize )
assertCellInfo	sqlite3.c	/^  static void assertCellInfo(BtCursor *pCur){$/;"	f	file:	signature:(BtCursor *pCur)
assertCellInfo	sqlite3.c	56031;"	d	file:
assertMutexHeld	sqlite3.c	128477;"	d	file:
assertParentIndex	sqlite3.c	56595;"	d	file:
assertTruncateConstraint	sqlite3.c	/^static void assertTruncateConstraint(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
assertTruncateConstraint	sqlite3.c	44684;"	d	file:
assertTruncateConstraintCb	sqlite3.c	/^static void assertTruncateConstraintCb(PgHdr *pPg){$/;"	f	file:	signature:(PgHdr *pPg)
assert_pager_state	sqlite3.c	/^static int assert_pager_state(Pager *p){$/;"	f	file:	signature:(Pager *p)
atEOF	sqlite3.c	/^  u8 atEOF;                         \/* True if at end of search *\/$/;"	m	struct:RtreeCursor	file:	access:public
attachBackupObject	sqlite3.c	/^static void attachBackupObject(sqlite3_backup *p){$/;"	f	file:	signature:(sqlite3_backup *p)
attachFunc	sqlite3.c	/^static void attachFunc($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **argv )
auth	sqlite3.c	/^  sqlite3_userauth auth;        \/* User authentication information *\/$/;"	m	struct:sqlite3	file:	access:public
authLevel	sqlite3.c	/^  u8 authLevel;                 \/* Current authentication level *\/$/;"	m	struct:sqlite3_userauth	file:	access:public
autoCommit	sqlite3.c	/^  u8 autoCommit;                \/* The auto-commit flag. *\/$/;"	m	struct:sqlite3	file:	access:public
autoIncBegin	sqlite3.c	/^static int autoIncBegin($/;"	f	file:	signature:( Parse *pParse, int iDb, Table *pTab )
autoIncBegin	sqlite3.c	97654;"	d	file:
autoIncStep	sqlite3.c	/^static void autoIncStep(Parse *pParse, int memId, int regRowid){$/;"	f	file:	signature:(Parse *pParse, int memId, int regRowid)
autoIncStep	sqlite3.c	97655;"	d	file:
autoVacuum	sqlite3.c	/^  u8 autoVacuum;        \/* True if auto-vacuum is enabled *\/$/;"	m	struct:BtShared	file:	access:public
autoVacuumCommit	sqlite3.c	/^static int autoVacuumCommit(BtShared *pBt){$/;"	f	file:	signature:(BtShared *pBt)
auto_extension	sqlite3.c	/^  int (*auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines	file:	access:public
autolockIoFinder	sqlite3.c	/^  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;$/;"	v	file:
autolockIoFinderImpl	sqlite3.c	/^static const sqlite3_io_methods *autolockIoFinderImpl($/;"	f	file:	signature:( const char *filePath, unixFile *pNew )
avgFinalize	sqlite3.c	/^static void avgFinalize(sqlite3_context *context){$/;"	f	file:	signature:(sqlite3_context *context)
azCol	sqlite3.c	/^  const char **azCol;                 \/* Array of column names for fts3 table *\/$/;"	m	struct:ParseContext	file:	access:public
azColl	sqlite3.c	/^  char **azColl;           \/* Array of collation sequence names for index *\/$/;"	m	struct:Index	file:	access:public
azColumn	sqlite3.c	/^  char **azColumn;                \/* column names.  malloced *\/$/;"	m	struct:Fts3Table	file:	access:public
azCompileOpt	sqlite3.c	/^static const char * const azCompileOpt[] = {$/;"	v	file:
azFileLock	sqlite3.c	/^static const char *azFileLock(int eFileLock){$/;"	f	file:	signature:(int eFileLock)
azModuleArg	sqlite3.c	/^  char **azModuleArg;  \/* Text of all module args. [0] is module name *\/$/;"	m	struct:Table	file:	access:public
azResult	sqlite3.c	/^  char **azResult;   \/* Accumulated output *\/$/;"	m	struct:TabResult	file:	access:public
azVar	sqlite3.c	/^  char **azVar;             \/* Pointers to names of parameters *\/$/;"	m	struct:Parse	file:	access:public
azVar	sqlite3.c	/^  char **azVar;           \/* Name of variables *\/$/;"	m	struct:Vdbe	file:	access:public
b	sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:	access:public
bConstraint	sqlite3.c	/^  u8 bConstraint;           \/* True if constraints are supported *\/$/;"	m	struct:VTable	file:	access:public
bCoreMutex	sqlite3.c	/^  int bCoreMutex;                   \/* True to enable core mutexing *\/$/;"	m	struct:Sqlite3Config	file:	access:public
bDeferred	sqlite3.c	/^  u8 bDeferred;              \/* True if this expression is entirely deferred *\/$/;"	m	struct:Fts3Expr	file:	access:public
bDesc	sqlite3.c	/^  u8 bDesc;                       \/* True to sort in descending order *\/$/;"	m	struct:Fts3Cursor	file:	access:public
bDescIdx	sqlite3.c	/^  u8 bDescIdx;                    \/* True if doclists are in reverse order *\/$/;"	m	struct:Fts3Table	file:	access:public
bDestLocked	sqlite3.c	/^  int bDestLocked;         \/* True once a write-transaction is open on pDest *\/$/;"	m	struct:sqlite3_backup	file:	access:public
bDoTruncate	sqlite3.c	/^  u8 bDoTruncate;       \/* True to truncate db on commit *\/$/;"	m	struct:BtShared	file:	access:public
bDone	sqlite3.c	/^  int bDone;                      \/* Set if thread is finished but not joined *\/$/;"	m	struct:SortSubtask	file:	access:public
bEnabled	sqlite3.c	/^  u8 bEnabled;            \/* False to disable new lookaside allocations *\/$/;"	m	struct:Lookaside	file:	access:public
bEof	sqlite3.c	/^  int bEof;                       \/* Set to true when merge is finished *\/$/;"	m	struct:IncrMerger	file:	access:public
bEof	sqlite3.c	/^  u8 bEof;                   \/* True this expression is at EOF already *\/$/;"	m	struct:Fts3Expr	file:	access:public
bExclusive	sqlite3.c	/^  BOOL bExclusive;    \/* Indicates an exclusive lock has been obtained *\/$/;"	m	struct:winceLock	file:	access:public
bFirst	sqlite3.c	/^  int bFirst;                     \/* True if token must appear at position 0 *\/$/;"	m	struct:Fts3PhraseToken	file:	access:public
bFreeList	sqlite3.c	/^  int bFreeList;                 \/* True if pList should be sqlite3_free()d *\/$/;"	m	struct:Fts3Doclist	file:	access:public
bFreeWith	sqlite3.c	/^  u8 bFreeWith;             \/* True if pWith should be freed with parser *\/$/;"	m	struct:Parse	file:	access:public
bFts4	sqlite3.c	/^  int bFts4;                          \/* True to allow FTS4-only syntax *\/$/;"	m	struct:ParseContext	file:	access:public
bFts4	sqlite3.c	/^  u8 bFts4;                       \/* True for FTS4, false for FTS3 *\/$/;"	m	struct:Fts3Table	file:	access:public
bFullMutex	sqlite3.c	/^  int bFullMutex;                   \/* True to enable full mutexing *\/$/;"	m	struct:Sqlite3Config	file:	access:public
bHasDocsize	sqlite3.c	/^  u8 bHasDocsize;                 \/* True if %_docsize table exists *\/$/;"	m	struct:Fts3Table	file:	access:public
bHasStat	sqlite3.c	/^  u8 bHasStat;                    \/* True if %_stat table exists (2==unknown) *\/$/;"	m	struct:Fts3Table	file:	access:public
bIgnore	sqlite3.c	/^  int bIgnore;$/;"	m	struct:TokenDoclist	file:	access:public
bIgnoreSavepoint	sqlite3.c	/^  u8 bIgnoreSavepoint;            \/* True to ignore xSavepoint invocations *\/$/;"	m	struct:Fts3Table	file:	access:public
bIncr	sqlite3.c	/^  int bIncr;                 \/* True if doclist is loaded incrementally *\/$/;"	m	struct:Fts3Phrase	file:	access:public
bIsReader	sqlite3.c	/^  bft bIsReader:1;        \/* True for statements that read *\/$/;"	m	struct:Vdbe	file:	access:public
bLine	sqlite3.c	/^  u8  bLine[100];         \/* Draw vertical in column i if bLine[i] is true *\/$/;"	m	struct:TreeView	file:	access:public
bLocaltimeFault	sqlite3.c	/^  int bLocaltimeFault;              \/* True to fail localtime() calls *\/$/;"	m	struct:Sqlite3Config	file:	access:public
bLookup	sqlite3.c	/^  int bLookup;                    \/* True if a lookup of a single entry. *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
bLookup	sqlite3.c	/^  u8 bLookup;                     \/* True for a lookup only *\/$/;"	m	struct:Fts3SegReader	file:	access:public
bMalloced	sqlite3.c	/^  u8 bMalloced;           \/* True if pStart obtained from sqlite3_malloc() *\/$/;"	m	struct:Lookaside	file:	access:public
bMemstat	sqlite3.c	/^  int bMemstat;                     \/* True to enable memory status *\/$/;"	m	struct:Sqlite3Config	file:	access:public
bNoIncrDoclist	sqlite3.c	/^  int bNoIncrDoclist;$/;"	m	struct:Fts3Table	file:	access:public
bNoLeafData	sqlite3.c	/^  u8 bNoLeafData;                 \/* If true, store 0 for segment size *\/$/;"	m	struct:IncrmergeWriter	file:	access:public
bNot	sqlite3.c	/^  int bNot;         \/* True if the NOT keyword is present *\/$/;"	m	struct:LikeOp	file:	access:public
bOpenUri	sqlite3.c	/^  int bOpenUri;                     \/* True to interpret filenames as URIs *\/$/;"	m	struct:Sqlite3Config	file:	access:public
bOwned	sqlite3.c	/^  BOOL bOwned;  \/* Do we own the heap (i.e. destroy it on shutdown)? *\/$/;"	m	struct:winMemData	file:	access:public
bPending	sqlite3.c	/^  BOOL bPending;      \/* Indicates a pending lock has been obtained *\/$/;"	m	struct:winceLock	file:	access:public
bPoint	sqlite3.c	/^  u8 bPoint;                        \/* True if sPoint is valid *\/$/;"	m	struct:RtreeCursor	file:	access:public
bProcessLock	sqlite3.c	/^  unsigned char bProcessLock;     \/* An exclusive process lock is held *\/$/;"	m	struct:unixInodeInfo	file:	access:public
bPurgeable	sqlite3.c	/^  int bPurgeable;                     \/* True if cache is purgeable *\/$/;"	m	struct:PCache1	file:	access:public
bPurgeable	sqlite3.c	/^  u8 bPurgeable;                      \/* True if pages are on backing store *\/$/;"	m	struct:PCache	file:	access:public
bRemoveDiacritic	sqlite3.c	/^  int bRemoveDiacritic;$/;"	m	struct:unicode_tokenizer	file:	access:public
bReserved	sqlite3.c	/^  BOOL bReserved;     \/* Indicates a reserved lock has been obtained *\/$/;"	m	struct:winceLock	file:	access:public
bRestart	sqlite3.c	/^  int bRestart;$/;"	m	struct:Fts3MultiSegReader	file:	access:public
bSpanIsTab	sqlite3.c	/^    unsigned bSpanIsTab :1; \/* zSpan holds DB.TABLE.COLUMN *\/$/;"	m	struct:ExprList::ExprList_item	file:	access:public
bStart	sqlite3.c	/^  u8 bStart;                 \/* True if iDocid is valid *\/$/;"	m	struct:Fts3Expr	file:	access:public
bUnderPressure	sqlite3.c	/^  int bUnderPressure;            \/* True if low on PAGECACHE memory *\/$/;"	m	struct:PCacheGlobal	file:	access:public
bUnordered	sqlite3.c	/^  unsigned bUnordered:1;   \/* Use this index for == or IN queries only *\/$/;"	m	struct:Index	file:	access:public
bUseCis	sqlite3.c	/^  int bUseCis;                      \/* Use covering indices for full-scans *\/$/;"	m	struct:Sqlite3Config	file:	access:public
bUseFetch	sqlite3.c	/^  u8 bUseFetch;               \/* True to use xFetch() *\/$/;"	m	struct:Pager	file:	access:public
bUsePMA	sqlite3.c	/^  u8 bUsePMA;                     \/* True if one or more PMAs created *\/$/;"	m	struct:VdbeSorter	file:	access:public
bUseThread	sqlite3.c	/^  int bUseThread;                 \/* True to use a bg thread for this object *\/$/;"	m	struct:IncrMerger	file:	access:public
bUseThreads	sqlite3.c	/^  u8 bUseThreads;                 \/* True to use background threads *\/$/;"	m	struct:VdbeSorter	file:	access:public
bVarOnly	sqlite3.c	/^  int bVarOnly;       \/* Check for variable references only *\/$/;"	m	struct:DbFixer	file:	access:public
backtrace	sqlite3.c	/^  extern int backtrace(void**,int);$/;"	p	file:	signature:(void**,int)
backtrace	sqlite3.c	16775;"	d	file:
backtrace_symbols_fd	sqlite3.c	/^  extern void backtrace_symbols_fd(void*const*,int,int);$/;"	p	file:	signature:(void*const*,int,int)
backtrace_symbols_fd	sqlite3.c	16776;"	d	file:
backupOnePage	sqlite3.c	/^static int backupOnePage($/;"	f	file:	signature:( sqlite3_backup *p, Pgno iSrcPg, const u8 *zSrcData, int bUpdate )
backupTruncateFile	sqlite3.c	/^static int backupTruncateFile(sqlite3_file *pFile, i64 iSize){$/;"	f	file:	signature:(sqlite3_file *pFile, i64 iSize)
backup_finish	sqlite3.c	/^  int (*backup_finish)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
backup_init	sqlite3.c	/^  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
backup_pagecount	sqlite3.c	/^  int (*backup_pagecount)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
backup_remaining	sqlite3.c	/^  int (*backup_remaining)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
backup_step	sqlite3.c	/^  int (*backup_step)(sqlite3_backup*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
balance	sqlite3.c	/^static int balance(BtCursor *pCur){$/;"	f	file:	signature:(BtCursor *pCur)
balance_deeper	sqlite3.c	/^static int balance_deeper(MemPage *pRoot, MemPage **ppChild){$/;"	f	file:	signature:(MemPage *pRoot, MemPage **ppChild)
balance_nonroot	sqlite3.c	/^static int balance_nonroot($/;"	f	file:	signature:( MemPage *pParent, int iParentIdx, u8 *aOvflSpace, int isRoot, int bBulk )
balance_quick	sqlite3.c	/^static int balance_quick(MemPage *pParent, MemPage *pPage, u8 *pSpace){$/;"	f	file:	signature:(MemPage *pParent, MemPage *pPage, u8 *pSpace)
base	sqlite3.c	/^  etByte base;             \/* The base for radix conversion *\/$/;"	m	struct:et_info	file:	access:public
base	sqlite3.c	/^  sqlite3_tokenizer base;      \/* Base class *\/$/;"	m	struct:porter_tokenizer	file:	access:public
base	sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:IcuTokenizer	file:	access:public
base	sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:simple_tokenizer	file:	access:public
base	sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:unicode_tokenizer	file:	access:public
base	sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:IcuCursor	file:	access:public
base	sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:porter_tokenizer_cursor	file:	access:public
base	sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:simple_tokenizer_cursor	file:	access:public
base	sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:unicode_cursor	file:	access:public
base	sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Table	file:	access:public
base	sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxTable	file:	access:public
base	sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3tokTable	file:	access:public
base	sqlite3.c	/^  sqlite3_vtab base;          \/* Base class.  Must be first *\/$/;"	m	struct:Rtree	file:	access:public
base	sqlite3.c	/^  sqlite3_vtab_cursor base;         \/* Base class.  Must be first *\/$/;"	m	struct:RtreeCursor	file:	access:public
base	sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Cursor	file:	access:public
base	sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxCursor	file:	access:public
base	sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
bft	sqlite3.c	/^typedef unsigned bft;  \/* Bit Field Type *\/$/;"	t	file:
bigEndCksum	sqlite3.c	/^  u8 bigEndCksum;                 \/* True if checksums in WAL are big-endian *\/$/;"	m	struct:WalIndexHdr	file:	access:public
binCollFunc	sqlite3.c	/^static int binCollFunc($/;"	f	file:	signature:( void *padFlag, int nKey1, const void *pKey1, int nKey2, const void *pKey2 )
binaryCompareP5	sqlite3.c	/^static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){$/;"	f	file:	signature:(Expr *pExpr1, Expr *pExpr2, int jumpIfNull)
binaryToUnaryIfNull	sqlite3.c	/^  static void binaryToUnaryIfNull(Parse *pParse, Expr *pY, Expr *pA, int op){$/;"	f	file:	signature:(Parse *pParse, Expr *pY, Expr *pA, int op)
bindText	sqlite3.c	/^static int bindText($/;"	f	file:	signature:( sqlite3_stmt *pStmt, int i, const void *zData, int nData, void (*xDel)(void*), u8 encoding )
bind_blob	sqlite3.c	/^  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
bind_blob64	sqlite3.c	/^  int (*bind_blob64)(sqlite3_stmt*,int,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:	access:public
bind_double	sqlite3.c	/^  int  (*bind_double)(sqlite3_stmt*,int,double);$/;"	m	struct:sqlite3_api_routines	file:	access:public
bind_int	sqlite3.c	/^  int  (*bind_int)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
bind_int64	sqlite3.c	/^  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:	access:public
bind_null	sqlite3.c	/^  int  (*bind_null)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
bind_parameter_count	sqlite3.c	/^  int  (*bind_parameter_count)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
bind_parameter_index	sqlite3.c	/^  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);$/;"	m	struct:sqlite3_api_routines	file:	access:public
bind_parameter_name	sqlite3.c	/^  const char * (*bind_parameter_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
bind_text	sqlite3.c	/^  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
bind_text16	sqlite3.c	/^  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
bind_text64	sqlite3.c	/^  int (*bind_text64)(sqlite3_stmt*,int,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:	access:public
bind_value	sqlite3.c	/^  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
bind_zeroblob	sqlite3.c	/^  int (*bind_zeroblob)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
blobGrowBuffer	sqlite3.c	/^static void blobGrowBuffer(Blob *pBlob, int nMin, int *pRc){$/;"	f	file:	signature:(Blob *pBlob, int nMin, int *pRc)
blobReadWrite	sqlite3.c	/^static int blobReadWrite($/;"	f	file:	signature:( sqlite3_blob *pBlob, void *z, int n, int iOffset, int (*xCall)(BtCursor*, u32, u32, void*) )
blobSeekToRow	sqlite3.c	/^static int blobSeekToRow(Incrblob *p, sqlite3_int64 iRow, char **pzErr){$/;"	f	file:	signature:(Incrblob *p, sqlite3_int64 iRow, char **pzErr)
blob_bytes	sqlite3.c	/^  int (*blob_bytes)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
blob_close	sqlite3.c	/^  int (*blob_close)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
blob_open	sqlite3.c	/^  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,$/;"	m	struct:sqlite3_api_routines	file:	access:public
blob_read	sqlite3.c	/^  int (*blob_read)(sqlite3_blob*,void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
blob_reopen	sqlite3.c	/^  int (*blob_reopen)(sqlite3_blob*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:	access:public
blob_write	sqlite3.c	/^  int (*blob_write)(sqlite3_blob*,const void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
block	sqlite3.c	/^  Blob block;                     \/* Current block image *\/$/;"	m	struct:NodeWriter	file:	access:public
btree	sqlite3.c	/^    } btree;$/;"	m	union:WhereLoop::__anon18	typeref:struct:WhereLoop::__anon18::__anon19	file:	access:public
btreeClearHasContent	sqlite3.c	/^static void btreeClearHasContent(BtShared *pBt){$/;"	f	file:	signature:(BtShared *pBt)
btreeCreateTable	sqlite3.c	/^static int btreeCreateTable(Btree *p, int *piTable, int createTabFlags){$/;"	f	file:	signature:(Btree *p, int *piTable, int createTabFlags)
btreeCursor	sqlite3.c	/^static int btreeCursor($/;"	f	file:	signature:( Btree *p, int iTable, int wrFlag, struct KeyInfo *pKeyInfo, BtCursor *pCur )
btreeDropTable	sqlite3.c	/^static int btreeDropTable(Btree *p, Pgno iTable, int *piMoved){$/;"	f	file:	signature:(Btree *p, Pgno iTable, int *piMoved)
btreeEndTransaction	sqlite3.c	/^static void btreeEndTransaction(Btree *p){$/;"	f	file:	signature:(Btree *p)
btreeGetHasContent	sqlite3.c	/^static int btreeGetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:	signature:(BtShared *pBt, Pgno pgno)
btreeGetPage	sqlite3.c	/^static int btreeGetPage($/;"	f	file:	signature:( BtShared *pBt, Pgno pgno, MemPage **ppPage, int flags )
btreeInitPage	sqlite3.c	/^static int btreeInitPage(MemPage *pPage){$/;"	f	file:	signature:(MemPage *pPage)
btreeIntegrity	sqlite3.c	51859;"	d	file:
btreeInvokeBusyHandler	sqlite3.c	/^static int btreeInvokeBusyHandler(void *pArg){$/;"	f	file:	signature:(void *pArg)
btreeLockCarefully	sqlite3.c	/^static void SQLITE_NOINLINE btreeLockCarefully(Btree *p);$/;"	p	file:	signature:(Btree *p)
btreeLockCarefully	sqlite3.c	/^static void SQLITE_NOINLINE btreeLockCarefully(Btree *p){$/;"	f	file:	signature:(Btree *p)
btreeMask	sqlite3.c	/^  yDbMask btreeMask;      \/* Bitmask of db->aDb[] entries referenced *\/$/;"	m	struct:Vdbe	file:	access:public
btreeMoveto	sqlite3.c	/^static int btreeMoveto($/;"	f	file:	signature:( BtCursor *pCur, const void *pKey, i64 nKey, int bias, int *pRes )
btreeNext	sqlite3.c	/^static SQLITE_NOINLINE int btreeNext(BtCursor *pCur, int *pRes){$/;"	f	file:	signature:(BtCursor *pCur, int *pRes)
btreePageFromDbPage	sqlite3.c	/^static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){$/;"	f	file:	signature:(DbPage *pDbPage, Pgno pgno, BtShared *pBt)
btreePageLookup	sqlite3.c	/^static MemPage *btreePageLookup(BtShared *pBt, Pgno pgno){$/;"	f	file:	signature:(BtShared *pBt, Pgno pgno)
btreePagecount	sqlite3.c	/^static Pgno btreePagecount(BtShared *pBt){$/;"	f	file:	signature:(BtShared *pBt)
btreeParseCell	sqlite3.c	/^static void btreeParseCell($/;"	f	file:	signature:( MemPage *pPage, int iCell, CellInfo *pInfo )
btreeParseCellPtr	sqlite3.c	/^static void btreeParseCellPtr($/;"	f	file:	signature:( MemPage *pPage, u8 *pCell, CellInfo *pInfo )
btreePrevious	sqlite3.c	/^static SQLITE_NOINLINE int btreePrevious(BtCursor *pCur, int *pRes){$/;"	f	file:	signature:(BtCursor *pCur, int *pRes)
btreeReleaseAllCursorPages	sqlite3.c	/^static void btreeReleaseAllCursorPages(BtCursor *pCur){$/;"	f	file:	signature:(BtCursor *pCur)
btreeRestoreCursorPosition	sqlite3.c	/^static int btreeRestoreCursorPosition(BtCursor *pCur){$/;"	f	file:	signature:(BtCursor *pCur)
btreeSetHasContent	sqlite3.c	/^static int btreeSetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:	signature:(BtShared *pBt, Pgno pgno)
btsFlags	sqlite3.c	/^  u16 btsFlags;         \/* Boolean parameters.  See BTS_* macros below *\/$/;"	m	struct:BtShared	file:	access:public
busy	sqlite3.c	/^    u8 busy;                    \/* TRUE if currently initializing *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:	access:public
busyHandler	sqlite3.c	/^  BusyHandler busyHandler;      \/* Busy callback *\/$/;"	m	struct:sqlite3	file:	access:public
busyTimeout	sqlite3.c	/^  int busyTimeout;              \/* Busy handler timeout, in msec *\/$/;"	m	struct:sqlite3	file:	access:public
busy_handler	sqlite3.c	/^  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
busy_timeout	sqlite3.c	/^  int  (*busy_timeout)(sqlite3*,int ms);$/;"	m	struct:sqlite3_api_routines	file:	access:public
cId	sqlite3.c	/^  char cId;             \/* Symbolic ID of this loop for debugging use *\/$/;"	m	struct:WhereLoop	file:	access:public
cType	sqlite3.c	/^static const char cType[] = {$/;"	v	file:
cacheCtr	sqlite3.c	/^  u32 cacheCtr;           \/* VdbeCursor row cache generation counter *\/$/;"	m	struct:Vdbe	file:	access:public
cacheEntryClear	sqlite3.c	/^static void cacheEntryClear(Parse *pParse, struct yColCache *p){$/;"	f	file:	signature:(Parse *pParse, struct yColCache *p)
cacheStatus	sqlite3.c	/^  u32 cacheStatus;      \/* Cache is valid if this matches Vdbe.cacheCtr *\/$/;"	m	struct:VdbeCursor	file:	access:public
cache_size	sqlite3.c	/^  int cache_size;      \/* Number of pages to use in the cache *\/$/;"	m	struct:Schema	file:	access:public
callCollNeeded	sqlite3.c	/^static void callCollNeeded(sqlite3 *db, int enc, const char *zName){$/;"	f	file:	signature:(sqlite3 *db, int enc, const char *zName)
callFinaliser	sqlite3.c	/^static void callFinaliser(sqlite3 *db, int offset){$/;"	f	file:	signature:(sqlite3 *db, int offset)
callStatGet	sqlite3.c	/^static void callStatGet(Vdbe *v, int regStat4, int iParam, int regOut){$/;"	f	file:	signature:(Vdbe *v, int regStat4, int iParam, int regOut)
cancel_auto_extension	sqlite3.c	/^  int (*cancel_auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines	file:	access:public
cb	sqlite3.c	/^  RtreeGeomCallback cb;       \/* Info about the callback functions *\/$/;"	m	struct:RtreeMatchArg	file:	access:public
cdateFunc	sqlite3.c	/^static void cdateFunc($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **NotUsed2 )
cellArea	sqlite3.c	/^static RtreeDValue cellArea(Rtree *pRtree, RtreeCell *p){$/;"	f	file:	signature:(Rtree *pRtree, RtreeCell *p)
cellContains	sqlite3.c	/^static int cellContains(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:	signature:(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2)
cellGrowth	sqlite3.c	/^static RtreeDValue cellGrowth(Rtree *pRtree, RtreeCell *p, RtreeCell *pCell){$/;"	f	file:	signature:(Rtree *pRtree, RtreeCell *p, RtreeCell *pCell)
cellMargin	sqlite3.c	/^static RtreeDValue cellMargin(Rtree *pRtree, RtreeCell *p){$/;"	f	file:	signature:(Rtree *pRtree, RtreeCell *p)
cellOffset	sqlite3.c	/^  u16 cellOffset;      \/* Index in aData of first cell pointer *\/$/;"	m	struct:MemPage	file:	access:public
cellOverlap	sqlite3.c	/^static RtreeDValue cellOverlap($/;"	f	file:	signature:( Rtree *pRtree, RtreeCell *p, RtreeCell *aCell, int nCell )
cellSize	sqlite3.c	/^static u16 cellSize(MemPage *pPage, int iCell){$/;"	f	file:	signature:(MemPage *pPage, int iCell)
cellSizePtr	sqlite3.c	/^static u16 cellSizePtr(MemPage *pPage, u8 *pCell){$/;"	f	file:	signature:(MemPage *pPage, u8 *pCell)
cellUnion	sqlite3.c	/^static void cellUnion(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:	signature:(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2)
chain	sqlite3.c	/^    Fts3HashElem *chain;     \/* Pointer to first entry with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:	access:public
chain	sqlite3.c	/^    HashElem *chain;           \/* Pointer to first entry with this hash *\/$/;"	m	struct:Hash::_ht	file:	access:public
changeCntOn	sqlite3.c	/^  bft changeCntOn:1;      \/* True to update the change-counter *\/$/;"	m	struct:Vdbe	file:	access:public
changeCountDone	sqlite3.c	/^  u8 changeCountDone;         \/* Set after incrementing the change-counter *\/$/;"	m	struct:Pager	file:	access:public
changeTempStorage	sqlite3.c	/^static int changeTempStorage(Parse *pParse, const char *zStorageType){$/;"	f	file:	signature:(Parse *pParse, const char *zStorageType)
changes	sqlite3.c	/^  int  (*changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
changes	sqlite3.c	/^static void changes($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **NotUsed2 )
charFunc	sqlite3.c	/^static void charFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
charMap	sqlite3.c	123818;"	d	file:
charMap	sqlite3.c	123821;"	d	file:
charset	sqlite3.c	/^  etByte charset;          \/* Offset into aDigits[] of the digits string *\/$/;"	m	struct:et_info	file:	access:public
checkActiveVdbeCnt	sqlite3.c	/^static void checkActiveVdbeCnt(sqlite3 *db){$/;"	f	file:	signature:(sqlite3 *db)
checkActiveVdbeCnt	sqlite3.c	65401;"	d	file:
checkAppendMsg	sqlite3.c	/^static void checkAppendMsg($/;"	f	file:	signature:( IntegrityCk *pCheck, const char *zFormat, ... )
checkColumnOverlap	sqlite3.c	/^static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){$/;"	f	file:	signature:(IdList *pIdList, ExprList *pEList)
checkForMultiColumnSelectError	sqlite3.c	/^static int checkForMultiColumnSelectError($/;"	f	file:	signature:( Parse *pParse, SelectDest *pDest, int nExpr )
checkList	sqlite3.c	/^static void checkList($/;"	f	file:	signature:( IntegrityCk *pCheck, int isFreeList, int iPage, int N )
checkListProperties	sqlite3.c	/^static void checkListProperties(sqlite3 *db){$/;"	f	file:	signature:(sqlite3 *db)
checkListProperties	sqlite3.c	128522;"	d	file:
checkPage	sqlite3.c	/^static void checkPage(PgHdr *pPg){$/;"	f	file:	signature:(PgHdr *pPg)
checkPtrmap	sqlite3.c	/^static void checkPtrmap($/;"	f	file:	signature:( IntegrityCk *pCheck, Pgno iChild, u8 eType, Pgno iParent )
checkRef	sqlite3.c	/^static int checkRef(IntegrityCk *pCheck, Pgno iPage){$/;"	f	file:	signature:(IntegrityCk *pCheck, Pgno iPage)
checkSavepointCount	sqlite3.c	/^static int checkSavepointCount(sqlite3 *db){$/;"	f	file:	signature:(sqlite3 *db)
checkSchema	sqlite3.c	/^  u8 checkSchema;      \/* Causes schema cookie check after an error *\/$/;"	m	struct:Parse	file:	access:public
checkTreePage	sqlite3.c	/^static int checkTreePage($/;"	f	file:	signature:( IntegrityCk *pCheck, int iPage, i64 *pnParentMinKey, i64 *pnParentMaxKey )
childPtrSize	sqlite3.c	/^  u8 childPtrSize;     \/* 0 if leaf==1.  4 if leaf==0 *\/$/;"	m	struct:MemPage	file:	access:public
ckBase	sqlite3.c	/^  int ckBase;          \/* Base register of data during check constraints *\/$/;"	m	struct:Parse	file:	access:public
ckptLock	sqlite3.c	/^  u8 ckptLock;               \/* True if holding a checkpoint lock *\/$/;"	m	struct:Wal	file:	access:public
ckptSyncFlags	sqlite3.c	/^  u8 ckptSyncFlags;           \/* SYNC_NORMAL or SYNC_FULL for checkpoint *\/$/;"	m	struct:Pager	file:	access:public
cksumInit	sqlite3.c	/^  u32 cksumInit;              \/* Quasi-random value added to every checksum *\/$/;"	m	struct:Pager	file:	access:public
clearAllSharedCacheTableLocks	sqlite3.c	/^static void clearAllSharedCacheTableLocks(Btree *p){$/;"	f	file:	signature:(Btree *p)
clearAllSharedCacheTableLocks	sqlite3.c	52304;"	d	file:
clearCell	sqlite3.c	/^static int clearCell($/;"	f	file:	signature:( MemPage *pPage, unsigned char *pCell, u16 *pnSize )
clearDatabasePage	sqlite3.c	/^static int clearDatabasePage($/;"	f	file:	signature:( BtShared *pBt, Pgno pgno, int freePageFlag, int *pnChange )
clearSelect	sqlite3.c	/^static void clearSelect(sqlite3 *db, Select *p){$/;"	f	file:	signature:(sqlite3 *db, Select *p)
clearYMD_HMS_TZ	sqlite3.c	/^static void clearYMD_HMS_TZ(DateTime *p){$/;"	f	file:	signature:(DateTime *p)
clear_bindings	sqlite3.c	/^  int (*clear_bindings)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
close	sqlite3.c	/^  int  (*close)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
closeAllCursors	sqlite3.c	/^static void closeAllCursors(Vdbe *p){$/;"	f	file:	signature:(Vdbe *p)
closePendingFds	sqlite3.c	/^static void closePendingFds(unixFile *pFile){$/;"	f	file:	signature:(unixFile *pFile)
closeUnixFile	sqlite3.c	/^static int closeUnixFile(sqlite3_file *id){$/;"	f	file:	signature:(sqlite3_file *id)
close_v2	sqlite3.c	/^  int (*close_v2)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
cnt	sqlite3.c	/^  i64 cnt;          \/* Number of elements summed *\/$/;"	m	struct:SumCtx	file:	access:public
cnt	sqlite3.c	/^  int cnt;    \/* Number of entries without a matching leave *\/$/;"	m	struct:sqlite3_debug_mutex	file:	access:public
cnt	sqlite3.c	/^  u32 cnt;                 \/* Number of times this instruction was executed *\/$/;"	m	struct:VdbeOp	file:	access:public
codeAllEqualityTerms	sqlite3.c	/^static int codeAllEqualityTerms($/;"	f	file:	signature:( Parse *pParse, WhereLevel *pLevel, int bRev, int nExtraReg, char **pzAff )
codeApplyAffinity	sqlite3.c	/^static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){$/;"	f	file:	signature:(Parse *pParse, int base, int n, char *zAff)
codeAttach	sqlite3.c	/^static void codeAttach($/;"	f	file:	signature:( Parse *pParse, int type, FuncDef const *pFunc, Expr *pAuthArg, Expr *pFilename, Expr *pDbname, Expr *pKey )
codeCompare	sqlite3.c	/^static int codeCompare($/;"	f	file:	signature:( Parse *pParse, Expr *pLeft, Expr *pRight, int opcode, int in1, int in2, int dest, int jumpIfNull )
codeDistinct	sqlite3.c	/^static void codeDistinct($/;"	f	file:	signature:( Parse *pParse, int iTab, int addrRepeat, int N, int iMem )
codeEqualityTerm	sqlite3.c	/^static int codeEqualityTerm($/;"	f	file:	signature:( Parse *pParse, WhereTerm *pTerm, WhereLevel *pLevel, int iEq, int bRev, int iTarget )
codeInteger	sqlite3.c	/^static void codeInteger(Parse *pParse, Expr *pExpr, int negFlag, int iMem){$/;"	f	file:	signature:(Parse *pParse, Expr *pExpr, int negFlag, int iMem)
codeOffset	sqlite3.c	/^static void codeOffset($/;"	f	file:	signature:( Vdbe *v, int iOffset, int iContinue )
codeOneLoopStart	sqlite3.c	/^static Bitmask codeOneLoopStart($/;"	f	file:	signature:( WhereInfo *pWInfo, int iLevel, Bitmask notReady )
codeReal	sqlite3.c	/^static void codeReal(Vdbe *v, const char *z, int negateFlag, int iMem){$/;"	f	file:	signature:(Vdbe *v, const char *z, int negateFlag, int iMem)
codeRowTrigger	sqlite3.c	/^static TriggerPrg *codeRowTrigger($/;"	f	file:	signature:( Parse *pParse, Trigger *pTrigger, Table *pTab, int orconf )
codeTableLocks	sqlite3.c	/^static void codeTableLocks(Parse *pParse){$/;"	f	file:	signature:(Parse *pParse)
codeTableLocks	sqlite3.c	88672;"	d	file:
codeTriggerProgram	sqlite3.c	/^static int codeTriggerProgram($/;"	f	file:	signature:( Parse *pParse, TriggerStep *pStepList, int orconf )
colFlags	sqlite3.c	/^  u8 colFlags;     \/* Boolean properties.  See COLFLAG_ defines below *\/$/;"	m	struct:Column	file:	access:public
colNamesSet	sqlite3.c	/^  u8 colNamesSet;      \/* TRUE after OP_ColumnName has been issued to pVdbe *\/$/;"	m	struct:Parse	file:	access:public
colUsed	sqlite3.c	/^    Bitmask colUsed;  \/* Bit N (1<<N) set if column N of pTab is used *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
collationMatch	sqlite3.c	/^static int collationMatch(const char *zColl, Index *pIndex){$/;"	f	file:	signature:(const char *zColl, Index *pIndex)
collation_needed	sqlite3.c	/^  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
collation_needed16	sqlite3.c	/^  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
columnIndex	sqlite3.c	/^static int columnIndex(Table *pTab, const char *zCol){$/;"	f	file:	signature:(Table *pTab, const char *zCol)
columnMallocFailure	sqlite3.c	/^static void columnMallocFailure(sqlite3_stmt *pStmt)$/;"	f	file:	signature:(sqlite3_stmt *pStmt)
columnMem	sqlite3.c	/^static Mem *columnMem(sqlite3_stmt *pStmt, int i){$/;"	f	file:	signature:(sqlite3_stmt *pStmt, int i)
columnName	sqlite3.c	/^static const void *columnName($/;"	f	file:	signature:( sqlite3_stmt *pStmt, int N, const void *(*xFunc)(Mem*), int useType )
columnNullValue	sqlite3.c	/^static const Mem *columnNullValue(void){$/;"	f	file:	signature:(void)
columnType	sqlite3.c	105377;"	d	file:
columnTypeImpl	sqlite3.c	/^static const char *columnTypeImpl($/;"	f	file:	signature:( NameContext *pNC, Expr *pExpr, const char **pzOrigDb, const char **pzOrigTab, const char **pzOrigCol, u8 *pEstWidth )
column_blob	sqlite3.c	/^  const void * (*column_blob)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_bytes	sqlite3.c	/^  int  (*column_bytes)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_bytes16	sqlite3.c	/^  int  (*column_bytes16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_count	sqlite3.c	/^  int  (*column_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_database_name	sqlite3.c	/^  const char * (*column_database_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_database_name16	sqlite3.c	/^  const void * (*column_database_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_decltype	sqlite3.c	/^  const char * (*column_decltype)(sqlite3_stmt*,int i);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_decltype16	sqlite3.c	/^  const void * (*column_decltype16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_double	sqlite3.c	/^  double  (*column_double)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_int	sqlite3.c	/^  int  (*column_int)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_int64	sqlite3.c	/^  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_name	sqlite3.c	/^  const char * (*column_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_name16	sqlite3.c	/^  const void * (*column_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_origin_name	sqlite3.c	/^  const char * (*column_origin_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_origin_name16	sqlite3.c	/^  const void * (*column_origin_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_table_name	sqlite3.c	/^  const char * (*column_table_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_table_name16	sqlite3.c	/^  const void * (*column_table_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_text	sqlite3.c	/^  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_text16	sqlite3.c	/^  const void * (*column_text16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_type	sqlite3.c	/^  int  (*column_type)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
column_value	sqlite3.c	/^  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
columnsInIndex	sqlite3.c	/^static Bitmask columnsInIndex(Index *pIdx){$/;"	f	file:	signature:(Index *pIdx)
commit_hook	sqlite3.c	/^  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
compare2pow63	sqlite3.c	/^static int compare2pow63(const char *zNum, int incr){$/;"	f	file:	signature:(const char *zNum, int incr)
compareInfo	sqlite3.c	/^struct compareInfo {$/;"	s	file:
compareInfo::matchAll	sqlite3.c	/^  u8 matchAll;$/;"	m	struct:compareInfo	file:	access:public
compareInfo::matchOne	sqlite3.c	/^  u8 matchOne;$/;"	m	struct:compareInfo	file:	access:public
compareInfo::matchSet	sqlite3.c	/^  u8 matchSet;$/;"	m	struct:compareInfo	file:	access:public
compareInfo::noCase	sqlite3.c	/^  u8 noCase;$/;"	m	struct:compareInfo	file:	access:public
comparisonAffinity	sqlite3.c	/^static char comparisonAffinity(Expr *pExpr){$/;"	f	file:	signature:(Expr *pExpr)
compileoption_get	sqlite3.c	/^  const char *(*compileoption_get)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
compileoption_used	sqlite3.c	/^  int (*compileoption_used)(const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
compileoptiongetFunc	sqlite3.c	/^static void compileoptiongetFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
compileoptionusedFunc	sqlite3.c	/^static void compileoptionusedFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
complete	sqlite3.c	/^  int  (*complete)(const char*sql);$/;"	m	struct:sqlite3_api_routines	file:	access:public
complete16	sqlite3.c	/^  int  (*complete16)(const void*sql);$/;"	m	struct:sqlite3_api_routines	file:	access:public
computeHMS	sqlite3.c	/^static void computeHMS(DateTime *p){$/;"	f	file:	signature:(DateTime *p)
computeJD	sqlite3.c	/^static void computeJD(DateTime *p){$/;"	f	file:	signature:(DateTime *p)
computeLimitRegisters	sqlite3.c	/^static void computeLimitRegisters(Parse *pParse, Select *p, int iBreak){$/;"	f	file:	signature:(Parse *pParse, Select *p, int iBreak)
computeNumericType	sqlite3.c	/^static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){$/;"	f	file:	signature:(Mem *pMem)
computeYMD	sqlite3.c	/^static void computeYMD(DateTime *p){$/;"	f	file:	signature:(DateTime *p)
computeYMD_HMS	sqlite3.c	/^static void computeYMD_HMS(DateTime *p){$/;"	f	file:	signature:(DateTime *p)
conchFile	sqlite3.c	/^  unixFile *conchFile;         \/* Open conch file *\/$/;"	m	struct:proxyLockingContext	file:	access:public
conchFilePath	sqlite3.c	/^  char *conchFilePath;         \/* Name of the conch file *\/$/;"	m	struct:proxyLockingContext	file:	access:public
conchHeld	sqlite3.c	/^  int conchHeld;               \/* 1 if the conch is held, -1 if lockless *\/$/;"	m	struct:proxyLockingContext	file:	access:public
connectionIsBusy	sqlite3.c	/^static int connectionIsBusy(sqlite3 *db){$/;"	f	file:	signature:(sqlite3 *db)
constraintName	sqlite3.c	/^  Token constraintName;\/* Name of the constraint currently being parsed *\/$/;"	m	struct:Parse	file:	access:public
constructAutomaticIndex	sqlite3.c	/^static void constructAutomaticIndex($/;"	f	file:	signature:( Parse *pParse, WhereClause *pWC, struct SrcList_item *pSrc, Bitmask notReady, WhereLevel *pLevel )
contextMalloc	sqlite3.c	/^static void *contextMalloc(sqlite3_context *context, i64 nByte){$/;"	f	file:	signature:(sqlite3_context *context, i64 nByte)
context_db_handle	sqlite3.c	/^  sqlite3 *(*context_db_handle)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
convertCompoundSelectToSubquery	sqlite3.c	/^static int convertCompoundSelectToSubquery(Walker *pWalker, Select *p){$/;"	f	file:	signature:(Walker *pWalker, Select *p)
convertToWithoutRowidTable	sqlite3.c	/^static void convertToWithoutRowidTable(Parse *pParse, Table *pTab){$/;"	f	file:	signature:(Parse *pParse, Table *pTab)
cookieMask	sqlite3.c	/^  yDbMask cookieMask;  \/* Bitmask of schema verified databases *\/$/;"	m	struct:Parse	file:	access:public
cookieValue	sqlite3.c	/^  int cookieValue[SQLITE_MAX_ATTACHED+2];  \/* Values of cookies to verify *\/$/;"	m	struct:Parse	file:	access:public
copyKey	sqlite3.c	/^  char copyKey;           \/* True if copy of key made on insert *\/$/;"	m	struct:Fts3Hash	file:	access:public
copyNodeContent	sqlite3.c	/^static void copyNodeContent(MemPage *pFrom, MemPage *pTo, int *pRC){$/;"	f	file:	signature:(MemPage *pFrom, MemPage *pTo, int *pRC)
copyPayload	sqlite3.c	/^static int copyPayload($/;"	f	file:	signature:( void *pPayload, void *pBuf, int nByte, int eOp, DbPage *pDbPage )
copy_stemmer	sqlite3.c	/^static void copy_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:	signature:(const char *zIn, int nIn, char *zOut, int *pnOut)
corruptSchema	sqlite3.c	/^static void corruptSchema($/;"	f	file:	signature:( InitData *pData, const char *zObj, const char *zExtra )
costMult	sqlite3.c	/^  LogEst costMult;     \/* Cost multiplier for using this table *\/$/;"	m	struct:Table	file:	access:public
count	sqlite3.c	/^    int count;                 \/* Number of entries with this hash *\/$/;"	m	struct:Hash::_ht	file:	access:public
count	sqlite3.c	/^    int count;               \/* Number of entries with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:	access:public
count	sqlite3.c	/^  int count;              \/* Number of entries in this table *\/$/;"	m	struct:Fts3Hash	file:	access:public
count	sqlite3.c	/^  unsigned int count;       \/* Number of entries in this table *\/$/;"	m	struct:Hash	file:	access:public
countFinalize	sqlite3.c	/^static void countFinalize(sqlite3_context *context){$/;"	f	file:	signature:(sqlite3_context *context)
countStep	sqlite3.c	/^static void countStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:	signature:(sqlite3_context *context, int argc, sqlite3_value **argv)
countValidCursors	sqlite3.c	/^static int countValidCursors(BtShared *pBt, int wrOnly){$/;"	f	file:	signature:(BtShared *pBt, int wrOnly)
covered	sqlite3.c	/^  u64 covered;                    \/* Mask of query phrases covered *\/$/;"	m	struct:SnippetFragment	file:	access:public
createAggContext	sqlite3.c	/^static SQLITE_NOINLINE void *createAggContext(sqlite3_context *p, int nByte){$/;"	f	file:	signature:(sqlite3_context *p, int nByte)
createCollation	sqlite3.c	/^static int createCollation($/;"	f	file:	signature:( sqlite3* db, const char *zName, u8 enc, void* pCtx, int(*xCompare)(void*,int,const void*,int,const void*), void(*xDel)(void*) )
createFile	sqlite3.c	/^static int createFile(JournalFile *p){$/;"	f	file:	signature:(JournalFile *p)
createMask	sqlite3.c	/^static void createMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:	signature:(WhereMaskSet *pMaskSet, int iCursor)
createModule	sqlite3.c	/^static int createModule($/;"	f	file:	signature:( sqlite3 *db, const char *zName, const sqlite3_module *pModule, void *pAux, void (*xDestroy)(void *) )
createTableStmt	sqlite3.c	/^static char *createTableStmt(sqlite3 *db, Table *p){$/;"	f	file:	signature:(sqlite3 *db, Table *p)
create_collation	sqlite3.c	/^  int  (*create_collation)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
create_collation16	sqlite3.c	/^  int  (*create_collation16)(sqlite3*,const void*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
create_collation_v2	sqlite3.c	/^  int (*create_collation_v2)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
create_function	sqlite3.c	/^  int  (*create_function)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
create_function16	sqlite3.c	/^  int  (*create_function16)(sqlite3*,const void*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
create_function_v2	sqlite3.c	/^  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
create_module	sqlite3.c	/^  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
create_module_v2	sqlite3.c	/^  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
csr	sqlite3.c	/^  Fts3MultiSegReader csr;        \/* Must be right after "base" *\/$/;"	m	struct:Fts3auxCursor	file:	access:public
ctimeFunc	sqlite3.c	/^static void ctimeFunc($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **NotUsed2 )
ctimestampFunc	sqlite3.c	/^static void ctimestampFunc($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **NotUsed2 )
ctrlFlags	sqlite3.c	/^  u8 ctrlFlags;           \/* Flags.  See WINFILE_* below *\/$/;"	m	struct:winFile	file:	access:public
ctrlFlags	sqlite3.c	/^  unsigned short int ctrlFlags;       \/* Behavioral bits.  UNIXFILE_* flags *\/$/;"	m	struct:unixFile	file:	access:public
curFlags	sqlite3.c	/^  u8 curFlags;              \/* zero or more BTCF_* flags defined below *\/$/;"	m	struct:BtCursor	file:	access:public
current	sqlite3.c	/^  Stat4Sample current;      \/* Current row as a Stat4Sample *\/$/;"	m	struct:Stat4Accum	file:	access:public
currentCount	sqlite3.c	/^  u32 currentCount;   \/* Current number of distinct checkouts *\/$/;"	m	struct:Mem5Global	file:	access:public
currentOut	sqlite3.c	/^  u32 currentOut;     \/* Current checkout, including internal fragmentation *\/$/;"	m	struct:Mem5Global	file:	access:public
currentTimeFunc	sqlite3.c	/^static void currentTimeFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
cursorHoldsMutex	sqlite3.c	/^static int cursorHoldsMutex(BtCursor *p){$/;"	f	file:	signature:(BtCursor *p)
cycles	sqlite3.c	/^  u64 cycles;              \/* Total time spent executing this instruction *\/$/;"	m	struct:VdbeOp	file:	access:public
data	sqlite3.c	/^  void *data;                  \/* Data associated with this element *\/$/;"	m	struct:HashElem	file:	access:public
data	sqlite3.c	/^  void *data;                \/* Data associated with this element *\/$/;"	m	struct:Fts3HashElem	file:	access:public
data_count	sqlite3.c	/^  int  (*data_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:	access:public
databaseIsUnmoved	sqlite3.c	/^static int databaseIsUnmoved(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
database_destroy	server.c	/^void database_destroy(sqlite3 *db)$/;"	f	signature:(sqlite3 *db)
database_destroy	server.c	/^void database_destroy(sqlite3 *db);$/;"	p	file:	signature:(sqlite3 *db)
database_init	server.c	/^sqlite3 *database_init(const char *dbname)$/;"	f	signature:(const char *dbname)
database_init	server.c	/^sqlite3 *database_init(const char *name);$/;"	p	file:	signature:(const char *name)
dateFunc	sqlite3.c	/^static void dateFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
datetimeFunc	sqlite3.c	/^static void datetimeFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
db	sqlite3.c	/^  sqlite3 *db;                    \/* Database connection *\/$/;"	m	struct:VdbeSorter	file:	access:public
db	sqlite3.c	/^  sqlite3 *db;                    \/* The database connection *\/$/;"	m	struct:Fts3Table	file:	access:public
db	sqlite3.c	/^  sqlite3 *db;                   \/* The database connection *\/$/;"	m	struct:RowSet	file:	access:public
db	sqlite3.c	/^  sqlite3 *db;                \/* Host database connection *\/$/;"	m	struct:Rtree	file:	access:public
db	sqlite3.c	/^  sqlite3 *db;              \/* Database connection associated with this table *\/$/;"	m	struct:VTable	file:	access:public
db	sqlite3.c	/^  sqlite3 *db;              \/* Database connection, for malloc() *\/$/;"	m	struct:Stat4Accum	file:	access:public
db	sqlite3.c	/^  sqlite3 *db;            \/* The associated database *\/$/;"	m	struct:Incrblob	file:	access:public
db	sqlite3.c	/^  sqlite3 *db;            \/* The database connection that owns this statement *\/$/;"	m	struct:Vdbe	file:	access:public
db	sqlite3.c	/^  sqlite3 *db;          \/* Database connection currently using this Btree *\/$/;"	m	struct:BtShared	file:	access:public
db	sqlite3.c	/^  sqlite3 *db;         \/* Optional database for lookaside.  Can be NULL *\/$/;"	m	struct:StrAccum	file:	access:public
db	sqlite3.c	/^  sqlite3 *db;         \/* The main database structure *\/$/;"	m	struct:Parse	file:	access:public
db	sqlite3.c	/^  sqlite3 *db;        \/* The associated database connection *\/$/;"	m	struct:Mem	file:	access:public
db	sqlite3.c	/^  sqlite3 *db;        \/* The database being initialized *\/$/;"	m	struct:__anon7	file:	access:public
db	sqlite3.c	/^  sqlite3 *db;        \/* The database connection *\/$/;"	m	struct:KeyInfo	file:	access:public
db	sqlite3.c	/^  sqlite3 *db;       \/* The database connection holding this btree *\/$/;"	m	struct:Btree	file:	access:public
db	sqlite3.c	/^  sqlite3 *db;$/;"	m	struct:analysisInfo	file:	access:public
dbFileSize	sqlite3.c	/^  Pgno dbFileSize;            \/* Number of pages in the database file *\/$/;"	m	struct:Pager	file:	access:public
dbFileVers	sqlite3.c	/^  char dbFileVers[16];        \/* Changes whenever database file changes *\/$/;"	m	struct:Pager	file:	access:public
dbHintSize	sqlite3.c	/^  Pgno dbHintSize;            \/* Value passed to FCNTL_SIZE_HINT call *\/$/;"	m	struct:Pager	file:	access:public
dbOptFlags	sqlite3.c	/^  u16 dbOptFlags;               \/* Flags to enable\/disable optimizations *\/$/;"	m	struct:sqlite3	file:	access:public
dbOrigSize	sqlite3.c	/^  Pgno dbOrigSize;            \/* dbSize before the current transaction *\/$/;"	m	struct:Pager	file:	access:public
dbPath	sqlite3.c	/^  char *dbPath;                \/* Name of the open file *\/$/;"	m	struct:proxyLockingContext	file:	access:public
dbPath	sqlite3.c	/^  const char *dbPath;             \/* Name of the open file *\/$/;"	m	struct:afpLockingContext	file:	access:public
dbSize	sqlite3.c	/^  Pgno dbSize;                \/* Number of pages in the database *\/$/;"	m	struct:Pager	file:	access:public
dbUpdate	sqlite3.c	/^  unsigned char dbUpdate;        \/* True if any part of database file changed *\/$/;"	m	struct:unixFile	file:	access:public
db_config	sqlite3.c	/^  int (*db_config)(sqlite3*,int,...);$/;"	m	struct:sqlite3_api_routines	file:	access:public
db_filename	sqlite3.c	/^  const char *(*db_filename)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
db_handle	sqlite3.c	/^  sqlite3 * (*db_handle)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
db_mutex	sqlite3.c	/^  sqlite3_mutex *(*db_mutex)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
db_readonly	sqlite3.c	/^  int (*db_readonly)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
db_release_memory	sqlite3.c	/^  int (*db_release_memory)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
db_status	sqlite3.c	/^  int (*db_status)(sqlite3*,int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
debugMutexAlloc	sqlite3.c	/^static sqlite3_mutex *debugMutexAlloc(int id){$/;"	f	file:	signature:(int id)
debugMutexEnd	sqlite3.c	/^static int debugMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:	signature:(void)
debugMutexEnter	sqlite3.c	/^static void debugMutexEnter(sqlite3_mutex *pX){$/;"	f	file:	signature:(sqlite3_mutex *pX)
debugMutexFree	sqlite3.c	/^static void debugMutexFree(sqlite3_mutex *pX){$/;"	f	file:	signature:(sqlite3_mutex *pX)
debugMutexHeld	sqlite3.c	/^static int debugMutexHeld(sqlite3_mutex *pX){$/;"	f	file:	signature:(sqlite3_mutex *pX)
debugMutexInit	sqlite3.c	/^static int debugMutexInit(void){ return SQLITE_OK; }$/;"	f	file:	signature:(void)
debugMutexLeave	sqlite3.c	/^static void debugMutexLeave(sqlite3_mutex *pX){$/;"	f	file:	signature:(sqlite3_mutex *pX)
debugMutexNotheld	sqlite3.c	/^static int debugMutexNotheld(sqlite3_mutex *pX){$/;"	f	file:	signature:(sqlite3_mutex *pX)
debugMutexTry	sqlite3.c	/^static int debugMutexTry(sqlite3_mutex *pX){$/;"	f	file:	signature:(sqlite3_mutex *pX)
declareVtab	sqlite3.c	/^  u8 declareVtab;           \/* True if inside sqlite3_declare_vtab() *\/$/;"	m	struct:Parse	file:	access:public
declare_vtab	sqlite3.c	/^  int (*declare_vtab)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
decodeFlags	sqlite3.c	/^static int decodeFlags(MemPage *pPage, int flagByte){$/;"	f	file:	signature:(MemPage *pPage, int flagByte)
decodeIntArray	sqlite3.c	/^static void decodeIntArray($/;"	f	file:	signature:( char *zIntArray, int nOut, tRowcnt *aOut, LogEst *aLog, Index *pIndex )
default_rc	sqlite3.c	/^  i8 default_rc;      \/* Comparison result if keys are equal *\/$/;"	m	struct:UnpackedRecord	file:	access:public
deferredMoveto	sqlite3.c	/^  u8 deferredMoveto;    \/* A call to sqlite3BtreeMoveto() is needed *\/$/;"	m	struct:VdbeCursor	file:	access:public
defragmentPage	sqlite3.c	/^static int defragmentPage(MemPage *pPage){$/;"	f	file:	signature:(MemPage *pPage)
deleteCell	sqlite3.c	/^static int deleteCell(Rtree *, RtreeNode *, int, int);$/;"	p	file:	signature:(Rtree *, RtreeNode *, int, int)
deleteCell	sqlite3.c	/^static int deleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell, int iHeight){$/;"	f	file:	signature:(Rtree *pRtree, RtreeNode *pNode, int iCell, int iHeight)
delim	sqlite3.c	/^  char delim[128];             \/* flag ASCII delimiters *\/$/;"	m	struct:simple_tokenizer	file:	access:public
desc	sqlite3.c	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:	access:public
desc	sqlite3.h	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	access:public
deserializeGeometry	sqlite3.c	/^static int deserializeGeometry(sqlite3_value *pValue, RtreeConstraint *pCons){$/;"	f	file:	signature:(sqlite3_value *pValue, RtreeConstraint *pCons)
destroyRootPage	sqlite3.c	/^static void destroyRootPage(Parse *pParse, int iTable, int iDb){$/;"	f	file:	signature:(Parse *pParse, int iTable, int iDb)
destroyTable	sqlite3.c	/^static void destroyTable(Parse *pParse, Table *pTab){$/;"	f	file:	signature:(Parse *pParse, Table *pTab)
detachFunc	sqlite3.c	/^static void detachFunc($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **argv )
dev	sqlite3.c	/^  dev_t dev;                  \/* Device number *\/$/;"	m	struct:unixFileId	file:	access:public
deviceCharacteristics	sqlite3.c	/^  int deviceCharacteristics;          \/* Precomputed device characteristics *\/$/;"	m	struct:unixFile	file:	access:public
dfltLockMode	sqlite3.c	/^  u8 dfltLockMode;              \/* Default locking-mode for attached dbs *\/$/;"	m	struct:sqlite3	file:	access:public
directMode	sqlite3.c	/^  u8 directMode;          \/* Direct rendering mode means take data directly$/;"	m	struct:AggInfo	file:	access:public
disableTerm	sqlite3.c	/^static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){$/;"	f	file:	signature:(WhereLevel *pLevel, WhereTerm *pTerm)
disableTriggers	sqlite3.c	/^  u8 disableTriggers;  \/* True to disable triggers *\/$/;"	m	struct:Parse	file:	access:public
disable_simulated_io_errors	sqlite3.c	/^  void disable_simulated_io_errors(void);$/;"	p	file:	signature:(void)
disable_simulated_io_errors	sqlite3.c	/^void disable_simulated_io_errors(void){$/;"	f	signature:(void)
disable_simulated_io_errors	sqlite3.c	44567;"	d	file:
disable_simulated_io_errors	sqlite3.c	9882;"	d	file:
disallow	sqlite3.c	/^  int disallow; \/* Do not allow memory allocation *\/$/;"	m	struct:__anon9	file:	access:public
disconnectAllVtab	sqlite3.c	/^static void disconnectAllVtab(sqlite3 *db){$/;"	f	file:	signature:(sqlite3 *db)
displayComment	sqlite3.c	/^static int displayComment($/;"	f	file:	signature:( const Op *pOp, const char *zP4, char *zTemp, int nTemp )
displayP4	sqlite3.c	/^static char *displayP4(Op *pOp, char *zTemp, int nTemp){$/;"	f	file:	signature:(Op *pOp, char *zTemp, int nTemp)
doNotSpill	sqlite3.c	/^  u8 doNotSpill;              \/* Do not spill the cache when non-zero *\/$/;"	m	struct:Pager	file:	access:public
doWalCallbacks	sqlite3.c	/^static int doWalCallbacks(sqlite3 *db){$/;"	f	file:	signature:(sqlite3 *db)
doclist	sqlite3.c	/^  Fts3Doclist doclist;$/;"	m	struct:Fts3Phrase	file:	access:public
doingRerun	sqlite3.c	/^  bft doingRerun:1;       \/* True if rerunning after an auto-reprepare *\/$/;"	m	struct:Vdbe	file:	access:public
done	sqlite3.c	/^    unsigned done :1;       \/* A flag to indicate when processing is finished *\/$/;"	m	struct:ExprList::ExprList_item	file:	access:public
done	sqlite3.c	/^  int done;                      \/* Set to true when thread finishes *\/$/;"	m	struct:SQLiteThread	file:	access:public
dotlockCheckReservedLock	sqlite3.c	/^static int dotlockCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:	signature:(sqlite3_file *id, int *pResOut)
dotlockClose	sqlite3.c	/^static int dotlockClose(sqlite3_file *id) {$/;"	f	file:	signature:(sqlite3_file *id)
dotlockLock	sqlite3.c	/^static int dotlockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:	signature:(sqlite3_file *id, int eFileLock)
dotlockUnlock	sqlite3.c	/^static int dotlockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:	signature:(sqlite3_file *id, int eFileLock)
double	sqlite3.c	388;"	d	file:
double	sqlite3.c	7545;"	d	file:
double	sqlite3.c	8433;"	d	file:
double	sqlite3.h	264;"	d
double	sqlite3.h	7421;"	d
doubleConsonant	sqlite3.c	/^static int doubleConsonant(const char *z){$/;"	f	file:	signature:(const char *z)
doubleToInt64	sqlite3.c	/^static i64 doubleToInt64(double r){$/;"	f	file:	signature:(double r)
downgradeAllSharedCacheTableLocks	sqlite3.c	/^static void downgradeAllSharedCacheTableLocks(Btree *p){$/;"	f	file:	signature:(Btree *p)
downgradeAllSharedCacheTableLocks	sqlite3.c	52305;"	d	file:
dropCell	sqlite3.c	/^static void dropCell(MemPage *pPage, int idx, int sz, int *pRC){$/;"	f	file:	signature:(MemPage *pPage, int idx, int sz, int *pRC)
dup8bytes	sqlite3.c	/^static char *dup8bytes(Vdbe *v, const char *in){$/;"	f	file:	signature:(Vdbe *v, const char *in)
dupedExprNodeSize	sqlite3.c	/^static int dupedExprNodeSize(Expr *p, int flags){$/;"	f	file:	signature:(Expr *p, int flags)
dupedExprSize	sqlite3.c	/^static int dupedExprSize(Expr *p, int flags){$/;"	f	file:	signature:(Expr *p, int flags)
dupedExprStructSize	sqlite3.c	/^static int dupedExprStructSize(Expr *p, int flags){$/;"	f	file:	signature:(Expr *p, int flags)
eCoordType	sqlite3.c	/^  u8 eCoordType;              \/* RTREE_COORD_REAL32 or RTREE_COORD_INT32 *\/$/;"	m	struct:Rtree	file:	access:public
eCreate	sqlite3.c	/^  u8 eCreate;                         \/* eCreate value for for xFetch() *\/$/;"	m	struct:PCache	file:	access:public
eDest	sqlite3.c	/^  u8 eDest;            \/* How to dispose of the results.  On of SRT_* above. *\/$/;"	m	struct:SelectDest	file:	access:public
eDistinct	sqlite3.c	/^  u8 eDistinct;             \/* One of the WHERE_DISTINCT_* values below *\/$/;"	m	struct:WhereInfo	file:	access:public
eEndLoopOp	sqlite3.c	/^        u8 eEndLoopOp;         \/* IN Loop terminator. OP_Next or OP_Prev *\/$/;"	m	struct:WhereLevel::__anon16::__anon17::InLoop	file:	access:public
eEvalmode	sqlite3.c	/^  int eEvalmode;                  \/* An FTS3_EVAL_XX constant *\/$/;"	m	struct:Fts3Cursor	file:	access:public
eFWErr	sqlite3.c	/^  int eFWErr;                     \/* Non-zero if in an error state *\/$/;"	m	struct:PmaWriter	file:	access:public
eFileLock	sqlite3.c	/^  unsigned char eFileLock;            \/* The type of lock held on this fd *\/$/;"	m	struct:unixFile	file:	access:public
eFileLock	sqlite3.c	/^  unsigned char eFileLock;        \/* One of SHARED_LOCK, RESERVED_LOCK etc. *\/$/;"	m	struct:unixInodeInfo	file:	access:public
eLock	sqlite3.c	/^  u8 eLock;                   \/* Current lock held on database file *\/$/;"	m	struct:Pager	file:	access:public
eLock	sqlite3.c	/^  u8 eLock;             \/* READ_LOCK or WRITE_LOCK *\/$/;"	m	struct:BtLock	file:	access:public
eOperator	sqlite3.c	/^  Token eOperator;  \/* "like" or "glob" or "regexp" *\/$/;"	m	struct:LikeOp	file:	access:public
eOperator	sqlite3.c	/^  u16 eOperator;          \/* A WO_xx value describing <op> *\/$/;"	m	struct:WhereTerm	file:	access:public
eOrconf	sqlite3.c	/^  u8 eOrconf;          \/* Default ON CONFLICT policy for trigger steps *\/$/;"	m	struct:Parse	file:	access:public
eParentWithin	sqlite3.c	/^  int eParentWithin;                \/* Visibility of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
eParentWithin	sqlite3.h	/^  int eParentWithin;                \/* Visibility of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
ePragTyp	sqlite3.c	/^  u8 ePragTyp;              \/* PragTyp_XXX value *\/$/;"	m	struct:sPragmaNames	file:	access:public
eSearch	sqlite3.c	/^  i16 eSearch;                    \/* Search strategy (see below) *\/$/;"	m	struct:Fts3Cursor	file:	access:public
eState	sqlite3.c	/^  u8 eState;                  \/* Pager state (OPEN, READER, WRITER_LOCKED..) *\/$/;"	m	struct:Pager	file:	access:public
eState	sqlite3.c	/^  u8 eState;                \/* One of the CURSOR_XXX constants (see below) *\/$/;"	m	struct:BtCursor	file:	access:public
eTnctType	sqlite3.c	/^  u8 eTnctType;   \/* One of the WHERE_DISTINCT_* operators *\/$/;"	m	struct:DistinctCtx	file:	access:public
eTriggerOp	sqlite3.c	/^  u8 eTriggerOp;       \/* TK_UPDATE, TK_INSERT or TK_DELETE *\/$/;"	m	struct:Parse	file:	access:public
eType	sqlite3.c	/^  int eType;                 \/* One of the FTSQUERY_XXX values defined below *\/$/;"	m	struct:Fts3Expr	file:	access:public
eType	sqlite3.c	/^  u8 eType;                           \/* Allocation type code *\/$/;"	m	struct:MemBlockHdr	file:	access:public
eWithin	sqlite3.c	/^  int eWithin;                      \/* OUT: Visiblity *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
eWithin	sqlite3.c	/^  u8 eWithin;            \/* PARTLY_WITHIN or FULLY_WITHIN *\/$/;"	m	struct:RtreeSearchPoint	file:	access:public
eWithin	sqlite3.h	/^  int eWithin;                      \/* OUT: Visiblity *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
ebcdicToAscii	sqlite3.c	/^const unsigned char ebcdicToAscii[] = {$/;"	v
enable_shared_cache	sqlite3.c	/^  int  (*enable_shared_cache)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
enable_simulated_io_errors	sqlite3.c	/^  void enable_simulated_io_errors(void);$/;"	p	file:	signature:(void)
enable_simulated_io_errors	sqlite3.c	/^void enable_simulated_io_errors(void){$/;"	f	signature:(void)
enable_simulated_io_errors	sqlite3.c	44568;"	d	file:
enable_simulated_io_errors	sqlite3.c	9883;"	d	file:
enc	sqlite3.c	/^  u8  enc;            \/* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE *\/$/;"	m	struct:Mem	file:	access:public
enc	sqlite3.c	/^  u8 enc;               \/* Text encoding handled by xCmp() *\/$/;"	m	struct:CollSeq	file:	access:public
enc	sqlite3.c	/^  u8 enc;              \/* Text encoding used by this database *\/$/;"	m	struct:Schema	file:	access:public
enc	sqlite3.c	/^  u8 enc;             \/* Text encoding - one of the SQLITE_UTF* values *\/$/;"	m	struct:KeyInfo	file:	access:public
endpoint	sqlite3.c	/^  FilePoint endpoint;             \/* Pointer to the end of the file *\/$/;"	m	struct:MemJournal	file:	access:public
enlargeAndAppend	sqlite3.c	/^static void SQLITE_NOINLINE enlargeAndAppend(StrAccum *p, const char *z, int N){$/;"	f	file:	signature:(StrAccum *p, const char *z, int N)
enterMutex	sqlite3.c	/^static void enterMutex(void){$/;"	f	file:	signature:(void)
errCode	sqlite3.c	/^  int errCode;                  \/* Most recent error code (SQLITE_*) *\/$/;"	m	struct:sqlite3	file:	access:public
errCode	sqlite3.c	/^  int errCode;                \/* One of several kinds of errors *\/$/;"	m	struct:Pager	file:	access:public
errCode	sqlite3.c	/^  u8 errCode;         \/* Error detected by xRecordCompare (CORRUPT or NOMEM) *\/$/;"	m	struct:UnpackedRecord	file:	access:public
errMask	sqlite3.c	/^  int errMask;                  \/* & result codes with this before returning *\/$/;"	m	struct:sqlite3	file:	access:public
errMsg	sqlite3.c	/^  StrAccum errMsg;  \/* Accumulate the error message text here *\/$/;"	m	struct:IntegrityCk	file:	access:public
errcode	sqlite3.c	/^  int  (*errcode)(sqlite3*db);$/;"	m	struct:sqlite3_api_routines	file:	access:public
errlogFunc	sqlite3.c	/^static void errlogFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
errmsg	sqlite3.c	/^  const char * (*errmsg)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
errmsg16	sqlite3.c	/^  const void * (*errmsg16)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
errorAction	sqlite3.c	/^  u8 errorAction;         \/* Recovery action to do in case of an error *\/$/;"	m	struct:Vdbe	file:	access:public
error_exit	loaddatabase.c	8;"	d	file:
errstr	sqlite3.c	/^  const char *(*errstr)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
estLog	sqlite3.c	/^static LogEst estLog(LogEst N){$/;"	f	file:	signature:(LogEst N)
estimateIndexWidth	sqlite3.c	/^static void estimateIndexWidth(Index *pIdx){$/;"	f	file:	signature:(Index *pIdx)
estimateTableWidth	sqlite3.c	/^static void estimateTableWidth(Table *pTab){$/;"	f	file:	signature:(Table *pTab)
estimatedCost	sqlite3.c	/^  double estimatedCost;           \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info	file:	access:public
estimatedCost	sqlite3.h	/^  double estimatedCost;           \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info	access:public
estimatedRows	sqlite3.c	/^  sqlite3_int64 estimatedRows;    \/* Estimated number of rows returned *\/$/;"	m	struct:sqlite3_index_info	file:	access:public
estimatedRows	sqlite3.h	/^  sqlite3_int64 estimatedRows;    \/* Estimated number of rows returned *\/$/;"	m	struct:sqlite3_index_info	access:public
etBUFSIZE	sqlite3.c	20916;"	d	file:
etByte	sqlite3.c	/^typedef unsigned char etByte;$/;"	t	file:
etCHARX	sqlite3.c	20776;"	d	file:
etDYNSTRING	sqlite3.c	20774;"	d	file:
etEXP	sqlite3.c	20770;"	d	file:
etFLOAT	sqlite3.c	20769;"	d	file:
etGENERIC	sqlite3.c	20771;"	d	file:
etINVALID	sqlite3.c	20787;"	d	file:
etORDINAL	sqlite3.c	20785;"	d	file:
etPERCENT	sqlite3.c	20775;"	d	file:
etPOINTER	sqlite3.c	20783;"	d	file:
etRADIX	sqlite3.c	20768;"	d	file:
etSIZE	sqlite3.c	20772;"	d	file:
etSQLESCAPE	sqlite3.c	20778;"	d	file:
etSQLESCAPE2	sqlite3.c	20779;"	d	file:
etSQLESCAPE3	sqlite3.c	20784;"	d	file:
etSRCLIST	sqlite3.c	20782;"	d	file:
etSTRING	sqlite3.c	20773;"	d	file:
etTOKEN	sqlite3.c	20781;"	d	file:
et_getdigit	sqlite3.c	/^static char et_getdigit(LONGDOUBLE_TYPE *val, int *cnt){$/;"	f	file:	signature:(LONGDOUBLE_TYPE *val, int *cnt)
et_info	sqlite3.c	/^typedef struct et_info {   \/* Information about each format field *\/$/;"	s	file:
et_info	sqlite3.c	/^} et_info;$/;"	t	typeref:struct:et_info	file:
et_info::base	sqlite3.c	/^  etByte base;             \/* The base for radix conversion *\/$/;"	m	struct:et_info	file:	access:public
et_info::charset	sqlite3.c	/^  etByte charset;          \/* Offset into aDigits[] of the digits string *\/$/;"	m	struct:et_info	file:	access:public
et_info::flags	sqlite3.c	/^  etByte flags;            \/* One or more of FLAG_ constants below *\/$/;"	m	struct:et_info	file:	access:public
et_info::fmttype	sqlite3.c	/^  char fmttype;            \/* The format field code letter *\/$/;"	m	struct:et_info	file:	access:public
et_info::prefix	sqlite3.c	/^  etByte prefix;           \/* Offset into aPrefix[] of the prefix string *\/$/;"	m	struct:et_info	file:	access:public
et_info::type	sqlite3.c	/^  etByte type;             \/* Conversion paradigm *\/$/;"	m	struct:et_info	file:	access:public
exclMask	sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShm	file:	access:public
exclMask	sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:winShm	file:	access:public
exclMask	sqlite3.c	/^  u8 exclMask;               \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShmNode	file:	access:public
exclusiveMode	sqlite3.c	/^  u8 exclusiveMode;           \/* Boolean. True if locking_mode==EXCLUSIVE *\/$/;"	m	struct:Pager	file:	access:public
exclusiveMode	sqlite3.c	/^  u8 exclusiveMode;          \/* Non-zero if connection is in exclusive mode *\/$/;"	m	struct:Wal	file:	access:public
exec	sqlite3.c	/^  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
execExecSql	sqlite3.c	/^static int execExecSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:	signature:(sqlite3 *db, char **pzErrMsg, const char *zSql)
execSql	sqlite3.c	/^static int execSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:	signature:(sqlite3 *db, char **pzErrMsg, const char *zSql)
expensive_assert	sqlite3.c	38549;"	d	file:
expensive_assert	sqlite3.c	38551;"	d	file:
expired	sqlite3.c	/^  bft expired:1;          \/* True if the VM needs to be recompiled *\/$/;"	m	struct:Vdbe	file:	access:public
expired	sqlite3.c	/^  int  (*expired)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
explain	sqlite3.c	/^  bft explain:2;          \/* True if EXPLAIN present on SQL command *\/$/;"	m	struct:Vdbe	file:	access:public
explain	sqlite3.c	/^  u8 explain;               \/* True if the EXPLAIN flag is found on the query *\/$/;"	m	struct:Parse	file:	access:public
explainAppendTerm	sqlite3.c	/^static void explainAppendTerm($/;"	f	file:	signature:( StrAccum *pStr, int iTerm, const char *zColumn, const char *zOp )
explainComposite	sqlite3.c	/^static void explainComposite($/;"	f	file:	signature:( Parse *pParse, int op, int iSub1, int iSub2, int bUseTmp )
explainComposite	sqlite3.c	105222;"	d	file:
explainIndexRange	sqlite3.c	/^static void explainIndexRange(StrAccum *pStr, WhereLoop *pLoop, Table *pTab){$/;"	f	file:	signature:(StrAccum *pStr, WhereLoop *pLoop, Table *pTab)
explainOneScan	sqlite3.c	/^static void explainOneScan($/;"	f	file:	signature:( Parse *pParse, SrcList *pTabList, WhereLevel *pLevel, int iLevel, int iFrom, u16 wctrlFlags )
explainOneScan	sqlite3.c	116506;"	d	file:
explainSetInteger	sqlite3.c	105180;"	d	file:
explainSetInteger	sqlite3.c	105185;"	d	file:
explainSimpleCount	sqlite3.c	/^static void explainSimpleCount($/;"	f	file:	signature:( Parse *pParse, Table *pTab, Index *pIdx )
explainSimpleCount	sqlite3.c	108673;"	d	file:
explainTempTable	sqlite3.c	/^static void explainTempTable(Parse *pParse, const char *zUsage){$/;"	f	file:	signature:(Parse *pParse, const char *zUsage)
explainTempTable	sqlite3.c	105184;"	d	file:
explan	comm.h	/^	char explan[QMESG_EXPLAN_LEN];$/;"	m	struct:query_protocol	access:public
explan	loaddatabase.c	/^	char explan[300];$/;"	m	struct:word	file:	access:public
expmask	sqlite3.c	/^  u32 expmask;            \/* Binding to these vars invalidates VM *\/$/;"	m	struct:Vdbe	file:	access:public
exprAlwaysFalse	sqlite3.c	/^static int exprAlwaysFalse(Expr *p){$/;"	f	file:	signature:(Expr *p)
exprAlwaysTrue	sqlite3.c	/^static int exprAlwaysTrue(Expr *p){$/;"	f	file:	signature:(Expr *p)
exprAnalyze	sqlite3.c	/^static void exprAnalyze($/;"	f	file:	signature:( SrcList *pSrc, WhereClause *pWC, int idxTerm )
exprAnalyze	sqlite3.c	/^static void exprAnalyze(SrcList*, WhereClause*, int);$/;"	p	file:	signature:(SrcList*, WhereClause*, int)
exprAnalyzeAll	sqlite3.c	/^static void exprAnalyzeAll($/;"	f	file:	signature:( SrcList *pTabList, WhereClause *pWC )
exprAnalyzeOrTerm	sqlite3.c	/^static void exprAnalyzeOrTerm($/;"	f	file:	signature:( SrcList *pSrc, WhereClause *pWC, int idxTerm )
exprCodeBetween	sqlite3.c	/^static void exprCodeBetween($/;"	f	file:	signature:( Parse *pParse, Expr *pExpr, int dest, int jumpIfTrue, int jumpIfNull )
exprCommute	sqlite3.c	/^static void exprCommute(Parse *pParse, Expr *pExpr){$/;"	f	file:	signature:(Parse *pParse, Expr *pExpr)
exprDup	sqlite3.c	/^static Expr *exprDup(sqlite3 *db, Expr *p, int flags, u8 **pzBuffer){$/;"	f	file:	signature:(sqlite3 *db, Expr *p, int flags, u8 **pzBuffer)
exprIsConst	sqlite3.c	/^static int exprIsConst(Expr *p, int initFlag){$/;"	f	file:	signature:(Expr *p, int initFlag)
exprListTableUsage	sqlite3.c	/^static Bitmask exprListTableUsage(WhereMaskSet *pMaskSet, ExprList *pList){$/;"	f	file:	signature:(WhereMaskSet *pMaskSet, ExprList *pList)
exprListTableUsage	sqlite3.c	/^static Bitmask exprListTableUsage(WhereMaskSet*, ExprList*);$/;"	p	file:	signature:(WhereMaskSet*, ExprList*)
exprNodeIsConstant	sqlite3.c	/^static int exprNodeIsConstant(Walker *pWalker, Expr *pExpr){$/;"	f	file:	signature:(Walker *pWalker, Expr *pExpr)
exprProbability	sqlite3.c	/^static int exprProbability(Expr *p){$/;"	f	file:	signature:(Expr *p)
exprSelectTableUsage	sqlite3.c	/^static Bitmask exprSelectTableUsage(WhereMaskSet *pMaskSet, Select *pS){$/;"	f	file:	signature:(WhereMaskSet *pMaskSet, Select *pS)
exprSelectTableUsage	sqlite3.c	/^static Bitmask exprSelectTableUsage(WhereMaskSet*, Select*);$/;"	p	file:	signature:(WhereMaskSet*, Select*)
exprSetHeight	sqlite3.c	/^static void exprSetHeight(Expr *p){$/;"	f	file:	signature:(Expr *p)
exprSetHeight	sqlite3.c	81043;"	d	file:
exprSrcCount	sqlite3.c	/^static int exprSrcCount(Walker *pWalker, Expr *pExpr){$/;"	f	file:	signature:(Walker *pWalker, Expr *pExpr)
exprStructSize	sqlite3.c	/^static int exprStructSize(Expr *p){$/;"	f	file:	signature:(Expr *p)
exprTableColumn	sqlite3.c	/^static Expr *exprTableColumn($/;"	f	file:	signature:( sqlite3 *db, Table *pTab, int iCursor, i16 iCol )
exprTableRegister	sqlite3.c	/^static Expr *exprTableRegister($/;"	f	file:	signature:( Parse *pParse, Table *pTab, int regBase, i16 iCol )
exprTableUsage	sqlite3.c	/^static Bitmask exprTableUsage(WhereMaskSet *pMaskSet, Expr *p){$/;"	f	file:	signature:(WhereMaskSet *pMaskSet, Expr *p)
exprToRegister	sqlite3.c	/^static void exprToRegister(Expr *p, int iReg){$/;"	f	file:	signature:(Expr *p, int iReg)
exprToString	sqlite3.c	/^static char *exprToString(Fts3Expr *pExpr, char *zBuf){$/;"	f	file:	signature:(Fts3Expr *pExpr, char *zBuf)
exprWalkNoop	sqlite3.c	/^static int exprWalkNoop(Walker *NotUsed, Expr *NotUsed2){$/;"	f	file:	signature:(Walker *NotUsed, Expr *NotUsed2)
extended_errcode	sqlite3.c	/^  int (*extended_errcode)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
extended_result_codes	sqlite3.c	/^  int (*extended_result_codes)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
f	sqlite3.c	/^  RtreeValue f;      \/* Floating point value *\/$/;"	m	union:RtreeCoord	file:	access:public
fErrorOrAux	sqlite3.c	/^  u8 fErrorOrAux;       \/* isError!=0 or pVdbe->pAuxData modified *\/$/;"	m	struct:sqlite3_context	file:	access:public
fcntlSizeHint	sqlite3.c	/^static int fcntlSizeHint(unixFile *pFile, i64 nByte){$/;"	f	file:	signature:(unixFile *pFile, i64 nByte)
fd	sqlite3.c	/^  int fd;                           \/* file desc to assoc this lock with *\/$/;"	m	struct:ByteRangeLockPB2	file:	access:public
fd	sqlite3.c	/^  int fd;                   \/* File descriptor to close *\/$/;"	m	struct:UnixUnusedFd	file:	access:public
fd	sqlite3.c	/^  sqlite3_file *fd;           \/* File descriptor for database *\/$/;"	m	struct:Pager	file:	access:public
fdatasync	sqlite3.c	28199;"	d	file:
fetchPayload	sqlite3.c	/^static const void *fetchPayload($/;"	f	file:	signature:( BtCursor *pCur, u32 *pAmt )
file	sqlite3.c	/^  SorterFile file;                \/* Temp file for level-0 PMAs *\/$/;"	m	struct:SortSubtask	file:	access:public
file2	sqlite3.c	/^  SorterFile file2;               \/* Space for other PMAs *\/$/;"	m	struct:SortSubtask	file:	access:public
fileHasMoved	sqlite3.c	/^static int fileHasMoved(unixFile *pFile){$/;"	f	file:	signature:(unixFile *pFile)
fileId	sqlite3.c	/^  struct unixFileId fileId;       \/* The lookup key *\/$/;"	m	struct:unixInodeInfo	typeref:struct:unixInodeInfo::unixFileId	file:	access:public
file_control	sqlite3.c	/^  int (*file_control)(sqlite3*,const char*,int,void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
file_format	sqlite3.c	/^  u8 file_format;      \/* Schema format version for this file *\/$/;"	m	struct:Schema	file:	access:public
fillInCell	sqlite3.c	/^static int fillInCell($/;"	f	file:	signature:( MemPage *pPage, unsigned char *pCell, const void *pKey, i64 nKey, const void *pData,int nData, int nZero, int *pnSize )
fillInUnixFile	sqlite3.c	/^static int fillInUnixFile($/;"	f	file:	signature:( sqlite3_vfs *pVfs, int h, sqlite3_file *pId, const char *zFilename, int ctrlFlags )
filter	sqlite3.c	/^  Fts3SegFilter filter;$/;"	m	struct:Fts3auxCursor	file:	access:public
finalDbSize	sqlite3.c	/^static Pgno finalDbSize(BtShared *pBt, Pgno nOrig, Pgno nFree){$/;"	f	file:	signature:(BtShared *pBt, Pgno nOrig, Pgno nFree)
finalize	sqlite3.c	/^  int  (*finalize)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:	access:public
finalizeAggFunctions	sqlite3.c	/^static void finalizeAggFunctions(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:	signature:(Parse *pParse, AggInfo *pAggInfo)
findBtree	sqlite3.c	/^static Btree *findBtree(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb){$/;"	f	file:	signature:(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb)
findCell	sqlite3.c	53138;"	d	file:
findCellv2	sqlite3.c	53140;"	d	file:
findCollSeqEntry	sqlite3.c	/^static CollSeq *findCollSeqEntry($/;"	f	file:	signature:( sqlite3 *db, const char *zName, int create )
findCreateFileMode	sqlite3.c	/^static int findCreateFileMode($/;"	f	file:	signature:( const char *zPath, int flags, mode_t *pMode, uid_t *pUid, gid_t *pGid )
findElementWithHash	sqlite3.c	/^static HashElem *findElementWithHash($/;"	f	file:	signature:( const Hash *pH, const char *pKey, unsigned int *pHash )
findIndexCol	sqlite3.c	/^static int findIndexCol($/;"	f	file:	signature:( Parse *pParse, ExprList *pList, int iBase, Index *pIdx, int iCol )
findIndexOrPrimaryKey	sqlite3.c	/^static Index *findIndexOrPrimaryKey($/;"	f	file:	signature:( sqlite3 *db, const char *zName, const char *zDb )
findInodeInfo	sqlite3.c	/^static int findInodeInfo($/;"	f	file:	signature:( unixFile *pFile, unixInodeInfo **ppInode )
findLeafNode	sqlite3.c	/^static int findLeafNode($/;"	f	file:	signature:( Rtree *pRtree, i64 iRowid, RtreeNode **ppLeaf, sqlite3_int64 *piNode )
findNextHostParameter	sqlite3.c	/^static int findNextHostParameter(const char *zSql, int *pnToken){$/;"	f	file:	signature:(const char *zSql, int *pnToken)
findOverflowCell	sqlite3.c	/^static u8 *findOverflowCell(MemPage *pPage, int iCell){$/;"	f	file:	signature:(MemPage *pPage, int iCell)
findReusableFd	sqlite3.c	/^static UnixUnusedFd *findReusableFd(const char *zPath, int flags){$/;"	f	file:	signature:(const char *zPath, int flags)
findRightmost	sqlite3.c	/^static Select *findRightmost(Select *p){$/;"	f	file:	signature:(Select *p)
findTerm	sqlite3.c	/^static WhereTerm *findTerm($/;"	f	file:	signature:( WhereClause *pWC, int iCur, int iColumn, Bitmask notReady, u32 op, Index *pIdx )
finder_type	sqlite3.c	/^typedef const sqlite3_io_methods *(*finder_type)(const char*,unixFile*);$/;"	t	file:
first	sqlite3.c	/^  Fts3HashElem *first;    \/* The first element of the array *\/$/;"	m	struct:Fts3Hash	file:	access:public
first	sqlite3.c	/^  HashElem *first;          \/* The first element of the array *\/$/;"	m	struct:Hash	file:	access:public
fixBoundingBox	sqlite3.c	/^static int fixBoundingBox(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:	signature:(Rtree *pRtree, RtreeNode *pNode)
fixLeafParent	sqlite3.c	/^static int fixLeafParent(Rtree *pRtree, RtreeNode *pLeaf){$/;"	f	file:	signature:(Rtree *pRtree, RtreeNode *pLeaf)
fkActionTrigger	sqlite3.c	/^static Trigger *fkActionTrigger($/;"	f	file:	signature:( Parse *pParse, Table *pTab, FKey *pFKey, ExprList *pChanges )
fkChildIsModified	sqlite3.c	/^static int fkChildIsModified($/;"	f	file:	signature:( Table *pTab, FKey *p, int *aChange, int bChngRowid )
fkLookupParent	sqlite3.c	/^static void fkLookupParent($/;"	f	file:	signature:( Parse *pParse, int iDb, Table *pTab, Index *pIdx, FKey *pFKey, int *aiCol, int regData, int nIncr, int isIgnore )
fkParentIsModified	sqlite3.c	/^static int fkParentIsModified($/;"	f	file:	signature:( Table *pTab, FKey *p, int *aChange, int bChngRowid )
fkScanChildren	sqlite3.c	/^static void fkScanChildren($/;"	f	file:	signature:( Parse *pParse, SrcList *pSrc, Table *pTab, Index *pIdx, FKey *pFKey, int *aiCol, int regData, int nIncr )
fkTriggerDelete	sqlite3.c	/^static void fkTriggerDelete(sqlite3 *dbMem, Trigger *p){$/;"	f	file:	signature:(sqlite3 *dbMem, Trigger *p)
fkeyHash	sqlite3.c	/^  Hash fkeyHash;       \/* All foreign keys by referenced table name *\/$/;"	m	struct:Schema	file:	access:public
flag	comm.h	/^	int flag;$/;"	m	struct:query_protocol	access:public
flags	sqlite3.c	/^  etByte flags;            \/* One or more of FLAG_ constants below *\/$/;"	m	struct:et_info	file:	access:public
flags	sqlite3.c	/^  int flags;                      \/* xOpen flags *\/$/;"	m	struct:JournalFile	file:	access:public
flags	sqlite3.c	/^  int flags;                    \/* Miscellaneous flags. See below *\/$/;"	m	struct:sqlite3	file:	access:public
flags	sqlite3.c	/^  int flags;                \/* Flags this file descriptor was opened with *\/$/;"	m	struct:UnixUnusedFd	file:	access:public
flags	sqlite3.c	/^  int flags;              \/* Copy of "flags" passed to sqlite3_blob_open() *\/$/;"	m	struct:Incrblob	file:	access:public
flags	sqlite3.c	/^  int flags;$/;"	m	struct:Fts3SegFilter	file:	access:public
flags	sqlite3.c	/^  u16 flags;                     \/* PGHDR flags defined below *\/$/;"	m	struct:PgHdr	file:	access:public
flags	sqlite3.c	/^  u16 flags;          \/* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. *\/$/;"	m	struct:Mem	file:	access:public
flags	sqlite3.c	/^  u32 flags;             \/* Various flags.  EP_* See below *\/$/;"	m	struct:Expr	file:	access:public
flattenSubquery	sqlite3.c	/^static int flattenSubquery($/;"	f	file:	signature:( Parse *pParse, Select *p, int iFrom, int isAgg, int subqueryIsAgg )
float	sqlite3.c	8434;"	d	file:
floatSwap	sqlite3.c	/^static u64 floatSwap(u64 in){$/;"	f	file:	signature:(u64 in)
flockCheckReservedLock	sqlite3.c	/^static int flockCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:	signature:(sqlite3_file *id, int *pResOut)
flockClose	sqlite3.c	/^static int flockClose(sqlite3_file *id) {$/;"	f	file:	signature:(sqlite3_file *id)
flockLock	sqlite3.c	/^static int flockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:	signature:(sqlite3_file *id, int eFileLock)
flockUnlock	sqlite3.c	/^static int flockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:	signature:(sqlite3_file *id, int eFileLock)
fmtinfo	sqlite3.c	/^static const et_info fmtinfo[] = {$/;"	v	file:
fmttype	sqlite3.c	/^  char fmttype;            \/* The format field code letter *\/$/;"	m	struct:et_info	file:	access:public
free	sqlite3.c	/^  void  (*free)(void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
freeCursorConstraints	sqlite3.c	/^static void freeCursorConstraints(RtreeCursor *pCsr){$/;"	f	file:	signature:(RtreeCursor *pCsr)
freeEphemeralFunction	sqlite3.c	/^static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef){$/;"	f	file:	signature:(sqlite3 *db, FuncDef *pDef)
freeIndex	sqlite3.c	/^static void freeIndex(sqlite3 *db, Index *p){$/;"	f	file:	signature:(sqlite3 *db, Index *p)
freeP4	sqlite3.c	/^static void freeP4(sqlite3 *db, int p4type, void *p4){$/;"	f	file:	signature:(sqlite3 *db, int p4type, void *p4)
freePage	sqlite3.c	/^static void freePage(MemPage *pPage, int *pRC){$/;"	f	file:	signature:(MemPage *pPage, int *pRC)
freePage2	sqlite3.c	/^static int freePage2(BtShared *pBt, MemPage *pMemPage, Pgno iPage){$/;"	f	file:	signature:(BtShared *pBt, MemPage *pMemPage, Pgno iPage)
freeSpace	sqlite3.c	/^static int freeSpace(MemPage *pPage, u16 iStart, u16 iSize){$/;"	f	file:	signature:(MemPage *pPage, u16 iStart, u16 iSize)
freeTempSpace	sqlite3.c	/^static void freeTempSpace(BtShared *pBt){$/;"	f	file:	signature:(BtShared *pBt)
free_table	sqlite3.c	/^  void  (*free_table)(char**result);$/;"	m	struct:sqlite3_api_routines	file:	access:public
fsFlags	sqlite3.c	/^  unsigned fsFlags;                   \/* cached details from statfs() *\/$/;"	m	struct:unixFile	file:	access:public
fts3AllocateSegdirIdx	sqlite3.c	/^static int fts3AllocateSegdirIdx($/;"	f	file:	signature:( Fts3Table *p, int iLangid, int iIndex, int iLevel, int *piIdx )
fts3AppendToNode	sqlite3.c	/^static int fts3AppendToNode($/;"	f	file:	signature:( Blob *pNode, Blob *pPrev, const char *zTerm, int nTerm, const char *aDoclist, int nDoclist )
fts3Appendf	sqlite3.c	/^static void fts3Appendf($/;"	f	file:	signature:( int *pRc, char **pz, const char *zFormat, ... )
fts3BeginMethod	sqlite3.c	/^static int fts3BeginMethod(sqlite3_vtab *pVtab){$/;"	f	file:	signature:(sqlite3_vtab *pVtab)
fts3BestIndexMethod	sqlite3.c	/^static int fts3BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){$/;"	f	file:	signature:(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo)
fts3BestSnippet	sqlite3.c	/^static int fts3BestSnippet($/;"	f	file:	signature:( int nSnippet, Fts3Cursor *pCsr, int iCol, u64 mCovered, u64 *pmSeen, SnippetFragment *pFragment, int *piScore )
fts3BinCompare	sqlite3.c	/^static int fts3BinCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:	signature:(const void *pKey1, int n1, const void *pKey2, int n2)
fts3BinHash	sqlite3.c	/^static int fts3BinHash(const void *pKey, int nKey){$/;"	f	file:	signature:(const void *pKey, int nKey)
fts3ChecksumEntry	sqlite3.c	/^static u64 fts3ChecksumEntry($/;"	f	file:	signature:( const char *zTerm, int nTerm, int iLangid, int iIndex, i64 iDocid, int iCol, int iPos )
fts3ChecksumIndex	sqlite3.c	/^static u64 fts3ChecksumIndex($/;"	f	file:	signature:( Fts3Table *p, int iLangid, int iIndex, int *pRc )
fts3CloseMethod	sqlite3.c	/^static int fts3CloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:	signature:(sqlite3_vtab_cursor *pCursor)
fts3ColumnFilter	sqlite3.c	/^static void fts3ColumnFilter($/;"	f	file:	signature:( int iCol, int bZero, char **ppList, int *pnList )
fts3ColumnMethod	sqlite3.c	/^static int fts3ColumnMethod($/;"	f	file:	signature:( sqlite3_vtab_cursor *pCursor, sqlite3_context *pCtx, int iCol )
fts3ColumnlistCopy	sqlite3.c	/^static void fts3ColumnlistCopy(char **pp, char **ppPoslist){$/;"	f	file:	signature:(char **pp, char **ppPoslist)
fts3ColumnlistCount	sqlite3.c	/^static int fts3ColumnlistCount(char **ppCollist){$/;"	f	file:	signature:(char **ppCollist)
fts3CommitMethod	sqlite3.c	/^static int fts3CommitMethod(sqlite3_vtab *pVtab){$/;"	f	file:	signature:(sqlite3_vtab *pVtab)
fts3CompareElemByTerm	sqlite3.c	/^static int fts3CompareElemByTerm(const void *lhs, const void *rhs){$/;"	f	file:	signature:(const void *lhs, const void *rhs)
fts3ConnectMethod	sqlite3.c	/^static int fts3ConnectMethod($/;"	f	file:	signature:( sqlite3 *db, void *pAux, int argc, const char * const *argv, sqlite3_vtab **ppVtab, char **pzErr )
fts3ContentColumns	sqlite3.c	/^static int fts3ContentColumns($/;"	f	file:	signature:( sqlite3 *db, const char *zDb, const char *zTbl, const char ***pazCol, int *pnCol, int *pnStr )
fts3CreateMethod	sqlite3.c	/^static int fts3CreateMethod($/;"	f	file:	signature:( sqlite3 *db, void *pAux, int argc, const char * const *argv, sqlite3_vtab **ppVtab, char **pzErr )
fts3CreateTables	sqlite3.c	/^static int fts3CreateTables(Fts3Table *p){$/;"	f	file:	signature:(Fts3Table *p)
fts3CursorSeek	sqlite3.c	/^static int fts3CursorSeek(sqlite3_context *pContext, Fts3Cursor *pCsr){$/;"	f	file:	signature:(sqlite3_context *pContext, Fts3Cursor *pCsr)
fts3CursorSeekStmt	sqlite3.c	/^static int fts3CursorSeekStmt(Fts3Cursor *pCsr, sqlite3_stmt **ppStmt){$/;"	f	file:	signature:(Fts3Cursor *pCsr, sqlite3_stmt **ppStmt)
fts3DatabasePageSize	sqlite3.c	/^static void fts3DatabasePageSize(int *pRc, Fts3Table *p){$/;"	f	file:	signature:(int *pRc, Fts3Table *p)
fts3DbExec	sqlite3.c	/^static void fts3DbExec($/;"	f	file:	signature:( int *pRc, sqlite3 *db, const char *zFormat, ... )
fts3DeclareVtab	sqlite3.c	/^static void fts3DeclareVtab(int *pRc, Fts3Table *p){$/;"	f	file:	signature:(int *pRc, Fts3Table *p)
fts3DecodeIntArray	sqlite3.c	/^static void fts3DecodeIntArray($/;"	f	file:	signature:( int N, u32 *a, const char *zBuf, int nBuf )
fts3DeleteAll	sqlite3.c	/^static int fts3DeleteAll(Fts3Table *p, int bContent){$/;"	f	file:	signature:(Fts3Table *p, int bContent)
fts3DeleteByRowid	sqlite3.c	/^static int fts3DeleteByRowid($/;"	f	file:	signature:( Fts3Table *p, sqlite3_value *pRowid, int *pnChng, u32 *aSzDel )
fts3DeleteSegdir	sqlite3.c	/^static int fts3DeleteSegdir($/;"	f	file:	signature:( Fts3Table *p, int iLangid, int iIndex, int iLevel, Fts3SegReader **apSegment, int nReader )
fts3DeleteSegment	sqlite3.c	/^static int fts3DeleteSegment($/;"	f	file:	signature:( Fts3Table *p, Fts3SegReader *pSeg )
fts3DeleteTerms	sqlite3.c	/^static void fts3DeleteTerms( $/;"	f	file:	signature:( int *pRC, Fts3Table *p, sqlite3_value *pRowid, u32 *aSz, int *pbFound )
fts3DestroyMethod	sqlite3.c	/^static int fts3DestroyMethod(sqlite3_vtab *pVtab){$/;"	f	file:	signature:(sqlite3_vtab *pVtab)
fts3DisconnectMethod	sqlite3.c	/^static int fts3DisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:	signature:(sqlite3_vtab *pVtab)
fts3DoAutoincrmerge	sqlite3.c	/^static int fts3DoAutoincrmerge($/;"	f	file:	signature:( Fts3Table *p, const char *zParam )
fts3DoIncrmerge	sqlite3.c	/^static int fts3DoIncrmerge($/;"	f	file:	signature:( Fts3Table *p, const char *zParam )
fts3DoIntegrityCheck	sqlite3.c	/^static int fts3DoIntegrityCheck($/;"	f	file:	signature:( Fts3Table *p )
fts3DoOptimize	sqlite3.c	/^static int fts3DoOptimize(Fts3Table *p, int bReturnDone){$/;"	f	file:	signature:(Fts3Table *p, int bReturnDone)
fts3DoRebuild	sqlite3.c	/^static int fts3DoRebuild(Fts3Table *p){$/;"	f	file:	signature:(Fts3Table *p)
fts3DocidRange	sqlite3.c	/^static sqlite3_int64 fts3DocidRange(sqlite3_value *pVal, i64 iDefault){$/;"	f	file:	signature:(sqlite3_value *pVal, i64 iDefault)
fts3DoclistCountDocids	sqlite3.c	/^static int fts3DoclistCountDocids(char *aList, int nList){$/;"	f	file:	signature:(char *aList, int nList)
fts3DoclistOrMerge	sqlite3.c	/^static int fts3DoclistOrMerge($/;"	f	file:	signature:( int bDescDoclist, char *a1, int n1, char *a2, int n2, char **paOut, int *pnOut )
fts3DoclistPhraseMerge	sqlite3.c	/^static void fts3DoclistPhraseMerge($/;"	f	file:	signature:( int bDescDoclist, int nDist, char *aLeft, int nLeft, char *aRight, int *pnRight )
fts3EncodeIntArray	sqlite3.c	/^static void fts3EncodeIntArray($/;"	f	file:	signature:( int N, u32 *a, char *zBuf, int *pNBuf )
fts3EofMethod	sqlite3.c	/^static int fts3EofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:	signature:(sqlite3_vtab_cursor *pCursor)
fts3EvalAllocateReaders	sqlite3.c	/^static void fts3EvalAllocateReaders($/;"	f	file:	signature:( Fts3Cursor *pCsr, Fts3Expr *pExpr, int *pnToken, int *pnOr, int *pRc )
fts3EvalAverageDocsize	sqlite3.c	/^static int fts3EvalAverageDocsize(Fts3Cursor *pCsr, int *pnPage){$/;"	f	file:	signature:(Fts3Cursor *pCsr, int *pnPage)
fts3EvalDeferredPhrase	sqlite3.c	/^static int fts3EvalDeferredPhrase(Fts3Cursor *pCsr, Fts3Phrase *pPhrase){$/;"	f	file:	signature:(Fts3Cursor *pCsr, Fts3Phrase *pPhrase)
fts3EvalDlPhraseNext	sqlite3.c	/^static void fts3EvalDlPhraseNext($/;"	f	file:	signature:( Fts3Table *pTab, Fts3Doclist *pDL, u8 *pbEof )
fts3EvalGatherStats	sqlite3.c	/^static int fts3EvalGatherStats($/;"	f	file:	signature:( Fts3Cursor *pCsr, Fts3Expr *pExpr )
fts3EvalIncrPhraseNext	sqlite3.c	/^static int fts3EvalIncrPhraseNext($/;"	f	file:	signature:( Fts3Cursor *pCsr, Fts3Phrase *p, u8 *pbEof )
fts3EvalInvalidatePoslist	sqlite3.c	/^static void fts3EvalInvalidatePoslist(Fts3Phrase *pPhrase){$/;"	f	file:	signature:(Fts3Phrase *pPhrase)
fts3EvalNearTest	sqlite3.c	/^static int fts3EvalNearTest(Fts3Expr *pExpr, int *pRc){$/;"	f	file:	signature:(Fts3Expr *pExpr, int *pRc)
fts3EvalNearTrim	sqlite3.c	/^static int fts3EvalNearTrim($/;"	f	file:	signature:( int nNear, char *aTmp, char **paPoslist, int *pnToken, Fts3Phrase *pPhrase )
fts3EvalNext	sqlite3.c	/^static int fts3EvalNext(Fts3Cursor *pCsr);$/;"	p	file:	signature:(Fts3Cursor *pCsr)
fts3EvalNext	sqlite3.c	/^static int fts3EvalNext(Fts3Cursor *pCsr){$/;"	f	file:	signature:(Fts3Cursor *pCsr)
fts3EvalNextRow	sqlite3.c	/^static void fts3EvalNextRow($/;"	f	file:	signature:( Fts3Cursor *pCsr, Fts3Expr *pExpr, int *pRc )
fts3EvalPhraseLoad	sqlite3.c	/^static int fts3EvalPhraseLoad($/;"	f	file:	signature:( Fts3Cursor *pCsr, Fts3Phrase *p )
fts3EvalPhraseMergeToken	sqlite3.c	/^static void fts3EvalPhraseMergeToken($/;"	f	file:	signature:( Fts3Table *pTab, Fts3Phrase *p, int iToken, char *pList, int nList )
fts3EvalPhraseNext	sqlite3.c	/^static int fts3EvalPhraseNext($/;"	f	file:	signature:( Fts3Cursor *pCsr, Fts3Phrase *p, u8 *pbEof )
fts3EvalPhraseStart	sqlite3.c	/^static int fts3EvalPhraseStart(Fts3Cursor *pCsr, int bOptOk, Fts3Phrase *p){$/;"	f	file:	signature:(Fts3Cursor *pCsr, int bOptOk, Fts3Phrase *p)
fts3EvalRestart	sqlite3.c	/^static void fts3EvalRestart($/;"	f	file:	signature:( Fts3Cursor *pCsr, Fts3Expr *pExpr, int *pRc )
fts3EvalSelectDeferred	sqlite3.c	/^static int fts3EvalSelectDeferred($/;"	f	file:	signature:( Fts3Cursor *pCsr, Fts3Expr *pRoot, Fts3TokenAndCost *aTC, int nTC )
fts3EvalStart	sqlite3.c	/^static int fts3EvalStart(Fts3Cursor *pCsr);$/;"	p	file:	signature:(Fts3Cursor *pCsr)
fts3EvalStart	sqlite3.c	/^static int fts3EvalStart(Fts3Cursor *pCsr){$/;"	f	file:	signature:(Fts3Cursor *pCsr)
fts3EvalStartReaders	sqlite3.c	/^static void fts3EvalStartReaders($/;"	f	file:	signature:( Fts3Cursor *pCsr, Fts3Expr *pExpr, int *pRc )
fts3EvalTestDeferredAndNear	sqlite3.c	/^static int fts3EvalTestDeferredAndNear(Fts3Cursor *pCsr, int *pRc){$/;"	f	file:	signature:(Fts3Cursor *pCsr, int *pRc)
fts3EvalTestExpr	sqlite3.c	/^static int fts3EvalTestExpr($/;"	f	file:	signature:( Fts3Cursor *pCsr, Fts3Expr *pExpr, int *pRc )
fts3EvalTokenCosts	sqlite3.c	/^static void fts3EvalTokenCosts($/;"	f	file:	signature:( Fts3Cursor *pCsr, Fts3Expr *pRoot, Fts3Expr *pExpr, Fts3TokenAndCost **ppTC, Fts3Expr ***ppOr, int *pRc )
fts3EvalUpdateCounts	sqlite3.c	/^static void fts3EvalUpdateCounts(Fts3Expr *pExpr){$/;"	f	file:	signature:(Fts3Expr *pExpr)
fts3ExprBalance	sqlite3.c	/^static int fts3ExprBalance(Fts3Expr **pp, int nMaxDepth){$/;"	f	file:	signature:(Fts3Expr **pp, int nMaxDepth)
fts3ExprCheckDepth	sqlite3.c	/^static int fts3ExprCheckDepth(Fts3Expr *p, int nMaxDepth){$/;"	f	file:	signature:(Fts3Expr *p, int nMaxDepth)
fts3ExprGlobalHitsCb	sqlite3.c	/^static int fts3ExprGlobalHitsCb($/;"	f	file:	signature:( Fts3Expr *pExpr, int iPhrase, void *pCtx )
fts3ExprIterate	sqlite3.c	/^static int fts3ExprIterate($/;"	f	file:	signature:( Fts3Expr *pExpr, int (*x)(Fts3Expr*,int,void*), void *pCtx )
fts3ExprIterate2	sqlite3.c	/^static int fts3ExprIterate2($/;"	f	file:	signature:( Fts3Expr *pExpr, int *piPhrase, int (*x)(Fts3Expr*,int,void*), void *pCtx )
fts3ExprLoadDoclists	sqlite3.c	/^static int fts3ExprLoadDoclists($/;"	f	file:	signature:( Fts3Cursor *pCsr, int *pnPhrase, int *pnToken )
fts3ExprLoadDoclistsCb	sqlite3.c	/^static int fts3ExprLoadDoclistsCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:	signature:(Fts3Expr *pExpr, int iPhrase, void *ctx)
fts3ExprLocalHitsCb	sqlite3.c	/^static int fts3ExprLocalHitsCb($/;"	f	file:	signature:( Fts3Expr *pExpr, int iPhrase, void *pCtx )
fts3ExprParse	sqlite3.c	/^static int fts3ExprParse($/;"	f	file:	signature:( ParseContext *pParse, const char *z, int n, Fts3Expr **ppExpr, int *pnConsumed )
fts3ExprParse	sqlite3.c	/^static int fts3ExprParse(ParseContext *, const char *, int, Fts3Expr **, int *);$/;"	p	file:	signature:(ParseContext *, const char *, int, Fts3Expr **, int *)
fts3ExprParseUnbalanced	sqlite3.c	/^static int fts3ExprParseUnbalanced($/;"	f	file:	signature:( sqlite3_tokenizer *pTokenizer, int iLangid, char **azCol, int bFts4, int nCol, int iDefaultCol, const char *z, int n, Fts3Expr **ppExpr )
fts3ExprPhraseCount	sqlite3.c	/^static int fts3ExprPhraseCount(Fts3Expr *pExpr){$/;"	f	file:	signature:(Fts3Expr *pExpr)
fts3ExprPhraseCountCb	sqlite3.c	/^static int fts3ExprPhraseCountCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:	signature:(Fts3Expr *pExpr, int iPhrase, void *ctx)
fts3ExprTermOffsetInit	sqlite3.c	/^static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:	signature:(Fts3Expr *pExpr, int iPhrase, void *ctx)
fts3ExprTest	sqlite3.c	/^static void fts3ExprTest($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
fts3FilterMethod	sqlite3.c	/^static int fts3FilterMethod($/;"	f	file:	signature:( sqlite3_vtab_cursor *pCursor, int idxNum, const char *idxStr, int nVal, sqlite3_value **apVal )
fts3FindElementByHash	sqlite3.c	/^static Fts3HashElem *fts3FindElementByHash($/;"	f	file:	signature:( const Fts3Hash *pH, const void *pKey, int nKey, int h )
fts3FindFunctionMethod	sqlite3.c	/^static int fts3FindFunctionMethod($/;"	f	file:	signature:( sqlite3_vtab *pVtab, int nArg, const char *zName, void (**pxFunc)(sqlite3_context*,int,sqlite3_value**), void **ppArg )
fts3FreeExprNode	sqlite3.c	/^static void fts3FreeExprNode(Fts3Expr *p){$/;"	f	file:	signature:(Fts3Expr *p)
fts3FunctionArg	sqlite3.c	/^static int fts3FunctionArg($/;"	f	file:	signature:( sqlite3_context *pContext, const char *zFunc, sqlite3_value *pVal, Fts3Cursor **ppCsr )
fts3GetDeltaPosition	sqlite3.c	/^static void fts3GetDeltaPosition(char **pp, int *piPos){$/;"	f	file:	signature:(char **pp, int *piPos)
fts3GetDeltaVarint	sqlite3.c	/^static void fts3GetDeltaVarint(char **pp, sqlite3_int64 *pVal){$/;"	f	file:	signature:(char **pp, sqlite3_int64 *pVal)
fts3GetDeltaVarint3	sqlite3.c	/^static void fts3GetDeltaVarint3($/;"	f	file:	signature:( char **pp, char *pEnd, int bDescIdx, sqlite3_int64 *pVal )
fts3GetMatchinfo	sqlite3.c	/^static int fts3GetMatchinfo($/;"	f	file:	signature:( Fts3Cursor *pCsr, const char *zArg )
fts3GetReverseVarint	sqlite3.c	/^static void fts3GetReverseVarint($/;"	f	file:	signature:( char **pp, char *pStart, sqlite3_int64 *pVal )
fts3GetVarint32	sqlite3.c	129878;"	d	file:
fts3Getint	sqlite3.c	/^static int fts3Getint(const char **pz){$/;"	f	file:	signature:(const char **pz)
fts3GobbleInt	sqlite3.c	/^static int fts3GobbleInt(const char **pp, int *pnOut){$/;"	f	file:	signature:(const char **pp, int *pnOut)
fts3HashClear	sqlite3.c	129362;"	d	file:
fts3HashCount	sqlite3.c	129386;"	d	file:
fts3HashData	sqlite3.c	129379;"	d	file:
fts3HashFind	sqlite3.c	129361;"	d	file:
fts3HashFindElem	sqlite3.c	129363;"	d	file:
fts3HashFirst	sqlite3.c	129377;"	d	file:
fts3HashFree	sqlite3.c	/^static void fts3HashFree(void *p){$/;"	f	file:	signature:(void *p)
fts3HashInit	sqlite3.c	129359;"	d	file:
fts3HashInsert	sqlite3.c	129360;"	d	file:
fts3HashInsertElement	sqlite3.c	/^static void fts3HashInsertElement($/;"	f	file:	signature:( Fts3Hash *pH, struct _fts3ht *pEntry, Fts3HashElem *pNew )
fts3HashKey	sqlite3.c	129380;"	d	file:
fts3HashKeysize	sqlite3.c	129381;"	d	file:
fts3HashMalloc	sqlite3.c	/^static void *fts3HashMalloc(int n){$/;"	f	file:	signature:(int n)
fts3HashNext	sqlite3.c	129378;"	d	file:
fts3IncrmergeAppend	sqlite3.c	/^static int fts3IncrmergeAppend($/;"	f	file:	signature:( Fts3Table *p, IncrmergeWriter *pWriter, Fts3MultiSegReader *pCsr )
fts3IncrmergeChomp	sqlite3.c	/^static int fts3IncrmergeChomp($/;"	f	file:	signature:( Fts3Table *p, sqlite3_int64 iAbsLevel, Fts3MultiSegReader *pCsr, int *pnRem )
fts3IncrmergeCsr	sqlite3.c	/^static int fts3IncrmergeCsr($/;"	f	file:	signature:( Fts3Table *p, sqlite3_int64 iAbsLevel, int nSeg, Fts3MultiSegReader *pCsr )
fts3IncrmergeHintLoad	sqlite3.c	/^static int fts3IncrmergeHintLoad(Fts3Table *p, Blob *pHint){$/;"	f	file:	signature:(Fts3Table *p, Blob *pHint)
fts3IncrmergeHintPop	sqlite3.c	/^static int fts3IncrmergeHintPop(Blob *pHint, i64 *piAbsLevel, int *pnInput){$/;"	f	file:	signature:(Blob *pHint, i64 *piAbsLevel, int *pnInput)
fts3IncrmergeHintPush	sqlite3.c	/^static void fts3IncrmergeHintPush($/;"	f	file:	signature:( Blob *pHint, i64 iAbsLevel, int nInput, int *pRc )
fts3IncrmergeHintStore	sqlite3.c	/^static int fts3IncrmergeHintStore(Fts3Table *p, Blob *pHint){$/;"	f	file:	signature:(Fts3Table *p, Blob *pHint)
fts3IncrmergeLoad	sqlite3.c	/^static int fts3IncrmergeLoad($/;"	f	file:	signature:( Fts3Table *p, sqlite3_int64 iAbsLevel, int iIdx, const char *zKey, int nKey, IncrmergeWriter *pWriter )
fts3IncrmergeOutputIdx	sqlite3.c	/^static int fts3IncrmergeOutputIdx( $/;"	f	file:	signature:( Fts3Table *p, sqlite3_int64 iAbsLevel, int *piIdx )
fts3IncrmergePush	sqlite3.c	/^static int fts3IncrmergePush($/;"	f	file:	signature:( Fts3Table *p, IncrmergeWriter *pWriter, const char *zTerm, int nTerm )
fts3IncrmergeRelease	sqlite3.c	/^static void fts3IncrmergeRelease($/;"	f	file:	signature:( Fts3Table *p, IncrmergeWriter *pWriter, int *pRc )
fts3IncrmergeWriter	sqlite3.c	/^static int fts3IncrmergeWriter( $/;"	f	file:	signature:( Fts3Table *p, sqlite3_int64 iAbsLevel, int iIdx, Fts3MultiSegReader *pCsr, IncrmergeWriter *pWriter )
fts3InitVtab	sqlite3.c	/^static int fts3InitVtab($/;"	f	file:	signature:( int isCreate, sqlite3 *db, void *pAux, int argc, const char * const *argv, sqlite3_vtab **ppVTab, char **pzErr )
fts3InsertData	sqlite3.c	/^static int fts3InsertData($/;"	f	file:	signature:( Fts3Table *p, sqlite3_value **apVal, sqlite3_int64 *piDocid )
fts3InsertDocsize	sqlite3.c	/^static void fts3InsertDocsize($/;"	f	file:	signature:( int *pRC, Fts3Table *p, u32 *aSz )
fts3InsertTerms	sqlite3.c	/^static int fts3InsertTerms($/;"	f	file:	signature:( Fts3Table *p, int iLangid, sqlite3_value **apVal, u32 *aSz )
fts3IntegrityCheck	sqlite3.c	/^static int fts3IntegrityCheck(Fts3Table *p, int *pbOk){$/;"	f	file:	signature:(Fts3Table *p, int *pbOk)
fts3IsAppendable	sqlite3.c	/^static int fts3IsAppendable(Fts3Table *p, sqlite3_int64 iEnd, int *pbRes){$/;"	f	file:	signature:(Fts3Table *p, sqlite3_int64 iEnd, int *pbRes)
fts3IsEmpty	sqlite3.c	/^static int fts3IsEmpty(Fts3Table *p, sqlite3_value *pRowid, int *pisEmpty){$/;"	f	file:	signature:(Fts3Table *p, sqlite3_value *pRowid, int *pisEmpty)
fts3IsSpecialColumn	sqlite3.c	/^static int fts3IsSpecialColumn($/;"	f	file:	signature:( const char *z, int *pnKey, char **pzValue )
fts3LcsIteratorAdvance	sqlite3.c	/^static int fts3LcsIteratorAdvance(LcsIterator *pIter){$/;"	f	file:	signature:(LcsIterator *pIter)
fts3LogMerge	sqlite3.c	/^static void fts3LogMerge(int nMerge, sqlite3_int64 iAbsLevel){$/;"	f	file:	signature:(int nMerge, sqlite3_int64 iAbsLevel)
fts3LogMerge	sqlite3.c	139611;"	d	file:
fts3MallocZero	sqlite3.c	/^static void *fts3MallocZero(int nByte){$/;"	f	file:	signature:(int nByte)
fts3MatchinfoCheck	sqlite3.c	/^static int fts3MatchinfoCheck($/;"	f	file:	signature:( Fts3Table *pTab, char cArg, char **pzErr )
fts3MatchinfoFunc	sqlite3.c	/^static void fts3MatchinfoFunc($/;"	f	file:	signature:( sqlite3_context *pContext, int nVal, sqlite3_value **apVal )
fts3MatchinfoLcs	sqlite3.c	/^static int fts3MatchinfoLcs(Fts3Cursor *pCsr, MatchInfo *pInfo){$/;"	f	file:	signature:(Fts3Cursor *pCsr, MatchInfo *pInfo)
fts3MatchinfoLcsCb	sqlite3.c	/^static int fts3MatchinfoLcsCb($/;"	f	file:	signature:( Fts3Expr *pExpr, int iPhrase, void *pCtx )
fts3MatchinfoSelectDoctotal	sqlite3.c	/^static int fts3MatchinfoSelectDoctotal($/;"	f	file:	signature:( Fts3Table *pTab, sqlite3_stmt **ppStmt, sqlite3_int64 *pnDoc, const char **paLen )
fts3MatchinfoSize	sqlite3.c	/^static int fts3MatchinfoSize(MatchInfo *pInfo, char cArg){$/;"	f	file:	signature:(MatchInfo *pInfo, char cArg)
fts3MatchinfoValues	sqlite3.c	/^static int fts3MatchinfoValues($/;"	f	file:	signature:( Fts3Cursor *pCsr, int bGlobal, MatchInfo *pInfo, const char *zArg )
fts3Module	sqlite3.c	/^static const sqlite3_module fts3Module = {$/;"	v	file:
fts3MsrBufferData	sqlite3.c	/^static int fts3MsrBufferData($/;"	f	file:	signature:( Fts3MultiSegReader *pMsr, char *pList, int nList )
fts3NextMethod	sqlite3.c	/^static int fts3NextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:	signature:(sqlite3_vtab_cursor *pCursor)
fts3NodeAddTerm	sqlite3.c	/^static int fts3NodeAddTerm($/;"	f	file:	signature:( Fts3Table *p, SegmentNode **ppTree, int isCopyTerm, const char *zTerm, int nTerm )
fts3NodeFree	sqlite3.c	/^static void fts3NodeFree(SegmentNode *pTree){$/;"	f	file:	signature:(SegmentNode *pTree)
fts3NodeWrite	sqlite3.c	/^static int fts3NodeWrite($/;"	f	file:	signature:( Fts3Table *p, SegmentNode *pTree, int iHeight, sqlite3_int64 iLeaf, sqlite3_int64 iFree, sqlite3_int64 *piLast, char **paRoot, int *pnRoot )
fts3OffsetsFunc	sqlite3.c	/^static void fts3OffsetsFunc($/;"	f	file:	signature:( sqlite3_context *pContext, int nVal, sqlite3_value **apVal )
fts3OpenMethod	sqlite3.c	/^static int fts3OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:	signature:(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr)
fts3OptimizeFunc	sqlite3.c	/^static void fts3OptimizeFunc($/;"	f	file:	signature:( sqlite3_context *pContext, int nVal, sqlite3_value **apVal )
fts3PendingListAppend	sqlite3.c	/^static int fts3PendingListAppend($/;"	f	file:	signature:( PendingList **pp, sqlite3_int64 iDocid, sqlite3_int64 iCol, sqlite3_int64 iPos, int *pRc )
fts3PendingListAppendVarint	sqlite3.c	/^static int fts3PendingListAppendVarint($/;"	f	file:	signature:( PendingList **pp, sqlite3_int64 i )
fts3PendingListDelete	sqlite3.c	/^static void fts3PendingListDelete(PendingList *pList){$/;"	f	file:	signature:(PendingList *pList)
fts3PendingTermsAdd	sqlite3.c	/^static int fts3PendingTermsAdd($/;"	f	file:	signature:( Fts3Table *p, int iLangid, const char *zText, int iCol, u32 *pnWord )
fts3PendingTermsAddOne	sqlite3.c	/^static int fts3PendingTermsAddOne($/;"	f	file:	signature:( Fts3Table *p, int iCol, int iPos, Fts3Hash *pHash, const char *zToken, int nToken )
fts3PendingTermsDocid	sqlite3.c	/^static int fts3PendingTermsDocid($/;"	f	file:	signature:( Fts3Table *p, int iLangid, sqlite_int64 iDocid )
fts3PoslistCopy	sqlite3.c	/^static void fts3PoslistCopy(char **pp, char **ppPoslist){$/;"	f	file:	signature:(char **pp, char **ppPoslist)
fts3PoslistMerge	sqlite3.c	/^static void fts3PoslistMerge($/;"	f	file:	signature:( char **pp, char **pp1, char **pp2 )
fts3PoslistNearMerge	sqlite3.c	/^static int fts3PoslistNearMerge($/;"	f	file:	signature:( char **pp, char *aTmp, int nRight, int nLeft, char **pp1, char **pp2 )
fts3PoslistPhraseMerge	sqlite3.c	/^static int fts3PoslistPhraseMerge($/;"	f	file:	signature:( char **pp, int nToken, int isSaveLeft, int isExact, char **pp1, char **pp2 )
fts3PrefixCompress	sqlite3.c	/^static int fts3PrefixCompress($/;"	f	file:	signature:( const char *zPrev, int nPrev, const char *zNext, int nNext )
fts3PrefixParameter	sqlite3.c	/^static int fts3PrefixParameter($/;"	f	file:	signature:( const char *zParam, int *pnIndex, struct Fts3Index **apIndex )
fts3PromoteSegments	sqlite3.c	/^static int fts3PromoteSegments($/;"	f	file:	signature:( Fts3Table *p, sqlite3_int64 iAbsLevel, sqlite3_int64 nByte )
fts3PutColNumber	sqlite3.c	/^static int fts3PutColNumber(char **pp, int iCol){$/;"	f	file:	signature:(char **pp, int iCol)
fts3PutDeltaVarint	sqlite3.c	/^static void fts3PutDeltaVarint($/;"	f	file:	signature:( char **pp, sqlite3_int64 *piPrev, sqlite3_int64 iVal )
fts3PutDeltaVarint3	sqlite3.c	/^static void fts3PutDeltaVarint3($/;"	f	file:	signature:( char **pp, int bDescIdx, sqlite3_int64 *piPrev, int *pbFirst, sqlite3_int64 iVal )
fts3QuoteId	sqlite3.c	/^static char *fts3QuoteId(char const *zInput){$/;"	f	file:	signature:(char const *zInput)
fts3ReadEndBlockField	sqlite3.c	/^static void fts3ReadEndBlockField($/;"	f	file:	signature:( sqlite3_stmt *pStmt, int iCol, i64 *piEndBlock, i64 *pnByte )
fts3ReadExprList	sqlite3.c	/^static char *fts3ReadExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:	signature:(Fts3Table *p, const char *zFunc, int *pRc)
fts3ReadNextPos	sqlite3.c	/^static void fts3ReadNextPos($/;"	f	file:	signature:( char **pp, sqlite3_int64 *pi )
fts3ReallocOrFree	sqlite3.c	/^static void *fts3ReallocOrFree(void *pOrig, int nNew){$/;"	f	file:	signature:(void *pOrig, int nNew)
fts3Rehash	sqlite3.c	/^static int fts3Rehash(Fts3Hash *pH, int new_size){$/;"	f	file:	signature:(Fts3Hash *pH, int new_size)
fts3ReleaseMethod	sqlite3.c	/^static int fts3ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:	signature:(sqlite3_vtab *pVtab, int iSavepoint)
fts3RemoveElementByHash	sqlite3.c	/^static void fts3RemoveElementByHash($/;"	f	file:	signature:( Fts3Hash *pH, Fts3HashElem* elem, int h )
fts3RemoveSegdirEntry	sqlite3.c	/^static int fts3RemoveSegdirEntry($/;"	f	file:	signature:( Fts3Table *p, sqlite3_int64 iAbsLevel, int iIdx )
fts3RenameMethod	sqlite3.c	/^static int fts3RenameMethod($/;"	f	file:	signature:( sqlite3_vtab *pVtab, const char *zName )
fts3RepackSegdirLevel	sqlite3.c	/^static int fts3RepackSegdirLevel($/;"	f	file:	signature:( Fts3Table *p, sqlite3_int64 iAbsLevel )
fts3ReversePoslist	sqlite3.c	/^static void fts3ReversePoslist(char *pStart, char **ppPoslist){$/;"	f	file:	signature:(char *pStart, char **ppPoslist)
fts3RollbackMethod	sqlite3.c	/^static int fts3RollbackMethod(sqlite3_vtab *pVtab){$/;"	f	file:	signature:(sqlite3_vtab *pVtab)
fts3RollbackToMethod	sqlite3.c	/^static int fts3RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:	signature:(sqlite3_vtab *pVtab, int iSavepoint)
fts3RowidMethod	sqlite3.c	/^static int fts3RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:	signature:(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid)
fts3SavepointMethod	sqlite3.c	/^static int fts3SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:	signature:(sqlite3_vtab *pVtab, int iSavepoint)
fts3ScanInteriorNode	sqlite3.c	/^static int fts3ScanInteriorNode($/;"	f	file:	signature:( const char *zTerm, int nTerm, const char *zNode, int nNode, sqlite3_int64 *piFirst, sqlite3_int64 *piLast )
fts3SegReaderCmp	sqlite3.c	/^static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:	signature:(Fts3SegReader *pLhs, Fts3SegReader *pRhs)
fts3SegReaderCursor	sqlite3.c	/^static int fts3SegReaderCursor($/;"	f	file:	signature:( Fts3Table *p, int iLangid, int iIndex, int iLevel, const char *zTerm, int nTerm, int isPrefix, int isScan, Fts3MultiSegReader *pCsr )
fts3SegReaderCursorAddZero	sqlite3.c	/^static int fts3SegReaderCursorAddZero($/;"	f	file:	signature:( Fts3Table *p, int iLangid, const char *zTerm, int nTerm, Fts3MultiSegReader *pCsr )
fts3SegReaderCursorAppend	sqlite3.c	/^static int fts3SegReaderCursorAppend($/;"	f	file:	signature:( Fts3MultiSegReader *pCsr, Fts3SegReader *pNew )
fts3SegReaderCursorFree	sqlite3.c	/^static void fts3SegReaderCursorFree(Fts3MultiSegReader *pSegcsr){$/;"	f	file:	signature:(Fts3MultiSegReader *pSegcsr)
fts3SegReaderDoclistCmp	sqlite3.c	/^static int fts3SegReaderDoclistCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:	signature:(Fts3SegReader *pLhs, Fts3SegReader *pRhs)
fts3SegReaderDoclistCmpRev	sqlite3.c	/^static int fts3SegReaderDoclistCmpRev(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:	signature:(Fts3SegReader *pLhs, Fts3SegReader *pRhs)
fts3SegReaderFirstDocid	sqlite3.c	/^static int fts3SegReaderFirstDocid(Fts3Table *pTab, Fts3SegReader *pReader){$/;"	f	file:	signature:(Fts3Table *pTab, Fts3SegReader *pReader)
fts3SegReaderIncrRead	sqlite3.c	/^static int fts3SegReaderIncrRead(Fts3SegReader *pReader){$/;"	f	file:	signature:(Fts3SegReader *pReader)
fts3SegReaderIsPending	sqlite3.c	139696;"	d	file:
fts3SegReaderIsRootOnly	sqlite3.c	139697;"	d	file:
fts3SegReaderNext	sqlite3.c	/^static int fts3SegReaderNext($/;"	f	file:	signature:( Fts3Table *p, Fts3SegReader *pReader, int bIncr )
fts3SegReaderNextDocid	sqlite3.c	/^static int fts3SegReaderNextDocid($/;"	f	file:	signature:( Fts3Table *pTab, Fts3SegReader *pReader, char **ppOffsetList, int *pnOffsetList )
fts3SegReaderRequire	sqlite3.c	/^static int fts3SegReaderRequire(Fts3SegReader *pReader, char *pFrom, int nByte){$/;"	f	file:	signature:(Fts3SegReader *pReader, char *pFrom, int nByte)
fts3SegReaderSetEof	sqlite3.c	/^static void fts3SegReaderSetEof(Fts3SegReader *pSeg){$/;"	f	file:	signature:(Fts3SegReader *pSeg)
fts3SegReaderSort	sqlite3.c	/^static void fts3SegReaderSort($/;"	f	file:	signature:( Fts3SegReader **apSegment, int nSegment, int nSuspect, int (*xCmp)(Fts3SegReader *, Fts3SegReader *) )
fts3SegReaderStart	sqlite3.c	/^static int fts3SegReaderStart($/;"	f	file:	signature:( Fts3Table *p, Fts3MultiSegReader *pCsr, const char *zTerm, int nTerm )
fts3SegReaderTermCmp	sqlite3.c	/^static int fts3SegReaderTermCmp($/;"	f	file:	signature:( Fts3SegReader *pSeg, const char *zTerm, int nTerm )
fts3SegWriterAdd	sqlite3.c	/^static int fts3SegWriterAdd($/;"	f	file:	signature:( Fts3Table *p, SegmentWriter **ppWriter, int isCopyTerm, const char *zTerm, int nTerm, const char *aDoclist, int nDoclist )
fts3SegWriterFlush	sqlite3.c	/^static int fts3SegWriterFlush($/;"	f	file:	signature:( Fts3Table *p, SegmentWriter *pWriter, sqlite3_int64 iLevel, int iIdx )
fts3SegWriterFree	sqlite3.c	/^static void fts3SegWriterFree(SegmentWriter *pWriter){$/;"	f	file:	signature:(SegmentWriter *pWriter)
fts3SegmentIsMaxLevel	sqlite3.c	/^static int fts3SegmentIsMaxLevel(Fts3Table *p, i64 iAbsLevel, int *pbMax){$/;"	f	file:	signature:(Fts3Table *p, i64 iAbsLevel, int *pbMax)
fts3SegmentMaxLevel	sqlite3.c	/^static int fts3SegmentMaxLevel($/;"	f	file:	signature:( Fts3Table *p, int iLangid, int iIndex, sqlite3_int64 *pnMax )
fts3SegmentMerge	sqlite3.c	/^static int fts3SegmentMerge($/;"	f	file:	signature:( Fts3Table *p, int iLangid, int iIndex, int iLevel )
fts3SegmentMerge	sqlite3.c	/^static int fts3SegmentMerge(Fts3Table *, int, int, int);$/;"	p	file:	signature:(Fts3Table *, int, int, int)
fts3SelectDocsize	sqlite3.c	/^static int fts3SelectDocsize($/;"	f	file:	signature:( Fts3Table *pTab, sqlite3_int64 iDocid, sqlite3_stmt **ppStmt )
fts3SelectLeaf	sqlite3.c	/^static int fts3SelectLeaf($/;"	f	file:	signature:( Fts3Table *p, const char *zTerm, int nTerm, const char *zNode, int nNode, sqlite3_int64 *piLeaf, sqlite3_int64 *piLeaf2 )
fts3SetEstimatedRows	sqlite3.c	/^static void fts3SetEstimatedRows(sqlite3_index_info *pIdxInfo, i64 nRow){$/;"	f	file:	signature:(sqlite3_index_info *pIdxInfo, i64 nRow)
fts3SetHasStat	sqlite3.c	/^static int fts3SetHasStat(Fts3Table *p){$/;"	f	file:	signature:(Fts3Table *p)
fts3SnippetAdvance	sqlite3.c	/^static void fts3SnippetAdvance(char **ppIter, int *piIter, int iNext){$/;"	f	file:	signature:(char **ppIter, int *piIter, int iNext)
fts3SnippetDetails	sqlite3.c	/^static void fts3SnippetDetails($/;"	f	file:	signature:( SnippetIter *pIter, u64 mCovered, int *piToken, int *piScore, u64 *pmCover, u64 *pmHighlight )
fts3SnippetFindPositions	sqlite3.c	/^static int fts3SnippetFindPositions(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:	signature:(Fts3Expr *pExpr, int iPhrase, void *ctx)
fts3SnippetFunc	sqlite3.c	/^static void fts3SnippetFunc($/;"	f	file:	signature:( sqlite3_context *pContext, int nVal, sqlite3_value **apVal )
fts3SnippetNextCandidate	sqlite3.c	/^static int fts3SnippetNextCandidate(SnippetIter *pIter){$/;"	f	file:	signature:(SnippetIter *pIter)
fts3SnippetShift	sqlite3.c	/^static int fts3SnippetShift($/;"	f	file:	signature:( Fts3Table *pTab, int iLangid, int nSnippet, const char *zDoc, int nDoc, int *piPos, u64 *pHlmask )
fts3SnippetText	sqlite3.c	/^static int fts3SnippetText($/;"	f	file:	signature:( Fts3Cursor *pCsr, SnippetFragment *pFragment, int iFragment, int isLast, int nSnippet, const char *zOpen, const char *zClose, const char *zEllipsis, StrBuffer *pOut )
fts3SpecialInsert	sqlite3.c	/^static int fts3SpecialInsert(Fts3Table *p, sqlite3_value *pVal){$/;"	f	file:	signature:(Fts3Table *p, sqlite3_value *pVal)
fts3SqlExec	sqlite3.c	/^static void fts3SqlExec($/;"	f	file:	signature:( int *pRC, Fts3Table *p, int eStmt, sqlite3_value **apVal )
fts3SqlStmt	sqlite3.c	/^static int fts3SqlStmt($/;"	f	file:	signature:( Fts3Table *p, int eStmt, sqlite3_stmt **pp, sqlite3_value **apVal )
fts3StartNode	sqlite3.c	/^static void fts3StartNode(Blob *pNode, int iHeight, sqlite3_int64 iChild){$/;"	f	file:	signature:(Blob *pNode, int iHeight, sqlite3_int64 iChild)
fts3StrCompare	sqlite3.c	/^static int fts3StrCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:	signature:(const void *pKey1, int n1, const void *pKey2, int n2)
fts3StrHash	sqlite3.c	/^static int fts3StrHash(const void *pKey, int nKey){$/;"	f	file:	signature:(const void *pKey, int nKey)
fts3StringAppend	sqlite3.c	/^static int fts3StringAppend($/;"	f	file:	signature:( StrBuffer *pStr, const char *zAppend, int nAppend )
fts3SyncMethod	sqlite3.c	/^static int fts3SyncMethod(sqlite3_vtab *pVtab){$/;"	f	file:	signature:(sqlite3_vtab *pVtab)
fts3TermCmp	sqlite3.c	/^static int fts3TermCmp($/;"	f	file:	signature:( const char *zLhs, int nLhs, const char *zRhs, int nRhs )
fts3TermSegReaderCursor	sqlite3.c	/^static int fts3TermSegReaderCursor($/;"	f	file:	signature:( Fts3Cursor *pCsr, const char *zTerm, int nTerm, int isPrefix, Fts3MultiSegReader **ppSegcsr )
fts3TermSegReaderCursor	sqlite3.c	/^static int fts3TermSegReaderCursor($/;"	p	file:	signature:( Fts3Cursor *, const char *, int, int, Fts3MultiSegReader **)
fts3TermSelect	sqlite3.c	/^static int fts3TermSelect($/;"	f	file:	signature:( Fts3Table *p, Fts3PhraseToken *pTok, int iColumn, int *pnOut, char **ppOut )
fts3TermSelectFinishMerge	sqlite3.c	/^static int fts3TermSelectFinishMerge(Fts3Table *p, TermSelect *pTS){$/;"	f	file:	signature:(Fts3Table *p, TermSelect *pTS)
fts3TermSelectMerge	sqlite3.c	/^static int fts3TermSelectMerge($/;"	f	file:	signature:( Fts3Table *p, TermSelect *pTS, char *aDoclist, int nDoclist )
fts3TreeFinishNode	sqlite3.c	/^static int fts3TreeFinishNode($/;"	f	file:	signature:( SegmentNode *pTree, int iHeight, sqlite3_int64 iLeftChild )
fts3TruncateNode	sqlite3.c	/^static int fts3TruncateNode($/;"	f	file:	signature:( const char *aNode, int nNode, Blob *pNew, const char *zTerm, int nTerm, sqlite3_int64 *piBlock )
fts3TruncateSegment	sqlite3.c	/^static int fts3TruncateSegment($/;"	f	file:	signature:( Fts3Table *p, sqlite3_int64 iAbsLevel, int iIdx, const char *zTerm, int nTerm )
fts3UpdateDocTotals	sqlite3.c	/^static void fts3UpdateDocTotals($/;"	f	file:	signature:( int *pRC, Fts3Table *p, u32 *aSzIns, u32 *aSzDel, int nChng )
fts3UpdateMethod	sqlite3.c	/^static int fts3UpdateMethod($/;"	f	file:	signature:( sqlite3_vtab *pVtab, int nArg, sqlite3_value **apVal, sqlite_int64 *pRowid )
fts3WriteExprList	sqlite3.c	/^static char *fts3WriteExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:	signature:(Fts3Table *p, const char *zFunc, int *pRc)
fts3WriteSegdir	sqlite3.c	/^static int fts3WriteSegdir($/;"	f	file:	signature:( Fts3Table *p, sqlite3_int64 iLevel, int iIdx, sqlite3_int64 iStartBlock, sqlite3_int64 iLeafEndBlock, sqlite3_int64 iEndBlock, sqlite3_int64 nLeafData, char *zRoot, int nRoot )
fts3WriteSegment	sqlite3.c	/^static int fts3WriteSegment($/;"	f	file:	signature:( Fts3Table *p, sqlite3_int64 iBlock, char *z, int n )
fts3Writelock	sqlite3.c	/^static int fts3Writelock(Fts3Table *p){$/;"	f	file:	signature:(Fts3Table *p)
fts3_global_term_cnt	sqlite3.c	/^int fts3_global_term_cnt(int iTerm, int iCol);$/;"	p	file:	signature:(int iTerm, int iCol)
fts3_isalnum	sqlite3.c	/^static int fts3_isalnum(int x){$/;"	f	file:	signature:(int x)
fts3_term_cnt	sqlite3.c	/^int fts3_term_cnt(int iTerm, int iCol);$/;"	p	file:	signature:(int iTerm, int iCol)
fts3auxBestIndexMethod	sqlite3.c	/^static int fts3auxBestIndexMethod($/;"	f	file:	signature:( sqlite3_vtab *pVTab, sqlite3_index_info *pInfo )
fts3auxCloseMethod	sqlite3.c	/^static int fts3auxCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:	signature:(sqlite3_vtab_cursor *pCursor)
fts3auxColumnMethod	sqlite3.c	/^static int fts3auxColumnMethod($/;"	f	file:	signature:( sqlite3_vtab_cursor *pCursor, sqlite3_context *pCtx, int iCol )
fts3auxConnectMethod	sqlite3.c	/^static int fts3auxConnectMethod($/;"	f	file:	signature:( sqlite3 *db, void *pUnused, int argc, const char * const *argv, sqlite3_vtab **ppVtab, char **pzErr )
fts3auxDisconnectMethod	sqlite3.c	/^static int fts3auxDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:	signature:(sqlite3_vtab *pVtab)
fts3auxEofMethod	sqlite3.c	/^static int fts3auxEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:	signature:(sqlite3_vtab_cursor *pCursor)
fts3auxFilterMethod	sqlite3.c	/^static int fts3auxFilterMethod($/;"	f	file:	signature:( sqlite3_vtab_cursor *pCursor, int idxNum, const char *idxStr, int nVal, sqlite3_value **apVal )
fts3auxGrowStatArray	sqlite3.c	/^static int fts3auxGrowStatArray(Fts3auxCursor *pCsr, int nSize){$/;"	f	file:	signature:(Fts3auxCursor *pCsr, int nSize)
fts3auxNextMethod	sqlite3.c	/^static int fts3auxNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:	signature:(sqlite3_vtab_cursor *pCursor)
fts3auxOpenMethod	sqlite3.c	/^static int fts3auxOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:	signature:(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr)
fts3auxRowidMethod	sqlite3.c	/^static int fts3auxRowidMethod($/;"	f	file:	signature:( sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid )
fts3isspace	sqlite3.c	/^static int fts3isspace(char c){$/;"	f	file:	signature:(char c)
fts3tokBestIndexMethod	sqlite3.c	/^static int fts3tokBestIndexMethod($/;"	f	file:	signature:( sqlite3_vtab *pVTab, sqlite3_index_info *pInfo )
fts3tokCloseMethod	sqlite3.c	/^static int fts3tokCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:	signature:(sqlite3_vtab_cursor *pCursor)
fts3tokColumnMethod	sqlite3.c	/^static int fts3tokColumnMethod($/;"	f	file:	signature:( sqlite3_vtab_cursor *pCursor, sqlite3_context *pCtx, int iCol )
fts3tokConnectMethod	sqlite3.c	/^static int fts3tokConnectMethod($/;"	f	file:	signature:( sqlite3 *db, void *pHash, int argc, const char * const *argv, sqlite3_vtab **ppVtab, char **pzErr )
fts3tokDequoteArray	sqlite3.c	/^static int fts3tokDequoteArray($/;"	f	file:	signature:( int argc, const char * const *argv, char ***pazDequote )
fts3tokDisconnectMethod	sqlite3.c	/^static int fts3tokDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:	signature:(sqlite3_vtab *pVtab)
fts3tokEofMethod	sqlite3.c	/^static int fts3tokEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:	signature:(sqlite3_vtab_cursor *pCursor)
fts3tokFilterMethod	sqlite3.c	/^static int fts3tokFilterMethod($/;"	f	file:	signature:( sqlite3_vtab_cursor *pCursor, int idxNum, const char *idxStr, int nVal, sqlite3_value **apVal )
fts3tokNextMethod	sqlite3.c	/^static int fts3tokNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:	signature:(sqlite3_vtab_cursor *pCursor)
fts3tokOpenMethod	sqlite3.c	/^static int fts3tokOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:	signature:(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr)
fts3tokQueryTokenizer	sqlite3.c	/^static int fts3tokQueryTokenizer($/;"	f	file:	signature:( Fts3Hash *pHash, const char *zName, const sqlite3_tokenizer_module **pp, char **pzErr )
fts3tokResetCursor	sqlite3.c	/^static void fts3tokResetCursor(Fts3tokCursor *pCsr){$/;"	f	file:	signature:(Fts3tokCursor *pCsr)
fts3tokRowidMethod	sqlite3.c	/^static int fts3tokRowidMethod($/;"	f	file:	signature:( sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid )
ftsCompareFunction	sqlite3.c	/^static int (*ftsCompareFunction(int keyClass))(const void*,int,const void*,int){$/;"	f	file:	signature:(int keyClass)
ftsHashFunction	sqlite3.c	/^static int (*ftsHashFunction(int keyClass))(const void*,int){$/;"	f	file:	signature:(int keyClass)
fullSync	sqlite3.c	/^  u8 fullSync;                \/* Do extra syncs of the journal for robustness *\/$/;"	m	struct:Pager	file:	access:public
full_fsync	sqlite3.c	/^static int full_fsync(int fd, int fullSync, int dataOnly){$/;"	f	file:	signature:(int fd, int fullSync, int dataOnly)
funcFlags	sqlite3.c	/^  u16 funcFlags;       \/* Some combination of SQLITE_FUNC_* *\/$/;"	m	struct:FuncDef	file:	access:public
functionDestroy	sqlite3.c	/^static void functionDestroy(sqlite3 *db, FuncDef *p){$/;"	f	file:	signature:(sqlite3 *db, FuncDef *p)
functionSearch	sqlite3.c	/^static FuncDef *functionSearch($/;"	f	file:	signature:( FuncDefHash *pHash, int h, const char *zFunc, int nFunc )
g_elapsed	sqlite3.c	/^static sqlite_uint64 g_elapsed;$/;"	v	file:
g_start	sqlite3.c	/^static sqlite_uint64 g_start;$/;"	v	file:
generateColumnNames	sqlite3.c	/^static void generateColumnNames($/;"	f	file:	signature:( Parse *pParse, SrcList *pTabList, ExprList *pEList )
generateColumnTypes	sqlite3.c	/^static void generateColumnTypes($/;"	f	file:	signature:( Parse *pParse, SrcList *pTabList, ExprList *pEList )
generateOutputSubroutine	sqlite3.c	/^static int generateOutputSubroutine($/;"	f	file:	signature:( Parse *pParse, Select *p, SelectDest *pIn, SelectDest *pDest, int regReturn, int regPrev, KeyInfo *pKeyInfo, int iBreak )
generateSortTail	sqlite3.c	/^static void generateSortTail($/;"	f	file:	signature:( Parse *pParse, Select *p, SortCtx *pSort, int nColumn, SelectDest *pDest )
generateWithRecursiveQuery	sqlite3.c	/^static void generateWithRecursiveQuery($/;"	f	file:	signature:( Parse *pParse, Select *p, SelectDest *pDest )
geomCallback	sqlite3.c	/^static void geomCallback(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){$/;"	f	file:	signature:(sqlite3_context *ctx, int nArg, sqlite3_value **aArg)
get2byte	sqlite3.c	51905;"	d	file:
get2byteNotZero	sqlite3.c	52239;"	d	file:
get4byte	sqlite3.c	51907;"	d	file:
getAbsoluteLevel	sqlite3.c	/^static sqlite3_int64 getAbsoluteLevel($/;"	f	file:	signature:( Fts3Table *p, int iLangid, int iIndex, int iLevel )
getAndInitPage	sqlite3.c	/^static int getAndInitPage($/;"	f	file:	signature:( BtShared *pBt, Pgno pgno, MemPage **ppPage, int bReadonly )
getAutoVacuum	sqlite3.c	/^static int getAutoVacuum(const char *z){$/;"	f	file:	signature:(const char *z)
getCellInfo	sqlite3.c	/^  static void getCellInfo(BtCursor *pCur){$/;"	f	file:	signature:(BtCursor *pCur)
getCellInfo	sqlite3.c	56046;"	d	file:
getDigits	sqlite3.c	/^static int getDigits(const char *zDate, ...){$/;"	f	file:	signature:(const char *zDate, ...)
getDoubleArg	sqlite3.c	/^static double getDoubleArg(PrintfArguments *p){$/;"	f	file:	signature:(PrintfArguments *p)
getIntArg	sqlite3.c	/^static sqlite3_int64 getIntArg(PrintfArguments *p){$/;"	f	file:	signature:(PrintfArguments *p)
getIntFromStmt	sqlite3.c	/^static int getIntFromStmt(sqlite3 *db, const char *zSql, int *piVal){$/;"	f	file:	signature:(sqlite3 *db, const char *zSql, int *piVal)
getLockingMode	sqlite3.c	/^static int getLockingMode(const char *z){$/;"	f	file:	signature:(const char *z)
getMask	sqlite3.c	/^static Bitmask getMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:	signature:(WhereMaskSet *pMaskSet, int iCursor)
getNextNode	sqlite3.c	/^static int getNextNode($/;"	f	file:	signature:( ParseContext *pParse, const char *z, int n, Fts3Expr **ppExpr, int *pnConsumed )
getNextString	sqlite3.c	/^static int getNextString($/;"	f	file:	signature:( ParseContext *pParse, const char *zInput, int nInput, Fts3Expr **ppExpr )
getNextToken	sqlite3.c	/^static int getNextToken($/;"	f	file:	signature:( ParseContext *pParse, int iCol, const char *z, int n, Fts3Expr **ppExpr, int *pnConsumed )
getNodeSize	sqlite3.c	/^static int getNodeSize($/;"	f	file:	signature:( sqlite3 *db, Rtree *pRtree, int isCreate, char **pzErr )
getOverflowPage	sqlite3.c	/^static int getOverflowPage($/;"	f	file:	signature:( BtShared *pBt, Pgno ovfl, MemPage **ppPage, Pgno *pPgnoNext )
getPageReferenced	sqlite3.c	/^static int getPageReferenced(IntegrityCk *pCheck, Pgno iPg){$/;"	f	file:	signature:(IntegrityCk *pCheck, Pgno iPg)
getRowTrigger	sqlite3.c	/^static TriggerPrg *getRowTrigger($/;"	f	file:	signature:( Parse *pParse, Trigger *pTrigger, Table *pTab, int orconf )
getSafetyLevel	sqlite3.c	/^static u8 getSafetyLevel(const char *z, int omitFull, u8 dflt){$/;"	f	file:	signature:(const char *z, int omitFull, u8 dflt)
getTempStore	sqlite3.c	/^static int getTempStore(const char *z){$/;"	f	file:	signature:(const char *z)
getTextArg	sqlite3.c	/^static char *getTextArg(PrintfArguments *p){$/;"	f	file:	signature:(PrintfArguments *p)
getVarint	sqlite3.c	12952;"	d	file:
getVarint32	sqlite3.c	12947;"	d	file:
get_autocommit	sqlite3.c	/^  int  (*get_autocommit)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
get_auxdata	sqlite3.c	/^  void * (*get_auxdata)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
get_table	sqlite3.c	/^  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
gethostuuid	sqlite3.c	/^extern int gethostuuid(uuid_t id, const struct timespec *wait);$/;"	p	file:	signature:(uuid_t id, const struct timespec *wait)
globInfo	sqlite3.c	/^static const struct compareInfo globInfo = { '*', '?', '[', 0 };$/;"	v	typeref:struct:compareInfo	file:
global_recover	sqlite3.c	/^  int  (*global_recover)(void);$/;"	m	struct:sqlite3_api_routines	file:	access:public
groupConcatFinalize	sqlite3.c	/^static void groupConcatFinalize(sqlite3_context *context){$/;"	f	file:	signature:(sqlite3_context *context)
groupConcatStep	sqlite3.c	/^static void groupConcatStep($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
growOpArray	sqlite3.c	/^static int growOpArray(Vdbe *v, int nOp){$/;"	f	file:	signature:(Vdbe *v, int nOp)
growVTrans	sqlite3.c	/^static int growVTrans(sqlite3 *db){$/;"	f	file:	signature:(sqlite3 *db)
grp	sqlite3.c	/^  PGroup grp;                    \/* The global PGroup for mode (2) *\/$/;"	m	struct:PCacheGlobal	file:	access:public
h	sqlite3.c	/^  HANDLE h;               \/* Handle for accessing the file *\/$/;"	m	struct:winFile	file:	access:public
h	sqlite3.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:	access:public
h	sqlite3.c	/^  int h;                              \/* The file descriptor *\/$/;"	m	struct:unixFile	file:	access:public
h	sqlite3.c	/^  int h;                     \/* Open file descriptor *\/$/;"	m	struct:unixShmNode	file:	access:public
hFile	sqlite3.c	/^  winFile hFile;             \/* File handle from winOpen *\/$/;"	m	struct:winShmNode	file:	access:public
hHeap	sqlite3.c	/^  HANDLE hHeap; \/* The handle to our heap. *\/$/;"	m	struct:winMemData	file:	access:public
hMap	sqlite3.c	/^    HANDLE hMap;             \/* File handle from CreateFileMapping *\/$/;"	m	struct:winShmNode::ShmRegion	file:	access:public
hMap	sqlite3.c	/^  HANDLE hMap;                  \/* Handle for accessing memory mapping *\/$/;"	m	struct:winFile	file:	access:public
hMutex	sqlite3.c	/^  HANDLE hMutex;          \/* Mutex used to control access to shared lock *\/$/;"	m	struct:winFile	file:	access:public
hPending	sqlite3.c	/^    Fts3Hash hPending;            \/* Pending terms table for this index *\/$/;"	m	struct:Fts3Table::Fts3Index	file:	access:public
hShared	sqlite3.c	/^  HANDLE hShared;         \/* Shared memory segment used for locking *\/$/;"	m	struct:winFile	file:	access:public
handleDeferredMoveto	sqlite3.c	/^static int SQLITE_NOINLINE handleDeferredMoveto(VdbeCursor *p){$/;"	f	file:	signature:(VdbeCursor *p)
handleMovedCursor	sqlite3.c	/^static int SQLITE_NOINLINE handleMovedCursor(VdbeCursor *p){$/;"	f	file:	signature:(VdbeCursor *p)
hasColumn	sqlite3.c	/^static int hasColumn(const i16 *aiCol, int nCol, int x){$/;"	f	file:	signature:(const i16 *aiCol, int nCol, int x)
hasCompound	sqlite3.c	/^  u8 hasCompound;      \/* Need to invoke convertCompoundSelectToSubquery() *\/$/;"	m	struct:Parse	file:	access:public
hasHotJournal	sqlite3.c	/^static int hasHotJournal(Pager *pPager, int *pExists){$/;"	f	file:	signature:(Pager *pPager, int *pExists)
hasMutex	sqlite3.c	/^  u8 hasMutex;               \/* True if holding the unixShmNode mutex *\/$/;"	m	struct:unixShm	file:	access:public
hasMutex	sqlite3.c	/^  u8 hasMutex;               \/* True if holding the winShmNode mutex *\/$/;"	m	struct:winShm	file:	access:public
hasReadConflicts	sqlite3.c	/^static int hasReadConflicts(Btree *pBtree, Pgno iRoot){$/;"	f	file:	signature:(Btree *pBtree, Pgno iRoot)
hasReadConflicts	sqlite3.c	52307;"	d	file:
hasSharedCacheTableLock	sqlite3.c	/^static int hasSharedCacheTableLock($/;"	f	file:	signature:( Btree *pBtree, Pgno iRoot, int isIndex, int eLockType )
hasSharedCacheTableLock	sqlite3.c	52306;"	d	file:
hasVowel	sqlite3.c	/^static int hasVowel(const char *z){$/;"	f	file:	signature:(const char *z)
hashDestroy	sqlite3.c	/^static void hashDestroy(void *p){$/;"	f	file:	signature:(void *p)
hdr	sqlite3.c	/^    } hdr;$/;"	m	union:Mem3Block::__anon10	typeref:struct:Mem3Block::__anon10::__anon11	file:	access:public
hdr	sqlite3.c	/^  WalIndexHdr hdr;           \/* Wal-index header for current transaction *\/$/;"	m	struct:Wal	file:	access:public
hdrOffset	sqlite3.c	/^  u8 hdrOffset;        \/* 100 for page 1.  0 otherwise *\/$/;"	m	struct:MemPage	file:	access:public
heightOfExpr	sqlite3.c	/^static void heightOfExpr(Expr *p, int *pnHeight){$/;"	f	file:	signature:(Expr *p, int *pnHeight)
heightOfExprList	sqlite3.c	/^static void heightOfExprList(ExprList *p, int *pnHeight){$/;"	f	file:	signature:(ExprList *p, int *pnHeight)
heightOfSelect	sqlite3.c	/^static void heightOfSelect(Select *p, int *pnHeight){$/;"	f	file:	signature:(Select *p, int *pnHeight)
hexFunc	sqlite3.c	/^static void hexFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
hexdigits	sqlite3.c	/^static const char hexdigits[] = {$/;"	v	file:
hints	sqlite3.c	/^  u8 hints;                             \/* As configured by CursorSetHints() *\/$/;"	m	struct:BtCursor	file:	access:public
hlmask	sqlite3.c	/^  u64 hlmask;                     \/* Mask of snippet terms to highlight *\/$/;"	m	struct:SnippetFragment	file:	access:public
ht	sqlite3.c	/^  } *ht;$/;"	m	struct:Fts3Hash	typeref:struct:Fts3Hash::_fts3ht	file:	access:public
ht	sqlite3.c	/^  } *ht;$/;"	m	struct:Hash	typeref:struct:Hash::_ht	file:	access:public
ht_slot	sqlite3.c	/^typedef u16 ht_slot;$/;"	t	file:
htsize	sqlite3.c	/^  int htsize;             \/* Number of buckets in the hash table *\/$/;"	m	struct:Fts3Hash	file:	access:public
htsize	sqlite3.c	/^  unsigned int htsize;      \/* Number of buckets in the hash table *\/$/;"	m	struct:Hash	file:	access:public
i	sqlite3.c	/^    i64 i;              \/* Integer value used when MEM_Int is set in flags *\/$/;"	m	union:Mem::MemValue	file:	access:public
i	sqlite3.c	/^    int i;                                     \/* Integer value *\/$/;"	m	union:Walker::__anon8	file:	access:public
i	sqlite3.c	/^    int i;                 \/* Integer value if p4type==P4_INT32 *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
i	sqlite3.c	/^  int i;             \/* Integer value *\/$/;"	m	union:RtreeCoord	file:	access:public
i	sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:	access:public
i16	sqlite3.c	/^typedef INT16_TYPE i16;            \/* 2-byte signed integer *\/$/;"	t	file:
i16	sqlite3.c	/^typedef short int i16;            \/* 2-byte (or larger) signed integer *\/$/;"	t	file:
i64	sqlite3.c	/^typedef sqlite3_int64 i64;        \/* 8-byte signed integer *\/$/;"	t	file:
i64	sqlite3.c	/^typedef sqlite3_int64 i64;$/;"	t	file:
i64	sqlite3.c	/^typedef sqlite_int64 i64;          \/* 8-byte signed integer *\/$/;"	t	file:
i8	sqlite3.c	/^typedef INT8_TYPE i8;              \/* 1-byte signed integer *\/$/;"	t	file:
iAbsLevel	sqlite3.c	/^  sqlite3_int64 iAbsLevel;        \/* Absolute level of input segments *\/$/;"	m	struct:IncrmergeWriter	file:	access:public
iAddr	sqlite3.c	/^  int iAddr;                 \/* Address of next instruction to return *\/$/;"	m	struct:VdbeOpIter	file:	access:public
iAgg	sqlite3.c	/^  i16 iAgg;              \/* Which entry in pAggInfo->aCol[] or ->aFunc[] *\/$/;"	m	struct:Expr	file:	access:public
iAlias	sqlite3.c	/^        u16 iAlias;           \/* Index into Parse.aAlias[] for zName *\/$/;"	m	struct:ExprList::ExprList_item::__anon5::__anon6	file:	access:public
iArg	sqlite3.c	/^  int iArg;                       \/* Index of function argument. *\/$/;"	m	struct:AuxData	file:	access:public
iArg	sqlite3.c	/^  u32 iArg;                 \/* Extra argument *\/$/;"	m	struct:sPragmaNames	file:	access:public
iBatch	sqlite3.c	/^  int iBatch;                    \/* Current insert batch *\/$/;"	m	struct:RowSet	file:	access:public
iBlock	sqlite3.c	/^  sqlite3_int64 iBlock;           \/* Current block id *\/$/;"	m	struct:NodeWriter	file:	access:public
iBreak	sqlite3.c	/^  int iBreak;               \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereInfo	file:	access:public
iBufEnd	sqlite3.c	/^  int iBufEnd;                    \/* Last byte of buffer to write *\/$/;"	m	struct:PmaWriter	file:	access:public
iBufStart	sqlite3.c	/^  int iBufStart;                  \/* First byte of buffer to write *\/$/;"	m	struct:PmaWriter	file:	access:public
iCacheCnt	sqlite3.c	/^  int iCacheCnt;       \/* Counter used to generate aColCache[].lru values *\/$/;"	m	struct:Parse	file:	access:public
iCacheLevel	sqlite3.c	/^  int iCacheLevel;     \/* ColCache valid when aColCache[].iLevel<=iCacheLevel *\/$/;"	m	struct:Parse	file:	access:public
iCallback	sqlite3.c	/^  u32 iCallback;             \/* Value to pass to log callback (or 0) *\/$/;"	m	struct:Wal	file:	access:public
iCell	sqlite3.c	/^  u8 iCell;              \/* Cell index within the node *\/$/;"	m	struct:RtreeSearchPoint	file:	access:public
iChange	sqlite3.c	/^  u32 iChange;                    \/* Counter incremented each transaction *\/$/;"	m	struct:WalIndexHdr	file:	access:public
iChild	sqlite3.c	/^  sqlite3_int64 iChild;           \/* Pointer to child node *\/$/;"	m	struct:NodeReader	file:	access:public
iCol	sqlite3.c	/^  int iCol;                       \/* Column of table to populate aTerm for *\/$/;"	m	struct:TermOffsetCtx	file:	access:public
iCol	sqlite3.c	/^  int iCol;                       \/* Column snippet is extracted from *\/$/;"	m	struct:SnippetFragment	file:	access:public
iCol	sqlite3.c	/^  int iCol;                       \/* Column token must occur in *\/$/;"	m	struct:Fts3DeferredToken	file:	access:public
iCol	sqlite3.c	/^  int iCol;                       \/* Current value of 'col' column *\/$/;"	m	struct:Fts3auxCursor	file:	access:public
iCol	sqlite3.c	/^  int iCol;                       \/* Extract snippet from this column *\/$/;"	m	struct:SnippetIter	file:	access:public
iCol	sqlite3.c	/^  int iCol;                       \/* If !isPSample, the reason for inclusion *\/$/;"	m	struct:Stat4Sample	file:	access:public
iCol	sqlite3.c	/^  int iCol;                       \/* The column the token must match *\/$/;"	m	struct:Fts3TokenAndCost	file:	access:public
iCol	sqlite3.c	/^  int iCol;               \/* Table column this handle is open on *\/$/;"	m	struct:Incrblob	file:	access:public
iCol	sqlite3.c	/^  int iCol;$/;"	m	struct:Fts3SegFilter	file:	access:public
iColFilter	sqlite3.c	/^  int iColFilter;                 \/* If >=0, filter for this column *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
iColumn	sqlite3.c	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:	access:public
iColumn	sqlite3.c	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:	access:public
iColumn	sqlite3.c	/^    i16 iColumn;          \/* Table column number *\/$/;"	m	struct:Parse::yColCache	file:	access:public
iColumn	sqlite3.c	/^    int iColumn;             \/* Column number within the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:	access:public
iColumn	sqlite3.c	/^  int iColumn;               \/* Index of column this phrase must match *\/$/;"	m	struct:Fts3Phrase	file:	access:public
iColumn	sqlite3.c	/^  ynVar iColumn;         \/* TK_COLUMN: column index.  -1 for rowid.$/;"	m	struct:Expr	file:	access:public
iColumn	sqlite3.h	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	access:public
iColumn	sqlite3.h	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	access:public
iConstExprReg	sqlite3.c	/^      int iConstExprReg;      \/* Register in which Expr value is cached *\/$/;"	m	union:ExprList::ExprList_item::__anon5	file:	access:public
iContinue	sqlite3.c	/^  int iContinue;            \/* Jump here to continue with next record *\/$/;"	m	struct:WhereInfo	file:	access:public
iCoord	sqlite3.c	/^  int iCoord;                     \/* Index of constrained coordinate *\/$/;"	m	struct:RtreeConstraint	file:	access:public
iCur	sqlite3.c	/^        int iCur;              \/* The VDBE cursor used by this IN operator *\/$/;"	m	struct:WhereLevel::__anon16::__anon17::InLoop	file:	access:public
iCurrent	sqlite3.c	/^  int iCurrent;                   \/* First token of current snippet *\/$/;"	m	struct:SnippetIter	file:	access:public
iCurrentBlock	sqlite3.c	/^  sqlite3_int64 iCurrentBlock;    \/* Current leaf block (or 0) *\/$/;"	m	struct:Fts3SegReader	file:	access:public
iCurrentTime	sqlite3.c	/^  i64 iCurrentTime;       \/* Value of julianday('now') for this statement *\/$/;"	m	struct:Vdbe	file:	access:public
iCursor	sqlite3.c	/^    int iCursor;      \/* The VDBE cursor number used to access this table *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
iDb	sqlite3.c	/^    u8 iDb;                     \/* Which db file is being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:	access:public
iDb	sqlite3.c	/^  i8 iDb;               \/* Index of cursor database in db->aDb[] (or -1) *\/$/;"	m	struct:VdbeCursor	file:	access:public
iDb	sqlite3.c	/^  int iDb;              \/* Index in sqlite3.aDb[] of database holding pTab *\/$/;"	m	struct:AutoincInfo	file:	access:public
iDb	sqlite3.c	/^  int iDb;             \/* The database containing the table to be locked *\/$/;"	m	struct:TableLock	file:	access:public
iDb	sqlite3.c	/^  int iDb;            \/* 0 for main database.  1 for TEMP, 2.. for ATTACHed *\/$/;"	m	struct:__anon7	file:	access:public
iDefaultCol	sqlite3.c	/^  int iDefaultCol;                    \/* Default column to query *\/$/;"	m	struct:ParseContext	file:	access:public
iDepth	sqlite3.c	/^  int iDepth;                 \/* Current depth of the r-tree structure *\/$/;"	m	struct:Rtree	file:	access:public
iDestSchema	sqlite3.c	/^  u32 iDestSchema;         \/* Original schema cookie in destination *\/$/;"	m	struct:sqlite3_backup	file:	access:public
iDistinct	sqlite3.c	/^    int iDistinct;           \/* Ephemeral table used to enforce DISTINCT *\/$/;"	m	struct:AggInfo::AggInfo_func	file:	access:public
iDivisor	sqlite3.c	/^  u32 iDivisor;   \/* Number of bits handled by each apSub[] entry. *\/$/;"	m	struct:Bitvec	file:	access:public
iDocid	sqlite3.c	/^  sqlite3_int64 iDocid;          \/* Current docid (if pList!=0) *\/$/;"	m	struct:Fts3Doclist	file:	access:public
iDocid	sqlite3.c	/^  sqlite3_int64 iDocid;      \/* Current docid *\/$/;"	m	struct:Fts3Expr	file:	access:public
iDocid	sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:Fts3SegReader	file:	access:public
iDocid	sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TermOffsetCtx	file:	access:public
iDocid	sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TokenDoclist	file:	access:public
iDoclistToken	sqlite3.c	/^  int iDoclistToken;$/;"	m	struct:Fts3Phrase	file:	access:public
iECursor	sqlite3.c	/^  int iECursor;         \/* Cursor number for the sorter *\/$/;"	m	struct:SortCtx	file:	access:public
iEnd	sqlite3.c	/^  int iEnd;                       \/* Current 'end' value *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
iEnd	sqlite3.c	/^  sqlite3_int64 iEnd;             \/* Block number of last allocated block *\/$/;"	m	struct:IncrmergeWriter	file:	access:public
iEndBlock	sqlite3.c	/^  sqlite3_int64 iEndBlock;        \/* Rowid of final block in segment (or 0) *\/$/;"	m	struct:Fts3SegReader	file:	access:public
iEof	sqlite3.c	/^  i64 iEof;                       \/* Bytes of data stored in pFd *\/$/;"	m	struct:SorterFile	file:	access:public
iEof	sqlite3.c	/^  i64 iEof;                   \/* 1 byte past EOF for this PmaReader *\/$/;"	m	struct:PmaReader	file:	access:public
iEquiv	sqlite3.c	/^  unsigned char iEquiv;      \/* Next unused slot in aEquiv[] *\/$/;"	m	struct:WhereScan	file:	access:public
iFirst	sqlite3.c	/^  sqlite3_int64 iFirst;           \/* First slot in %_segments written *\/$/;"	m	struct:SegmentWriter	file:	access:public
iFixedOp	sqlite3.c	/^  int iFixedOp;        \/* Never back out opcodes iFixedOp-1 or earlier *\/$/;"	m	struct:Parse	file:	access:public
iForeGuard	sqlite3.c	/^  int iForeGuard;                     \/* Guard word for sanity *\/$/;"	m	struct:MemBlockHdr	file:	access:public
iFree	sqlite3.c	/^  sqlite3_int64 iFree;            \/* Next free slot in %_segments *\/$/;"	m	struct:SegmentWriter	file:	access:public
iFrom	sqlite3.c	/^    int iFrom;            \/* Index of column in pFrom *\/$/;"	m	struct:FKey::sColMap	file:	access:public
iFrom	sqlite3.c	/^  u8 iFrom;             \/* Which entry in the FROM clause *\/$/;"	m	struct:WhereLevel	file:	access:public
iGeneration	sqlite3.c	/^  int iGeneration;     \/* Generation counter.  Incremented with each change *\/$/;"	m	struct:Schema	file:	access:public
iGet	sqlite3.c	/^  int iGet;                 \/* Index of current sample accessed by stat_get() *\/$/;"	m	struct:Stat4Accum	file:	access:public
iHash	sqlite3.c	/^  u32 iHash;                      \/* Tiebreaker hash *\/$/;"	m	struct:Stat4Sample	file:	access:public
iHdrOffset	sqlite3.c	/^  i64 iHdrOffset;              \/* See above *\/$/;"	m	struct:PagerSavepoint	file:	access:public
iHdrOffset	sqlite3.c	/^  u32 iHdrOffset;       \/* Offset to next unparsed byte of the header *\/$/;"	m	struct:VdbeCursor	file:	access:public
iHead	sqlite3.c	/^  int iHead;                      \/* Next value in position list *\/$/;"	m	struct:SnippetPhrase	file:	access:public
iIdx	sqlite3.c	/^  int iIdx;                       \/* Index of *output* segment in iAbsLevel+1 *\/$/;"	m	struct:IncrmergeWriter	file:	access:public
iIdx	sqlite3.c	/^  int iIdx;                       \/* Index within level, or 0x7FFFFFFF for PT *\/$/;"	m	struct:Fts3SegReader	file:	access:public
iIdxCur	sqlite3.c	/^  int iIdxCur;          \/* The VDBE cursor used to access pIdx *\/$/;"	m	struct:WhereLevel	file:	access:public
iJD	sqlite3.c	/^  sqlite3_int64 iJD; \/* The julian day number times 86400000 *\/$/;"	m	struct:DateTime	file:	access:public
iKey	sqlite3.c	/^  unsigned int iKey;             \/* Key value (page number) *\/$/;"	m	struct:PgHdr1	file:	access:public
iLangid	sqlite3.c	/^  int iLangid;                        \/* Language id used with tokenizer *\/$/;"	m	struct:ParseContext	file:	access:public
iLangid	sqlite3.c	/^  int iLangid;                    \/* Language being queried for *\/$/;"	m	struct:Fts3Cursor	file:	access:public
iLangid	sqlite3.c	/^  int iLangid;                    \/* Language id to query *\/$/;"	m	struct:Fts3auxCursor	file:	access:public
iLastCol	sqlite3.c	/^  sqlite3_int64 iLastCol;$/;"	m	struct:PendingList	file:	access:public
iLastDocid	sqlite3.c	/^  sqlite3_int64 iLastDocid;$/;"	m	struct:PendingList	file:	access:public
iLastPos	sqlite3.c	/^  sqlite3_int64 iLastPos;$/;"	m	struct:PendingList	file:	access:public
iLeafEndBlock	sqlite3.c	/^  sqlite3_int64 iLeafEndBlock;    \/* Rowid of final leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:	access:public
iLeftJoin	sqlite3.c	/^  int iLeftJoin;        \/* Memory cell used to implement LEFT OUTER JOIN *\/$/;"	m	struct:WhereLevel	file:	access:public
iLevel	sqlite3.c	/^    int iLevel;           \/* Nesting level *\/$/;"	m	struct:Parse::yColCache	file:	access:public
iLevel	sqlite3.c	/^  int iLevel;                       \/* Level of current node or entry *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
iLevel	sqlite3.c	/^  int iLevel;             \/* Which level of the tree we are on *\/$/;"	m	struct:TreeView	file:	access:public
iLevel	sqlite3.c	/^  u8 iLevel;             \/* 0=entries.  1=leaf node.  2+ for higher *\/$/;"	m	struct:RtreeSearchPoint	file:	access:public
iLevel	sqlite3.h	/^  int iLevel;                       \/* Level of current node or entry *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
iLimit	sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:	access:public
iMaster	sqlite3.c	/^  u32 iMaster;$/;"	m	struct:Mem3Global	file:	access:public
iMaxDocid	sqlite3.c	/^  i64 iMaxDocid;                  \/* Maximum docid to return *\/$/;"	m	struct:Fts3Cursor	file:	access:public
iMaxKey	sqlite3.c	/^  unsigned int iMaxKey;               \/* Largest key seen since xTruncate() *\/$/;"	m	struct:PCache1	file:	access:public
iMem	sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_col	file:	access:public
iMem	sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_func	file:	access:public
iMemory	sqlite3.c	/^  int iMemory;                    \/* Offset of free space in list.aMemory *\/$/;"	m	struct:VdbeSorter	file:	access:public
iMin	sqlite3.c	/^  int iMin;                 \/* Index in a[] of entry with minimum score *\/$/;"	m	struct:Stat4Accum	file:	access:public
iMinDocid	sqlite3.c	/^  i64 iMinDocid;                  \/* Minimum docid to return *\/$/;"	m	struct:Fts3Cursor	file:	access:public
iNext	sqlite3.c	/^    int iNext;                    \/* Next slot in aIndex[] not yet returned *\/$/;"	m	struct:WalIterator::WalSegment	file:	access:public
iNext	sqlite3.c	/^    int iNext;                    \/* Offset within aMemory of next record *\/$/;"	m	union:SorterRecord::__anon14	file:	access:public
iNext	sqlite3.c	/^  Pgno iNext;              \/* Page number of the next source page to copy *\/$/;"	m	struct:sqlite3_backup	file:	access:public
iNextSelectId	sqlite3.c	/^  int iNextSelectId;        \/* Next available select ID for EXPLAIN output *\/$/;"	m	struct:Parse	file:	access:public
iNode	sqlite3.c	/^  i64 iNode;                  \/* The node number *\/$/;"	m	struct:RtreeNode	file:	access:public
iNodeSize	sqlite3.c	/^  int iNodeSize;              \/* Size in bytes of each node in the node table *\/$/;"	m	struct:Rtree	file:	access:public
iOff	sqlite3.c	/^  int iOff;                       \/* Current offset within aInput[] *\/$/;"	m	struct:unicode_cursor	file:	access:public
iOff	sqlite3.c	/^  int iOff;                       \/* Current offset within aNode[] *\/$/;"	m	struct:NodeReader	file:	access:public
iOff	sqlite3.c	/^  int iOff;                       \/* Offset of this term from read positions *\/$/;"	m	struct:TermOffset	file:	access:public
iOffset	sqlite3.c	/^  i64 iOffset;                 \/* Starting offset in main journal *\/$/;"	m	struct:PagerSavepoint	file:	access:public
iOffset	sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:	access:public
iOffset	sqlite3.c	/^  int iOffset;                 \/* current position in pInput *\/$/;"	m	struct:simple_tokenizer_cursor	file:	access:public
iOffset	sqlite3.c	/^  int iOffset;                 \/* current position in zInput *\/$/;"	m	struct:porter_tokenizer_cursor	file:	access:public
iOffset	sqlite3.c	/^  int iOffset;            \/* Byte offset of blob in cursor data *\/$/;"	m	struct:Incrblob	file:	access:public
iOffset	sqlite3.c	/^  sqlite3_int64 iOffset;          \/* Offset from the beginning of the file *\/$/;"	m	struct:FilePoint	file:	access:public
iOp	sqlite3.c	/^  int iOp;                        \/* Instruction number of OP_Function opcode *\/$/;"	m	struct:AuxData	file:	access:public
iOp	sqlite3.c	/^  int iOp;              \/* Instruction number of OP_Function *\/$/;"	m	struct:sqlite3_context	file:	access:public
iOrderByCol	sqlite3.c	/^        u16 iOrderByCol;      \/* For ORDER BY, column number in result set *\/$/;"	m	struct:ExprList::ExprList_item::__anon5::__anon6	file:	access:public
iOverflow	sqlite3.c	/^  u16 iOverflow; \/* Offset to overflow page number.  Zero if no overflow *\/$/;"	m	struct:CellInfo	file:	access:public
iPKey	sqlite3.c	/^  i16 iPKey;           \/* If not negative, use aCol[iPKey] as the primary key *\/$/;"	m	struct:Table	file:	access:public
iPage	sqlite3.c	/^  i16 iPage;                            \/* Index of current page in apPage *\/$/;"	m	struct:BtCursor	file:	access:public
iParent	sqlite3.c	/^  int iParent;            \/* Disable pWC->a[iParent] when this term disabled *\/$/;"	m	struct:WhereTerm	file:	access:public
iPartIdxTab	sqlite3.c	/^  int iPartIdxTab;     \/* Table corresponding to a partial index *\/$/;"	m	struct:Parse	file:	access:public
iPkSortOrder	sqlite3.c	/^  u8 iPkSortOrder;          \/* ASC or DESC for INTEGER PRIMARY KEY *\/$/;"	m	struct:Parse	file:	access:public
iPos	sqlite3.c	/^  int iPos;                       \/* Current 'pos' value *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
iPos	sqlite3.c	/^  int iPos;                       \/* Current position *\/$/;"	m	struct:LcsIterator	file:	access:public
iPos	sqlite3.c	/^  int iPos;                       \/* Index of first token in snippet *\/$/;"	m	struct:SnippetFragment	file:	access:public
iPos	sqlite3.c	/^  int iPos;                       \/* Position just read from pList *\/$/;"	m	struct:TermOffset	file:	access:public
iPosOffset	sqlite3.c	/^  int iPosOffset;                 \/* Tokens count up to end of this phrase *\/$/;"	m	struct:LcsIterator	file:	access:public
iPrev	sqlite3.c	/^  u8 iPrev;                       \/* Previous thread used to flush PMA *\/$/;"	m	struct:VdbeSorter	file:	access:public
iPrevDocid	sqlite3.c	/^  sqlite_int64 iPrevDocid;        \/* Docid of most recently inserted document *\/$/;"	m	struct:Fts3Table	file:	access:public
iPrevId	sqlite3.c	/^  sqlite3_int64 iPrevId;          \/* Previous id read from aDoclist *\/$/;"	m	struct:Fts3Cursor	file:	access:public
iPrevLangid	sqlite3.c	/^  int iPrevLangid;                \/* Langid of recently inserted document *\/$/;"	m	struct:Fts3Table	file:	access:public
iPrior	sqlite3.c	/^  int iPrior;                     \/* Last result returned from the iterator *\/$/;"	m	struct:WalIterator	file:	access:public
iPrn	sqlite3.c	/^  u32 iPrn;                 \/* Pseudo-random number used for sampling *\/$/;"	m	struct:Stat4Accum	file:	access:public
iRangeReg	sqlite3.c	/^  int iRangeReg;       \/* First register in temporary register block *\/$/;"	m	struct:Parse	file:	access:public
iReadOff	sqlite3.c	/^  i64 iReadOff;               \/* Current read offset *\/$/;"	m	struct:PmaReader	file:	access:public
iReg	sqlite3.c	/^    int iReg;             \/* Reg with value of this column. 0 means none. *\/$/;"	m	struct:Parse::yColCache	file:	access:public
iReinsertHeight	sqlite3.c	/^  int iReinsertHeight;        \/* Height of sub-trees Reinsert() has run on *\/$/;"	m	struct:Rtree	file:	access:public
iRightJoinTable	sqlite3.c	/^  i16 iRightJoinTable;   \/* If EP_FromJoin, the right table of the join *\/$/;"	m	struct:Expr	file:	access:public
iRowid	sqlite3.c	/^    i64 iRowid;                     \/* Rowid in main table of the key *\/$/;"	m	union:Stat4Sample::__anon15	file:	access:public
iRowid	sqlite3.c	/^  i64 iRowid;                                 \/* Node or entry ID *\/$/;"	m	struct:RtreeCell	file:	access:public
iRowid	sqlite3.c	/^  int iRowid;                     \/* Current 'rowid' value *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
iRowid	sqlite3.c	/^  sqlite3_int64 iRowid;             \/* Rowid for current entry *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
iRowid	sqlite3.c	/^  sqlite3_int64 iRowid;           \/* Current rowid *\/$/;"	m	struct:Fts3auxCursor	file:	access:public
iRowid	sqlite3.h	/^  sqlite3_int64 iRowid;             \/* Rowid for current entry *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
iSDParm	sqlite3.c	/^  int iSDParm;         \/* A parameter used by the eDest disposal method *\/$/;"	m	struct:SelectDest	file:	access:public
iSavepoint	sqlite3.c	/^  int iSavepoint;           \/* Depth of the SAVEPOINT stack *\/$/;"	m	struct:VTable	file:	access:public
iSdst	sqlite3.c	/^  int iSdst;           \/* Base register where results are written *\/$/;"	m	struct:SelectDest	file:	access:public
iSelectId	sqlite3.c	/^    u8 iSelectId;     \/* If pSelect!=0, the id of the sub-select in EQP *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
iSelectId	sqlite3.c	/^  int iSelectId;            \/* ID of current select for EXPLAIN output *\/$/;"	m	struct:Parse	file:	access:public
iSize	sqlite3.c	/^  i64 iSize;                          \/* Size of this allocation *\/$/;"	m	struct:MemBlockHdr	file:	access:public
iSize	sqlite3.c	/^  int iSize;                      \/* Amount of zBuf[] currently used *\/$/;"	m	struct:JournalFile	file:	access:public
iSize	sqlite3.c	/^  u32 iSize;      \/* Maximum bit index.  Max iSize is 4,294,967,296. *\/$/;"	m	struct:Bitvec	file:	access:public
iSortIdx	sqlite3.c	/^  u8 iSortIdx;          \/* Sorting index number.  0==None *\/$/;"	m	struct:WhereLoop	file:	access:public
iSorterColumn	sqlite3.c	/^    int iSorterColumn;       \/* Column number in the sorting index *\/$/;"	m	struct:AggInfo::AggInfo_col	file:	access:public
iSrcLine	sqlite3.c	/^  int iSrcLine;            \/* Source-code line that generated this opcode *\/$/;"	m	struct:VdbeOp	file:	access:public
iStart	sqlite3.c	/^  int iStart;                     \/* Current 'start' value *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
iStart	sqlite3.c	/^  sqlite3_int64 iStart;           \/* Block number of first allocated block *\/$/;"	m	struct:IncrmergeWriter	file:	access:public
iStartBlock	sqlite3.c	/^  sqlite3_int64 iStartBlock;      \/* Rowid of first leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:	access:public
iStartOff	sqlite3.c	/^  i64 iStartOff;                  \/* Offset to start writing file at *\/$/;"	m	struct:IncrMerger	file:	access:public
iStatement	sqlite3.c	/^  int iStatement;         \/* Statement number (or 0 if has not opened stmt) *\/$/;"	m	struct:Vdbe	file:	access:public
iStrategy	sqlite3.c	/^  int iStrategy;                    \/* Copy of idxNum search parameter *\/$/;"	m	struct:RtreeCursor	file:	access:public
iSub	sqlite3.c	/^  int iSub;                  \/* 0 = main program, 1 = first sub-program etc. *\/$/;"	m	struct:VdbeOpIter	file:	access:public
iSubRec	sqlite3.c	/^  Pgno iSubRec;                \/* Index of first record in sub-journal *\/$/;"	m	struct:PagerSavepoint	file:	access:public
iSum	sqlite3.c	/^  i64 iSum;         \/* Integer sum *\/   $/;"	m	struct:SumCtx	file:	access:public
iSyncPoint	sqlite3.c	/^  sqlite3_int64 iSyncPoint;    \/* Fsync at this offset *\/$/;"	m	struct:WalWriter	file:	access:public
iTab	sqlite3.c	/^  int iTab;            \/* The root page of the table to be locked *\/$/;"	m	struct:TableLock	file:	access:public
iTab	sqlite3.c	/^  u8 iTab;              \/* Position in FROM clause of table for this loop *\/$/;"	m	struct:WhereLoop	file:	access:public
iTabCur	sqlite3.c	/^  int iTabCur;          \/* The VDBE cursor used to access the table *\/$/;"	m	struct:WhereLevel	file:	access:public
iTable	sqlite3.c	/^    int iTable;              \/* Cursor number of the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:	access:public
iTable	sqlite3.c	/^    int iTable;           \/* Table cursor number *\/$/;"	m	struct:Parse::yColCache	file:	access:public
iTable	sqlite3.c	/^  Pgno iTable;          \/* Root page of table *\/$/;"	m	struct:BtLock	file:	access:public
iTable	sqlite3.c	/^  int iTable;            \/* TK_COLUMN: cursor number of table holding column$/;"	m	struct:Expr	file:	access:public
iTail	sqlite3.c	/^  int iTail;                      \/* Next value in trailing position list *\/$/;"	m	struct:SnippetPhrase	file:	access:public
iTerm	sqlite3.c	/^  int iTerm;$/;"	m	struct:TermOffsetCtx	file:	access:public
iTermOffset	sqlite3.c	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:	access:public
iTermOffset	sqlite3.h	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	access:public
iToken	sqlite3.c	/^  int iToken;                     \/* Index of next token to be returned *\/$/;"	m	struct:unicode_cursor	file:	access:public
iToken	sqlite3.c	/^  int iToken;                     \/* Position of token in phrase *\/$/;"	m	struct:Fts3TokenAndCost	file:	access:public
iToken	sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:porter_tokenizer_cursor	file:	access:public
iToken	sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:simple_tokenizer_cursor	file:	access:public
iToken	sqlite3.c	/^  int iToken;$/;"	m	struct:IcuCursor	file:	access:public
iTop	sqlite3.c	/^  int iTop;                 \/* The very beginning of the WHERE loop *\/$/;"	m	struct:WhereInfo	file:	access:public
iVal	sqlite3.c	/^  int iVal;$/;"	m	struct:ValueNewStat4Ctx	file:	access:public
iValue	sqlite3.c	/^    int iValue;            \/* Non-negative integer value if EP_IntValue *\/$/;"	m	union:Expr::__anon3	file:	access:public
iVersion	sqlite3.c	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs	file:	access:public
iVersion	sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods	file:	access:public
iVersion	sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_module	file:	access:public
iVersion	sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
iVersion	sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_tokenizer_module	file:	access:public
iVersion	sqlite3.c	/^  u32 iVersion;                   \/* Wal-index version *\/$/;"	m	struct:WalIndexHdr	file:	access:public
iVersion	sqlite3.h	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs	access:public
iVersion	sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods	access:public
iVersion	sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_module	access:public
iVersion	sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2	access:public
iWriteOff	sqlite3.c	/^  i64 iWriteOff;                  \/* Offset of start of buffer in file *\/$/;"	m	struct:PmaWriter	file:	access:public
iZero	sqlite3.c	/^    int iZero;                    \/* Frame number associated with aPgno[0] *\/$/;"	m	struct:WalIterator::WalSegment	file:	access:public
icuCaseFunc16	sqlite3.c	/^static void icuCaseFunc16(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:	signature:(sqlite3_context *p, int nArg, sqlite3_value **apArg)
icuClose	sqlite3.c	/^static int icuClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:	signature:(sqlite3_tokenizer_cursor *pCursor)
icuCollationColl	sqlite3.c	/^static int icuCollationColl($/;"	f	file:	signature:( void *pCtx, int nLeft, const void *zLeft, int nRight, const void *zRight )
icuCollationDel	sqlite3.c	/^static void icuCollationDel(void *pCtx){$/;"	f	file:	signature:(void *pCtx)
icuCreate	sqlite3.c	/^static int icuCreate($/;"	f	file:	signature:( int argc, const char * const *argv, sqlite3_tokenizer **ppTokenizer )
icuDestroy	sqlite3.c	/^static int icuDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:	signature:(sqlite3_tokenizer *pTokenizer)
icuFunctionError	sqlite3.c	/^static void icuFunctionError($/;"	f	file:	signature:( sqlite3_context *pCtx, const char *zName, UErrorCode e )
icuLikeCompare	sqlite3.c	/^static int icuLikeCompare($/;"	f	file:	signature:( const uint8_t *zPattern, const uint8_t *zString, const UChar32 uEsc )
icuLikeFunc	sqlite3.c	/^static void icuLikeFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
icuLoadCollation	sqlite3.c	/^static void icuLoadCollation($/;"	f	file:	signature:( sqlite3_context *p, int nArg, sqlite3_value **apArg )
icuNext	sqlite3.c	/^static int icuNext($/;"	f	file:	signature:( sqlite3_tokenizer_cursor *pCursor, const char **ppToken, int *pnBytes, int *piStartOffset, int *piEndOffset, int *piPosition )
icuOpen	sqlite3.c	/^static int icuOpen($/;"	f	file:	signature:( sqlite3_tokenizer *pTokenizer, const char *zInput, int nInput, sqlite3_tokenizer_cursor **ppCursor )
icuRegexpDelete	sqlite3.c	/^static void icuRegexpDelete(void *p){$/;"	f	file:	signature:(void *p)
icuRegexpFunc	sqlite3.c	/^static void icuRegexpFunc(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:	signature:(sqlite3_context *p, int nArg, sqlite3_value **apArg)
icuTokenizerModule	sqlite3.c	/^static const sqlite3_tokenizer_module icuTokenizerModule = {$/;"	v	file:
id	sqlite3.c	/^  int id;                    \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
id	sqlite3.c	/^  int id;     \/* The mutex type *\/$/;"	m	struct:sqlite3_debug_mutex	file:	access:public
id	sqlite3.c	/^  sqlite3_int64 id;      \/* Node ID *\/$/;"	m	struct:RtreeSearchPoint	file:	access:public
id	sqlite3.c	/^  u8 id;                     \/* Id of this connection with its winShmNode *\/$/;"	m	struct:winShm	file:	access:public
id	sqlite3.c	/^  u8 id;                     \/* Id of this connection within its unixShmNode *\/$/;"	m	struct:unixShm	file:	access:public
id	sqlite3.c	/^  unsigned id;             \/* The thread identifier *\/$/;"	m	struct:SQLiteThread	file:	access:public
identLength	sqlite3.c	/^static int identLength(const char *z){$/;"	f	file:	signature:(const char *z)
identPut	sqlite3.c	/^static void identPut(char *z, int *pIdx, char *zSignedIdent){$/;"	f	file:	signature:(char *z, int *pIdx, char *zSignedIdent)
idx	sqlite3.c	/^    int idx;          \/* Index in some Table.aCol[] of a column named zName *\/$/;"	m	struct:IdList::IdList_item	file:	access:public
idxHash	sqlite3.c	/^  Hash idxHash;        \/* All (named) indices indexed by name *\/$/;"	m	struct:Schema	file:	access:public
idxNum	sqlite3.c	/^      int idxNum;            \/* Index number *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:	access:public
idxNum	sqlite3.c	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info	file:	access:public
idxNum	sqlite3.h	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info	access:public
idxStr	sqlite3.c	/^      char *idxStr;          \/* Index identifier string *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:	access:public
idxStr	sqlite3.c	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info	file:	access:public
idxStr	sqlite3.h	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info	access:public
idxType	sqlite3.c	/^  unsigned idxType:2;      \/* 1==UNIQUE, 2==PRIMARY KEY, 0==CREATE INDEX *\/$/;"	m	struct:Index	file:	access:public
idxaff	sqlite3.c	/^  char idxaff;               \/* Must match this affinity, if zCollName!=NULL *\/$/;"	m	struct:WhereScan	file:	access:public
in	sqlite3.c	/^    } in;                 \/* Used when pWLoop->wsFlags&WHERE_IN_ABLE *\/$/;"	m	union:WhereLevel::__anon16	typeref:struct:WhereLevel::__anon16::__anon17	file:	access:public
inNormalWrite	sqlite3.c	/^  unsigned char inNormalWrite;   \/* True if in a normal write operation *\/$/;"	m	struct:unixFile	file:	access:public
inProgress	sqlite3.c	/^  int inProgress;                   \/* True while initialization in progress *\/$/;"	m	struct:Sqlite3Config	file:	access:public
inTrans	sqlite3.c	/^  u8 inTrans;        \/* TRANS_NONE, TRANS_READ or TRANS_WRITE *\/$/;"	m	struct:Btree	file:	access:public
inTransaction	sqlite3.c	/^  int inTransaction;     \/* True after xBegin but before xCommit\/xRollback *\/$/;"	m	struct:Fts3Table	file:	access:public
inTransaction	sqlite3.c	/^  u8 inTransaction;     \/* Transaction state *\/$/;"	m	struct:BtShared	file:	access:public
inVtabMethod	sqlite3.c	/^  bft inVtabMethod:2;     \/* See comments above *\/$/;"	m	struct:Vdbe	file:	access:public
incrAggDepth	sqlite3.c	/^static int incrAggDepth(Walker *pWalker, Expr *pExpr){$/;"	f	file:	signature:(Walker *pWalker, Expr *pExpr)
incrAggFunctionDepth	sqlite3.c	/^static void incrAggFunctionDepth(Expr *pExpr, int N){$/;"	f	file:	signature:(Expr *pExpr, int N)
incrPhraseTokenNext	sqlite3.c	/^static int incrPhraseTokenNext($/;"	f	file:	signature:( Fts3Table *pTab, Fts3Phrase *pPhrase, int iToken, TokenDoclist *p, u8 *pbEof )
incrVacuum	sqlite3.c	/^  u8 incrVacuum;        \/* True if incr-vacuum is enabled *\/$/;"	m	struct:BtShared	file:	access:public
incrVacuumStep	sqlite3.c	/^static int incrVacuumStep(BtShared *pBt, Pgno nFin, Pgno iLastPg, int bCommit){$/;"	f	file:	signature:(BtShared *pBt, Pgno nFin, Pgno iLastPg, int bCommit)
indexMightHelpWithOrderBy	sqlite3.c	/^static int indexMightHelpWithOrderBy($/;"	f	file:	signature:( WhereLoopBuilder *pBuilder, Index *pIndex, int iCursor )
indexable	sqlite3.c	/^  Bitmask indexable;       \/* Bitmask of all indexable tables in the clause *\/$/;"	m	struct:WhereOrInfo	file:	access:public
info	sqlite3.c	/^  CellInfo info;            \/* A parse of the cell we are pointing at *\/$/;"	m	struct:BtCursor	file:	access:public
init	sqlite3.c	/^  } init;$/;"	m	struct:sqlite3	typeref:struct:sqlite3::sqlite3InitInfo	file:	access:public
initAvgEq	sqlite3.c	/^static void initAvgEq(Index *pIdx){$/;"	f	file:	signature:(Index *pIdx)
initMaskSet	sqlite3.c	113887;"	d	file:
ino	sqlite3.c	/^  ino_t ino;                  \/* Inode number *\/$/;"	m	struct:unixFileId	file:	access:public
inodeList	sqlite3.c	/^static unixInodeInfo *inodeList = 0;$/;"	v	file:
insertBinaryOperator	sqlite3.c	/^static void insertBinaryOperator($/;"	f	file:	signature:( Fts3Expr **ppHead, Fts3Expr *pPrev, Fts3Expr *pNew )
insertCell	sqlite3.c	/^static void insertCell($/;"	f	file:	signature:( MemPage *pPage, int i, u8 *pCell, int sz, u8 *pTemp, Pgno iChild, int *pRC )
insertElement	sqlite3.c	/^static void insertElement($/;"	f	file:	signature:( Hash *pH, struct _ht *pEntry, HashElem *pNew )
instrFunc	sqlite3.c	/^static void instrFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
intKey	sqlite3.c	/^  u8 intKey;           \/* True if table b-trees.  False for index b-trees *\/$/;"	m	struct:MemPage	file:	access:public
intKeyLeaf	sqlite3.c	/^  u8 intKeyLeaf;       \/* True if the leaf of an intKey table *\/$/;"	m	struct:MemPage	file:	access:public
intTestFunc	sqlite3.c	/^static void intTestFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
interruptx	sqlite3.c	/^  void  (*interruptx)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
invalidateAllOverflowCache	sqlite3.c	/^static void invalidateAllOverflowCache(BtShared *pBt){$/;"	f	file:	signature:(BtShared *pBt)
invalidateCachedKeyInfo	sqlite3.c	/^static void invalidateCachedKeyInfo(sqlite3 *db){$/;"	f	file:	signature:(sqlite3 *db)
invalidateIncrblobCursors	sqlite3.c	/^static void invalidateIncrblobCursors($/;"	f	file:	signature:( Btree *pBtree, i64 iRow, int isClearTable )
invalidateIncrblobCursors	sqlite3.c	52695;"	d	file:
invalidateOverflowCache	sqlite3.c	52648;"	d	file:
invalidateTempStorage	sqlite3.c	/^static int invalidateTempStorage(Parse *pParse){$/;"	f	file:	signature:(Parse *pParse)
invokeValueDestructor	sqlite3.c	/^static int invokeValueDestructor($/;"	f	file:	signature:( const void *p, void (*xDel)(void*), sqlite3_context *pCtx )
isAttached	sqlite3.c	/^  int isAttached;          \/* True once backup has been registered with pager *\/$/;"	m	struct:sqlite3_backup	file:	access:public
isCandidateForInOpt	sqlite3.c	/^static int isCandidateForInOpt(Select *p){$/;"	f	file:	signature:(Select *p)
isConsonant	sqlite3.c	/^static int isConsonant(const char *z){$/;"	f	file:	signature:(const char *z)
isCorrelated	sqlite3.c	/^    unsigned isCorrelated :1;  \/* True if sub-query is correlated *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
isCovering	sqlite3.c	/^  unsigned isCovering:1;   \/* True if this is a covering index *\/$/;"	m	struct:Index	file:	access:public
isDate	sqlite3.c	/^static int isDate($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv, DateTime *p )
isDeferred	sqlite3.c	/^  u8 isDeferred;       \/* True if constraint checking is deferred till COMMIT *\/$/;"	m	struct:FKey	file:	access:public
isDelim	sqlite3.c	138266;"	d	file:
isDirty	sqlite3.c	/^  int isDirty;                \/* True if the node needs to be written to disk *\/$/;"	m	struct:RtreeNode	file:	access:public
isDistinctRedundant	sqlite3.c	/^static int isDistinctRedundant($/;"	f	file:	signature:( Parse *pParse, SrcList *pTabList, WhereClause *pWC, ExprList *pDistinct )
isEof	sqlite3.c	/^  int isEof;                      \/* True if cursor is at EOF *\/$/;"	m	struct:Fts3auxCursor	file:	access:public
isEof	sqlite3.c	/^  u8 isEof;                       \/* True if at End Of Results *\/$/;"	m	struct:Fts3Cursor	file:	access:public
isEphemeral	sqlite3.c	/^  Bool isEphemeral:1;   \/* True for an ephemeral table *\/$/;"	m	struct:VdbeCursor	file:	access:public
isError	sqlite3.c	/^  int isError;          \/* Error code returned by the function. *\/$/;"	m	struct:sqlite3_context	file:	access:public
isFatalError	sqlite3.c	/^static int isFatalError(int rc){$/;"	f	file:	signature:(int rc)
isInit	sqlite3.c	/^  int isInit;                       \/* True after initialization has finished *\/$/;"	m	struct:Sqlite3Config	file:	access:public
isInit	sqlite3.c	/^  int isInit;                    \/* True if initialized *\/$/;"	m	struct:PCacheGlobal	file:	access:public
isInit	sqlite3.c	/^  u8 isInit;                      \/* 1 when initialized *\/$/;"	m	struct:WalIndexHdr	file:	access:public
isInit	sqlite3.c	/^  u8 isInit;           \/* True if previously initialized. MUST BE FIRST! *\/$/;"	m	struct:MemPage	file:	access:public
isInit	sqlite3.c	/^  unsigned char isInit;          \/* True if initialized *\/$/;"	m	struct:sqlite3PrngType	file:	access:public
isInterrupted	sqlite3.c	/^    volatile int isInterrupted; \/* True if sqlite3_interrupt has been called *\/$/;"	m	union:sqlite3::__anon2	file:	access:public
isLikeOrGlob	sqlite3.c	/^static int isLikeOrGlob($/;"	f	file:	signature:( Parse *pParse, Expr *pExpr, Expr **ppPrefix, int *pisComplete, int *pnoCase )
isLookaside	sqlite3.c	/^static int isLookaside(sqlite3 *db, void *p){$/;"	f	file:	signature:(sqlite3 *db, void *p)
isLookaside	sqlite3.c	20360;"	d	file:
isMallocInit	sqlite3.c	/^  int isMallocInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:	access:public
isMatchOfColumn	sqlite3.c	/^static int isMatchOfColumn($/;"	f	file:	signature:( Expr *pExpr )
isMatchinfoNeeded	sqlite3.c	/^  int isMatchinfoNeeded;          \/* True when aMatchinfo[] needs filling in *\/$/;"	m	struct:Fts3Cursor	file:	access:public
isMultiWrite	sqlite3.c	/^  u8 isMultiWrite;     \/* True if statement may modify\/insert multiple rows *\/$/;"	m	struct:Parse	file:	access:public
isMutexInit	sqlite3.c	/^  int isMutexInit;                  \/* True after mutexes are initialized *\/$/;"	m	struct:Sqlite3Config	file:	access:public
isNot	sqlite3.c	/^  int isNot;                          \/* True if getNextNode() sees a unary - *\/$/;"	m	struct:ParseContext	file:	access:public
isOpen	sqlite3.c	41676;"	d	file:
isOrdered	sqlite3.c	/^      i8 isOrdered;          \/* True if satisfies ORDER BY *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:	access:public
isOrdered	sqlite3.c	/^  Bool isOrdered:1;     \/* True if the underlying table is BTREE_UNORDERED *\/$/;"	m	struct:VdbeCursor	file:	access:public
isOrdered	sqlite3.c	/^  i8 isOrdered;         \/* No. of ORDER BY terms satisfied. -1 for unknown *\/$/;"	m	struct:WherePath	file:	access:public
isPCacheInit	sqlite3.c	/^  int isPCacheInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:	access:public
isPSample	sqlite3.c	/^  u8 isPSample;                   \/* True if a periodic sample *\/$/;"	m	struct:Stat4Sample	file:	access:public
isPinned	sqlite3.c	/^  u8 isPinned;                   \/* Page in use, not on the LRU list *\/$/;"	m	struct:PgHdr1	file:	access:public
isPrefix	sqlite3.c	/^  int isPrefix;                   \/* True if token ends with a "*" character *\/$/;"	m	struct:Fts3PhraseToken	file:	access:public
isPrepareV2	sqlite3.c	/^  bft isPrepareV2:1;      \/* True if prepared with prepare_v2() *\/$/;"	m	struct:Vdbe	file:	access:public
isReadonly	sqlite3.c	/^  u8 isReadonly;             \/* True if read-only *\/$/;"	m	struct:unixShmNode	file:	access:public
isRecursive	sqlite3.c	/^    unsigned isRecursive :1;   \/* True for recursive reference in WITH *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
isRequireSeek	sqlite3.c	/^  u8 isRequireSeek;               \/* True if must seek pStmt to %_content row *\/$/;"	m	struct:Fts3Cursor	file:	access:public
isResized	sqlite3.c	/^  unsigned isResized:1;    \/* True if resizeIndexObject() has been called *\/$/;"	m	struct:Index	file:	access:public
isSimpleCount	sqlite3.c	/^static Table *isSimpleCount(Select *p, AggInfo *pAggInfo){$/;"	f	file:	signature:(Select *p, AggInfo *pAggInfo)
isSorter	sqlite3.c	69123;"	d	file:
isSystemTable	sqlite3.c	/^static int isSystemTable(Parse *pParse, const char *zName){$/;"	f	file:	signature:(Parse *pParse, const char *zName)
isTable	sqlite3.c	/^  Bool isTable:1;       \/* True if a table requiring integer keys *\/$/;"	m	struct:VdbeCursor	file:	access:public
isTnct	sqlite3.c	/^  u8 isTnct;      \/* True if the DISTINCT keyword is present *\/$/;"	m	struct:DistinctCtx	file:	access:public
isTransactionSavepoint	sqlite3.c	/^  u8 isTransactionSavepoint;    \/* True if the outermost savepoint is a TS *\/$/;"	m	struct:sqlite3	file:	access:public
isView	sqlite3.c	111077;"	d	file:
isView	sqlite3.c	111078;"	d	file:
isView	sqlite3.c	111581;"	d	file:
isView	sqlite3.c	93617;"	d	file:
isView	sqlite3.c	93618;"	d	file:
isView	sqlite3.c	93896;"	d	file:
isView	sqlite3.c	97856;"	d	file:
isView	sqlite3.c	97857;"	d	file:
isView	sqlite3.c	98359;"	d	file:
isVowel	sqlite3.c	/^static int isVowel(const char *z){$/;"	f	file:	signature:(const char *z)
isVowel	sqlite3.c	/^static int isVowel(const char*);$/;"	p	file:	signature:(const char*)
isWriteLock	sqlite3.c	/^  u8 isWriteLock;      \/* True for write lock.  False for a read lock *\/$/;"	m	struct:TableLock	file:	access:public
ix	sqlite3.c	/^  int ix[BMS];                  \/* Cursor assigned to each bit *\/$/;"	m	struct:WhereMaskSet	file:	access:public
j	sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:	access:public
jfd	sqlite3.c	/^  sqlite3_file *jfd;          \/* File descriptor for main journal *\/$/;"	m	struct:Pager	file:	access:public
jointype	sqlite3.c	/^    u8 jointype;      \/* Type of join between this able and the previous *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
journalHdr	sqlite3.c	/^  i64 journalHdr;             \/* Byte offset to previous journal header *\/$/;"	m	struct:Pager	file:	access:public
journalHdrOffset	sqlite3.c	/^static i64 journalHdrOffset(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
journalMode	sqlite3.c	/^  u8 journalMode;             \/* One of the PAGER_JOURNALMODE_* values *\/$/;"	m	struct:Pager	file:	access:public
journalOff	sqlite3.c	/^  i64 journalOff;             \/* Current write offset in the journal file *\/$/;"	m	struct:Pager	file:	access:public
journalSizeLimit	sqlite3.c	/^  i64 journalSizeLimit;       \/* Size limit for persistent journal files *\/$/;"	m	struct:Pager	file:	access:public
jrnlBufferSize	sqlite3.c	/^static int jrnlBufferSize(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
jrnlClose	sqlite3.c	/^static int jrnlClose(sqlite3_file *pJfd){$/;"	f	file:	signature:(sqlite3_file *pJfd)
jrnlFileSize	sqlite3.c	/^static int jrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:	signature:(sqlite3_file *pJfd, sqlite_int64 *pSize)
jrnlRead	sqlite3.c	/^static int jrnlRead($/;"	f	file:	signature:( sqlite3_file *pJfd, void *zBuf, int iAmt, sqlite_int64 iOfst )
jrnlSync	sqlite3.c	/^static int jrnlSync(sqlite3_file *pJfd, int flags){$/;"	f	file:	signature:(sqlite3_file *pJfd, int flags)
jrnlTruncate	sqlite3.c	/^static int jrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:	signature:(sqlite3_file *pJfd, sqlite_int64 size)
jrnlWrite	sqlite3.c	/^static int jrnlWrite($/;"	f	file:	signature:( sqlite3_file *pJfd, const void *zBuf, int iAmt, sqlite_int64 iOfst )
juliandayFunc	sqlite3.c	/^static void juliandayFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
k	sqlite3.c	/^  int k;                     \/* Resume scanning at this->pWC->a[this->k] *\/$/;"	m	struct:WhereScan	file:	access:public
key	sqlite3.c	/^  Blob key;                       \/* Last key written to the current block *\/$/;"	m	struct:NodeWriter	file:	access:public
key	sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:	access:public
keyClass	sqlite3.c	/^  char keyClass;          \/* HASH_INT, _POINTER, _STRING, _BINARY *\/$/;"	m	struct:Fts3Hash	file:	access:public
keyConf	sqlite3.c	/^  u8 keyConf;          \/* What to do in case of uniqueness conflict on iPKey *\/$/;"	m	struct:Table	file:	access:public
keyInfoFromExprList	sqlite3.c	/^static KeyInfo *keyInfoFromExprList($/;"	f	file:	signature:( Parse *pParse, ExprList *pList, int iStart, int nExtra )
keyInfoFromExprList	sqlite3.c	/^static KeyInfo *keyInfoFromExprList($/;"	p	file:	signature:( Parse *pParse, ExprList *pList, int iStart, int nExtra )
keywordCode	sqlite3.c	/^static int keywordCode(const char *z, int n){$/;"	f	file:	signature:(const char *z, int n)
labelBkOut	sqlite3.c	/^  int labelBkOut;       \/* Start label for the block-output subroutine *\/$/;"	m	struct:SortCtx	file:	access:public
langidFromSelect	sqlite3.c	/^static int langidFromSelect(Fts3Table *p, sqlite3_stmt *pSelect){$/;"	f	file:	signature:(Fts3Table *p, sqlite3_stmt *pSelect)
lastErrno	sqlite3.c	/^  DWORD lastErrno;           \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winShmNode	file:	access:public
lastErrno	sqlite3.c	/^  DWORD lastErrno;        \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winFile	file:	access:public
lastErrno	sqlite3.c	/^  int lastErrno;                      \/* The unix errno from last I\/O error *\/$/;"	m	struct:unixFile	file:	access:public
lastRowid	sqlite3.c	/^  i64 lastRowid;                \/* ROWID of most recent insert (see above) *\/$/;"	m	struct:sqlite3	file:	access:public
lastRowid	sqlite3.c	/^  i64 lastRowid;          \/* Last insert rowid (sqlite3.lastRowid) *\/$/;"	m	struct:VdbeFrame	file:	access:public
last_insert_rowid	sqlite3.c	/^  sqlite_int64  (*last_insert_rowid)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
last_insert_rowid	sqlite3.c	/^static void last_insert_rowid($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **NotUsed2 )
leaf	sqlite3.c	/^  u8 leaf;             \/* True if a leaf page *\/$/;"	m	struct:MemPage	file:	access:public
leaveMutex	sqlite3.c	/^static void leaveMutex(void){$/;"	f	file:	signature:(void)
leftColumn	sqlite3.c	/^    int leftColumn;         \/* Column number of X in "X <op> <expr>" *\/$/;"	m	union:WhereTerm::__anon21	file:	access:public
leftCursor	sqlite3.c	/^  int leftCursor;         \/* Cursor number of X in "X <op> <expr>" *\/$/;"	m	struct:WhereTerm	file:	access:public
length	sqlite3.c	/^  unsigned long long length;        \/* nbr of bytes to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:	access:public
lengthFunc	sqlite3.c	/^static void lengthFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
lhs	sqlite3.c	/^  YYCODETYPE lhs;         \/* Symbol on the left-hand side of the rule *\/$/;"	m	struct:__anon24	file:	access:public
libversion	sqlite3.c	/^  const char * (*libversion)(void);$/;"	m	struct:sqlite3_api_routines	file:	access:public
libversion_number	sqlite3.c	/^  int  (*libversion_number)(void);$/;"	m	struct:sqlite3_api_routines	file:	access:public
likeFunc	sqlite3.c	/^static void likeFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
likeInfoAlt	sqlite3.c	/^static const struct compareInfo likeInfoAlt = { '%', '_',   0, 0 };$/;"	v	typeref:struct:compareInfo	file:
likeInfoNorm	sqlite3.c	/^static const struct compareInfo likeInfoNorm = { '%', '_',   0, 1 };$/;"	v	typeref:struct:compareInfo	file:
likely	sqlite3.c	8154;"	d	file:
limit	sqlite3.c	/^  int (*limit)(sqlite3*,int,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
list	sqlite3.c	/^    } list;$/;"	m	union:Mem3Block::__anon10	typeref:struct:Mem3Block::__anon10::__anon12	file:	access:public
list	sqlite3.c	/^  SorterList list;                \/* List for thread to write to a PMA *\/$/;"	m	struct:SortSubtask	file:	access:public
list	sqlite3.c	/^  SorterList list;                \/* List of in-memory records *\/$/;"	m	struct:VdbeSorter	file:	access:public
loadAnalysis	sqlite3.c	/^static void loadAnalysis(Parse *pParse, int iDb){$/;"	f	file:	signature:(Parse *pParse, int iDb)
loadExt	sqlite3.c	/^static void loadExt(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:	signature:(sqlite3_context *context, int argc, sqlite3_value **argv)
loadStat4	sqlite3.c	/^static int loadStat4(sqlite3 *db, const char *zDb){$/;"	f	file:	signature:(sqlite3 *db, const char *zDb)
loadStatTbl	sqlite3.c	/^static int loadStatTbl($/;"	f	file:	signature:( sqlite3 *db, int bStat3, const char *zSql1, const char *zSql2, const char *zDb )
load_extension	sqlite3.c	/^  int (*load_extension)(sqlite3*,const char*,const char*,char**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
local	sqlite3.c	/^  winceLock local;        \/* Locks obtained by this instance of winFile *\/$/;"	m	struct:winFile	file:	access:public
local_ioerr	sqlite3.c	/^static void local_ioerr(){$/;"	f	file:
localtime	sqlite3.c	/^struct tm *__cdecl localtime(const time_t *t)$/;"	f	signature:(const time_t *t)
localtimeOffset	sqlite3.c	/^static sqlite3_int64 localtimeOffset($/;"	f	file:	signature:( DateTime *p, sqlite3_context *pCtx, int *pRc )
lock	sqlite3.c	/^  BtLock lock;       \/* Object used to lock page 1 *\/$/;"	m	struct:Btree	file:	access:public
lockBtree	sqlite3.c	/^static int lockBtree(BtShared *pBt){$/;"	f	file:	signature:(BtShared *pBt)
lockBtreeMutex	sqlite3.c	/^static void lockBtreeMutex(Btree *p){$/;"	f	file:	signature:(Btree *p)
lockError	sqlite3.c	/^  u8 lockError;              \/* True if a locking error has occurred *\/$/;"	m	struct:Wal	file:	access:public
lockMask	sqlite3.c	/^  yDbMask lockMask;       \/* Subset of btreeMask that requires a lock *\/$/;"	m	struct:Vdbe	file:	access:public
lockProxy	sqlite3.c	/^  unixFile *lockProxy;         \/* Open proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:	access:public
lockProxyPath	sqlite3.c	/^  char *lockProxyPath;         \/* Name of the proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:	access:public
lockTrace	sqlite3.c	/^static int lockTrace(int fd, int op, struct flock *p){$/;"	f	file:	signature:(int fd, int op, struct flock *p)
locked	sqlite3.c	/^  u8 locked;         \/* True if db currently has pBt locked *\/$/;"	m	struct:Btree	file:	access:public
lockingContext	sqlite3.c	/^  void *lockingContext;               \/* Locking style specific state *\/$/;"	m	struct:unixFile	file:	access:public
locktype	sqlite3.c	/^  u8 locktype;            \/* Type of lock currently held on this file *\/$/;"	m	struct:winFile	file:	access:public
log	sqlite3.c	/^  void (*log)(int,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:	access:public
logBadConnection	sqlite3.c	/^static void logBadConnection(const char *zType){$/;"	f	file:	signature:(const char *zType)
lookaside	sqlite3.c	/^  Lookaside lookaside;          \/* Lookaside malloc configuration *\/$/;"	m	struct:sqlite3	file:	access:public
lookupName	sqlite3.c	/^static int lookupName($/;"	f	file:	signature:( Parse *pParse, const char *zDb, const char *zTab, const char *zCol, NameContext *pNC, Expr *pExpr )
lowerFunc	sqlite3.c	/^static void lowerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:	signature:(sqlite3_context *context, int argc, sqlite3_value **argv)
lru	sqlite3.c	/^    int lru;              \/* Least recently used entry has the smallest value *\/$/;"	m	struct:Parse::yColCache	file:	access:public
lseek	sqlite3.c	25114;"	d	file:
m	sqlite3.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:	access:public
m	sqlite3.c	/^  sqlite3_mem_methods m;            \/* Low-level memory allocation interface *\/$/;"	m	struct:Sqlite3Config	file:	access:public
mPragFlag	sqlite3.c	/^  u8 mPragFlag;             \/* Zero or more PragFlag_XXX values *\/$/;"	m	struct:sPragmaNames	file:	access:public
m_eq_1	sqlite3.c	/^static int m_eq_1(const char *z){$/;"	f	file:	signature:(const char *z)
m_gt_0	sqlite3.c	/^static int m_gt_0(const char *z){$/;"	f	file:	signature:(const char *z)
m_gt_1	sqlite3.c	/^static int m_gt_1(const char *z){$/;"	f	file:	signature:(const char *z)
magic	sqlite3.c	/^  u32 magic;                    \/* Magic number for detect library misuse *\/$/;"	m	struct:sqlite3	file:	access:public
magic	sqlite3.c	/^  u32 magic;                  \/* Always RTREE_GEOMETRY_MAGIC *\/$/;"	m	struct:RtreeMatchArg	file:	access:public
magic	sqlite3.c	/^  u32 magic;              \/* Magic number for sanity checking *\/$/;"	m	struct:Vdbe	file:	access:public
magic1	sqlite3.c	/^  u32 magic1;   \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:	access:public
magic2	sqlite3.c	/^  u32 magic2;   \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:	access:public
main	client.c	/^int main()$/;"	f
main	loaddatabase.c	/^int main(int argc, const char **argv)$/;"	f	signature:(int argc, const char **argv)
main	server.c	/^int main(int argc, const char **argv)$/;"	f	signature:(int argc, const char **argv)
major	sqlite3.c	/^  YYCODETYPE major;      \/* The major token value.  This is the code$/;"	m	struct:yyStackEntry	file:	access:public
malloc	sqlite3.c	/^  void *(*malloc)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
malloc64	sqlite3.c	/^  void *(*malloc64)(sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:	access:public
mallocFailed	sqlite3.c	/^  int mallocFailed; \/* A memory allocation error has occurred *\/$/;"	m	struct:IntegrityCk	file:	access:public
mallocFailed	sqlite3.c	/^  u8 mallocFailed;              \/* True if we have seen a malloc failure *\/$/;"	m	struct:sqlite3	file:	access:public
mallocWithAlarm	sqlite3.c	/^static int mallocWithAlarm(int n, void **pp){$/;"	f	file:	signature:(int n, void **pp)
mask	sqlite3.c	/^  struct {int value; int mask;} yy429;$/;"	m	struct:__anon22::__anon23	file:	access:public
maskLoop	sqlite3.c	/^  Bitmask maskLoop;     \/* Bitmask of all WhereLoop objects in this path *\/$/;"	m	struct:WherePath	file:	access:public
maskPage	sqlite3.c	/^  u16 maskPage;        \/* Mask for page offset *\/$/;"	m	struct:MemPage	file:	access:public
maskSelf	sqlite3.c	/^  Bitmask maskSelf;     \/* Bitmask identifying table iTab *\/$/;"	m	struct:WhereLoop	file:	access:public
matchAll	sqlite3.c	/^  u8 matchAll;$/;"	m	struct:compareInfo	file:	access:public
matchOne	sqlite3.c	/^  u8 matchOne;$/;"	m	struct:compareInfo	file:	access:public
matchQuality	sqlite3.c	/^static int matchQuality($/;"	f	file:	signature:( FuncDef *p, int nArg, u8 enc )
matchSet	sqlite3.c	/^  u8 matchSet;$/;"	m	struct:compareInfo	file:	access:public
max1bytePayload	sqlite3.c	/^  u8 max1bytePayload;   \/* Maximum first byte of cell for a 1-byte payload *\/$/;"	m	struct:BtShared	file:	access:public
max1bytePayload	sqlite3.c	/^  u8 max1bytePayload;  \/* min(maxLocal,127) *\/$/;"	m	struct:MemPage	file:	access:public
maxCount	sqlite3.c	/^  u32 maxCount;       \/* Maximum instantaneous currentCount *\/$/;"	m	struct:Mem5Global	file:	access:public
maxLeaf	sqlite3.c	/^  u16 maxLeaf;          \/* Maximum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:	access:public
maxLocal	sqlite3.c	/^  u16 maxLocal;         \/* Maximum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:	access:public
maxLocal	sqlite3.c	/^  u16 maxLocal;        \/* Copy of BtShared.maxLocal or BtShared.maxLeaf *\/$/;"	m	struct:MemPage	file:	access:public
maxOut	sqlite3.c	/^  u32 maxOut;         \/* Maximum instantaneous currentOut *\/$/;"	m	struct:Mem5Global	file:	access:public
maxRequest	sqlite3.c	/^  u32 maxRequest;     \/* Largest allocation (exclusive of internal frag) *\/$/;"	m	struct:Mem5Global	file:	access:public
mayAbort	sqlite3.c	/^  u8 mayAbort;         \/* True if statement may throw an ABORT exception *\/$/;"	m	struct:Parse	file:	access:public
measureAllocationSize	sqlite3.c	/^static SQLITE_NOINLINE void measureAllocationSize(sqlite3 *db, void *p){$/;"	f	file:	signature:(sqlite3 *db, void *p)
mem	sqlite3.c	/^} mem;$/;"	v	typeref:struct:__anon9	file:
mem0	sqlite3.c	/^} mem0 = { 0, 0, 0, 0, 0, 0, 0, 0 };$/;"	v	typeref:struct:Mem0Global	file:
mem0	sqlite3.c	19995;"	d	file:
mem3	sqlite3.c	/^} mem3 = { 97535575 };$/;"	v	typeref:struct:Mem3Global	file:
mem3	sqlite3.c	17409;"	d	file:
mem5	sqlite3.c	/^} mem5;$/;"	v	typeref:struct:Mem5Global	file:
mem5	sqlite3.c	18092;"	d	file:
memAboutToChange	sqlite3.c	68989;"	d	file:
memAboutToChange	sqlite3.c	68991;"	d	file:
memDb	sqlite3.c	/^  u8 memDb;                   \/* True to inhibit all file I\/O *\/$/;"	m	struct:Pager	file:	access:public
memIsValid	sqlite3.c	14263;"	d	file:
memTracePrint	sqlite3.c	/^static void memTracePrint(Mem *p){$/;"	f	file:	signature:(Mem *p)
memjrnlClose	sqlite3.c	/^static int memjrnlClose(sqlite3_file *pJfd){$/;"	f	file:	signature:(sqlite3_file *pJfd)
memjrnlFileSize	sqlite3.c	/^static int memjrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:	signature:(sqlite3_file *pJfd, sqlite_int64 *pSize)
memjrnlRead	sqlite3.c	/^static int memjrnlRead($/;"	f	file:	signature:( sqlite3_file *pJfd, void *zBuf, int iAmt, sqlite_int64 iOfst )
memjrnlSync	sqlite3.c	/^static int memjrnlSync(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:	signature:(sqlite3_file *NotUsed, int NotUsed2)
memjrnlTruncate	sqlite3.c	/^static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:	signature:(sqlite3_file *pJfd, sqlite_int64 size)
memjrnlWrite	sqlite3.c	/^static int memjrnlWrite($/;"	f	file:	signature:( sqlite3_file *pJfd, const void *zBuf, int iAmt, sqlite_int64 iOfst )
memory_highwater	sqlite3.c	/^  sqlite3_int64 (*memory_highwater)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
memory_used	sqlite3.c	/^  sqlite3_int64 (*memory_used)(void);$/;"	m	struct:sqlite3_api_routines	file:	access:public
memsys3Checkout	sqlite3.c	/^static void *memsys3Checkout(u32 i, u32 nBlock){$/;"	f	file:	signature:(u32 i, u32 nBlock)
memsys3Enter	sqlite3.c	/^static void memsys3Enter(void){$/;"	f	file:	signature:(void)
memsys3Free	sqlite3.c	/^static void memsys3Free(void *pPrior){$/;"	f	file:	signature:(void *pPrior)
memsys3FreeUnsafe	sqlite3.c	/^static void memsys3FreeUnsafe(void *pOld){$/;"	f	file:	signature:(void *pOld)
memsys3FromMaster	sqlite3.c	/^static void *memsys3FromMaster(u32 nBlock){$/;"	f	file:	signature:(u32 nBlock)
memsys3Init	sqlite3.c	/^static int memsys3Init(void *NotUsed){$/;"	f	file:	signature:(void *NotUsed)
memsys3Leave	sqlite3.c	/^static void memsys3Leave(void){$/;"	f	file:	signature:(void)
memsys3Link	sqlite3.c	/^static void memsys3Link(u32 i){$/;"	f	file:	signature:(u32 i)
memsys3LinkIntoList	sqlite3.c	/^static void memsys3LinkIntoList(u32 i, u32 *pRoot){$/;"	f	file:	signature:(u32 i, u32 *pRoot)
memsys3Malloc	sqlite3.c	/^static void *memsys3Malloc(int nBytes){$/;"	f	file:	signature:(int nBytes)
memsys3MallocUnsafe	sqlite3.c	/^static void *memsys3MallocUnsafe(int nByte){$/;"	f	file:	signature:(int nByte)
memsys3Merge	sqlite3.c	/^static void memsys3Merge(u32 *pRoot){$/;"	f	file:	signature:(u32 *pRoot)
memsys3OutOfMemory	sqlite3.c	/^static void memsys3OutOfMemory(int nByte){$/;"	f	file:	signature:(int nByte)
memsys3Realloc	sqlite3.c	/^static void *memsys3Realloc(void *pPrior, int nBytes){$/;"	f	file:	signature:(void *pPrior, int nBytes)
memsys3Roundup	sqlite3.c	/^static int memsys3Roundup(int n){$/;"	f	file:	signature:(int n)
memsys3Shutdown	sqlite3.c	/^static void memsys3Shutdown(void *NotUsed){$/;"	f	file:	signature:(void *NotUsed)
memsys3Size	sqlite3.c	/^static int memsys3Size(void *p){$/;"	f	file:	signature:(void *p)
memsys3Unlink	sqlite3.c	/^static void memsys3Unlink(u32 i){$/;"	f	file:	signature:(u32 i)
memsys3UnlinkFromList	sqlite3.c	/^static void memsys3UnlinkFromList(u32 i, u32 *pRoot){$/;"	f	file:	signature:(u32 i, u32 *pRoot)
memsys5Enter	sqlite3.c	/^static void memsys5Enter(void){$/;"	f	file:	signature:(void)
memsys5Free	sqlite3.c	/^static void memsys5Free(void *pPrior){$/;"	f	file:	signature:(void *pPrior)
memsys5FreeUnsafe	sqlite3.c	/^static void memsys5FreeUnsafe(void *pOld){$/;"	f	file:	signature:(void *pOld)
memsys5Init	sqlite3.c	/^static int memsys5Init(void *NotUsed){$/;"	f	file:	signature:(void *NotUsed)
memsys5Leave	sqlite3.c	/^static void memsys5Leave(void){$/;"	f	file:	signature:(void)
memsys5Link	sqlite3.c	/^static void memsys5Link(int i, int iLogsize){$/;"	f	file:	signature:(int i, int iLogsize)
memsys5Log	sqlite3.c	/^static int memsys5Log(int iValue){$/;"	f	file:	signature:(int iValue)
memsys5Malloc	sqlite3.c	/^static void *memsys5Malloc(int nBytes){$/;"	f	file:	signature:(int nBytes)
memsys5MallocUnsafe	sqlite3.c	/^static void *memsys5MallocUnsafe(int nByte){$/;"	f	file:	signature:(int nByte)
memsys5Realloc	sqlite3.c	/^static void *memsys5Realloc(void *pPrior, int nBytes){$/;"	f	file:	signature:(void *pPrior, int nBytes)
memsys5Roundup	sqlite3.c	/^static int memsys5Roundup(int n){$/;"	f	file:	signature:(int n)
memsys5Shutdown	sqlite3.c	/^static void memsys5Shutdown(void *NotUsed){$/;"	f	file:	signature:(void *NotUsed)
memsys5Size	sqlite3.c	/^static int memsys5Size(void *p){$/;"	f	file:	signature:(void *p)
memsys5Unlink	sqlite3.c	/^static void memsys5Unlink(int i, int iLogsize){$/;"	f	file:	signature:(int i, int iLogsize)
minLeaf	sqlite3.c	/^  u16 minLeaf;          \/* Minimum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:	access:public
minLocal	sqlite3.c	/^  u16 minLocal;         \/* Minimum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:	access:public
minLocal	sqlite3.c	/^  u16 minLocal;        \/* Copy of BtShared.minLocal or BtShared.minLeaf *\/$/;"	m	struct:MemPage	file:	access:public
minMaxFinalize	sqlite3.c	/^static void minMaxFinalize(sqlite3_context *context){$/;"	f	file:	signature:(sqlite3_context *context)
minMaxQuery	sqlite3.c	/^static u8 minMaxQuery(AggInfo *pAggInfo, ExprList **ppMinMax){$/;"	f	file:	signature:(AggInfo *pAggInfo, ExprList **ppMinMax)
minWriteFileFormat	sqlite3.c	/^  u8 minWriteFileFormat;  \/* Minimum file format for writable database files *\/$/;"	m	struct:Vdbe	file:	access:public
minmaxFunc	sqlite3.c	/^static void minmaxFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
minmaxStep	sqlite3.c	/^static void minmaxStep($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **argv )
minor	sqlite3.c	/^  YYMINORTYPE minor;     \/* The user-supplied minor token value.  This$/;"	m	struct:yyStackEntry	file:	access:public
mmapSize	sqlite3.c	/^  sqlite3_int64 mmapSize;             \/* Usable size of mapping at pMapRegion *\/$/;"	m	struct:unixFile	file:	access:public
mmapSize	sqlite3.c	/^  sqlite3_int64 mmapSize;       \/* Usable size of mapped region *\/$/;"	m	struct:winFile	file:	access:public
mmapSizeActual	sqlite3.c	/^  sqlite3_int64 mmapSizeActual;       \/* Actual size of mapping at pMapRegion *\/$/;"	m	struct:unixFile	file:	access:public
mmapSizeActual	sqlite3.c	/^  sqlite3_int64 mmapSizeActual; \/* Actual size of mapped region *\/$/;"	m	struct:winFile	file:	access:public
mmapSizeMax	sqlite3.c	/^  sqlite3_int64 mmapSizeMax;          \/* Configured FCNTL_MMAP_SIZE value *\/$/;"	m	struct:unixFile	file:	access:public
mmapSizeMax	sqlite3.c	/^  sqlite3_int64 mmapSizeMax;    \/* Configured FCNTL_MMAP_SIZE value *\/$/;"	m	struct:winFile	file:	access:public
mnMaster	sqlite3.c	/^  u32 mnMaster;$/;"	m	struct:Mem3Global	file:	access:public
mnPmaSize	sqlite3.c	/^  int mnPmaSize;                  \/* Minimum PMA size, in bytes *\/$/;"	m	struct:VdbeSorter	file:	access:public
mnReg	sqlite3.c	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo	file:	access:public
mnReq	sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:	access:public
modifyPagePointer	sqlite3.c	/^static int modifyPagePointer(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType){$/;"	f	file:	signature:(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType)
moveToChild	sqlite3.c	/^static int moveToChild(BtCursor *pCur, u32 newPgno){$/;"	f	file:	signature:(BtCursor *pCur, u32 newPgno)
moveToLeftmost	sqlite3.c	/^static int moveToLeftmost(BtCursor *pCur){$/;"	f	file:	signature:(BtCursor *pCur)
moveToParent	sqlite3.c	/^static void moveToParent(BtCursor *pCur){$/;"	f	file:	signature:(BtCursor *pCur)
moveToRightmost	sqlite3.c	/^static int moveToRightmost(BtCursor *pCur){$/;"	f	file:	signature:(BtCursor *pCur)
moveToRoot	sqlite3.c	/^static int moveToRoot(BtCursor *pCur){$/;"	f	file:	signature:(BtCursor *pCur)
movetoTarget	sqlite3.c	/^  i64 movetoTarget;     \/* Argument to the deferred sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	file:	access:public
mprintf	sqlite3.c	/^  char * (*mprintf)(const char*,...);$/;"	m	struct:sqlite3_api_routines	file:	access:public
msize	sqlite3.c	/^  sqlite3_uint64 (*msize)(void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
multiSelect	sqlite3.c	/^static int multiSelect($/;"	f	file:	signature:( Parse *pParse, Select *p, SelectDest *pDest )
multiSelectCollSeq	sqlite3.c	/^static CollSeq *multiSelectCollSeq(Parse *pParse, Select *p, int iCol){$/;"	f	file:	signature:(Parse *pParse, Select *p, int iCol)
multiSelectOrderBy	sqlite3.c	/^static int multiSelectOrderBy($/;"	f	file:	signature:( Parse *pParse, Select *p, SelectDest *pDest )
multiSelectOrderBy	sqlite3.c	/^static int multiSelectOrderBy($/;"	p	file:	signature:( Parse *pParse, Select *p, SelectDest *pDest )
multiSelectOrderByKeyInfo	sqlite3.c	/^static KeyInfo *multiSelectOrderByKeyInfo(Parse *pParse, Select *p, int nExtra){$/;"	f	file:	signature:(Parse *pParse, Select *p, int nExtra)
mutex	sqlite3.c	/^  CRITICAL_SECTION mutex;    \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
mutex	sqlite3.c	/^  pthread_mutex_t mutex;     \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;          \/* MUTEX_STATIC_LRU or NULL *\/$/;"	m	struct:PGroup	file:	access:public
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;          \/* Mutex for accessing the following: *\/$/;"	m	struct:PCacheGlobal	file:	access:public
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Connection mutex *\/$/;"	m	struct:sqlite3	file:	access:public
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Mutex to serialize access *\/$/;"	m	struct:Mem0Global	file:	access:public
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:unixShmNode	file:	access:public
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:winShmNode	file:	access:public
mutex	sqlite3.c	/^  sqlite3_mutex *mutex; \/* Non-recursive mutex required to access this object *\/$/;"	m	struct:BtShared	file:	access:public
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem3Global	file:	access:public
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem5Global	file:	access:public
mutex	sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:__anon9	file:	access:public
mutex	sqlite3.c	/^  sqlite3_mutex_methods mutex;      \/* Low-level mutex interface *\/$/;"	m	struct:Sqlite3Config	file:	access:public
mutexIsInit	sqlite3.c	/^static SQLITE_WSD int mutexIsInit = 0;$/;"	v	file:
mutex_alloc	sqlite3.c	/^  sqlite3_mutex *(*mutex_alloc)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
mutex_enter	sqlite3.c	/^  void (*mutex_enter)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
mutex_free	sqlite3.c	/^  void (*mutex_free)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
mutex_leave	sqlite3.c	/^  void (*mutex_leave)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
mutex_try	sqlite3.c	/^  int (*mutex_try)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
mxAlloc	sqlite3.c	/^  int  mxAlloc;        \/* Maximum allowed string length *\/$/;"	m	struct:StrAccum	file:	access:public
mxCurrent	sqlite3.c	/^  int mxCurrent[NCSIZE];   \/* Highwater mark for nCurrent *\/$/;"	m	struct:__anon9	file:	access:public
mxErr	sqlite3.c	/^  int mxErr;        \/* Stop accumulating errors when this reaches zero *\/$/;"	m	struct:IntegrityCk	file:	access:public
mxFrame	sqlite3.c	/^  u32 mxFrame;                    \/* Index of last valid frame in the WAL *\/$/;"	m	struct:WalIndexHdr	file:	access:public
mxKeysize	sqlite3.c	/^  int mxKeysize;                  \/* Largest serialized key seen so far *\/$/;"	m	struct:VdbeSorter	file:	access:public
mxLevel	sqlite3.c	/^  int mxLevel;                      \/* The largest iLevel value in the tree *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
mxLevel	sqlite3.c	/^  int mxLevel;                      \/* iLevel value for root of the tree *\/$/;"	m	struct:RtreeCursor	file:	access:public
mxLevel	sqlite3.h	/^  int mxLevel;                      \/* The largest iLevel value in the tree *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
mxMmap	sqlite3.c	/^  sqlite3_int64 mxMmap;             \/* Maximum value for szMmap *\/$/;"	m	struct:Sqlite3Config	file:	access:public
mxOut	sqlite3.c	/^  int mxOut;              \/* Highwater mark for nOut *\/$/;"	m	struct:Lookaside	file:	access:public
mxParserStack	sqlite3.c	/^  int mxParserStack;                \/* maximum depth of the parser stack *\/$/;"	m	struct:Sqlite3Config	file:	access:public
mxPathname	sqlite3.c	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs	file:	access:public
mxPathname	sqlite3.h	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs	access:public
mxPgno	sqlite3.c	/^  Pgno mxPgno;                \/* Maximum allowed size of the database *\/$/;"	m	struct:Pager	file:	access:public
mxPinned	sqlite3.c	/^  unsigned int mxPinned;         \/* nMaxpage + 10 - nMinPage *\/$/;"	m	struct:PGroup	file:	access:public
mxPmaSize	sqlite3.c	/^  int mxPmaSize;                  \/* Maximum PMA size, in bytes.  0==no limit *\/$/;"	m	struct:VdbeSorter	file:	access:public
mxReg	sqlite3.c	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo	file:	access:public
mxReq	sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:	access:public
mxSample	sqlite3.c	/^  int mxSample;             \/* Maximum number of samples to accumulate *\/$/;"	m	struct:Stat4Accum	file:	access:public
mxSavepoint	sqlite3.c	/^  int mxSavepoint;       \/* Largest valid xSavepoint integer *\/$/;"	m	struct:Fts3Table	file:	access:public
mxStrlen	sqlite3.c	/^  int mxStrlen;                     \/* Maximum string length *\/$/;"	m	struct:Sqlite3Config	file:	access:public
mxSz	sqlite3.c	/^  int mxSz;                       \/* Maximum bytes of data to store *\/$/;"	m	struct:IncrMerger	file:	access:public
mxValue	sqlite3.c	/^  int mxValue[10];          \/* Maximum value *\/$/;"	m	struct:sqlite3StatType	file:	access:public
mxWalSize	sqlite3.c	/^  i64 mxWalSize;             \/* Truncate WAL to this size upon reset *\/$/;"	m	struct:Wal	file:	access:public
n	sqlite3.c	/^  i64 n;$/;"	m	struct:CountCtx	file:	access:public
n	sqlite3.c	/^  int n;                          \/* Length of z in bytes (excl. nul-term) *\/$/;"	m	struct:StrBuffer	file:	access:public
n	sqlite3.c	/^  int n;                          \/* Number of bytes in buffer z *\/$/;"	m	struct:Fts3PhraseToken	file:	access:public
n	sqlite3.c	/^  int n;                          \/* Number of valid bytes of data in a[] *\/$/;"	m	struct:Blob	file:	access:public
n	sqlite3.c	/^  int n;                        \/* Number of assigned cursor values *\/$/;"	m	struct:WhereMaskSet	file:	access:public
n	sqlite3.c	/^  int n;              \/* Number of characters in string value, excluding '\\0' *\/$/;"	m	struct:Mem	file:	access:public
n	sqlite3.c	/^  int n;            \/* Size of record in bytes *\/$/;"	m	struct:IndexSample	file:	access:public
n	sqlite3.c	/^  u16 n;                      \/* Number of valid a[] entries *\/$/;"	m	struct:WhereOrSet	file:	access:public
n	sqlite3.c	/^  unsigned int n;    \/* Number of characters in this token *\/$/;"	m	struct:Token	file:	access:public
n90pct	sqlite3.c	/^  unsigned int n90pct;                \/* nMax*9\/10 *\/$/;"	m	struct:PCache1	file:	access:public
nAccumulator	sqlite3.c	/^  int nAccumulator;       \/* Number of columns that show through to the output.$/;"	m	struct:AggInfo	file:	access:public
nAdvance	sqlite3.c	/^  int nAdvance;                   \/* How many seg-readers to advance *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
nAlias	sqlite3.c	/^  int nAlias;               \/* Number of aliased result set columns *\/$/;"	m	struct:Parse	file:	access:public
nAll	sqlite3.c	/^  int nAll;                      \/* Size of a[] in bytes *\/$/;"	m	struct:Fts3Doclist	file:	access:public
nAlloc	sqlite3.c	/^  int  nAlloc;         \/* Amount of space allocated in zText *\/$/;"	m	struct:StrAccum	file:	access:public
nAlloc	sqlite3.c	/^  int nAlloc;                     \/* Allocated size of a[] (nAlloc>=n) *\/$/;"	m	struct:Blob	file:	access:public
nAlloc	sqlite3.c	/^  int nAlloc;                     \/* Allocated size of buffer z in bytes *\/$/;"	m	struct:StrBuffer	file:	access:public
nAlloc	sqlite3.c	/^  int nAlloc;                     \/* space allocated at zToken *\/$/;"	m	struct:unicode_cursor	file:	access:public
nAlloc	sqlite3.c	/^  int nAlloc;                 \/* Bytes of space at aAlloc *\/$/;"	m	struct:PmaReader	file:	access:public
nAlloc	sqlite3.c	/^  int nAlloc[NCSIZE];      \/* Total number of allocations *\/$/;"	m	struct:__anon9	file:	access:public
nAlloc	sqlite3.c	/^  u32 nAlloc;        \/* Slots allocated for azResult[] *\/$/;"	m	struct:TabResult	file:	access:public
nAlloc	sqlite3.c	/^  u32 nAlloc;      \/* Number of entries allocated in a[] below *\/$/;"	m	struct:SrcList	file:	access:public
nAlloc	sqlite3.c	/^  u64 nAlloc;         \/* Total number of calls to malloc *\/$/;"	m	struct:Mem5Global	file:	access:public
nAllocated	sqlite3.c	/^  int nAllocated;              \/* space allocated to zToken buffer *\/$/;"	m	struct:porter_tokenizer_cursor	file:	access:public
nArg	sqlite3.c	/^  i16 nArg;            \/* Number of arguments.  -1 means unlimited *\/$/;"	m	struct:FuncDef	file:	access:public
nArg	sqlite3.c	/^  int nArg;                \/* Total number of arguments *\/$/;"	m	struct:PrintfArguments	file:	access:public
nAuthPW	sqlite3.c	/^  int nAuthPW;                  \/* Size of the zAuthPW in bytes *\/$/;"	m	struct:sqlite3_userauth	file:	access:public
nAutoincrmerge	sqlite3.c	/^  int nAutoincrmerge;             \/* Value configured by 'automerge' *\/$/;"	m	struct:Fts3Table	file:	access:public
nBackfill	sqlite3.c	/^  u32 nBackfill;                  \/* Number of WAL frames backfilled into DB *\/$/;"	m	struct:WalCkptInfo	file:	access:public
nBacktrace	sqlite3.c	/^  char nBacktrace;                    \/* Number of backtraces on this alloc *\/$/;"	m	struct:MemBlockHdr	file:	access:public
nBacktrace	sqlite3.c	/^  int nBacktrace;$/;"	m	struct:__anon9	file:	access:public
nBacktraceSlots	sqlite3.c	/^  char nBacktraceSlots;               \/* Available backtrace slots *\/$/;"	m	struct:MemBlockHdr	file:	access:public
nBackup	sqlite3.c	/^  int nBackup;       \/* Number of backup operations reading this btree *\/$/;"	m	struct:Btree	file:	access:public
nBlock	sqlite3.c	/^  int nBlock;      \/* Number of szAtom sized blocks in zPool *\/$/;"	m	struct:Mem5Global	file:	access:public
nBuf	sqlite3.c	/^  int nBuf;                       \/* Size of zBuf[] in bytes *\/$/;"	m	struct:JournalFile	file:	access:public
nBuffer	sqlite3.c	/^  int nBuffer;                    \/* Allocated size of aBuffer[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
nBuffer	sqlite3.c	/^  int nBuffer;                    \/* Size of write buffer in bytes *\/$/;"	m	struct:PmaWriter	file:	access:public
nBuffer	sqlite3.c	/^  int nBuffer;                \/* Size of read buffer in bytes *\/$/;"	m	struct:PmaReader	file:	access:public
nBuffer	sqlite3.c	/^  int nBuffer;$/;"	m	struct:IcuCursor	file:	access:public
nBusy	sqlite3.c	/^  int nBusy;                  \/* Current number of users of this structure *\/$/;"	m	struct:Rtree	file:	access:public
nBusy	sqlite3.c	/^  int nBusy;                 \/* Incremented with each busy call *\/$/;"	m	struct:BusyHandler	file:	access:public
nByte	sqlite3.c	/^  int nByte;              \/* Size of open blob, in bytes *\/$/;"	m	struct:Incrblob	file:	access:public
nBytes	sqlite3.c	/^  int nBytes;                  \/* size of the input *\/$/;"	m	struct:simple_tokenizer_cursor	file:	access:public
nBytesPerCell	sqlite3.c	/^  u8 nBytesPerCell;           \/* Bytes consumed per cell *\/$/;"	m	struct:Rtree	file:	access:public
nCell	sqlite3.c	/^  u16 nCell;           \/* Number of cells on this page, local and ovfl *\/$/;"	m	struct:MemPage	file:	access:public
nChange	sqlite3.c	/^  int nChange;                  \/* Value returned by sqlite3_changes() *\/$/;"	m	struct:sqlite3	file:	access:public
nChange	sqlite3.c	/^  int nChange;            \/* Number of db changes made since last reset *\/$/;"	m	struct:Vdbe	file:	access:public
nChange	sqlite3.c	/^  int nChange;            \/* Statement changes (Vdbe.nChanges)     *\/$/;"	m	struct:VdbeFrame	file:	access:public
nChar	sqlite3.c	/^  int  nChar;          \/* Length of the string so far *\/$/;"	m	struct:StrAccum	file:	access:public
nChar	sqlite3.c	/^  int nChar;                  \/* Number of UChar elements in pInput *\/$/;"	m	struct:IcuCursor	file:	access:public
nChild	sqlite3.c	/^  u8 nChild;              \/* Number of children that must disable us *\/$/;"	m	struct:WhereTerm	file:	access:public
nChildCsr	sqlite3.c	/^  int nChildCsr;          \/* Number of cursors for child frame *\/$/;"	m	struct:VdbeFrame	file:	access:public
nChildMem	sqlite3.c	/^  int nChildMem;          \/* Number of memory cells for child frame *\/$/;"	m	struct:VdbeFrame	file:	access:public
nCkpt	sqlite3.c	/^  u32 nCkpt;                 \/* Checkpoint sequence counter in the wal-header *\/$/;"	m	struct:Wal	file:	access:public
nCol	sqlite3.c	/^  i16 nCol;            \/* Number of columns in this table *\/$/;"	m	struct:Table	file:	access:public
nCol	sqlite3.c	/^  int nCol;                           \/* Number of entries in azCol[] *\/$/;"	m	struct:ParseContext	file:	access:public
nCol	sqlite3.c	/^  int nCol;                       \/* Number of columns in table *\/$/;"	m	struct:MatchInfo	file:	access:public
nCol	sqlite3.c	/^  int nCol;                 \/* Number of columns in index + pk\/rowid *\/$/;"	m	struct:Stat4Accum	file:	access:public
nCol	sqlite3.c	/^  int nCol;         \/* Number of columns in this key *\/$/;"	m	struct:FKey	file:	access:public
nColumn	sqlite3.c	/^  int nColumn;                    \/* number of named columns in virtual table *\/$/;"	m	struct:Fts3Table	file:	access:public
nColumn	sqlite3.c	/^  int nColumn;            \/* Number of used entries in aCol[] *\/$/;"	m	struct:AggInfo	file:	access:public
nColumn	sqlite3.c	/^  u16 nColumn;             \/* Number of columns stored in the index *\/$/;"	m	struct:Index	file:	access:public
nColumn	sqlite3.c	/^  u32 nColumn;       \/* Number of columns in the result *\/$/;"	m	struct:TabResult	file:	access:public
nConstraint	sqlite3.c	/^  int nConstraint;                  \/* Number of entries in aConstraint *\/$/;"	m	struct:RtreeCursor	file:	access:public
nConstraint	sqlite3.c	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info	file:	access:public
nConstraint	sqlite3.h	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info	access:public
nCoord	sqlite3.c	/^  int nCoord;                       \/* Number of coordinates *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
nCoord	sqlite3.h	/^  int nCoord;                       \/* Number of coordinates *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
nCost	sqlite3.c	/^  int nCost;                      \/* Cost of running iterator *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
nCsr	sqlite3.c	/^  int nCsr;                     \/* Number of cursors required *\/$/;"	m	struct:SubProgram	file:	access:public
nCte	sqlite3.c	/^  int nCte;                       \/* Number of CTEs in the WITH clause *\/$/;"	m	struct:With	file:	access:public
nCurrent	sqlite3.c	/^  int nCurrent[NCSIZE];    \/* Current number of allocations *\/$/;"	m	struct:__anon9	file:	access:public
nCurrentPage	sqlite3.c	/^  unsigned int nCurrentPage;     \/* Number of purgeable pages allocated *\/$/;"	m	struct:PGroup	file:	access:public
nCursor	sqlite3.c	/^  int nCursor;            \/* Number of entries in apCsr *\/$/;"	m	struct:VdbeFrame	file:	access:public
nCursor	sqlite3.c	/^  int nCursor;            \/* Number of slots in apCsr[] *\/$/;"	m	struct:Vdbe	file:	access:public
nData	sqlite3.c	/^  int nData;                      \/* Bytes of data in aData *\/$/;"	m	struct:SegmentWriter	file:	access:public
nData	sqlite3.c	/^  int nData;                      \/* Bytes of valid data so far *\/$/;"	m	struct:SegmentNode	file:	access:public
nData	sqlite3.c	/^  int nData;$/;"	m	struct:PendingList	file:	access:public
nData	sqlite3.c	/^  u32 nData;         \/* Slots used in azResult[].  (nRow+1)*nColumn *\/$/;"	m	struct:TabResult	file:	access:public
nDb	sqlite3.c	/^  int nDb;                      \/* Number of backends currently in use *\/$/;"	m	struct:sqlite3	file:	access:public
nDeferredCons	sqlite3.c	/^  i64 nDeferredCons;                  \/* Number of deferred fk violations *\/$/;"	m	struct:Savepoint	file:	access:public
nDeferredCons	sqlite3.c	/^  i64 nDeferredCons;            \/* Net deferred constraints this transaction. *\/$/;"	m	struct:sqlite3	file:	access:public
nDeferredImmCons	sqlite3.c	/^  i64 nDeferredImmCons;               \/* Number of deferred imm fk. *\/$/;"	m	struct:Savepoint	file:	access:public
nDeferredImmCons	sqlite3.c	/^  i64 nDeferredImmCons;         \/* Net deferred immediate constraints *\/$/;"	m	struct:sqlite3	file:	access:public
nDim	sqlite3.c	/^  u8 nDim;                    \/* Number of dimensions *\/$/;"	m	struct:Rtree	file:	access:public
nDoc	sqlite3.c	/^    sqlite3_int64 nDoc;           \/* 'documents' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:	access:public
nDoc	sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Documents in table *\/$/;"	m	struct:Fts3Cursor	file:	access:public
nDoc	sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Number of docs in database *\/$/;"	m	struct:MatchInfo	file:	access:public
nDoclist	sqlite3.c	/^  int nDoclist;                   \/* Size of aDoclist[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
nDoclist	sqlite3.c	/^  int nDoclist;                   \/* Size of buffer at aDoclist *\/$/;"	m	struct:Fts3Cursor	file:	access:public
nDoclist	sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in bytes *\/$/;"	m	struct:NodeReader	file:	access:public
nDoclist	sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in current entry *\/$/;"	m	struct:Fts3SegReader	file:	access:public
nEntry	sqlite3.c	/^    int nEntry;                   \/* Nr. of entries in aPgno[] and aIndex[] *\/$/;"	m	struct:WalIterator::WalSegment	file:	access:public
nEntry	sqlite3.c	/^  int nEntry;                     \/* Number of terms written to node so far *\/$/;"	m	struct:SegmentNode	file:	access:public
nEq	sqlite3.c	/^      u16 nEq;               \/* Number of equality constraints *\/$/;"	m	struct:WhereLoop::__anon18::__anon19	file:	access:public
nEquiv	sqlite3.c	/^  unsigned char nEquiv;      \/* Number of entries in aEquiv[] *\/$/;"	m	struct:WhereScan	file:	access:public
nErr	sqlite3.c	/^  int nErr;            \/* Number of errors encountered while resolving names *\/$/;"	m	struct:NameContext	file:	access:public
nErr	sqlite3.c	/^  int nErr;            \/* Number of errors seen *\/$/;"	m	struct:Parse	file:	access:public
nErr	sqlite3.c	/^  int nErr;         \/* Number of messages written to zErrMsg so far *\/$/;"	m	struct:IntegrityCk	file:	access:public
nException	sqlite3.c	/^  int nException;$/;"	m	struct:unicode_tokenizer	file:	access:public
nExpr	sqlite3.c	/^  int nExpr;             \/* Number of expressions on the list *\/$/;"	m	struct:ExprList	file:	access:public
nExt	sqlite3.c	/^  int nExt;              \/* Number of entries in aExt[] *\/          $/;"	m	struct:sqlite3AutoExtList	file:	access:public
nExtension	sqlite3.c	/^  int nExtension;               \/* Number of loaded extensions *\/$/;"	m	struct:sqlite3	file:	access:public
nExtra	sqlite3.c	/^  u16 nExtra;                 \/* Add this many bytes to each in-memory page *\/$/;"	m	struct:Pager	file:	access:public
nFetchOut	sqlite3.c	/^  int nFetchOut;                      \/* Number of outstanding xFetch refs *\/$/;"	m	struct:unixFile	file:	access:public
nFetchOut	sqlite3.c	/^  int nFetchOut;                \/* Number of outstanding xFetch references *\/$/;"	m	struct:winFile	file:	access:public
nField	sqlite3.c	/^  i16 nField;           \/* Number of fields in the header *\/$/;"	m	struct:VdbeCursor	file:	access:public
nField	sqlite3.c	/^  u16 nField;         \/* Number of entries in apMem[] *\/$/;"	m	struct:UnpackedRecord	file:	access:public
nField	sqlite3.c	/^  u16 nField;         \/* Number of key columns in the index *\/$/;"	m	struct:KeyInfo	file:	access:public
nFkConstraint	sqlite3.c	/^  i64 nFkConstraint;      \/* Number of imm. FK constraints this VM *\/$/;"	m	struct:Vdbe	file:	access:public
nFrame	sqlite3.c	/^  int nFrame;             \/* Number of frames in pFrame list *\/$/;"	m	struct:Vdbe	file:	access:public
nFree	sqlite3.c	/^  u16 nFree;           \/* Number of free bytes on the page *\/$/;"	m	struct:MemPage	file:	access:public
nFreeSlot	sqlite3.c	/^  int nFreeSlot;                 \/* Number of unused pcache slots *\/$/;"	m	struct:PCacheGlobal	file:	access:public
nFresh	sqlite3.c	/^  u16 nFresh;                    \/* Number of objects on pFresh *\/$/;"	m	struct:RowSet	file:	access:public
nFunc	sqlite3.c	/^  int nFunc;              \/* Number of entries in aFunc[] *\/$/;"	m	struct:AggInfo	file:	access:public
nHash	sqlite3.c	/^  unsigned int nHash;                 \/* Number of slots in apHash[] *\/$/;"	m	struct:PCache1	file:	access:public
nHdrParsed	sqlite3.c	/^  u16 nHdrParsed;       \/* Number of header fields parsed so far *\/$/;"	m	struct:VdbeCursor	file:	access:public
nHeap	sqlite3.c	/^  int nHeap;                        \/* Size of pHeap[] *\/$/;"	m	struct:Sqlite3Config	file:	access:public
nHeight	sqlite3.c	/^  int nHeight;              \/* Expression tree height of current sub-select *\/$/;"	m	struct:Parse	file:	access:public
nHeight	sqlite3.c	/^  int nHeight;           \/* Height of the tree headed by this node *\/$/;"	m	struct:Expr	file:	access:public
nId	sqlite3.c	/^  int nId;         \/* Number of identifiers on the list *\/$/;"	m	struct:IdList	file:	access:public
nIn	sqlite3.c	/^      int nIn;              \/* Number of entries in aInLoop[] *\/$/;"	m	struct:WhereLevel::__anon16::__anon17	file:	access:public
nIndent	sqlite3.c	/^  int nIndent;       \/* Number of elements in aIndent *\/$/;"	m	struct:Explain	file:	access:public
nIndex	sqlite3.c	/^  int nIndex;                     \/* Size of aIndex[] *\/$/;"	m	struct:Fts3Table	file:	access:public
nInput	sqlite3.c	/^  int nInput;                     \/* Size of aInput[] in bytes *\/$/;"	m	struct:unicode_cursor	file:	access:public
nInput	sqlite3.c	/^  int nInput;                  \/* size of the input *\/$/;"	m	struct:porter_tokenizer_cursor	file:	access:public
nKey	sqlite3.c	/^  i64 nKey;                 \/* Size of pKey, or last integer key *\/$/;"	m	struct:BtCursor	file:	access:public
nKey	sqlite3.c	/^  i64 nKey;      \/* The key for INTKEY tables, or nPayload otherwise *\/$/;"	m	struct:CellInfo	file:	access:public
nKey	sqlite3.c	/^  int nKey;                   \/* Number of bytes in key *\/$/;"	m	struct:PmaReader	file:	access:public
nKey	sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:	access:public
nKeyCol	sqlite3.c	/^  int nKeyCol;              \/* Number of index columns w\/o the pk\/rowid *\/$/;"	m	struct:Stat4Accum	file:	access:public
nKeyCol	sqlite3.c	/^  u16 nKeyCol;             \/* Number of columns forming the key *\/$/;"	m	struct:Index	file:	access:public
nLSlot	sqlite3.c	/^  u16 nLSlot;           \/* Number of slots allocated for aLTerm[] *\/$/;"	m	struct:WhereLoop	file:	access:public
nLTerm	sqlite3.c	/^  u16 nLTerm;           \/* Number of entries in aLTerm[] *\/$/;"	m	struct:WhereLoop	file:	access:public
nLabel	sqlite3.c	/^  int nLabel;          \/* Number of labels used *\/$/;"	m	struct:Parse	file:	access:public
nLeafAdd	sqlite3.c	/^  u32 nLeafAdd;                   \/* Number of leaf blocks added this trans *\/$/;"	m	struct:Fts3Table	file:	access:public
nLeafData	sqlite3.c	/^  i64 nLeafData;                  \/* Number of bytes of leaf data written *\/$/;"	m	struct:SegmentWriter	file:	access:public
nLeafData	sqlite3.c	/^  sqlite3_int64 nLeafData;        \/* Bytes of leaf page data so far *\/$/;"	m	struct:IncrmergeWriter	file:	access:public
nLeafEst	sqlite3.c	/^  int nLeafEst;                   \/* Space allocated for leaf blocks *\/$/;"	m	struct:IncrmergeWriter	file:	access:public
nLevel	sqlite3.c	/^  u8 nLevel;                \/* Number of nested loop *\/$/;"	m	struct:WhereInfo	file:	access:public
nList	sqlite3.c	/^  int nList;                     \/* Length of position list *\/$/;"	m	struct:Fts3Doclist	file:	access:public
nList	sqlite3.c	/^  int nList;$/;"	m	struct:TokenDoclist	file:	access:public
nLocal	sqlite3.c	/^  u16 nLocal;    \/* Amount of payload held locally, not on overflow *\/$/;"	m	struct:CellInfo	file:	access:public
nLock	sqlite3.c	/^  int nLock;                      \/* Number of outstanding file locks *\/$/;"	m	struct:unixInodeInfo	file:	access:public
nLookaside	sqlite3.c	/^  int nLookaside;                   \/* Default lookaside buffer count *\/$/;"	m	struct:Sqlite3Config	file:	access:public
nMalloc	sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentNode	file:	access:public
nMalloc	sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentWriter	file:	access:public
nMatchinfo	sqlite3.c	/^  int nMatchinfo;                 \/* Number of elements in aMatchinfo[] *\/$/;"	m	struct:Fts3Cursor	file:	access:public
nMax	sqlite3.c	/^  unsigned int nMax;                  \/* Configured "cache_size" value *\/$/;"	m	struct:PCache1	file:	access:public
nMaxArg	sqlite3.c	/^  int nMaxArg;         \/* Max args passed to user function by sub-program *\/$/;"	m	struct:Parse	file:	access:public
nMaxPage	sqlite3.c	/^  unsigned int nMaxPage;         \/* Sum of nMax for purgeable caches *\/$/;"	m	struct:PGroup	file:	access:public
nMaxPendingData	sqlite3.c	/^  int nMaxPendingData;            \/* Max pending data before flush to disk *\/$/;"	m	struct:Fts3Table	file:	access:public
nMaxSorterMmap	sqlite3.c	/^  int nMaxSorterMmap;           \/* Maximum size of regions mapped by sorter *\/$/;"	m	struct:sqlite3	file:	access:public
nMem	sqlite3.c	/^  int nMem;                     \/* Number of memory cells required *\/$/;"	m	struct:SubProgram	file:	access:public
nMem	sqlite3.c	/^  int nMem;               \/* Number of entries in aMem *\/$/;"	m	struct:VdbeFrame	file:	access:public
nMem	sqlite3.c	/^  int nMem;               \/* Number of memory locations currently allocated *\/$/;"	m	struct:Vdbe	file:	access:public
nMem	sqlite3.c	/^  int nMem;            \/* Number of memory cells used so far *\/$/;"	m	struct:Parse	file:	access:public
nMemory	sqlite3.c	/^  int nMemory;                    \/* Size of list.aMemory allocation in bytes *\/$/;"	m	struct:VdbeSorter	file:	access:public
nMin	sqlite3.c	/^  unsigned int nMin;                  \/* Minimum number of pages reserved *\/$/;"	m	struct:PCache1	file:	access:public
nMinPage	sqlite3.c	/^  unsigned int nMinPage;         \/* Sum of nMin for purgeable caches *\/$/;"	m	struct:PGroup	file:	access:public
nMmapOut	sqlite3.c	/^  int nMmapOut;               \/* Number of mmap pages currently outstanding *\/$/;"	m	struct:Pager	file:	access:public
nModuleArg	sqlite3.c	/^  int nModuleArg;      \/* Number of arguments to the module *\/$/;"	m	struct:Table	file:	access:public
nName	sqlite3.c	/^  int nName;                    \/* Length of the zCanonicalName[] string *\/$/;"	m	struct:vxworksFileId	file:	access:public
nNear	sqlite3.c	/^  int nNear;                 \/* Valid if eType==FTSQUERY_NEAR *\/$/;"	m	struct:Fts3Expr	file:	access:public
nNest	sqlite3.c	/^  int nNest;                          \/* Number of nested brackets *\/$/;"	m	struct:ParseContext	file:	access:public
nNode	sqlite3.c	/^  int nNode;                      \/* Size of buffer at aNode (or 0) *\/$/;"	m	struct:Fts3SegReader	file:	access:public
nNode	sqlite3.c	/^  int nNode;$/;"	m	struct:NodeReader	file:	access:public
nNodeSize	sqlite3.c	/^  int nNodeSize;                  \/* Soft limit for node size *\/$/;"	m	struct:Fts3Table	file:	access:public
nOBSat	sqlite3.c	/^  i8 nOBSat;                \/* Number of ORDER BY terms satisfied by indices *\/$/;"	m	struct:WhereInfo	file:	access:public
nOBSat	sqlite3.c	/^  int nOBSat;           \/* Number of ORDER BY terms satisfied by indices *\/$/;"	m	struct:SortCtx	file:	access:public
nOcc	sqlite3.c	/^    sqlite3_int64 nOcc;           \/* 'occurrences' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:	access:public
nOffsetList	sqlite3.c	/^  int nOffsetList;                \/* For descending pending seg-readers only *\/$/;"	m	struct:Fts3SegReader	file:	access:public
nOnce	sqlite3.c	/^  int nOnce;                    \/* Number of OP_Once instructions *\/$/;"	m	struct:SubProgram	file:	access:public
nOnce	sqlite3.c	/^  int nOnce;           \/* Number of OP_Once instructions so far *\/$/;"	m	struct:Parse	file:	access:public
nOnceFlag	sqlite3.c	/^  int nOnceFlag;          \/* Number of entries in aOnceFlag *\/$/;"	m	struct:VdbeFrame	file:	access:public
nOnceFlag	sqlite3.c	/^  int nOnceFlag;          \/* Size of array aOnceFlag[] *\/$/;"	m	struct:Vdbe	file:	access:public
nOp	sqlite3.c	/^  int nOp;                      \/* Elements in aOp[] *\/$/;"	m	struct:SubProgram	file:	access:public
nOp	sqlite3.c	/^  int nOp;                \/* Number of instructions in the program *\/$/;"	m	struct:Vdbe	file:	access:public
nOp	sqlite3.c	/^  int nOp;                \/* Size of aOp array *\/$/;"	m	struct:VdbeFrame	file:	access:public
nOpAlloc	sqlite3.c	/^  int nOpAlloc;        \/* Number of slots allocated for Vdbe.aOp[] *\/$/;"	m	struct:Parse	file:	access:public
nOrderBy	sqlite3.c	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	file:	access:public
nOrderBy	sqlite3.h	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	access:public
nOrig	sqlite3.c	/^  Pgno nOrig;                  \/* Original number of pages in file *\/$/;"	m	struct:PagerSavepoint	file:	access:public
nOther	sqlite3.c	/^  int nOther;      \/* Number of references to columns in other FROM clauses *\/$/;"	m	struct:SrcCount	file:	access:public
nOut	sqlite3.c	/^  LogEst nOut;          \/* Estimated number of output rows *\/$/;"	m	struct:WhereLoop	file:	access:public
nOut	sqlite3.c	/^  LogEst nOut;        \/* Number of outputs for this subquery *\/$/;"	m	struct:WhereOrCost	file:	access:public
nOut	sqlite3.c	/^  int nOut;               \/* Number of buffers currently checked out *\/$/;"	m	struct:Lookaside	file:	access:public
nOverflow	sqlite3.c	/^  u8 nOverflow;        \/* Number of overflow cell bodies in aCell[] *\/$/;"	m	struct:MemPage	file:	access:public
nOvfl	sqlite3.c	/^  int nOvfl;                      \/* Number of overflow pages to load doclist *\/$/;"	m	struct:Fts3TokenAndCost	file:	access:public
nOvflAlloc	sqlite3.c	/^  int nOvflAlloc;           \/* Allocated size of aOverflow[] array *\/$/;"	m	struct:BtCursor	file:	access:public
nPMA	sqlite3.c	/^  int nPMA;                       \/* Number of PMAs currently in file *\/$/;"	m	struct:SortSubtask	file:	access:public
nPSample	sqlite3.c	/^  tRowcnt nPSample;         \/* How often to do a periodic sample *\/$/;"	m	struct:Stat4Accum	file:	access:public
nPage	sqlite3.c	/^  Pgno nPage;       \/* Number of pages in the database *\/$/;"	m	struct:IntegrityCk	file:	access:public
nPage	sqlite3.c	/^  int nPage;                        \/* Number of pages in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:	access:public
nPage	sqlite3.c	/^  u32 nPage;                      \/* Size of database in pages *\/$/;"	m	struct:WalIndexHdr	file:	access:public
nPage	sqlite3.c	/^  u32 nPage;            \/* Number of pages in the database *\/$/;"	m	struct:BtShared	file:	access:public
nPage	sqlite3.c	/^  unsigned int nPage;                 \/* Total number of pages in apHash *\/$/;"	m	struct:PCache1	file:	access:public
nPagecount	sqlite3.c	/^  Pgno nPagecount;         \/* Total number of pages to copy *\/$/;"	m	struct:sqlite3_backup	file:	access:public
nParam	sqlite3.c	/^  int nParam;                       \/* Number of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
nParam	sqlite3.c	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry	file:	access:public
nParam	sqlite3.c	/^  int nParam;                 \/* Number of parameters to the SQL function *\/$/;"	m	struct:RtreeMatchArg	file:	access:public
nParam	sqlite3.h	/^  int nParam;                       \/* Number of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
nParam	sqlite3.h	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry	access:public
nPayload	sqlite3.c	/^  u32 nPayload;  \/* Bytes of payload *\/$/;"	m	struct:CellInfo	file:	access:public
nPendingData	sqlite3.c	/^  int nPendingData;               \/* Current bytes of pending data *\/$/;"	m	struct:Fts3Table	file:	access:public
nPgsz	sqlite3.c	/^  int nPgsz;                      \/* Page size for host database *\/$/;"	m	struct:Fts3Table	file:	access:public
nPhrase	sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:Fts3Cursor	file:	access:public
nPhrase	sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:MatchInfo	file:	access:public
nPhrase	sqlite3.c	/^  int nPhrase;                    \/* Number of phrases in query *\/$/;"	m	struct:SnippetIter	file:	access:public
nPhrase	sqlite3.c	/^  int nPhrase;                    \/* Number of phrases seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:	access:public
nPoint	sqlite3.c	/^  int nPoint;                       \/* Number of slots used in aPoint[] *\/$/;"	m	struct:RtreeCursor	file:	access:public
nPointAlloc	sqlite3.c	/^  int nPointAlloc;                  \/* Number of slots allocated for aPoint[] *\/$/;"	m	struct:RtreeCursor	file:	access:public
nPool	sqlite3.c	/^  u32 nPool;$/;"	m	struct:Mem3Global	file:	access:public
nPopulate	sqlite3.c	/^  int nPopulate;                  \/* If >0, bytes of buffer aNode[] loaded *\/$/;"	m	struct:Fts3SegReader	file:	access:public
nPrefix	sqlite3.c	/^    int nPrefix;                  \/* Prefix length (0 for main terms index) *\/$/;"	m	struct:Fts3Table::Fts3Index	file:	access:public
nProgressOps	sqlite3.c	/^  unsigned nProgressOps;        \/* Number of opcodes for progress callback *\/$/;"	m	struct:sqlite3	file:	access:public
nQueryLoop	sqlite3.c	/^  u32 nQueryLoop;      \/* Est number of iterations of a query (10*log2(N)) *\/$/;"	m	struct:Parse	file:	access:public
nRangeReg	sqlite3.c	/^  int nRangeReg;       \/* Size of the temporary register block *\/$/;"	m	struct:Parse	file:	access:public
nRead	sqlite3.c	/^  int nRead;                  \/* Database pages read *\/$/;"	m	struct:Pager	file:	access:public
nReaders	sqlite3.c	/^  int nReaders;       \/* Number of reader locks obtained *\/$/;"	m	struct:winceLock	file:	access:public
nRec	sqlite3.c	/^  int nRec;                   \/* Pages journalled since last j-header written *\/$/;"	m	struct:Pager	file:	access:public
nRecValid	sqlite3.c	/^  int nRecValid;            \/* Number of valid fields currently in pRec *\/$/;"	m	struct:WhereLoopBuilder	file:	access:public
nRecyclable	sqlite3.c	/^  unsigned int nRecyclable;           \/* Number of pages in the LRU list *\/$/;"	m	struct:PCache1	file:	access:public
nRef	sqlite3.c	/^  i16 nRef;                      \/* Number of users of this page *\/$/;"	m	struct:PgHdr	file:	access:public
nRef	sqlite3.c	/^  int nRef;                           \/* Number of referenced pages *\/$/;"	m	struct:PCache	file:	access:public
nRef	sqlite3.c	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab	file:	access:public
nRef	sqlite3.c	/^  int nRef;                       \/* Number of pointers to this structure *\/$/;"	m	struct:unixInodeInfo	file:	access:public
nRef	sqlite3.c	/^  int nRef;                     \/* Number of references to this one *\/$/;"	m	struct:vxworksFileId	file:	access:public
nRef	sqlite3.c	/^  int nRef;                   \/* Number of references to this node *\/$/;"	m	struct:RtreeNode	file:	access:public
nRef	sqlite3.c	/^  int nRef;                  \/* Number of unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:	access:public
nRef	sqlite3.c	/^  int nRef;                  \/* Number of winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:	access:public
nRef	sqlite3.c	/^  int nRef;                 \/* Number of pointers to this structure *\/$/;"	m	struct:VTable	file:	access:public
nRef	sqlite3.c	/^  int nRef;             \/* Number of references to this structure *\/$/;"	m	struct:BtShared	file:	access:public
nRef	sqlite3.c	/^  int nRef;            \/* Number of names resolved by this context *\/$/;"	m	struct:NameContext	file:	access:public
nRef	sqlite3.c	/^  int nRef;$/;"	m	struct:FuncDestructor	file:	access:public
nRef	sqlite3.c	/^  u16 nRef;            \/* Number of pointers to this Table *\/$/;"	m	struct:Table	file:	access:public
nRef	sqlite3.c	/^  u32 nRef;           \/* Number of references to this KeyInfo object *\/$/;"	m	struct:KeyInfo	file:	access:public
nRef	sqlite3.c	/^  volatile int nRef;         \/* Number of enterances *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
nRef	sqlite3.c	/^  volatile int nRef;         \/* Number of entrances *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
nRef	sqlite3.h	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab	access:public
nRefInitMutex	sqlite3.c	/^  int nRefInitMutex;                \/* Number of users of pInitMutex *\/$/;"	m	struct:Sqlite3Config	file:	access:public
nRegion	sqlite3.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:winShmNode	file:	access:public
nRegion	sqlite3.c	/^  u16 nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:unixShmNode	file:	access:public
nRemaining	sqlite3.c	/^  Pgno nRemaining;         \/* Number of pages left to copy *\/$/;"	m	struct:sqlite3_backup	file:	access:public
nResColumn	sqlite3.c	/^  u16 nResColumn;         \/* Number of columns in one row of the result set *\/$/;"	m	struct:Vdbe	file:	access:public
nReserve	sqlite3.c	/^  i16 nReserve;               \/* Number of unused bytes at end of each page *\/$/;"	m	struct:Pager	file:	access:public
nReserve	sqlite3.c	/^  int nReserve;                  \/* Try to keep nFreeSlot above this *\/$/;"	m	struct:PCacheGlobal	file:	access:public
nRow	sqlite3.c	/^  LogEst nRow;          \/* Estimated number of rows generated by this path *\/$/;"	m	struct:WherePath	file:	access:public
nRow	sqlite3.c	/^  tRowcnt nRow;             \/* Number of rows in the entire table *\/$/;"	m	struct:Stat4Accum	file:	access:public
nRow	sqlite3.c	/^  u32 nRow;          \/* Number of rows in the result *\/$/;"	m	struct:TabResult	file:	access:public
nRowAvg	sqlite3.c	/^  int nRowAvg;                    \/* Average size of database rows, in pages *\/$/;"	m	struct:Fts3Cursor	file:	access:public
nRowEst	sqlite3.c	/^  i64 nRowEst;                \/* Estimated number of rows in this table *\/$/;"	m	struct:Rtree	file:	access:public
nRowLogEst	sqlite3.c	/^  LogEst nRowLogEst;   \/* Estimated rows in table - from sqlite_stat1 table *\/$/;"	m	struct:Table	file:	access:public
nRowOut	sqlite3.c	/^  LogEst nRowOut;           \/* Estimated number of output rows *\/$/;"	m	struct:WhereInfo	file:	access:public
nRowid	sqlite3.c	/^  u32 nRowid;                     \/* Sizeof aRowid[] *\/$/;"	m	struct:Stat4Sample	file:	access:public
nSample	sqlite3.c	/^  int nSample;              \/* Current number of samples *\/$/;"	m	struct:Stat4Accum	file:	access:public
nSample	sqlite3.c	/^  int nSample;             \/* Number of elements in aSample[] *\/$/;"	m	struct:Index	file:	access:public
nSampleCol	sqlite3.c	/^  int nSampleCol;          \/* Size of IndexSample.anEq[] and so on *\/$/;"	m	struct:Index	file:	access:public
nSavepoint	sqlite3.c	/^  int nSavepoint;               \/* Number of non-transaction savepoints *\/$/;"	m	struct:sqlite3	file:	access:public
nSavepoint	sqlite3.c	/^  int nSavepoint;             \/* Number of elements in aSavepoint[] *\/$/;"	m	struct:Pager	file:	access:public
nScratch	sqlite3.c	/^  int nScratch;                     \/* Number of scratch buffers *\/$/;"	m	struct:Sqlite3Config	file:	access:public
nScratchFree	sqlite3.c	/^  u32 nScratchFree;$/;"	m	struct:Mem0Global	file:	access:public
nSdst	sqlite3.c	/^  int nSdst;           \/* Number of registers allocated *\/$/;"	m	struct:SelectDest	file:	access:public
nSegment	sqlite3.c	/^  int nSegment;                   \/* Number of entries in aSegment[] *\/$/;"	m	struct:WalIterator	file:	access:public
nSegment	sqlite3.c	/^  int nSegment;                   \/* Size of apSegment array *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
nSelect	sqlite3.c	/^  int nSelect;         \/* Number of SELECT statements seen *\/$/;"	m	struct:Parse	file:	access:public
nSelectIndent	sqlite3.c	/^  int nSelectIndent;   \/* How far to indent SELECTTRACE() output *\/$/;"	m	struct:Parse	file:	access:public
nSelectRow	sqlite3.c	/^  u64 nSelectRow;        \/* Estimated number of result rows *\/$/;"	m	struct:Select	file:	access:public
nSet	sqlite3.c	/^  int nSet;            \/* Number of sets used so far *\/$/;"	m	struct:Parse	file:	access:public
nSet	sqlite3.c	/^  u32 nSet;       \/* Number of bits that are set - only valid for aHash$/;"	m	struct:Bitvec	file:	access:public
nShared	sqlite3.c	/^  int nShared;                    \/* Number of SHARED locks held *\/$/;"	m	struct:unixInodeInfo	file:	access:public
nSize	sqlite3.c	/^  int nSize;                      \/* Size of allocation at aData *\/$/;"	m	struct:SegmentWriter	file:	access:public
nSize	sqlite3.c	/^  u16 nSize;     \/* Size of the cell content on the main b-tree page *\/$/;"	m	struct:CellInfo	file:	access:public
nSkip	sqlite3.c	/^      u16 nSkip;             \/* Number of initial index columns to skip *\/$/;"	m	struct:WhereLoop::__anon18::__anon19	file:	access:public
nSlot	sqlite3.c	/^  int nSlot;                     \/* The number of pcache slots *\/$/;"	m	struct:PCacheGlobal	file:	access:public
nSlot	sqlite3.c	/^  int nSlot;               \/* Number of entries in a[] *\/$/;"	m	struct:WhereClause	file:	access:public
nSnippet	sqlite3.c	/^  int nSnippet;                   \/* Requested snippet length (in tokens) *\/$/;"	m	struct:SnippetIter	file:	access:public
nSortingColumn	sqlite3.c	/^  int nSortingColumn;     \/* Number of columns in the sorting index *\/$/;"	m	struct:AggInfo	file:	access:public
nSpace	sqlite3.c	/^  int nSpace;$/;"	m	struct:PendingList	file:	access:public
nSrc	sqlite3.c	/^  int nSrc;        \/* Number of tables or subqueries in the FROM clause *\/$/;"	m	struct:SrcList	file:	access:public
nStat	sqlite3.c	/^  int nStat;                      \/* Size of aStat[] array *\/$/;"	m	struct:Fts3auxCursor	file:	access:public
nStatement	sqlite3.c	/^  int nStatement;               \/* Number of nested statement-transactions  *\/$/;"	m	struct:sqlite3	file:	access:public
nStmtDefCons	sqlite3.c	/^  i64 nStmtDefCons;       \/* Number of def. constraints when stmt started *\/$/;"	m	struct:Vdbe	file:	access:public
nStmtDefImmCons	sqlite3.c	/^  i64 nStmtDefImmCons;    \/* Number of def. imm constraints when stmt started *\/$/;"	m	struct:Vdbe	file:	access:public
nStop	sqlite3.c	/^  int nStop;                      \/* Byte-length of string zStop *\/$/;"	m	struct:Fts3auxCursor	file:	access:public
nSub	sqlite3.c	/^  int nSub;                  \/* Number of entries in apSub *\/$/;"	m	struct:VdbeOpIter	file:	access:public
nSubRec	sqlite3.c	/^  u32 nSubRec;                \/* Number of records written to sub-journal *\/$/;"	m	struct:Pager	file:	access:public
nTab	sqlite3.c	/^  int nTab;            \/* Number of previously allocated VDBE cursors *\/$/;"	m	struct:Parse	file:	access:public
nTableLock	sqlite3.c	/^  int nTableLock;        \/* Number of locks in aTableLock *\/$/;"	m	struct:Parse	file:	access:public
nTask	sqlite3.c	/^  u8 nTask;                       \/* Size of aTask[] array *\/$/;"	m	struct:VdbeSorter	file:	access:public
nTempReg	sqlite3.c	/^  u8 nTempReg;         \/* Number of temporary registers in aTempReg[] *\/$/;"	m	struct:Parse	file:	access:public
nTerm	sqlite3.c	/^  int nTerm;                      \/* Number of bytes in current term *\/$/;"	m	struct:Fts3SegReader	file:	access:public
nTerm	sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentNode	file:	access:public
nTerm	sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentWriter	file:	access:public
nTerm	sqlite3.c	/^  int nTerm;                      \/* Size of zTerm in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
nTerm	sqlite3.c	/^  int nTerm;               \/* Number of terms *\/$/;"	m	struct:WhereClause	file:	access:public
nTerm	sqlite3.c	/^  int nTerm;$/;"	m	struct:Fts3SegFilter	file:	access:public
nTermAlloc	sqlite3.c	/^  int nTermAlloc;                 \/* Allocated size of zTerm buffer *\/$/;"	m	struct:Fts3SegReader	file:	access:public
nThis	sqlite3.c	/^  int nThis;       \/* Number of references to columns in pSrcList *\/$/;"	m	struct:SrcCount	file:	access:public
nTitle	sqlite3.c	/^  int nTitle;        \/* Bytes of zTitle to save.  Includes '\\0' and padding *\/$/;"	m	struct:__anon9	file:	access:public
nTitle	sqlite3.c	/^  u8 nTitle;                          \/* Bytes of title; includes '\\0' *\/$/;"	m	struct:MemBlockHdr	file:	access:public
nToken	sqlite3.c	/^  int nToken;                     \/* Number of tokens in phrase *\/$/;"	m	struct:SnippetPhrase	file:	access:public
nToken	sqlite3.c	/^  int nToken;                     \/* Number of tokens seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:	access:public
nToken	sqlite3.c	/^  int nToken;                     \/* Size of zToken in bytes *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
nToken	sqlite3.c	/^  int nToken;                \/* Number of tokens in the phrase *\/$/;"	m	struct:Fts3Phrase	file:	access:public
nTokenAllocated	sqlite3.c	/^  int nTokenAllocated;         \/* space allocated to zToken buffer *\/$/;"	m	struct:simple_tokenizer_cursor	file:	access:public
nTotalChange	sqlite3.c	/^  int nTotalChange;             \/* Value returned by sqlite3_total_changes() *\/$/;"	m	struct:sqlite3	file:	access:public
nTransaction	sqlite3.c	/^  int nTransaction;     \/* Number of open transactions (read + write) *\/$/;"	m	struct:BtShared	file:	access:public
nTree	sqlite3.c	/^  int nTree;                 \/* Used size of aTree\/aReadr (power of 2) *\/$/;"	m	struct:MergeEngine	file:	access:public
nUsed	sqlite3.c	/^  int nUsed;               \/* Number of arguments used so far *\/$/;"	m	struct:PrintfArguments	file:	access:public
nVTrans	sqlite3.c	/^  int nVTrans;                  \/* Allocated size of aVTrans *\/$/;"	m	struct:sqlite3	file:	access:public
nVal	sqlite3.c	/^  int nVal;                       \/* Size of the record in bytes *\/$/;"	m	struct:SorterRecord	file:	access:public
nVar	sqlite3.c	/^  int nVar;                 \/* Number of '?' variables seen in the SQL so far *\/$/;"	m	struct:Parse	file:	access:public
nVar	sqlite3.c	/^  ynVar nVar;             \/* Number of entries in aVar[] *\/$/;"	m	struct:Vdbe	file:	access:public
nVdbeActive	sqlite3.c	/^  int nVdbeActive;              \/* Number of VDBEs currently running *\/$/;"	m	struct:sqlite3	file:	access:public
nVdbeExec	sqlite3.c	/^  int nVdbeExec;                \/* Number of nested calls to VdbeExec() *\/$/;"	m	struct:sqlite3	file:	access:public
nVdbeRead	sqlite3.c	/^  int nVdbeRead;                \/* Number of active VDBEs that read or write *\/$/;"	m	struct:sqlite3	file:	access:public
nVdbeWrite	sqlite3.c	/^  int nVdbeWrite;               \/* Number of active VDBEs that read and write *\/$/;"	m	struct:sqlite3	file:	access:public
nVtabLock	sqlite3.c	/^  int nVtabLock;            \/* Number of virtual tables to lock *\/$/;"	m	struct:Parse	file:	access:public
nWiData	sqlite3.c	/^  int nWiData;               \/* Size of array apWiData *\/$/;"	m	struct:Wal	file:	access:public
nWork	sqlite3.c	/^  int nWork;                      \/* Number of leaf pages flushed *\/$/;"	m	struct:IncrmergeWriter	file:	access:public
nWorker	sqlite3.c	76790;"	d	file:
nWorker	sqlite3.c	76857;"	d	file:
nXField	sqlite3.c	/^  u16 nXField;        \/* Number of columns beyond the key columns *\/$/;"	m	struct:KeyInfo	file:	access:public
nZero	sqlite3.c	/^    int nZero;          \/* Used when bit MEM_Zero is set in flags *\/$/;"	m	union:Mem::MemValue	file:	access:public
name	loaddatabase.c	/^	char name[32];$/;"	m	struct:word	file:	access:public
nameInUsingClause	sqlite3.c	/^static int nameInUsingClause(IdList *pUsing, const char *zCol){$/;"	f	file:	signature:(IdList *pUsing, const char *zCol)
ncFlags	sqlite3.c	/^  u16 ncFlags;         \/* Zero or more NC_* flags defined below *\/$/;"	m	struct:NameContext	file:	access:public
nearlyFull	sqlite3.c	/^  int nearlyFull;$/;"	m	struct:Mem0Global	file:	access:public
needFree	sqlite3.c	/^      u8 needFree;           \/* True if sqlite3_free(idxStr) is needed *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:	access:public
needToFreeIdxStr	sqlite3.c	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info	file:	access:public
needToFreeIdxStr	sqlite3.h	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info	access:public
nested	sqlite3.c	/^  u8 nested;           \/* Number of nested calls to the parser\/code generator *\/$/;"	m	struct:Parse	file:	access:public
network_destroy	server.c	/^void network_destroy(int sockfd)$/;"	f	signature:(int sockfd)
network_destroy	server.c	/^void network_destroy(int sockfd);$/;"	p	file:	signature:(int sockfd)
network_init	client.c	/^int network_init(void)$/;"	f	signature:(void)
network_init	client.c	/^int network_init(void);$/;"	p	file:	signature:(void)
network_init	server.c	/^int network_init(void)$/;"	f	signature:(void)
network_init	server.c	/^int network_init(void);$/;"	p	file:	signature:(void)
neverCorrupt	sqlite3.c	/^  int neverCorrupt;                 \/* Database is always well-formed *\/$/;"	m	struct:Sqlite3Config	file:	access:public
newDatabase	sqlite3.c	/^static int newDatabase(BtShared *pBt){$/;"	f	file:	signature:(BtShared *pBt)
newRowid	sqlite3.c	/^static int newRowid(Rtree *pRtree, i64 *piRowid){$/;"	f	file:	signature:(Rtree *pRtree, i64 *piRowid)
newTnum	sqlite3.c	/^    int newTnum;                \/* Rootpage of table being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:	access:public
newmask	sqlite3.c	/^  u32 newmask;         \/* Mask of new.* columns referenced *\/$/;"	m	struct:Parse	file:	access:public
next	sqlite3.c	/^      u32 next;       \/* Index in mem3.aPool[] of next free chunk *\/$/;"	m	struct:Mem3Block::__anon10::__anon12	file:	access:public
next	sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:	access:public
next	sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:	access:public
next	sqlite3.c	/^  int next;       \/* Index of next free chunk *\/$/;"	m	struct:Mem5Link	file:	access:public
nextAutovac	sqlite3.c	/^  signed char nextAutovac;      \/* Autovac setting after VACUUM if >=0 *\/$/;"	m	struct:sqlite3	file:	access:public
nextPagesize	sqlite3.c	/^  int nextPagesize;             \/* Pagesize after VACUUM if >0 *\/$/;"	m	struct:sqlite3	file:	access:public
nextShmId	sqlite3.c	/^  u8 nextShmId;              \/* Next available unixShm.id value *\/$/;"	m	struct:unixShmNode	file:	access:public
nextShmId	sqlite3.c	/^  u8 nextShmId;              \/* Next available winShm.id value *\/$/;"	m	struct:winShmNode	file:	access:public
next_stmt	sqlite3.c	/^  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
nfsUnlock	sqlite3.c	/^static int nfsUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:	signature:(sqlite3_file *id, int eFileLock)
noCase	sqlite3.c	/^  u8 noCase;$/;"	m	struct:compareInfo	file:	access:public
noLock	sqlite3.c	/^  u8 noLock;                  \/* Do not lock (except in WAL mode) *\/$/;"	m	struct:Pager	file:	access:public
noPayload	sqlite3.c	/^  u8 noPayload;        \/* True if internal intKey page (thus w\/o data) *\/$/;"	m	struct:MemPage	file:	access:public
noSync	sqlite3.c	/^  u8 noSync;                  \/* Do not sync the journal if true *\/$/;"	m	struct:Pager	file:	access:public
nocaseCollatingFunc	sqlite3.c	/^static int nocaseCollatingFunc($/;"	f	file:	signature:( void *NotUsed, int nKey1, const void *pKey1, int nKey2, const void *pKey2 )
nodeAcquire	sqlite3.c	/^static int nodeAcquire($/;"	f	file:	signature:( Rtree *pRtree, i64 iNode, RtreeNode *pParent, RtreeNode **ppNode )
nodeDeleteCell	sqlite3.c	/^static void nodeDeleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell){$/;"	f	file:	signature:(Rtree *pRtree, RtreeNode *pNode, int iCell)
nodeGetCell	sqlite3.c	/^static void nodeGetCell($/;"	f	file:	signature:( Rtree *pRtree, RtreeNode *pNode, int iCell, RtreeCell *pCell )
nodeGetCoord	sqlite3.c	/^static void nodeGetCoord($/;"	f	file:	signature:( Rtree *pRtree, RtreeNode *pNode, int iCell, int iCoord, RtreeCoord *pCoord )
nodeGetRowid	sqlite3.c	/^static i64 nodeGetRowid($/;"	f	file:	signature:( Rtree *pRtree, RtreeNode *pNode, int iCell )
nodeHash	sqlite3.c	/^static int nodeHash(i64 iNode){$/;"	f	file:	signature:(i64 iNode)
nodeHashDelete	sqlite3.c	/^static void nodeHashDelete(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:	signature:(Rtree *pRtree, RtreeNode *pNode)
nodeHashInsert	sqlite3.c	/^static void nodeHashInsert(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:	signature:(Rtree *pRtree, RtreeNode *pNode)
nodeHashLookup	sqlite3.c	/^static RtreeNode *nodeHashLookup(Rtree *pRtree, i64 iNode){$/;"	f	file:	signature:(Rtree *pRtree, i64 iNode)
nodeInsertCell	sqlite3.c	/^static int nodeInsertCell($/;"	f	file:	signature:( Rtree *pRtree, RtreeNode *pNode, RtreeCell *pCell )
nodeNew	sqlite3.c	/^static RtreeNode *nodeNew(Rtree *pRtree, RtreeNode *pParent){$/;"	f	file:	signature:(Rtree *pRtree, RtreeNode *pParent)
nodeOverwriteCell	sqlite3.c	/^static void nodeOverwriteCell($/;"	f	file:	signature:( Rtree *pRtree, RtreeNode *pNode, RtreeCell *pCell, int iCell )
nodeParentIndex	sqlite3.c	/^static int nodeParentIndex(Rtree *pRtree, RtreeNode *pNode, int *piIndex){$/;"	f	file:	signature:(Rtree *pRtree, RtreeNode *pNode, int *piIndex)
nodeReaderInit	sqlite3.c	/^static int nodeReaderInit(NodeReader *p, const char *aNode, int nNode){$/;"	f	file:	signature:(NodeReader *p, const char *aNode, int nNode)
nodeReaderNext	sqlite3.c	/^static int nodeReaderNext(NodeReader *p){$/;"	f	file:	signature:(NodeReader *p)
nodeReaderRelease	sqlite3.c	/^static void nodeReaderRelease(NodeReader *p){$/;"	f	file:	signature:(NodeReader *p)
nodeReference	sqlite3.c	/^static void nodeReference(RtreeNode *p){$/;"	f	file:	signature:(RtreeNode *p)
nodeRelease	sqlite3.c	/^static int nodeRelease(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:	signature:(Rtree *pRtree, RtreeNode *pNode)
nodeRowidIndex	sqlite3.c	/^static int nodeRowidIndex($/;"	f	file:	signature:( Rtree *pRtree, RtreeNode *pNode, i64 iRowid, int *piIndex )
nodeWrite	sqlite3.c	/^static int nodeWrite(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:	signature:(Rtree *pRtree, RtreeNode *pNode)
nodeZero	sqlite3.c	/^static void nodeZero(Rtree *pRtree, RtreeNode *p){$/;"	f	file:	signature:(Rtree *pRtree, RtreeNode *p)
nolockCheckReservedLock	sqlite3.c	/^static int nolockCheckReservedLock(sqlite3_file *NotUsed, int *pResOut){$/;"	f	file:	signature:(sqlite3_file *NotUsed, int *pResOut)
nolockClose	sqlite3.c	/^static int nolockClose(sqlite3_file *id) {$/;"	f	file:	signature:(sqlite3_file *id)
nolockLock	sqlite3.c	/^static int nolockLock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:	signature:(sqlite3_file *NotUsed, int NotUsed2)
nolockUnlock	sqlite3.c	/^static int nolockUnlock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:	signature:(sqlite3_file *NotUsed, int NotUsed2)
noopFunc	sqlite3.c	94628;"	d	file:
noopMutexAlloc	sqlite3.c	/^static sqlite3_mutex *noopMutexAlloc(int id){ $/;"	f	file:	signature:(int id)
noopMutexEnd	sqlite3.c	/^static int noopMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:	signature:(void)
noopMutexEnter	sqlite3.c	/^static void noopMutexEnter(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:	signature:(sqlite3_mutex *p)
noopMutexFree	sqlite3.c	/^static void noopMutexFree(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:	signature:(sqlite3_mutex *p)
noopMutexInit	sqlite3.c	/^static int noopMutexInit(void){ return SQLITE_OK; }$/;"	f	file:	signature:(void)
noopMutexLeave	sqlite3.c	/^static void noopMutexLeave(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:	signature:(sqlite3_mutex *p)
noopMutexTry	sqlite3.c	/^static int noopMutexTry(sqlite3_mutex *p){$/;"	f	file:	signature:(sqlite3_mutex *p)
notIndexed	sqlite3.c	/^    unsigned notIndexed :1;    \/* True if there is a NOT INDEXED clause *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
notNull	sqlite3.c	/^  u8 notNull;      \/* An OE_ code for handling a NOT NULL constraint *\/$/;"	m	struct:Column	file:	access:public
notReady	sqlite3.c	/^  Bitmask notReady;          \/* FROM entries not usable at this level *\/$/;"	m	struct:WhereLevel	file:	access:public
notUsed1	sqlite3.c	/^    double notUsed1;            \/* Spacer *\/$/;"	m	union:sqlite3::__anon2	file:	access:public
notValidCheckConstraint	sqlite3.c	/^static void notValidCheckConstraint($/;"	f	file:	signature:( Parse *pParse, NameContext *pNC, const char *zMsg )
notValidCheckConstraint	sqlite3.c	79762;"	d	file:
notValidPartIdxWhere	sqlite3.c	/^static void notValidPartIdxWhere($/;"	f	file:	signature:( Parse *pParse, NameContext *pNC, const char *zMsg )
nowValue	sqlite3.c	/^  int nowValue[10];         \/* Current value *\/$/;"	m	struct:sqlite3StatType	file:	access:public
nrhs	sqlite3.c	/^  unsigned char nrhs;     \/* Number of right-hand side symbols in the rule *\/$/;"	m	struct:__anon24	file:	access:public
nullRow	sqlite3.c	/^  u8 nullRow;           \/* True if pointing to a row with no data *\/$/;"	m	struct:VdbeCursor	file:	access:public
nullifFunc	sqlite3.c	/^static void nullifFunc($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **argv )
numberOfCachePages	sqlite3.c	/^static int numberOfCachePages(PCache *p){$/;"	f	file:	signature:(PCache *p)
numericType	sqlite3.c	/^static u16 numericType(Mem *pMem){$/;"	f	file:	signature:(Mem *pMem)
nzVar	sqlite3.c	/^  int nzVar;                \/* Number of available slots in azVar[] *\/$/;"	m	struct:Parse	file:	access:public
nzVar	sqlite3.c	/^  ynVar nzVar;            \/* Number of entries in azVar[] *\/$/;"	m	struct:Vdbe	file:	access:public
offset	sqlite3.c	/^  unsigned long long offset;        \/* offset to first byte to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:	access:public
offsetof	sqlite3.c	8513;"	d	file:
okConstFactor	sqlite3.c	/^  u8 okConstFactor;    \/* OK to factor out constants *\/$/;"	m	struct:Parse	file:	access:public
okOnePass	sqlite3.c	/^  u8 okOnePass;             \/* Ok to use one-pass algorithm for UPDATE\/DELETE *\/$/;"	m	struct:WhereInfo	file:	access:public
oldLockingContext	sqlite3.c	/^  void *oldLockingContext;     \/* Original lockingcontext to restore on close *\/$/;"	m	struct:proxyLockingContext	file:	access:public
oldmask	sqlite3.c	/^  u32 oldmask;         \/* Mask of old.* columns referenced *\/$/;"	m	struct:Parse	file:	access:public
omit	sqlite3.c	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:	access:public
omit	sqlite3.h	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	access:public
omitMask	sqlite3.c	/^      u16 omitMask;          \/* Terms that may be omitted *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:	access:public
onError	sqlite3.c	/^  u8 onError;              \/* OE_Abort, OE_Ignore, OE_Replace, or OE_None *\/$/;"	m	struct:Index	file:	access:public
onErrorText	sqlite3.c	/^static const char *onErrorText(int onError){$/;"	f	file:	signature:(int onError)
op	sqlite3.c	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:	access:public
op	sqlite3.c	/^  int op;                         \/* Constraining operation *\/$/;"	m	struct:RtreeConstraint	file:	access:public
op	sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:	access:public
op	sqlite3.c	/^  u8 op;                   \/* Split operator.  TK_AND or TK_OR *\/$/;"	m	struct:WhereClause	file:	access:public
op	sqlite3.c	/^  u8 op;                  \/* One of TK_DELETE, TK_UPDATE, TK_INSERT         *\/$/;"	m	struct:Trigger	file:	access:public
op	sqlite3.c	/^  u8 op;                 \/* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT *\/$/;"	m	struct:Select	file:	access:public
op	sqlite3.c	/^  u8 op;                 \/* Operation performed by this node *\/$/;"	m	struct:Expr	file:	access:public
op	sqlite3.c	/^  u8 op;               \/* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT *\/$/;"	m	struct:TriggerStep	file:	access:public
op	sqlite3.h	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	access:public
op2	sqlite3.c	/^  u8 op2;                \/* TK_REGISTER: original value of Expr.op$/;"	m	struct:Expr	file:	access:public
opIterNext	sqlite3.c	/^static Op *opIterNext(VdbeOpIter *p){$/;"	f	file:	signature:(VdbeOpIter *p)
opMask	sqlite3.c	/^  u32 opMask;                \/* Acceptable operators *\/$/;"	m	struct:WhereScan	file:	access:public
opPrecedence	sqlite3.c	/^static int opPrecedence(Fts3Expr *p){$/;"	f	file:	signature:(Fts3Expr *p)
opcode	sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOp	file:	access:public
opcode	sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOpList	file:	access:public
open	sqlite3.c	/^  int  (*open)(const char*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
open16	sqlite3.c	/^  int  (*open16)(const void*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
openDatabase	sqlite3.c	/^static int openDatabase($/;"	f	file:	signature:( const char *zFilename, sqlite3 **ppDb, unsigned int flags, const char *zVfs )
openDirectory	sqlite3.c	/^static int openDirectory(const char *zFilename, int *pFd){$/;"	f	file:	signature:(const char *zFilename, int *pFd)
openDirectory	sqlite3.c	/^static int openDirectory(const char*, int*);$/;"	p	file:	signature:(const char*, int*)
openFlags	sqlite3.c	/^  int openFlags;                      \/* The flags specified at open() *\/$/;"	m	struct:unixFile	file:	access:public
openFlags	sqlite3.c	/^  u8 openFlags;         \/* Flags to sqlite3BtreeOpen() *\/$/;"	m	struct:BtShared	file:	access:public
openFlags	sqlite3.c	/^  unsigned int openFlags;       \/* Flags passed to sqlite3_vfs.xOpen() *\/$/;"	m	struct:sqlite3	file:	access:public
openStatTable	sqlite3.c	/^static void openStatTable($/;"	f	file:	signature:( Parse *pParse, int iDb, int iStatCur, const char *zWhere, const char *zWhereType )
openSubJournal	sqlite3.c	/^static int openSubJournal(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
open_v2	sqlite3.c	/^  int (*open_v2)(const char*,sqlite3**,int,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
operatorMask	sqlite3.c	/^static u16 operatorMask(int op){$/;"	f	file:	signature:(int op)
opflags	sqlite3.c	/^  u8 opflags;         \/* Mask of the OPFLG_* flags in opcodes.h *\/$/;"	m	struct:VdbeOp	file:	access:public
orconf	sqlite3.c	/^  int orconf;             \/* Default ON CONFLICT policy *\/$/;"	m	struct:TriggerPrg	file:	access:public
orconf	sqlite3.c	/^  u8 orconf;           \/* OE_Rollback etc. *\/$/;"	m	struct:TriggerStep	file:	access:public
orderByConsumed	sqlite3.c	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info	file:	access:public
orderByConsumed	sqlite3.h	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info	access:public
orphanTrigger	sqlite3.c	/^    u8 orphanTrigger;           \/* Last statement is orphaned TEMP trigger *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:	access:public
osAccess	sqlite3.c	25164;"	d	file:
osAreFileApisANSI	sqlite3.c	32975;"	d	file:
osAreFileApisANSI	sqlite3.c	32996;"	d	file:
osCharLowerW	sqlite3.c	33005;"	d	file:
osCharUpperW	sqlite3.c	33013;"	d	file:
osClose	sqlite3.c	25161;"	d	file:
osCloseHandle	sqlite3.c	33017;"	d	file:
osCreateEventExW	sqlite3.c	33482;"	d	file:
osCreateFile2	sqlite3.c	33536;"	d	file:
osCreateFileA	sqlite3.c	33025;"	d	file:
osCreateFileMappingA	sqlite3.c	33044;"	d	file:
osCreateFileMappingFromApp	sqlite3.c	33591;"	d	file:
osCreateFileMappingW	sqlite3.c	33054;"	d	file:
osCreateFileW	sqlite3.c	33034;"	d	file:
osCreateMutexW	sqlite3.c	33063;"	d	file:
osDeleteFileA	sqlite3.c	33072;"	d	file:
osDeleteFileW	sqlite3.c	33080;"	d	file:
osFallocate	sqlite3.c	25236;"	d	file:
osFchmod	sqlite3.c	25229;"	d	file:
osFchown	sqlite3.c	25251;"	d	file:
osFcntl	sqlite3.c	25190;"	d	file:
osFcntl	sqlite3.c	25520;"	d	file:
osFcntl	sqlite3.c	25521;"	d	file:
osFileTimeToLocalFileTime	sqlite3.c	33088;"	d	file:
osFileTimeToSystemTime	sqlite3.c	33097;"	d	file:
osFlushFileBuffers	sqlite3.c	33102;"	d	file:
osFormatMessageA	sqlite3.c	33110;"	d	file:
osFormatMessageW	sqlite3.c	33119;"	d	file:
osFreeLibrary	sqlite3.c	33128;"	d	file:
osFstat	sqlite3.c	25180;"	d	file:
osFtruncate	sqlite3.c	25187;"	d	file:
osGetCurrentProcessId	sqlite3.c	33132;"	d	file:
osGetDiskFreeSpaceA	sqlite3.c	33140;"	d	file:
osGetDiskFreeSpaceW	sqlite3.c	33149;"	d	file:
osGetFileAttributesA	sqlite3.c	33158;"	d	file:
osGetFileAttributesExW	sqlite3.c	33174;"	d	file:
osGetFileAttributesW	sqlite3.c	33166;"	d	file:
osGetFileInformationByHandleEx	sqlite3.c	33518;"	d	file:
osGetFileSize	sqlite3.c	33183;"	d	file:
osGetFullPathNameA	sqlite3.c	33191;"	d	file:
osGetFullPathNameW	sqlite3.c	33200;"	d	file:
osGetLastError	sqlite3.c	33205;"	d	file:
osGetNativeSystemInfo	sqlite3.c	33562;"	d	file:
osGetProcAddressA	sqlite3.c	33220;"	d	file:
osGetProcessHeap	sqlite3.c	33583;"	d	file:
osGetSystemInfo	sqlite3.c	33229;"	d	file:
osGetSystemTime	sqlite3.c	33233;"	d	file:
osGetSystemTimeAsFileTime	sqlite3.c	33241;"	d	file:
osGetTempPathA	sqlite3.c	33250;"	d	file:
osGetTempPathW	sqlite3.c	33258;"	d	file:
osGetTickCount	sqlite3.c	33266;"	d	file:
osGetTickCount64	sqlite3.c	33554;"	d	file:
osGetVersionExA	sqlite3.c	33275;"	d	file:
osGetVersionExW	sqlite3.c	33285;"	d	file:
osGetcwd	sqlite3.c	25167;"	d	file:
osGetpagesize	sqlite3.c	25267;"	d	file:
osHeapAlloc	sqlite3.c	33290;"	d	file:
osHeapCompact	sqlite3.c	33339;"	d	file:
osHeapCreate	sqlite3.c	33299;"	d	file:
osHeapDestroy	sqlite3.c	33308;"	d	file:
osHeapFree	sqlite3.c	33312;"	d	file:
osHeapReAlloc	sqlite3.c	33316;"	d	file:
osHeapSize	sqlite3.c	33321;"	d	file:
osHeapValidate	sqlite3.c	33330;"	d	file:
osInterlockedCompareExchange	sqlite3.c	33602;"	d	file:
osIsNT	sqlite3.c	33864;"	d	file:
osIsNT	sqlite3.c	33866;"	d	file:
osIsNT	sqlite3.c	33868;"	d	file:
osIsNT	sqlite3.c	33870;"	d	file:
osLoadLibraryA	sqlite3.c	33347;"	d	file:
osLoadLibraryW	sqlite3.c	33356;"	d	file:
osLoadPackagedLibrary	sqlite3.c	33545;"	d	file:
osLocalFree	sqlite3.c	33364;"	d	file:
osLocaltime	sqlite3.c	/^static int osLocaltime(time_t *t, struct tm *pTm){$/;"	f	file:	signature:(time_t *t, struct tm *pTm)
osLockFile	sqlite3.c	33373;"	d	file:
osLockFileEx	sqlite3.c	33384;"	d	file:
osMapViewOfFile	sqlite3.c	33394;"	d	file:
osMapViewOfFileFromApp	sqlite3.c	33527;"	d	file:
osMkdir	sqlite3.c	25245;"	d	file:
osMmap	sqlite3.c	25255;"	d	file:
osMremap	sqlite3.c	25265;"	d	file:
osMultiByteToWideChar	sqlite3.c	33399;"	d	file:
osMunmap	sqlite3.c	25258;"	d	file:
osOpen	sqlite3.c	25158;"	d	file:
osOpenDirectory	sqlite3.c	25242;"	d	file:
osOutputDebugStringA	sqlite3.c	33571;"	d	file:
osOutputDebugStringW	sqlite3.c	33579;"	d	file:
osPread	sqlite3.c	25200;"	d	file:
osPread64	sqlite3.c	25207;"	d	file:
osPwrite	sqlite3.c	25217;"	d	file:
osPwrite64	sqlite3.c	25225;"	d	file:
osQueryPerformanceCounter	sqlite3.c	33404;"	d	file:
osRead	sqlite3.c	25193;"	d	file:
osReadFile	sqlite3.c	33409;"	d	file:
osRmdir	sqlite3.c	25248;"	d	file:
osSetEndOfFile	sqlite3.c	33414;"	d	file:
osSetFilePointer	sqlite3.c	33422;"	d	file:
osSetFilePointerEx	sqlite3.c	33509;"	d	file:
osSleep	sqlite3.c	33431;"	d	file:
osStat	sqlite3.c	25170;"	d	file:
osSystemTimeToFileTime	sqlite3.c	33435;"	d	file:
osUnlink	sqlite3.c	25239;"	d	file:
osUnlockFile	sqlite3.c	33445;"	d	file:
osUnlockFileEx	sqlite3.c	33455;"	d	file:
osUnmapViewOfFile	sqlite3.c	33464;"	d	file:
osWaitForSingleObject	sqlite3.c	33491;"	d	file:
osWaitForSingleObjectEx	sqlite3.c	33500;"	d	file:
osWideCharToMultiByte	sqlite3.c	33468;"	d	file:
osWrite	sqlite3.c	25210;"	d	file:
osWriteFile	sqlite3.c	33473;"	d	file:
overflow	sqlite3.c	/^  u8 overflow;      \/* True if integer overflow seen *\/$/;"	m	struct:SumCtx	file:	access:public
overload_function	sqlite3.c	/^  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);$/;"	m	struct:sqlite3_api_routines	file:	access:public
owner	sqlite3.c	/^  volatile DWORD owner;      \/* Thread holding this mutex *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
owner	sqlite3.c	/^  volatile pthread_t owner;  \/* Thread that is within this mutex *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
p	sqlite3.c	/^    void *p;               \/* Generic pointer *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
p	sqlite3.c	/^  void *p;          \/* Pointer to sampled record *\/$/;"	m	struct:IndexSample	file:	access:public
p1	sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:	access:public
p1	sqlite3.c	/^  int p1;             \/* First operand *\/$/;"	m	struct:VdbeOp	file:	access:public
p1	sqlite3.c	/^  signed char p1;     \/* First operand *\/$/;"	m	struct:VdbeOpList	file:	access:public
p2	sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:	access:public
p2	sqlite3.c	/^  int p2;             \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOp	file:	access:public
p2	sqlite3.c	/^  signed char p2;     \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOpList	file:	access:public
p3	sqlite3.c	/^  int p3;             \/* The third parameter *\/$/;"	m	struct:VdbeOp	file:	access:public
p3	sqlite3.c	/^  signed char p3;     \/* Third parameter *\/$/;"	m	struct:VdbeOpList	file:	access:public
p3	sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:	access:public
p4	sqlite3.c	/^  } p4;$/;"	m	struct:VdbeOp	typeref:union:VdbeOp::__anon1	file:	access:public
p4type	sqlite3.c	/^  signed char p4type; \/* One of the P4_xxx constants for p4 *\/$/;"	m	struct:VdbeOp	file:	access:public
p5	sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:	access:public
p5	sqlite3.c	/^  u8 p5;              \/* Fifth parameter is an unsigned character *\/$/;"	m	struct:VdbeOp	file:	access:public
pAggInfo	sqlite3.c	/^  AggInfo *pAggInfo;     \/* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION *\/$/;"	m	struct:Expr	file:	access:public
pAggInfo	sqlite3.c	/^  AggInfo *pAggInfo;   \/* Information about aggregates at this level *\/$/;"	m	struct:NameContext	file:	access:public
pAinc	sqlite3.c	/^  AutoincInfo *pAinc;  \/* Information about AUTOINCREMENT counters *\/$/;"	m	struct:Parse	file:	access:public
pAndInfo	sqlite3.c	/^    WhereAndInfo *pAndInfo; \/* Extra information if (eOperator& WO_AND)!=0 *\/$/;"	m	union:WhereTerm::__anon21	file:	access:public
pAppData	sqlite3.c	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods	file:	access:public
pAppData	sqlite3.c	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs	file:	access:public
pAppData	sqlite3.h	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods	access:public
pAppData	sqlite3.h	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs	access:public
pArg	sqlite3.c	/^  void *pArg;                \/* First arg to busy callback *\/$/;"	m	struct:BusyHandler	file:	access:public
pArg	sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
pArg	sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
pArg	sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods	access:public
pArg	sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2	access:public
pAuthArg	sqlite3.c	/^  void *pAuthArg;               \/* 1st argument to the access auth function *\/$/;"	m	struct:sqlite3	file:	access:public
pAux	sqlite3.c	/^  void *pAux;                          \/* pAux passed to create_module() *\/$/;"	m	struct:Module	file:	access:public
pAux	sqlite3.c	/^  void *pAux;                     \/* Aux data pointer *\/$/;"	m	struct:AuxData	file:	access:public
pAuxData	sqlite3.c	/^  AuxData *pAuxData;      \/* Linked list of auxdata allocations *\/$/;"	m	struct:Vdbe	file:	access:public
pBackup	sqlite3.c	/^  sqlite3_backup *pBackup;    \/* Pointer to list of ongoing backup processes *\/$/;"	m	struct:Pager	file:	access:public
pBlob	sqlite3.c	/^  sqlite3_blob *pBlob;            \/* If not NULL, blob handle to read node *\/$/;"	m	struct:Fts3SegReader	file:	access:public
pBlockingConnection	sqlite3.c	/^  sqlite3 *pBlockingConnection; \/* Connection that caused SQLITE_LOCKED *\/$/;"	m	struct:sqlite3	file:	access:public
pBt	sqlite3.c	/^  BtShared *pBt;            \/* The BtShared this cursor points to *\/$/;"	m	struct:BtCursor	file:	access:public
pBt	sqlite3.c	/^  BtShared *pBt;       \/* Pointer to BtShared that this page is part of *\/$/;"	m	struct:MemPage	file:	access:public
pBt	sqlite3.c	/^  BtShared *pBt;     \/* Sharable content of this btree *\/$/;"	m	struct:Btree	file:	access:public
pBt	sqlite3.c	/^  BtShared *pBt;    \/* The tree being checked out *\/$/;"	m	struct:IntegrityCk	file:	access:public
pBt	sqlite3.c	/^  Btree *pBt;           \/* Separate file holding temporary table *\/$/;"	m	struct:VdbeCursor	file:	access:public
pBt	sqlite3.c	/^  Btree *pBt;          \/* The B*Tree structure for this database file *\/$/;"	m	struct:Db	file:	access:public
pBtree	sqlite3.c	/^  Btree *pBtree;            \/* The Btree to which this cursor belongs *\/$/;"	m	struct:BtCursor	file:	access:public
pBtree	sqlite3.c	/^  Btree *pBtree;        \/* Btree handle holding this lock *\/$/;"	m	struct:BtLock	file:	access:public
pBuf	sqlite3.c	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page	file:	access:public
pBuf	sqlite3.h	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page	access:public
pBusyHandlerArg	sqlite3.c	/^  void *pBusyHandlerArg;      \/* Context argument for xBusyHandler *\/$/;"	m	struct:Pager	file:	access:public
pCache	sqlite3.c	/^  PCache *pCache;                \/* Cache that owns this page *\/$/;"	m	struct:PgHdr	file:	access:public
pCache	sqlite3.c	/^  PCache1 *pCache;               \/* Cache that currently owns this page *\/$/;"	m	struct:PgHdr1	file:	access:public
pCache	sqlite3.c	/^  sqlite3_pcache *pCache;             \/* Pluggable cache module *\/$/;"	m	struct:PCache	file:	access:public
pCheck	sqlite3.c	/^  ExprList *pCheck;    \/* All CHECK constraints *\/$/;"	m	struct:Table	file:	access:public
pChunk	sqlite3.c	/^  FileChunk *pChunk;              \/* Specific chunk into which cursor points *\/$/;"	m	struct:FilePoint	file:	access:public
pChunk	sqlite3.c	/^  struct RowSetChunk *pChunk;    \/* List of all chunk allocations *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetChunk	file:	access:public
pCodec	sqlite3.c	/^  void *pCodec;               \/* First argument to xCodec... methods *\/$/;"	m	struct:Pager	file:	access:public
pColl	sqlite3.c	/^    CollSeq *pColl;        \/* Used when p4type is P4_COLLSEQ *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
pCollNeededArg	sqlite3.c	/^  void *pCollNeededArg;$/;"	m	struct:sqlite3	file:	access:public
pCols	sqlite3.c	/^    ExprList *pCols;                \/* List of explicit column names, or NULL *\/$/;"	m	struct:With::Cte	file:	access:public
pColumns	sqlite3.c	/^  IdList *pColumns;       \/* If this is an UPDATE OF <column-list> trigger,$/;"	m	struct:Trigger	file:	access:public
pCommitArg	sqlite3.c	/^  void *pCommitArg;                 \/* Argument to xCommitCallback() *\/   $/;"	m	struct:sqlite3	file:	access:public
pConstExpr	sqlite3.c	/^  ExprList *pConstExpr;\/* Constant expressions *\/$/;"	m	struct:Parse	file:	access:public
pContext	sqlite3.c	/^  void *pContext;                   \/* pContext from when function registered *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
pContext	sqlite3.c	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry	file:	access:public
pContext	sqlite3.c	/^  void *pContext;$/;"	m	struct:RtreeGeomCallback	file:	access:public
pContext	sqlite3.h	/^  void *pContext;                   \/* pContext from when function registered *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
pContext	sqlite3.h	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry	access:public
pCovidx	sqlite3.c	/^    Index *pCovidx;       \/* Possible covering index for WHERE_MULTI_OR *\/$/;"	m	union:WhereLevel::__anon16	file:	access:public
pCsr	sqlite3.c	/^  BtCursor *pCsr;         \/* Cursor pointing at blob row *\/$/;"	m	struct:Incrblob	file:	access:public
pCsr	sqlite3.c	/^  Fts3Cursor *pCsr;               \/* Cursor snippet is being generated from *\/$/;"	m	struct:SnippetIter	file:	access:public
pCsr	sqlite3.c	/^  Fts3Cursor *pCsr;               \/* FTS3 Cursor *\/$/;"	m	struct:LoadDoclistCtx	file:	access:public
pCsr	sqlite3.c	/^  Fts3Cursor *pCsr;$/;"	m	struct:TermOffsetCtx	file:	access:public
pCsr	sqlite3.c	/^  sqlite3_tokenizer_cursor *pCsr; \/* Cursor to iterate through zInput *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
pCtx	sqlite3.c	/^  sqlite3_context *pCtx;              \/* Write error message here *\/$/;"	m	struct:ParseContext	file:	access:public
pCurrent	sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:unix_syscall	file:	access:public
pCurrent	sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:win_syscall	file:	access:public
pCursor	sqlite3.c	/^  BtCursor *pCursor;    \/* A list of all open cursors *\/$/;"	m	struct:BtShared	file:	access:public
pCursor	sqlite3.c	/^  BtCursor *pCursor;    \/* The cursor structure of the backend *\/$/;"	m	struct:VdbeCursor	file:	access:public
pCursor	sqlite3.c	/^  Fts3Cursor *pCursor;            \/* FTS3 Cursor *\/$/;"	m	struct:MatchInfo	file:	access:public
pData	sqlite3.c	/^  void *pData;                   \/* Page data *\/$/;"	m	struct:PgHdr	file:	access:public
pDbFd	sqlite3.c	/^  sqlite3_file *pDbFd;       \/* File handle for the database file *\/$/;"	m	struct:Wal	file:	access:public
pDbPage	sqlite3.c	/^  DbPage *pDbPage;     \/* Pager page handle *\/$/;"	m	struct:MemPage	file:	access:public
pDef	sqlite3.c	/^    FuncDef *pDef;      \/* Used only when flags==MEM_Agg *\/$/;"	m	union:Mem::MemValue	file:	access:public
pDefault	sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:unix_syscall	file:	access:public
pDefault	sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:win_syscall	file:	access:public
pDeferred	sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred search tokens, if any *\/$/;"	m	struct:Fts3Cursor	file:	access:public
pDeferred	sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred token object for this token *\/$/;"	m	struct:Fts3PhraseToken	file:	access:public
pDelFrame	sqlite3.c	/^  VdbeFrame *pDelFrame;   \/* List of frame objects to free on VM reset *\/$/;"	m	struct:Vdbe	file:	access:public
pDeleteNode	sqlite3.c	/^  sqlite3_stmt *pDeleteNode;$/;"	m	struct:Rtree	file:	access:public
pDeleteParent	sqlite3.c	/^  sqlite3_stmt *pDeleteParent;$/;"	m	struct:Rtree	file:	access:public
pDeleteRowid	sqlite3.c	/^  sqlite3_stmt *pDeleteRowid;$/;"	m	struct:Rtree	file:	access:public
pDeleted	sqlite3.c	/^  RtreeNode *pDeleted;$/;"	m	struct:Rtree	file:	access:public
pDest	sqlite3.c	/^  Btree *pDest;            \/* Destination b-tree file *\/$/;"	m	struct:sqlite3_backup	file:	access:public
pDestDb	sqlite3.c	/^  sqlite3* pDestDb;        \/* Destination database handle *\/$/;"	m	struct:sqlite3_backup	file:	access:public
pDestructor	sqlite3.c	/^  FuncDestructor *pDestructor;   \/* Reference counted destructor function *\/$/;"	m	struct:FuncDef	file:	access:public
pDflt	sqlite3.c	/^  Expr *pDflt;     \/* Default value of this column *\/$/;"	m	struct:Column	file:	access:public
pDfltColl	sqlite3.c	/^  CollSeq *pDfltColl;           \/* The default collating sequence (BINARY) *\/$/;"	m	struct:sqlite3	file:	access:public
pDirty	sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:	access:public
pDirty	sqlite3.c	/^  PgHdr *pDirty;                 \/* Transient list of dirty pages *\/$/;"	m	struct:PgHdr	file:	access:public
pDirtyNext	sqlite3.c	/^  PgHdr *pDirtyNext;             \/* Next element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:	access:public
pDirtyPrev	sqlite3.c	/^  PgHdr *pDirtyPrev;             \/* Previous element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:	access:public
pDirtyTail	sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:	access:public
pDisconnect	sqlite3.c	/^  VTable *pDisconnect;    \/* Disconnect these in next sqlite3_prepare() *\/$/;"	m	struct:sqlite3	file:	access:public
pEList	sqlite3.c	/^  ExprList *pEList;      \/* The fields of the result *\/$/;"	m	struct:Select	file:	access:public
pEList	sqlite3.c	/^  ExprList *pEList;    \/* Optional list of result-set columns *\/$/;"	m	struct:NameContext	file:	access:public
pEnd	sqlite3.c	/^  void *pEnd;             \/* First byte past end of available space *\/$/;"	m	struct:Lookaside	file:	access:public
pEnd	sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:	access:public
pEntry	sqlite3.c	/^  struct RowSetEntry *pEntry;    \/* List of entries using pRight *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:	access:public
pErr	sqlite3.c	/^  sqlite3_value *pErr;          \/* Most recent error message *\/$/;"	m	struct:sqlite3	file:	access:public
pExpr	sqlite3.c	/^    Expr *pExpr;             \/* Expression encoding the function *\/$/;"	m	struct:AggInfo::AggInfo_func	file:	access:public
pExpr	sqlite3.c	/^    Expr *pExpr;             \/* The original expression *\/$/;"	m	struct:AggInfo::AggInfo_col	file:	access:public
pExpr	sqlite3.c	/^    Expr *pExpr;            \/* The list of expressions *\/$/;"	m	struct:ExprList::ExprList_item	file:	access:public
pExpr	sqlite3.c	/^  Expr *pExpr;            \/* Pointer to the subexpression that is this term *\/$/;"	m	struct:WhereTerm	file:	access:public
pExpr	sqlite3.c	/^  Expr *pExpr;          \/* The expression parse tree *\/$/;"	m	struct:ExprSpan	file:	access:public
pExpr	sqlite3.c	/^  Fts3Expr *pExpr;                \/* Parsed MATCH query string *\/$/;"	m	struct:Fts3Cursor	file:	access:public
pExpr	sqlite3.c	/^  Fts3Expr *pExpr;                \/* Pointer to phrase expression *\/$/;"	m	struct:LcsIterator	file:	access:public
pExprList	sqlite3.c	/^  ExprList *pExprList; \/* SET clause for UPDATE. *\/$/;"	m	struct:TriggerStep	file:	access:public
pExtra	sqlite3.c	/^  void *pExtra;                  \/* Extra content *\/$/;"	m	struct:PgHdr	file:	access:public
pExtra	sqlite3.c	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page	file:	access:public
pExtra	sqlite3.h	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page	access:public
pFKey	sqlite3.c	/^  FKey *pFKey;         \/* Linked list of all foreign keys in this table *\/$/;"	m	struct:Table	file:	access:public
pFd	sqlite3.c	/^  sqlite3_file *pFd;              \/* File handle *\/$/;"	m	struct:SorterFile	file:	access:public
pFd	sqlite3.c	/^  sqlite3_file *pFd;              \/* File handle to write to *\/$/;"	m	struct:PmaWriter	file:	access:public
pFd	sqlite3.c	/^  sqlite3_file *pFd;           \/* The WAL file to which we write *\/$/;"	m	struct:WalWriter	file:	access:public
pFd	sqlite3.c	/^  sqlite3_file *pFd;          \/* File handle we are reading from *\/$/;"	m	struct:PmaReader	file:	access:public
pFiller	sqlite3.c	/^  void *pFiller;      \/* So that sizeof(Mem) is a multiple of 8 *\/$/;"	m	struct:Mem	file:	access:public
pFilter	sqlite3.c	/^  Fts3SegFilter *pFilter;         \/* Pointer to filter object *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
pFirst	sqlite3.c	/^  FileChunk *pFirst;              \/* Head of in-memory chunk-list *\/$/;"	m	struct:MemJournal	file:	access:public
pFirst	sqlite3.c	/^  struct MemBlockHdr *pFirst;$/;"	m	struct:__anon9	typeref:struct:__anon9::MemBlockHdr	file:	access:public
pFirst	sqlite3.c	/^  unixShm *pFirst;           \/* All unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:	access:public
pFirst	sqlite3.c	/^  winShm *pFirst;            \/* All winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:	access:public
pForest	sqlite3.c	/^  struct RowSetEntry *pForest;   \/* List of binary trees of entries *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:	access:public
pFrame	sqlite3.c	/^    VdbeFrame *pFrame;  \/* Used when flags==MEM_Frame *\/$/;"	m	union:Mem::MemValue	file:	access:public
pFrame	sqlite3.c	/^  VdbeFrame *pFrame;      \/* Parent frame *\/$/;"	m	struct:Vdbe	file:	access:public
pFree	sqlite3.c	/^  LookasideSlot *pFree;   \/* List of available buffers *\/$/;"	m	struct:Lookaside	file:	access:public
pFree	sqlite3.c	/^  PgFreeslot *pFree;             \/* Free page blocks *\/$/;"	m	struct:PCacheGlobal	file:	access:public
pFree	sqlite3.c	/^  void *pFree;            \/* Free this when deleting the vdbe *\/$/;"	m	struct:Vdbe	file:	access:public
pFresh	sqlite3.c	/^  struct RowSetEntry *pFresh;    \/* Source of new entry objects *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:	access:public
pFrom	sqlite3.c	/^  Table *pFrom;     \/* Table containing the REFERENCES clause (aka: Child) *\/$/;"	m	struct:FKey	file:	access:public
pFts3Tab	sqlite3.c	/^  Fts3Table *pFts3Tab;$/;"	m	struct:Fts3auxTable	file:	access:public
pFunc	sqlite3.c	/^    FuncDef *pFunc;          \/* The aggregate function implementation *\/$/;"	m	struct:AggInfo::AggInfo_func	file:	access:public
pFunc	sqlite3.c	/^    FuncDef *pFunc;        \/* Used when p4type is P4_FUNCDEF *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
pFunc	sqlite3.c	/^  FuncDef *pFunc;       \/* Pointer to function information *\/$/;"	m	struct:sqlite3_context	file:	access:public
pGroup	sqlite3.c	/^  PGroup *pGroup;                     \/* PGroup this cache belongs to *\/$/;"	m	struct:PCache1	file:	access:public
pGroupBy	sqlite3.c	/^  ExprList *pGroupBy;     \/* The group by clause *\/$/;"	m	struct:AggInfo	file:	access:public
pGroupBy	sqlite3.c	/^  ExprList *pGroupBy;    \/* The GROUP BY clause *\/$/;"	m	struct:Select	file:	access:public
pHasContent	sqlite3.c	/^  Bitvec *pHasContent;  \/* Set of pages moved to free-list this transaction *\/$/;"	m	struct:BtShared	file:	access:public
pHash	sqlite3.c	/^  FuncDef *pHash;      \/* Next with a different name but the same hash *\/$/;"	m	struct:FuncDef	file:	access:public
pHaving	sqlite3.c	/^  Expr *pHaving;         \/* The HAVING clause *\/$/;"	m	struct:Select	file:	access:public
pHead	sqlite3.c	/^  char *pHead;                    \/* Position list data following iHead *\/$/;"	m	struct:SnippetPhrase	file:	access:public
pHeap	sqlite3.c	/^  void *pHeap;                      \/* Heap storage space *\/$/;"	m	struct:Sqlite3Config	file:	access:public
pI64	sqlite3.c	/^    i64 *pI64;             \/* Used when p4type is P4_INT64 *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
pId	sqlite3.c	/^  struct vxworksFileId *pId;          \/* Unique file ID *\/$/;"	m	struct:unixFile	typeref:struct:unixFile::vxworksFileId	file:	access:public
pId	sqlite3.c	/^  struct vxworksFileId *pId;  \/* Unique file ID for vxworks. *\/$/;"	m	struct:unixFileId	typeref:struct:unixFileId::vxworksFileId	file:	access:public
pIdList	sqlite3.c	/^  IdList *pIdList;     \/* Column names for INSERT *\/$/;"	m	struct:TriggerStep	file:	access:public
pIdx	sqlite3.c	/^  Index *pIdx;$/;"	m	struct:ValueNewStat4Ctx	file:	access:public
pIn	sqlite3.c	/^  void *pIn;                     \/* Argument to the thread *\/$/;"	m	struct:SQLiteThread	file:	access:public
pIn	sqlite3.c	/^  void *pIn;               \/* Argument to xTask *\/$/;"	m	struct:SQLiteThread	file:	access:public
pInJournal	sqlite3.c	/^  Bitvec *pInJournal;         \/* One bit for each page in the database file *\/$/;"	m	struct:Pager	file:	access:public
pInSavepoint	sqlite3.c	/^  Bitvec *pInSavepoint;        \/* Set of pages in this savepoint *\/$/;"	m	struct:PagerSavepoint	file:	access:public
pIncr	sqlite3.c	/^  IncrMerger *pIncr;          \/* Incremental merger *\/$/;"	m	struct:PmaReader	file:	access:public
pIndex	sqlite3.c	/^      Index *pIndex;         \/* Index used, or NULL *\/$/;"	m	struct:WhereLoop::__anon18::__anon19	file:	access:public
pIndex	sqlite3.c	/^    Index *pIndex;    \/* Index structure corresponding to zIndex, if any *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
pIndex	sqlite3.c	/^  Index *pIndex;       \/* List of SQL indexes on this table. *\/$/;"	m	struct:Table	file:	access:public
pInfo	sqlite3.c	/^  sqlite3_rtree_query_info *pInfo;  \/* xGeom and xQueryFunc argument *\/$/;"	m	struct:RtreeConstraint	file:	access:public
pInitMutex	sqlite3.c	/^  sqlite3_mutex *pInitMutex;        \/* Mutex used by sqlite3_initialize() *\/$/;"	m	struct:Sqlite3Config	file:	access:public
pInode	sqlite3.c	/^  unixInodeInfo *pInode;              \/* Info about locks on this inode *\/$/;"	m	struct:unixFile	file:	access:public
pInode	sqlite3.c	/^  unixInodeInfo *pInode;     \/* unixInodeInfo that owns this SHM node *\/$/;"	m	struct:unixShmNode	file:	access:public
pInput	sqlite3.c	/^  const char *pInput;          \/* input we are tokenizing *\/$/;"	m	struct:simple_tokenizer_cursor	file:	access:public
pIter	sqlite3.c	/^  UBreakIterator *pIter;      \/* ICU break-iterator object *\/$/;"	m	struct:IcuCursor	file:	access:public
pKey	sqlite3.c	/^  const char *pKey;            \/* Key associated with this element *\/$/;"	m	struct:HashElem	file:	access:public
pKey	sqlite3.c	/^  void *pKey;               \/* Saved key that was cursor last known position *\/$/;"	m	struct:BtCursor	file:	access:public
pKey	sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:	access:public
pKeyInfo	sqlite3.c	/^    KeyInfo *pKeyInfo;     \/* Used when p4type is P4_KEYINFO *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
pKeyInfo	sqlite3.c	/^  KeyInfo *pKeyInfo;              \/* How to compare records *\/$/;"	m	struct:VdbeSorter	file:	access:public
pKeyInfo	sqlite3.c	/^  KeyInfo *pKeyInfo;       \/* A KeyInfo object suitable for this index *\/$/;"	m	struct:Index	file:	access:public
pKeyInfo	sqlite3.c	/^  KeyInfo *pKeyInfo;    \/* Info about index keys needed by index cursors *\/$/;"	m	struct:VdbeCursor	file:	access:public
pKeyInfo	sqlite3.c	/^  KeyInfo *pKeyInfo;  \/* Collation and sort-order information *\/$/;"	m	struct:UnpackedRecord	file:	access:public
pKeyInfo	sqlite3.c	/^  struct KeyInfo *pKeyInfo; \/* Argument passed to comparison function *\/$/;"	m	struct:BtCursor	typeref:struct:BtCursor::KeyInfo	file:	access:public
pLast	sqlite3.c	/^  TriggerStep *pLast;  \/* Last element in link-list. Valid for 1st elem only *\/$/;"	m	struct:TriggerStep	file:	access:public
pLast	sqlite3.c	/^  struct MemBlockHdr *pLast;$/;"	m	struct:__anon9	typeref:struct:__anon9::MemBlockHdr	file:	access:public
pLast	sqlite3.c	/^  struct RowSetEntry *pLast;     \/* Last entry on the pEntry list *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:	access:public
pLeft	sqlite3.c	/^  Expr *pLeft;           \/* Left subnode *\/$/;"	m	struct:Expr	file:	access:public
pLeft	sqlite3.c	/^  Fts3Expr *pLeft;           \/* Left operand *\/$/;"	m	struct:Fts3Expr	file:	access:public
pLeft	sqlite3.c	/^  struct RowSetEntry *pLeft;    \/* Left subtree (smaller entries) *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:	access:public
pLeftmost	sqlite3.c	/^  SegmentNode *pLeftmost;         \/* Pointer to left-most node of this depth *\/$/;"	m	struct:SegmentNode	file:	access:public
pLimit	sqlite3.c	/^  Expr *pLimit;          \/* LIMIT expression. NULL means not used. *\/$/;"	m	struct:Select	file:	access:public
pLimit	sqlite3.c	/^  Expr *pLimit;    \/* The LIMIT expression.  NULL if there is no limit *\/$/;"	m	struct:LimitVal	file:	access:public
pList	sqlite3.c	/^    ExprList *pList;     \/* op = IN, EXISTS, SELECT, CASE, FUNCTION, BETWEEN *\/$/;"	m	union:Expr::__anon4	file:	access:public
pList	sqlite3.c	/^  PendingList *pList;             \/* Doclist is assembled here *\/$/;"	m	struct:Fts3DeferredToken	file:	access:public
pList	sqlite3.c	/^  SorterRecord *pList;            \/* Linked list of records *\/$/;"	m	struct:SorterList	file:	access:public
pList	sqlite3.c	/^  char *pList;                    \/* Pointer to start of phrase position list *\/$/;"	m	struct:SnippetPhrase	file:	access:public
pList	sqlite3.c	/^  char *pList;                    \/* Position-list *\/$/;"	m	struct:TermOffset	file:	access:public
pList	sqlite3.c	/^  char *pList;                   \/* Pointer to position list following iDocid *\/$/;"	m	struct:Fts3Doclist	file:	access:public
pList	sqlite3.c	/^  char *pList;$/;"	m	struct:TokenDoclist	file:	access:public
pLock	sqlite3.c	/^  BtLock *pLock;        \/* List of locks held on this shared-btree struct *\/$/;"	m	struct:BtShared	file:	access:public
pLogArg	sqlite3.c	/^  void *pLogArg;                       \/* First argument to xLog() *\/$/;"	m	struct:Sqlite3Config	file:	access:public
pLoops	sqlite3.c	/^  WhereLoop *pLoops;        \/* List of all WhereLoop objects *\/$/;"	m	struct:WhereInfo	file:	access:public
pLruHead	sqlite3.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:	access:public
pLruNext	sqlite3.c	/^  PgHdr1 *pLruNext;              \/* Next in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:	access:public
pLruPrev	sqlite3.c	/^  PgHdr1 *pLruPrev;              \/* Previous in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:	access:public
pLruTail	sqlite3.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:	access:public
pMap	sqlite3.c	/^    void *pMap;$/;"	m	struct:winShmNode::ShmRegion	file:	access:public
pMapRegion	sqlite3.c	/^  void *pMapRegion;                   \/* Memory mapped region *\/$/;"	m	struct:unixFile	file:	access:public
pMapRegion	sqlite3.c	/^  void *pMapRegion;             \/* Area memory mapped *\/$/;"	m	struct:winFile	file:	access:public
pMem	sqlite3.c	/^    Mem *pMem;             \/* Used when p4type is P4_MEM *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
pMem	sqlite3.c	/^  Mem *pMem;            \/* Memory cell used to store aggregate context *\/$/;"	m	struct:sqlite3_context	file:	access:public
pMerger	sqlite3.c	/^  MergeEngine *pMerger;           \/* Merge engine thread reads data from *\/$/;"	m	struct:IncrMerger	file:	access:public
pMerger	sqlite3.c	/^  MergeEngine *pMerger;           \/* Or here, if bUseThreads==0 *\/$/;"	m	struct:VdbeSorter	file:	access:public
pMethod	sqlite3.c	/^  const sqlite3_io_methods *pMethod; \/*** Must be first ***\/$/;"	m	struct:winFile	file:	access:public
pMethod	sqlite3.c	/^  sqlite3_io_methods *pMethod;    \/* I\/O methods on journal files *\/$/;"	m	struct:JournalFile	file:	access:public
pMethod	sqlite3.c	/^  sqlite3_io_methods *pMethod;    \/* Parent class. MUST BE FIRST *\/$/;"	m	struct:MemJournal	file:	access:public
pMethod	sqlite3.c	/^  sqlite3_io_methods const *pMethod;  \/* Always the first entry *\/$/;"	m	struct:unixFile	file:	access:public
pMethods	sqlite3.c	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods	file:	access:public
pMethods	sqlite3.h	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods	access:public
pMmapFreelist	sqlite3.c	/^  PgHdr *pMmapFreelist;       \/* List of free mmap page headers (pDirty) *\/$/;"	m	struct:Pager	file:	access:public
pMod	sqlite3.c	/^  Module *pMod;             \/* Pointer to module implementation *\/$/;"	m	struct:VTable	file:	access:public
pMod	sqlite3.c	/^  const sqlite3_tokenizer_module *pMod;$/;"	m	struct:Fts3tokTable	file:	access:public
pModule	sqlite3.c	/^  const sqlite3_module *pModule;       \/* Callback pointers *\/$/;"	m	struct:Module	file:	access:public
pModule	sqlite3.c	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab	file:	access:public
pModule	sqlite3.c	/^  const sqlite3_tokenizer_module *pModule;  \/* The module for this tokenizer *\/$/;"	m	struct:sqlite3_tokenizer	file:	access:public
pModule	sqlite3.h	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab	access:public
pNC	sqlite3.c	/^    NameContext *pNC;                          \/* Naming context *\/$/;"	m	union:Walker::__anon8	file:	access:public
pName	sqlite3.c	/^  const Token *pName; \/* Name of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:	access:public
pNew	sqlite3.c	/^  WhereLoop *pNew;          \/* Template WhereLoop *\/$/;"	m	struct:WhereLoopBuilder	file:	access:public
pNewTable	sqlite3.c	/^  Table *pNewTable;         \/* A table being constructed by CREATE TABLE *\/$/;"	m	struct:Parse	file:	access:public
pNewTrigger	sqlite3.c	/^  Trigger *pNewTrigger;     \/* Trigger under construct by a CREATE TRIGGER *\/$/;"	m	struct:Parse	file:	access:public
pNext	sqlite3.c	/^    SorterRecord *pNext;          \/* Pointer to next record in list *\/$/;"	m	union:SorterRecord::__anon14	file:	access:public
pNext	sqlite3.c	/^  AutoincInfo *pNext;   \/* Next info block in a list of them all *\/$/;"	m	struct:AutoincInfo	file:	access:public
pNext	sqlite3.c	/^  AuxData *pNext;                 \/* Next element in list *\/$/;"	m	struct:AuxData	file:	access:public
pNext	sqlite3.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:	access:public
pNext	sqlite3.c	/^  BtLock *pNext;        \/* Next in BtShared.pLock list *\/$/;"	m	struct:BtLock	file:	access:public
pNext	sqlite3.c	/^  BtShared *pNext;      \/* Next on a list of sharable BtShared structs *\/$/;"	m	struct:BtShared	file:	access:public
pNext	sqlite3.c	/^  Btree *pNext;      \/* List of other sharable Btrees from the same db *\/$/;"	m	struct:Btree	file:	access:public
pNext	sqlite3.c	/^  FileChunk *pNext;               \/* Next chunk in the journal *\/$/;"	m	struct:FileChunk	file:	access:public
pNext	sqlite3.c	/^  Fts3DeferredToken *pNext;       \/* Next in list of deferred tokens *\/$/;"	m	struct:Fts3DeferredToken	file:	access:public
pNext	sqlite3.c	/^  FuncDef *pNext;      \/* Next function with same name *\/$/;"	m	struct:FuncDef	file:	access:public
pNext	sqlite3.c	/^  Index *pNext;            \/* The next index associated with the same table *\/$/;"	m	struct:Index	file:	access:public
pNext	sqlite3.c	/^  LookasideSlot *pNext;    \/* Next buffer in the list of free buffers *\/$/;"	m	struct:LookasideSlot	file:	access:public
pNext	sqlite3.c	/^  NameContext *pNext;  \/* Next outer name context.  NULL for outermost *\/$/;"	m	struct:NameContext	file:	access:public
pNext	sqlite3.c	/^  PgFreeslot *pNext;  \/* Next free slot *\/$/;"	m	struct:PgFreeslot	file:	access:public
pNext	sqlite3.c	/^  PgHdr1 *pNext;                 \/* Next in hash table chain *\/$/;"	m	struct:PgHdr1	file:	access:public
pNext	sqlite3.c	/^  RtreeNode *pNext;           \/* Next node in this hash collision chain *\/$/;"	m	struct:RtreeNode	file:	access:public
pNext	sqlite3.c	/^  Savepoint *pNext;                   \/* Parent savepoint (if any) *\/$/;"	m	struct:Savepoint	file:	access:public
pNext	sqlite3.c	/^  Select *pNext;         \/* Next select to the left in a compound *\/$/;"	m	struct:Select	file:	access:public
pNext	sqlite3.c	/^  SubProgram *pNext;            \/* Next sub-program already visited *\/$/;"	m	struct:SubProgram	file:	access:public
pNext	sqlite3.c	/^  Trigger *pNext;         \/* Next trigger associated with the table *\/$/;"	m	struct:Trigger	file:	access:public
pNext	sqlite3.c	/^  TriggerPrg *pNext;      \/* Next entry in Parse.pTriggerPrg list *\/$/;"	m	struct:TriggerPrg	file:	access:public
pNext	sqlite3.c	/^  TriggerStep *pNext;  \/* Next in the link-list *\/$/;"	m	struct:TriggerStep	file:	access:public
pNext	sqlite3.c	/^  UnixUnusedFd *pNext;      \/* Next unused file descriptor on same file *\/$/;"	m	struct:UnixUnusedFd	file:	access:public
pNext	sqlite3.c	/^  VTable *pNext;            \/* Next in linked list (see above) *\/$/;"	m	struct:VTable	file:	access:public
pNext	sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:	access:public
pNext	sqlite3.c	/^  sqlite3_backup *pNext;   \/* Next backup associated with source pager *\/$/;"	m	struct:sqlite3_backup	file:	access:public
pNext	sqlite3.c	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs	file:	access:public
pNext	sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::MemBlockHdr	file:	access:public
pNext	sqlite3.c	/^  struct ScratchFreeslot *pNext;   \/* Next unused scratch buffer *\/$/;"	m	struct:ScratchFreeslot	typeref:struct:ScratchFreeslot::ScratchFreeslot	file:	access:public
pNext	sqlite3.c	/^  struct vxworksFileId *pNext;  \/* Next in a list of them all *\/$/;"	m	struct:vxworksFileId	typeref:struct:vxworksFileId::vxworksFileId	file:	access:public
pNext	sqlite3.c	/^  unixInodeInfo *pNext;           \/* List of all unixInodeInfo objects *\/$/;"	m	struct:unixInodeInfo	file:	access:public
pNext	sqlite3.c	/^  unixShm *pNext;            \/* Next unixShm with the same unixShmNode *\/$/;"	m	struct:unixShm	file:	access:public
pNext	sqlite3.c	/^  winShm *pNext;             \/* Next winShm with the same winShmNode *\/$/;"	m	struct:winShm	file:	access:public
pNext	sqlite3.c	/^  winShmNode *pNext;         \/* Next in list of all winShmNode objects *\/$/;"	m	struct:winShmNode	file:	access:public
pNext	sqlite3.h	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs	access:public
pNextBlocked	sqlite3.c	/^  sqlite3 *pNextBlocked;        \/* Next in list of all blocked connections *\/$/;"	m	struct:sqlite3	file:	access:public
pNextChunk	sqlite3.c	/^  struct RowSetChunk *pNextChunk;        \/* Next chunk on list of them all *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetChunk	file:	access:public
pNextDocid	sqlite3.c	/^  char *pNextDocid;              \/* Pointer to next docid *\/$/;"	m	struct:Fts3Doclist	file:	access:public
pNextFrom	sqlite3.c	/^  FKey *pNextFrom;  \/* Next FKey with the same in pFrom. Next parent of pFrom *\/$/;"	m	struct:FKey	file:	access:public
pNextId	sqlite3.c	/^  char *pNextId;                  \/* Pointer into the body of aDoclist *\/$/;"	m	struct:Fts3Cursor	file:	access:public
pNextLoop	sqlite3.c	/^  WhereLoop *pNextLoop; \/* Next WhereLoop object in the WhereClause *\/$/;"	m	struct:WhereLoop	file:	access:public
pNextTo	sqlite3.c	/^  FKey *pNextTo;    \/* Next with the same zTo. Next child of zTo. *\/$/;"	m	struct:FKey	file:	access:public
pNextZombie	sqlite3.c	/^  Table *pNextZombie;  \/* Next on the Parse.pZombieTab list *\/$/;"	m	struct:Table	file:	access:public
pOffset	sqlite3.c	/^  Expr *pOffset;         \/* OFFSET expression. NULL means not used. *\/$/;"	m	struct:Select	file:	access:public
pOffset	sqlite3.c	/^  Expr *pOffset;   \/* The OFFSET expression.  NULL if there is none *\/$/;"	m	struct:LimitVal	file:	access:public
pOffsetList	sqlite3.c	/^  char *pOffsetList;$/;"	m	struct:Fts3SegReader	file:	access:public
pOldMethod	sqlite3.c	/^  sqlite3_io_methods const *pOldMethod;     \/* Original I\/O methods for close *\/$/;"	m	struct:proxyLockingContext	file:	access:public
pOn	sqlite3.c	/^    Expr *pOn;        \/* The ON clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
pOrInfo	sqlite3.c	/^    WhereOrInfo *pOrInfo;   \/* Extra information if (eOperator & WO_OR)!=0 *\/$/;"	m	union:WhereTerm::__anon21	file:	access:public
pOrSet	sqlite3.c	/^  WhereOrSet *pOrSet;       \/* Record best loops here, if not NULL *\/$/;"	m	struct:WhereLoopBuilder	file:	access:public
pOrderBy	sqlite3.c	/^  ExprList *pOrderBy;       \/* ORDER BY clause *\/$/;"	m	struct:WhereLoopBuilder	file:	access:public
pOrderBy	sqlite3.c	/^  ExprList *pOrderBy;       \/* The ORDER BY clause or NULL *\/$/;"	m	struct:WhereInfo	file:	access:public
pOrderBy	sqlite3.c	/^  ExprList *pOrderBy;    \/* The ORDER BY clause *\/$/;"	m	struct:Select	file:	access:public
pOrderBy	sqlite3.c	/^  ExprList *pOrderBy;   \/* The ORDER BY (or GROUP BY clause) *\/$/;"	m	struct:SortCtx	file:	access:public
pOrderBy	sqlite3.c	/^  ExprList *pOrderBy;  \/* Key columns for SRT_Queue and SRT_DistQueue *\/$/;"	m	struct:SelectDest	file:	access:public
pOrigWC	sqlite3.c	/^  WhereClause *pOrigWC;      \/* Original, innermost WhereClause *\/$/;"	m	struct:WhereScan	file:	access:public
pOut	sqlite3.c	/^  Mem *pOut;            \/* The return value is stored here *\/$/;"	m	struct:sqlite3_context	file:	access:public
pOut	sqlite3.c	/^  void *pOut;                    \/* Result returned by the thread *\/$/;"	m	struct:SQLiteThread	file:	access:public
pOuter	sqlite3.c	/^  WhereClause *pOuter;     \/* Outer conjunction *\/$/;"	m	struct:WhereClause	file:	access:public
pOuter	sqlite3.c	/^  With *pOuter;                   \/* Containing WITH clause, or NULL *\/$/;"	m	struct:With	file:	access:public
pPCache	sqlite3.c	/^  PCache *pPCache;            \/* Pointer to page cache object *\/$/;"	m	struct:Pager	file:	access:public
pPage	sqlite3.c	/^  sqlite3_pcache_page *pPage;    \/* Pcache object page handle *\/$/;"	m	struct:PgHdr	file:	access:public
pPage	sqlite3.c	/^  void *pPage;                      \/* Page cache memory *\/$/;"	m	struct:Sqlite3Config	file:	access:public
pPage1	sqlite3.c	/^  MemPage *pPage1;      \/* First page of the database *\/$/;"	m	struct:BtShared	file:	access:public
pPage1	sqlite3.c	/^  PgHdr *pPage1;                      \/* Reference to page 1 *\/$/;"	m	struct:PCache	file:	access:public
pPager	sqlite3.c	/^  Pager *pPager;                 \/* The pager this page is part of *\/$/;"	m	struct:PgHdr	file:	access:public
pPager	sqlite3.c	/^  Pager *pPager;        \/* The page cache *\/$/;"	m	struct:BtShared	file:	access:public
pPager	sqlite3.c	/^  Pager *pPager;    \/* The associated pager.  Also accessible by pBt->pPager *\/$/;"	m	struct:IntegrityCk	file:	access:public
pParent	sqlite3.c	/^  Fts3Expr *pParent;         \/* pParent->pLeft==this or pParent->pRight==this *\/$/;"	m	struct:Fts3Expr	file:	access:public
pParent	sqlite3.c	/^  RtreeNode *pParent;         \/* Parent node *\/$/;"	m	struct:RtreeNode	file:	access:public
pParent	sqlite3.c	/^  SegmentNode *pParent;           \/* Parent node (or NULL for root node) *\/$/;"	m	struct:SegmentNode	file:	access:public
pParent	sqlite3.c	/^  VdbeFrame *pParent;     \/* Parent of this frame, or NULL if parent is main *\/$/;"	m	struct:VdbeFrame	file:	access:public
pParse	sqlite3.c	/^  Parse *pParse;                            \/* Parser context.  *\/$/;"	m	struct:Walker	file:	access:public
pParse	sqlite3.c	/^  Parse *pParse;              \/* The Parse structure *\/$/;"	m	struct:AuthContext	file:	access:public
pParse	sqlite3.c	/^  Parse *pParse;            \/* Parsing and code generating context *\/$/;"	m	struct:WhereInfo	file:	access:public
pParse	sqlite3.c	/^  Parse *pParse;          \/* Parsing context used to create this Vdbe *\/$/;"	m	struct:Vdbe	file:	access:public
pParse	sqlite3.c	/^  Parse *pParse;       \/* The parser *\/$/;"	m	struct:NameContext	file:	access:public
pParse	sqlite3.c	/^  Parse *pParse;      \/* The parsing context.  Error messages written here *\/$/;"	m	struct:DbFixer	file:	access:public
pParse	sqlite3.c	/^  Parse *pParse;$/;"	m	struct:ValueNewStat4Ctx	file:	access:public
pPartIdxWhere	sqlite3.c	/^  Expr *pPartIdxWhere;     \/* WHERE clause for partial indices *\/$/;"	m	struct:Index	file:	access:public
pPayload	sqlite3.c	/^  u8 *pPayload;  \/* Pointer to the start of payload *\/$/;"	m	struct:CellInfo	file:	access:public
pPhrase	sqlite3.c	/^  Fts3Phrase *pPhrase;            \/* The phrase the token belongs to *\/$/;"	m	struct:Fts3TokenAndCost	file:	access:public
pPhrase	sqlite3.c	/^  Fts3Phrase *pPhrase;       \/* Valid if eType==FTSQUERY_PHRASE *\/$/;"	m	struct:Fts3Expr	file:	access:public
pPrev	sqlite3.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:	access:public
pPrev	sqlite3.c	/^  Btree *pPrev;      \/* Back pointer of the same list *\/$/;"	m	struct:Btree	file:	access:public
pPrev	sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:	access:public
pPrev	sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::	file:	access:public
pPrev	sqlite3.c	/^  unixInodeInfo *pPrev;           \/*    .... doubly linked *\/$/;"	m	struct:unixInodeInfo	file:	access:public
pPrevTo	sqlite3.c	/^  FKey *pPrevTo;    \/* Previous with the same zTo *\/$/;"	m	struct:FKey	file:	access:public
pPrior	sqlite3.c	/^  Select *pPrior;        \/* Prior select in a compound select statement *\/$/;"	m	struct:Select	file:	access:public
pProfileArg	sqlite3.c	/^  void *pProfileArg;                        \/* Argument to profile function *\/$/;"	m	struct:sqlite3	file:	access:public
pProgram	sqlite3.c	/^    SubProgram *pProgram;  \/* Used when p4type is P4_SUBPROGRAM *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
pProgram	sqlite3.c	/^  SubProgram *pProgram;   \/* Linked list of all sub-programs used by VM *\/$/;"	m	struct:Vdbe	file:	access:public
pProgram	sqlite3.c	/^  SubProgram *pProgram;   \/* Program implementing pTrigger\/orconf *\/$/;"	m	struct:TriggerPrg	file:	access:public
pProgressArg	sqlite3.c	/^  void *pProgressArg;           \/* Argument to the progress callback *\/$/;"	m	struct:sqlite3	file:	access:public
pRead	sqlite3.c	/^  char *pRead;                    \/* Cursor used to iterate through aDoclist *\/$/;"	m	struct:LcsIterator	file:	access:public
pReadNode	sqlite3.c	/^  sqlite3_stmt *pReadNode;$/;"	m	struct:Rtree	file:	access:public
pReadParent	sqlite3.c	/^  sqlite3_stmt *pReadParent;$/;"	m	struct:Rtree	file:	access:public
pReadRowid	sqlite3.c	/^  sqlite3_stmt *pReadRowid;$/;"	m	struct:Rtree	file:	access:public
pReader	sqlite3.c	/^  PmaReader *pReader;             \/* Readr data from here after Rewind() *\/$/;"	m	struct:VdbeSorter	file:	access:public
pReal	sqlite3.c	/^    double *pReal;         \/* Used when p4type is P4_REAL *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
pReal	sqlite3.c	/^  sqlite3_file *pReal;            \/* The "real" underlying file descriptor *\/$/;"	m	struct:JournalFile	file:	access:public
pRec	sqlite3.c	/^  UnpackedRecord *pRec;     \/* Probe for stat4 (if required) *\/$/;"	m	struct:WhereLoopBuilder	file:	access:public
pReprepare	sqlite3.c	/^  Vdbe *pReprepare;         \/* VM being reprepared (sqlite3Reprepare()) *\/$/;"	m	struct:Parse	file:	access:public
pResult	sqlite3.c	/^  void *pResult;           \/* Result of xTask *\/$/;"	m	struct:SQLiteThread	file:	access:public
pResultSet	sqlite3.c	/^  ExprList *pResultSet;     \/* Result set. DISTINCT operates on these *\/$/;"	m	struct:WhereInfo	file:	access:public
pResultSet	sqlite3.c	/^  Mem *pResultSet;        \/* Pointer to an array of results *\/$/;"	m	struct:Vdbe	file:	access:public
pRight	sqlite3.c	/^  Expr *pRight;          \/* Right subnode *\/$/;"	m	struct:Expr	file:	access:public
pRight	sqlite3.c	/^  Fts3Expr *pRight;          \/* Right operand *\/$/;"	m	struct:Fts3Expr	file:	access:public
pRight	sqlite3.c	/^  SegmentNode *pRight;            \/* Pointer to right-sibling *\/$/;"	m	struct:SegmentNode	file:	access:public
pRight	sqlite3.c	/^  struct RowSetEntry *pRight;   \/* Right subtree (larger entries) or list *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:	access:public
pRollbackArg	sqlite3.c	/^  void *pRollbackArg;               \/* Argument to xRollbackCallback() *\/   $/;"	m	struct:sqlite3	file:	access:public
pRoot	sqlite3.c	/^  Fts3Expr *pRoot;                \/* Root of NEAR\/AND cluster *\/$/;"	m	struct:Fts3TokenAndCost	file:	access:public
pRowSet	sqlite3.c	/^    RowSet *pRowSet;    \/* Used only when flags==MEM_RowSet *\/$/;"	m	union:Mem::MemValue	file:	access:public
pSavepoint	sqlite3.c	/^  Savepoint *pSavepoint;        \/* List of active savepoints *\/$/;"	m	struct:sqlite3	file:	access:public
pSchema	sqlite3.c	/^    Schema *pSchema;  \/* Schema to which this item is fixed *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
pSchema	sqlite3.c	/^  Schema *pSchema;         \/* Schema containing this index *\/$/;"	m	struct:Index	file:	access:public
pSchema	sqlite3.c	/^  Schema *pSchema;        \/* Schema containing the trigger *\/$/;"	m	struct:Trigger	file:	access:public
pSchema	sqlite3.c	/^  Schema *pSchema;     \/* Pointer to database schema (possibly shared) *\/$/;"	m	struct:Db	file:	access:public
pSchema	sqlite3.c	/^  Schema *pSchema;     \/* Schema that contains this table *\/$/;"	m	struct:Table	file:	access:public
pSchema	sqlite3.c	/^  Schema *pSchema;    \/* Fix items to this schema *\/$/;"	m	struct:DbFixer	file:	access:public
pSchema	sqlite3.c	/^  void *pSchema;        \/* Pointer to space allocated by sqlite3BtreeSchema() *\/$/;"	m	struct:BtShared	file:	access:public
pScopyFrom	sqlite3.c	/^  Mem *pScopyFrom;    \/* This Mem is a shallow copy of pScopyFrom *\/$/;"	m	struct:Mem	file:	access:public
pScratch	sqlite3.c	/^  void *pScratch;                   \/* Scratch memory *\/$/;"	m	struct:Sqlite3Config	file:	access:public
pScratchEnd	sqlite3.c	/^  void *pScratchEnd;$/;"	m	struct:Mem0Global	file:	access:public
pScratchFree	sqlite3.c	/^  ScratchFreeslot *pScratchFree;$/;"	m	struct:Mem0Global	file:	access:public
pSegcsr	sqlite3.c	/^  Fts3MultiSegReader *pSegcsr;    \/* Segment-reader for this token *\/$/;"	m	struct:Fts3PhraseToken	file:	access:public
pSegments	sqlite3.c	/^  sqlite3_blob *pSegments;        \/* Blob handle open on %_segments table *\/$/;"	m	struct:Fts3Table	file:	access:public
pSelect	sqlite3.c	/^    Select *pSelect;                \/* The definition of this CTE *\/$/;"	m	struct:With::Cte	file:	access:public
pSelect	sqlite3.c	/^    Select *pSelect;     \/* EP_xIsSelect and op = IN, EXISTS, SELECT *\/$/;"	m	union:Expr::__anon4	file:	access:public
pSelect	sqlite3.c	/^    Select *pSelect;  \/* A SELECT statement used in place of a table name *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
pSelect	sqlite3.c	/^  Select *pSelect;     \/* NULL for tables.  Points to definition if a view. *\/$/;"	m	struct:Table	file:	access:public
pSelect	sqlite3.c	/^  Select *pSelect;     \/* SELECT statment or RHS of INSERT INTO .. SELECT ... *\/$/;"	m	struct:TriggerStep	file:	access:public
pSem	sqlite3.c	/^  sem_t *pSem;                    \/* Named POSIX semaphore *\/$/;"	m	struct:unixInodeInfo	file:	access:public
pSeqTab	sqlite3.c	/^  Table *pSeqTab;      \/* The sqlite_sequence table used by AUTOINCREMENT *\/$/;"	m	struct:Schema	file:	access:public
pShm	sqlite3.c	/^  unixShm *pShm;                      \/* Shared memory segment information *\/$/;"	m	struct:unixFile	file:	access:public
pShm	sqlite3.c	/^  winShm *pShm;           \/* Instance of shared memory on this file *\/$/;"	m	struct:winFile	file:	access:public
pShmNode	sqlite3.c	/^  unixShmNode *pShmNode;          \/* Shared memory associated with this inode *\/$/;"	m	struct:unixInodeInfo	file:	access:public
pShmNode	sqlite3.c	/^  unixShmNode *pShmNode;     \/* The underlying unixShmNode object *\/$/;"	m	struct:unixShm	file:	access:public
pShmNode	sqlite3.c	/^  winShmNode *pShmNode;      \/* The underlying winShmNode object *\/$/;"	m	struct:winShm	file:	access:public
pSorter	sqlite3.c	/^  VdbeSorter *pSorter;            \/* Sorter that owns this sub-task *\/$/;"	m	struct:SortSubtask	file:	access:public
pSorter	sqlite3.c	/^  VdbeSorter *pSorter;  \/* Sorter object for OP_SorterOpen cursors *\/$/;"	m	struct:VdbeCursor	file:	access:public
pSqllogArg	sqlite3.c	/^  void *pSqllogArg;$/;"	m	struct:Sqlite3Config	file:	access:public
pSrc	sqlite3.c	/^  Btree *pSrc;             \/* Source b-tree file *\/$/;"	m	struct:sqlite3_backup	file:	access:public
pSrc	sqlite3.c	/^  SrcList *pSrc;         \/* The FROM clause *\/$/;"	m	struct:Select	file:	access:public
pSrc	sqlite3.c	/^  SrcList *pSrc;   \/* One particular FROM clause in a nested query *\/$/;"	m	struct:SrcCount	file:	access:public
pSrcCount	sqlite3.c	/^    struct SrcCount *pSrcCount;                \/* Counting column references *\/$/;"	m	union:Walker::__anon8	typeref:struct:Walker::__anon8::SrcCount	file:	access:public
pSrcDb	sqlite3.c	/^  sqlite3* pSrcDb;         \/* Source database handle *\/$/;"	m	struct:sqlite3_backup	file:	access:public
pSrcList	sqlite3.c	/^    SrcList *pSrcList;                         \/* FROM clause *\/$/;"	m	union:Walker::__anon8	file:	access:public
pSrcList	sqlite3.c	/^  SrcList *pSrcList;   \/* One or more tables used to resolve names *\/$/;"	m	struct:NameContext	file:	access:public
pStart	sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:	access:public
pStart	sqlite3.c	/^  void *pStart;           \/* First byte of available memory space *\/$/;"	m	struct:Lookaside	file:	access:public
pStmt	sqlite3.c	/^  sqlite3_stmt *pStmt;            \/* Prepared statement in use by the cursor *\/$/;"	m	struct:Fts3Cursor	file:	access:public
pStmt	sqlite3.c	/^  sqlite3_stmt *pStmt;    \/* Statement holding cursor open *\/$/;"	m	struct:Incrblob	file:	access:public
pStress	sqlite3.c	/^  void *pStress;                      \/* Argument to xStress *\/$/;"	m	struct:PCache	file:	access:public
pSynced	sqlite3.c	/^  PgHdr *pSynced;                     \/* Last synced page in dirty page list *\/$/;"	m	struct:PCache	file:	access:public
pTab	sqlite3.c	/^    Table *pTab;             \/* Source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:	access:public
pTab	sqlite3.c	/^    Table *pTab;      \/* An SQL table corresponding to zName *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
pTab	sqlite3.c	/^  Table *pTab;           \/* Table for TK_COLUMN expressions. *\/$/;"	m	struct:Expr	file:	access:public
pTab	sqlite3.c	/^  Table *pTab;          \/* Table this info block refers to *\/$/;"	m	struct:AutoincInfo	file:	access:public
pTab	sqlite3.c	/^  Table *pTab;        \/* The Table object to which the virtual table belongs *\/$/;"	m	struct:VtabCtx	file:	access:public
pTabList	sqlite3.c	/^  SrcList *pTabList;        \/* List of tables in the join *\/$/;"	m	struct:WhereInfo	file:	access:public
pTabSchema	sqlite3.c	/^  Schema *pTabSchema;     \/* Schema containing the table *\/$/;"	m	struct:Trigger	file:	access:public
pTable	sqlite3.c	/^  Table *pTable;           \/* The SQL table being indexed *\/$/;"	m	struct:Index	file:	access:public
pTail	sqlite3.c	/^  char *pTail;                    \/* Position list data following iTail *\/$/;"	m	struct:SnippetPhrase	file:	access:public
pTask	sqlite3.c	/^  SortSubtask *pTask;             \/* Task that owns this merger *\/$/;"	m	struct:IncrMerger	file:	access:public
pTask	sqlite3.c	/^  SortSubtask *pTask;        \/* Used by this thread only *\/$/;"	m	struct:MergeEngine	file:	access:public
pThread	sqlite3.c	/^  SQLiteThread *pThread;          \/* Background thread, if any *\/$/;"	m	struct:SortSubtask	file:	access:public
pTmpSpace	sqlite3.c	/^  char *pTmpSpace;            \/* Pager.pageSize bytes of space for tmp use *\/$/;"	m	struct:Pager	file:	access:public
pTmpSpace	sqlite3.c	/^  u8 *pTmpSpace;        \/* Temp space sufficient to hold a single cell *\/$/;"	m	struct:BtShared	file:	access:public
pTok	sqlite3.c	/^  sqlite3_tokenizer *pTok;$/;"	m	struct:Fts3tokTable	file:	access:public
pToken	sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* Pointer to corresponding expr token *\/$/;"	m	struct:Fts3DeferredToken	file:	access:public
pToken	sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* The token itself *\/$/;"	m	struct:Fts3TokenAndCost	file:	access:public
pToken	sqlite3.c	/^  char *pToken;                \/* storage for current token *\/$/;"	m	struct:simple_tokenizer_cursor	file:	access:public
pTokenizer	sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;       \/* Tokenizer for this cursor. *\/$/;"	m	struct:sqlite3_tokenizer_cursor	file:	access:public
pTokenizer	sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;      \/* Tokenizer module *\/$/;"	m	struct:ParseContext	file:	access:public
pTokenizer	sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;  \/* tokenizer for inserts and queries *\/$/;"	m	struct:Fts3Table	file:	access:public
pToplevel	sqlite3.c	/^  Parse *pToplevel;    \/* Parse structure for main program (or NULL) *\/$/;"	m	struct:Parse	file:	access:public
pTraceArg	sqlite3.c	/^  void *pTraceArg;                          \/* Argument to the trace function *\/$/;"	m	struct:sqlite3	file:	access:public
pTree	sqlite3.c	/^  SegmentNode *pTree;             \/* Pointer to interior tree structure *\/$/;"	m	struct:SegmentWriter	file:	access:public
pTrig	sqlite3.c	/^  Trigger *pTrig;      \/* The trigger that this step is a part of *\/$/;"	m	struct:TriggerStep	file:	access:public
pTrigger	sqlite3.c	/^  Trigger *pTrigger;      \/* Trigger this program was coded from *\/$/;"	m	struct:TriggerPrg	file:	access:public
pTrigger	sqlite3.c	/^  Trigger *pTrigger;   \/* List of triggers stored in pSchema *\/$/;"	m	struct:Table	file:	access:public
pTrigger	sqlite3.c	111584;"	d	file:
pTrigger	sqlite3.c	93899;"	d	file:
pTrigger	sqlite3.c	98362;"	d	file:
pTriggerPrg	sqlite3.c	/^  TriggerPrg *pTriggerPrg;  \/* Linked list of coded triggers *\/$/;"	m	struct:Parse	file:	access:public
pTriggerTab	sqlite3.c	/^  Table *pTriggerTab;  \/* Table triggers are being coded for *\/$/;"	m	struct:Parse	file:	access:public
pUnlockArg	sqlite3.c	/^  void *pUnlockArg;                     \/* Argument to xUnlockNotify *\/$/;"	m	struct:sqlite3	file:	access:public
pUnlockConnection	sqlite3.c	/^  sqlite3 *pUnlockConnection;           \/* Connection to watch for unlock *\/$/;"	m	struct:sqlite3	file:	access:public
pUnpacked	sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Space to unpack a record *\/$/;"	m	struct:SortSubtask	file:	access:public
pUnpacked	sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Used by VdbeSorterCompare() *\/$/;"	m	struct:VdbeSorter	file:	access:public
pUnused	sqlite3.c	/^  UnixUnusedFd *pUnused;              \/* Pre-allocated UnixUnusedFd *\/$/;"	m	struct:unixFile	file:	access:public
pUnused	sqlite3.c	/^  UnixUnusedFd *pUnused;          \/* Unused file descriptors to close *\/$/;"	m	struct:unixInodeInfo	file:	access:public
pUpdateArg	sqlite3.c	/^  void *pUpdateArg;$/;"	m	struct:sqlite3	file:	access:public
pUser	sqlite3.c	/^  void *pUser;                      \/* callback can use this, if desired *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
pUser	sqlite3.c	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry	file:	access:public
pUser	sqlite3.c	/^  void *pUser;          \/* First argument to xCmp() *\/$/;"	m	struct:CollSeq	file:	access:public
pUser	sqlite3.h	/^  void *pUser;                      \/* callback can use this, if desired *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
pUser	sqlite3.h	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry	access:public
pUserData	sqlite3.c	/^  void *pUserData;     \/* User data parameter *\/$/;"	m	struct:FuncDef	file:	access:public
pUserData	sqlite3.c	/^  void *pUserData;$/;"	m	struct:FuncDestructor	file:	access:public
pUsing	sqlite3.c	/^    IdList *pUsing;   \/* The USING clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
pVTable	sqlite3.c	/^  VTable *pVTable;     \/* List of VTable objects. *\/$/;"	m	struct:Table	file:	access:public
pVTable	sqlite3.c	/^  VTable *pVTable;    \/* The virtual table being constructed *\/$/;"	m	struct:VtabCtx	file:	access:public
pVdbe	sqlite3.c	/^  Vdbe *pVdbe;          \/* The VM that owns this context *\/$/;"	m	struct:sqlite3_context	file:	access:public
pVdbe	sqlite3.c	/^  Vdbe *pVdbe;         \/* An engine for executing database bytecode *\/$/;"	m	struct:Parse	file:	access:public
pVdbe	sqlite3.c	/^  Vdbe *pVdbe;       \/* Attach the explanation to this Vdbe *\/$/;"	m	struct:Explain	file:	access:public
pVdbe	sqlite3.c	/^  struct Vdbe *pVdbe;           \/* List of active virtual machines *\/$/;"	m	struct:sqlite3	typeref:struct:sqlite3::Vdbe	file:	access:public
pVdbeBranchArg	sqlite3.c	/^  void *pVdbeBranchArg;                                     \/* 1st argument *\/$/;"	m	struct:Sqlite3Config	file:	access:public
pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;                  \/* The VFS that created this unixFile *\/$/;"	m	struct:unixFile	file:	access:public
pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;              \/* The "real" underlying VFS *\/$/;"	m	struct:JournalFile	file:	access:public
pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;            \/* OS Interface *\/$/;"	m	struct:sqlite3	file:	access:public
pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;          \/* OS functions to use for IO *\/$/;"	m	struct:Pager	file:	access:public
pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;         \/* The VFS used to create pDbFd *\/$/;"	m	struct:Wal	file:	access:public
pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;      \/* The VFS used to open this file *\/$/;"	m	struct:winFile	file:	access:public
pVtab	sqlite3.c	/^    VTable *pVtab;         \/* Used when p4type is P4_VTAB *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
pVtab	sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Pointer to vtab instance *\/$/;"	m	struct:VTable	file:	access:public
pVtab	sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor	file:	access:public
pVtab	sqlite3.h	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor	access:public
pVtabCtx	sqlite3.c	/^  VtabCtx *pVtabCtx;            \/* Context for active vtab connect\/create *\/$/;"	m	struct:sqlite3	file:	access:public
pVtabCursor	sqlite3.c	/^  sqlite3_vtab_cursor *pVtabCursor;  \/* The cursor for a virtual table *\/$/;"	m	struct:VdbeCursor	file:	access:public
pWC	sqlite3.c	/^  WhereClause *pWC;          \/* WhereClause currently being scanned *\/$/;"	m	struct:WhereScan	file:	access:public
pWC	sqlite3.c	/^  WhereClause *pWC;         \/* WHERE clause terms *\/$/;"	m	struct:WhereLoopBuilder	file:	access:public
pWC	sqlite3.c	/^  WhereClause *pWC;       \/* The clause this term is part of *\/$/;"	m	struct:WhereTerm	file:	access:public
pWInfo	sqlite3.c	/^  WhereInfo *pWInfo;        \/* Information about this WHERE *\/$/;"	m	struct:WhereLoopBuilder	file:	access:public
pWInfo	sqlite3.c	/^  WhereInfo *pWInfo;       \/* WHERE clause processing context *\/$/;"	m	struct:WhereClause	file:	access:public
pWLoop	sqlite3.c	/^  struct WhereLoop *pWLoop;  \/* The selected WhereLoop object *\/$/;"	m	struct:WhereLevel	typeref:struct:WhereLevel::WhereLoop	file:	access:public
pWal	sqlite3.c	/^  Wal *pWal;                   \/* The complete WAL information *\/$/;"	m	struct:WalWriter	file:	access:public
pWal	sqlite3.c	/^  Wal *pWal;                  \/* Write-ahead log used by "journal_mode=wal" *\/$/;"	m	struct:Pager	file:	access:public
pWalArg	sqlite3.c	/^  void *pWalArg;$/;"	m	struct:sqlite3	file:	access:public
pWalFd	sqlite3.c	/^  sqlite3_file *pWalFd;      \/* File handle for WAL file *\/$/;"	m	struct:Wal	file:	access:public
pWhen	sqlite3.c	/^  Expr *pWhen;            \/* The WHEN clause of the expression (may be NULL) *\/$/;"	m	struct:Trigger	file:	access:public
pWhere	sqlite3.c	/^  Expr *pWhere;          \/* The WHERE clause *\/$/;"	m	struct:Select	file:	access:public
pWhere	sqlite3.c	/^  Expr *pWhere;        \/* The WHERE clause for DELETE or UPDATE steps *\/$/;"	m	struct:TriggerStep	file:	access:public
pWith	sqlite3.c	/^  With *pWith;              \/* Current WITH clause, or NULL *\/$/;"	m	struct:Parse	file:	access:public
pWith	sqlite3.c	/^  With *pWith;           \/* WITH clause attached to this select. Or NULL. *\/$/;"	m	struct:Select	file:	access:public
pWriteNode	sqlite3.c	/^  sqlite3_stmt *pWriteNode;$/;"	m	struct:Rtree	file:	access:public
pWriteParent	sqlite3.c	/^  sqlite3_stmt *pWriteParent;$/;"	m	struct:Rtree	file:	access:public
pWriteRowid	sqlite3.c	/^  sqlite3_stmt *pWriteRowid;$/;"	m	struct:Rtree	file:	access:public
pWriter	sqlite3.c	/^  Btree *pWriter;       \/* Btree with currently open write transaction *\/$/;"	m	struct:BtShared	file:	access:public
pZombieTab	sqlite3.c	/^  Table *pZombieTab;        \/* List of Table objects to delete after code gen *\/$/;"	m	struct:Parse	file:	access:public
padToSectorBoundary	sqlite3.c	/^  u8 padToSectorBoundary;    \/* Pad transactions out to the next sector *\/$/;"	m	struct:Wal	file:	access:public
page	sqlite3.c	/^  sqlite3_pcache_page page;$/;"	m	struct:PgHdr1	file:	access:public
pageHash	sqlite3.c	/^  u32 pageHash;                  \/* Hash of page content *\/$/;"	m	struct:PgHdr	file:	access:public
pageInJournal	sqlite3.c	/^static int pageInJournal(Pager *pPager, PgHdr *pPg){$/;"	f	file:	signature:(Pager *pPager, PgHdr *pPg)
pageReinit	sqlite3.c	/^static void pageReinit(DbPage *pData){$/;"	f	file:	signature:(DbPage *pData)
pageSize	sqlite3.c	/^  int pageSize;               \/* Number of bytes in a page *\/$/;"	m	struct:Pager	file:	access:public
pageSize	sqlite3.c	/^  u32 pageSize;         \/* Total number of bytes on a page *\/$/;"	m	struct:BtShared	file:	access:public
pagerAcquireMapPage	sqlite3.c	/^static int pagerAcquireMapPage($/;"	f	file:	signature:( Pager *pPager, Pgno pgno, void *pData, PgHdr **ppPage )
pagerBeginReadTransaction	sqlite3.c	/^static int pagerBeginReadTransaction(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
pagerBeginReadTransaction	sqlite3.c	41691;"	d	file:
pagerExclusiveLock	sqlite3.c	/^static int pagerExclusiveLock(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
pagerFixMaplimit	sqlite3.c	/^static void pagerFixMaplimit(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
pagerFreeMapHdrs	sqlite3.c	/^static void pagerFreeMapHdrs(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
pagerLockDb	sqlite3.c	/^static int pagerLockDb(Pager *pPager, int eLock){$/;"	f	file:	signature:(Pager *pPager, int eLock)
pagerOpenWal	sqlite3.c	/^static int pagerOpenWal(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
pagerOpenWalIfPresent	sqlite3.c	/^static int pagerOpenWalIfPresent(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
pagerOpenWalIfPresent	sqlite3.c	41690;"	d	file:
pagerOpentemp	sqlite3.c	/^static int pagerOpentemp($/;"	f	file:	signature:( Pager *pPager, sqlite3_file *pFile, int vfsFlags )
pagerPagecount	sqlite3.c	/^static int pagerPagecount(Pager *pPager, Pgno *pnPage){$/;"	f	file:	signature:(Pager *pPager, Pgno *pnPage)
pagerPlaybackSavepoint	sqlite3.c	/^static int pagerPlaybackSavepoint(Pager *pPager, PagerSavepoint *pSavepoint){$/;"	f	file:	signature:(Pager *pPager, PagerSavepoint *pSavepoint)
pagerReleaseMapPage	sqlite3.c	/^static void pagerReleaseMapPage(PgHdr *pPg){$/;"	f	file:	signature:(PgHdr *pPg)
pagerReportSize	sqlite3.c	/^static void pagerReportSize(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
pagerReportSize	sqlite3.c	42969;"	d	file:
pagerRollbackWal	sqlite3.c	/^static int pagerRollbackWal(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
pagerRollbackWal	sqlite3.c	41688;"	d	file:
pagerStress	sqlite3.c	/^static int pagerStress(void *p, PgHdr *pPg){$/;"	f	file:	signature:(void *p, PgHdr *pPg)
pagerSyncHotJournal	sqlite3.c	/^static int pagerSyncHotJournal(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
pagerUndoCallback	sqlite3.c	/^static int pagerUndoCallback(void *pCtx, Pgno iPg){$/;"	f	file:	signature:(void *pCtx, Pgno iPg)
pagerUnlockAndRollback	sqlite3.c	/^static void pagerUnlockAndRollback(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
pagerUnlockDb	sqlite3.c	/^static int pagerUnlockDb(Pager *pPager, int eLock){$/;"	f	file:	signature:(Pager *pPager, int eLock)
pagerUnlockIfUnused	sqlite3.c	/^static void pagerUnlockIfUnused(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
pagerUseWal	sqlite3.c	/^static int pagerUseWal(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
pagerUseWal	sqlite3.c	41687;"	d	file:
pagerWalFrames	sqlite3.c	/^static int pagerWalFrames($/;"	f	file:	signature:( Pager *pPager, PgHdr *pList, Pgno nTruncate, int isCommit )
pagerWalFrames	sqlite3.c	41689;"	d	file:
pagerWriteLargeSector	sqlite3.c	/^static SQLITE_NOINLINE int pagerWriteLargeSector(PgHdr *pPg){$/;"	f	file:	signature:(PgHdr *pPg)
pager_cksum	sqlite3.c	/^static u32 pager_cksum(Pager *pPager, const u8 *aData){$/;"	f	file:	signature:(Pager *pPager, const u8 *aData)
pager_datahash	sqlite3.c	/^static u32 pager_datahash(int nByte, unsigned char *pData){$/;"	f	file:	signature:(int nByte, unsigned char *pData)
pager_datahash	sqlite3.c	42073;"	d	file:
pager_delmaster	sqlite3.c	/^static int pager_delmaster(Pager *pPager, const char *zMaster){$/;"	f	file:	signature:(Pager *pPager, const char *zMaster)
pager_end_transaction	sqlite3.c	/^static int pager_end_transaction(Pager *pPager, int hasMaster, int bCommit){$/;"	f	file:	signature:(Pager *pPager, int hasMaster, int bCommit)
pager_error	sqlite3.c	/^static int pager_error(Pager *pPager, int rc){$/;"	f	file:	signature:(Pager *pPager, int rc)
pager_incr_changecounter	sqlite3.c	/^static int pager_incr_changecounter(Pager *pPager, int isDirectMode){$/;"	f	file:	signature:(Pager *pPager, int isDirectMode)
pager_open_journal	sqlite3.c	/^static int pager_open_journal(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
pager_pagehash	sqlite3.c	/^static u32 pager_pagehash(PgHdr *pPage){$/;"	f	file:	signature:(PgHdr *pPage)
pager_pagehash	sqlite3.c	42074;"	d	file:
pager_playback	sqlite3.c	/^static int pager_playback(Pager *pPager, int isHot){$/;"	f	file:	signature:(Pager *pPager, int isHot)
pager_playback_one_page	sqlite3.c	/^static int pager_playback_one_page($/;"	f	file:	signature:( Pager *pPager, i64 *pOffset, Bitvec *pDone, int isMainJrnl, int isSavepnt )
pager_reset	sqlite3.c	/^static void pager_reset(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
pager_set_pagehash	sqlite3.c	/^static void pager_set_pagehash(PgHdr *pPage){$/;"	f	file:	signature:(PgHdr *pPage)
pager_set_pagehash	sqlite3.c	42075;"	d	file:
pager_truncate	sqlite3.c	/^static int pager_truncate(Pager *pPager, Pgno nPage);$/;"	p	file:	signature:(Pager *pPager, Pgno nPage)
pager_truncate	sqlite3.c	/^static int pager_truncate(Pager *pPager, Pgno nPage){$/;"	f	file:	signature:(Pager *pPager, Pgno nPage)
pager_unlock	sqlite3.c	/^static void pager_unlock(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
pager_wait_on_lock	sqlite3.c	/^static int pager_wait_on_lock(Pager *pPager, int locktype){$/;"	f	file:	signature:(Pager *pPager, int locktype)
pager_write	sqlite3.c	/^static int pager_write(PgHdr *pPg){$/;"	f	file:	signature:(PgHdr *pPg)
pager_write_changecounter	sqlite3.c	/^static void pager_write_changecounter(PgHdr *pPg){$/;"	f	file:	signature:(PgHdr *pPg)
pager_write_pagelist	sqlite3.c	/^static int pager_write_pagelist(Pager *pPager, PgHdr *pList){$/;"	f	file:	signature:(Pager *pPager, PgHdr *pList)
parentWrite	sqlite3.c	/^static int parentWrite(Rtree *pRtree, sqlite3_int64 iNode, sqlite3_int64 iPar){$/;"	f	file:	signature:(Rtree *pRtree, sqlite3_int64 iNode, sqlite3_int64 iPar)
parseDateOrTime	sqlite3.c	/^static int parseDateOrTime($/;"	f	file:	signature:( sqlite3_context *context, const char *zDate, DateTime *p )
parseHhMmSs	sqlite3.c	/^static int parseHhMmSs(const char *zDate, DateTime *p){$/;"	f	file:	signature:(const char *zDate, DateTime *p)
parseModifier	sqlite3.c	/^static int parseModifier(sqlite3_context *pCtx, const char *zMod, DateTime *p){$/;"	f	file:	signature:(sqlite3_context *pCtx, const char *zMod, DateTime *p)
parseTimezone	sqlite3.c	/^static int parseTimezone(const char *zDate, DateTime *p){$/;"	f	file:	signature:(const char *zDate, DateTime *p)
parseYyyyMmDd	sqlite3.c	/^static int parseYyyyMmDd(const char *zDate, DateTime *p){$/;"	f	file:	signature:(const char *zDate, DateTime *p)
parse_word	loaddatabase.c	/^void parse_word(char *buff, struct word *wordbuf)$/;"	f	signature:(char *buff, struct word *wordbuf)
parse_word	loaddatabase.c	/^void parse_word(char *buff, struct word *wordbuf);$/;"	p	file:	signature:(char *buff, struct word *wordbuf)
patternCompare	sqlite3.c	/^static int patternCompare($/;"	f	file:	signature:( const u8 *zPattern, const u8 *zString, const struct compareInfo *pInfo, u32 esc )
payloadSize	sqlite3.c	/^  u32 payloadSize;      \/* Total number of bytes in the record *\/$/;"	m	struct:VdbeCursor	file:	access:public
pc	sqlite3.c	/^  int pc;                 \/* Program Counter in parent (calling) frame *\/$/;"	m	struct:VdbeFrame	file:	access:public
pc	sqlite3.c	/^  int pc;                 \/* The program counter *\/$/;"	m	struct:Vdbe	file:	access:public
pcache1	sqlite3.c	39322;"	d	file:
pcache1Alloc	sqlite3.c	/^static void *pcache1Alloc(int nByte){$/;"	f	file:	signature:(int nByte)
pcache1AllocPage	sqlite3.c	/^static PgHdr1 *pcache1AllocPage(PCache1 *pCache){$/;"	f	file:	signature:(PCache1 *pCache)
pcache1Cachesize	sqlite3.c	/^static void pcache1Cachesize(sqlite3_pcache *p, int nMax){$/;"	f	file:	signature:(sqlite3_pcache *p, int nMax)
pcache1Create	sqlite3.c	/^static sqlite3_pcache *pcache1Create(int szPage, int szExtra, int bPurgeable){$/;"	f	file:	signature:(int szPage, int szExtra, int bPurgeable)
pcache1Destroy	sqlite3.c	/^static void pcache1Destroy(sqlite3_pcache *p);$/;"	p	file:	signature:(sqlite3_pcache *p)
pcache1Destroy	sqlite3.c	/^static void pcache1Destroy(sqlite3_pcache *p){$/;"	f	file:	signature:(sqlite3_pcache *p)
pcache1EnforceMaxPage	sqlite3.c	/^static void pcache1EnforceMaxPage(PGroup *pGroup){$/;"	f	file:	signature:(PGroup *pGroup)
pcache1EnterMutex	sqlite3.c	39327;"	d	file:
pcache1Fetch	sqlite3.c	/^static sqlite3_pcache_page *pcache1Fetch($/;"	f	file:	signature:( sqlite3_pcache *p, unsigned int iKey, int createFlag )
pcache1FetchStage2	sqlite3.c	/^static SQLITE_NOINLINE PgHdr1 *pcache1FetchStage2($/;"	f	file:	signature:( PCache1 *pCache, unsigned int iKey, int createFlag )
pcache1Free	sqlite3.c	/^static int pcache1Free(void *p){$/;"	f	file:	signature:(void *p)
pcache1FreePage	sqlite3.c	/^static void pcache1FreePage(PgHdr1 *p){$/;"	f	file:	signature:(PgHdr1 *p)
pcache1Init	sqlite3.c	/^static int pcache1Init(void *NotUsed){$/;"	f	file:	signature:(void *NotUsed)
pcache1LeaveMutex	sqlite3.c	39328;"	d	file:
pcache1MemSize	sqlite3.c	/^static int pcache1MemSize(void *p){$/;"	f	file:	signature:(void *p)
pcache1Pagecount	sqlite3.c	/^static int pcache1Pagecount(sqlite3_pcache *p){$/;"	f	file:	signature:(sqlite3_pcache *p)
pcache1PinPage	sqlite3.c	/^static void pcache1PinPage(PgHdr1 *pPage){$/;"	f	file:	signature:(PgHdr1 *pPage)
pcache1Rekey	sqlite3.c	/^static void pcache1Rekey($/;"	f	file:	signature:( sqlite3_pcache *p, sqlite3_pcache_page *pPg, unsigned int iOld, unsigned int iNew )
pcache1RemoveFromHash	sqlite3.c	/^static void pcache1RemoveFromHash(PgHdr1 *pPage){$/;"	f	file:	signature:(PgHdr1 *pPage)
pcache1ResizeHash	sqlite3.c	/^static void pcache1ResizeHash(PCache1 *p){$/;"	f	file:	signature:(PCache1 *p)
pcache1Shrink	sqlite3.c	/^static void pcache1Shrink(sqlite3_pcache *p){$/;"	f	file:	signature:(sqlite3_pcache *p)
pcache1Shutdown	sqlite3.c	/^static void pcache1Shutdown(void *NotUsed){$/;"	f	file:	signature:(void *NotUsed)
pcache1Truncate	sqlite3.c	/^static void pcache1Truncate(sqlite3_pcache *p, unsigned int iLimit){$/;"	f	file:	signature:(sqlite3_pcache *p, unsigned int iLimit)
pcache1TruncateUnsafe	sqlite3.c	/^static void pcache1TruncateUnsafe($/;"	f	file:	signature:( PCache1 *pCache, unsigned int iLimit )
pcache1UnderMemoryPressure	sqlite3.c	/^static int pcache1UnderMemoryPressure(PCache1 *pCache){$/;"	f	file:	signature:(PCache1 *pCache)
pcache1Unpin	sqlite3.c	/^static void pcache1Unpin($/;"	f	file:	signature:( sqlite3_pcache *p, sqlite3_pcache_page *pPg, int reuseUnlikely )
pcache1_g	sqlite3.c	/^} pcache1_g;$/;"	v	typeref:struct:PCacheGlobal	file:
pcache2	sqlite3.c	/^  sqlite3_pcache_methods2 pcache2;  \/* Low-level page-cache interface *\/$/;"	m	struct:Sqlite3Config	file:	access:public
pcacheFetchFinishWithInit	sqlite3.c	/^static SQLITE_NOINLINE PgHdr *pcacheFetchFinishWithInit($/;"	f	file:	signature:( PCache *pCache, Pgno pgno, sqlite3_pcache_page *pPage )
pcacheManageDirtyList	sqlite3.c	/^static void pcacheManageDirtyList(PgHdr *pPage, u8 addRemove){$/;"	f	file:	signature:(PgHdr *pPage, u8 addRemove)
pcacheMergeDirtyList	sqlite3.c	/^static PgHdr *pcacheMergeDirtyList(PgHdr *pA, PgHdr *pB){$/;"	f	file:	signature:(PgHdr *pA, PgHdr *pB)
pcacheSortDirtyList	sqlite3.c	/^static PgHdr *pcacheSortDirtyList(PgHdr *pIn){$/;"	f	file:	signature:(PgHdr *pIn)
pcacheUnpin	sqlite3.c	/^static void pcacheUnpin(PgHdr *p){$/;"	f	file:	signature:(PgHdr *p)
peeraddr	server.c	/^struct sockaddr_in peeraddr;$/;"	v	typeref:struct:sockaddr_in
pgno	sqlite3.c	/^  Pgno pgno;                     \/* Page number for this page *\/$/;"	m	struct:PgHdr	file:	access:public
pgno	sqlite3.c	/^  Pgno pgno;           \/* Page number for this page *\/$/;"	m	struct:MemPage	file:	access:public
pgnoRoot	sqlite3.c	/^  Pgno pgnoRoot;            \/* The root page of this tree *\/$/;"	m	struct:BtCursor	file:	access:public
pgnoRoot	sqlite3.c	/^  Pgno pgnoRoot;        \/* Root page of the open btree cursor *\/$/;"	m	struct:VdbeCursor	file:	access:public
pgsz	sqlite3.c	/^  int pgsz;                       \/* Main database page size *\/$/;"	m	struct:VdbeSorter	file:	access:public
pnBytesFreed	sqlite3.c	/^  int *pnBytesFreed;            \/* If not NULL, increment this in DbFree() *\/$/;"	m	struct:sqlite3	file:	access:public
porterClose	sqlite3.c	/^static int porterClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:	signature:(sqlite3_tokenizer_cursor *pCursor)
porterCreate	sqlite3.c	/^static int porterCreate($/;"	f	file:	signature:( int argc, const char * const *argv, sqlite3_tokenizer **ppTokenizer )
porterDestroy	sqlite3.c	/^static int porterDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:	signature:(sqlite3_tokenizer *pTokenizer)
porterIdChar	sqlite3.c	/^static const char porterIdChar[] = {$/;"	v	file:
porterNext	sqlite3.c	/^static int porterNext($/;"	f	file:	signature:( sqlite3_tokenizer_cursor *pCursor, const char **pzToken, int *pnBytes, int *piStartOffset, int *piEndOffset, int *piPosition )
porterOpen	sqlite3.c	/^static int porterOpen($/;"	f	file:	signature:( sqlite3_tokenizer *pTokenizer, const char *zInput, int nInput, sqlite3_tokenizer_cursor **ppCursor )
porterTokenizerModule	sqlite3.c	/^static const sqlite3_tokenizer_module porterTokenizerModule = {$/;"	v	file:
porter_stemmer	sqlite3.c	/^static void porter_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:	signature:(const char *zIn, int nIn, char *zOut, int *pnOut)
porter_tokenizer	sqlite3.c	/^typedef struct porter_tokenizer {$/;"	s	file:
porter_tokenizer	sqlite3.c	/^} porter_tokenizer;$/;"	t	typeref:struct:porter_tokenizer	file:
porter_tokenizer::base	sqlite3.c	/^  sqlite3_tokenizer base;      \/* Base class *\/$/;"	m	struct:porter_tokenizer	file:	access:public
porter_tokenizer_cursor	sqlite3.c	/^typedef struct porter_tokenizer_cursor {$/;"	s	file:
porter_tokenizer_cursor	sqlite3.c	/^} porter_tokenizer_cursor;$/;"	t	typeref:struct:porter_tokenizer_cursor	file:
porter_tokenizer_cursor::base	sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:porter_tokenizer_cursor	file:	access:public
porter_tokenizer_cursor::iOffset	sqlite3.c	/^  int iOffset;                 \/* current position in zInput *\/$/;"	m	struct:porter_tokenizer_cursor	file:	access:public
porter_tokenizer_cursor::iToken	sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:porter_tokenizer_cursor	file:	access:public
porter_tokenizer_cursor::nAllocated	sqlite3.c	/^  int nAllocated;              \/* space allocated to zToken buffer *\/$/;"	m	struct:porter_tokenizer_cursor	file:	access:public
porter_tokenizer_cursor::nInput	sqlite3.c	/^  int nInput;                  \/* size of the input *\/$/;"	m	struct:porter_tokenizer_cursor	file:	access:public
porter_tokenizer_cursor::zInput	sqlite3.c	/^  const char *zInput;          \/* input we are tokenizing *\/$/;"	m	struct:porter_tokenizer_cursor	file:	access:public
porter_tokenizer_cursor::zToken	sqlite3.c	/^  char *zToken;                \/* storage for current token *\/$/;"	m	struct:porter_tokenizer_cursor	file:	access:public
posixFchown	sqlite3.c	/^static int posixFchown(int fd, uid_t uid, gid_t gid){$/;"	f	file:	signature:(int fd, uid_t uid, gid_t gid)
posixOpen	sqlite3.c	/^static int posixOpen(const char *zFile, int flags, int mode){$/;"	f	file:	signature:(const char *zFile, int flags, int mode)
posixUnlock	sqlite3.c	/^static int posixUnlock(sqlite3_file *id, int eFileLock, int handleNFSUnlock){$/;"	f	file:	signature:(sqlite3_file *id, int eFileLock, int handleNFSUnlock)
ppNextElem	sqlite3.c	/^  Fts3HashElem **ppNextElem;$/;"	m	struct:Fts3SegReader	file:	access:public
ppRec	sqlite3.c	/^  UnpackedRecord **ppRec;$/;"	m	struct:ValueNewStat4Ctx	file:	access:public
prefix	sqlite3.c	/^  etByte prefix;           \/* Offset into aPrefix[] of the prefix string *\/$/;"	m	struct:et_info	file:	access:public
prepare	sqlite3.c	/^  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
prepare16	sqlite3.c	/^  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
prepare16_v2	sqlite3.c	/^  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
prepare_v2	sqlite3.c	/^  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
prereq	sqlite3.c	/^  Bitmask prereq;       \/* Bitmask of other loops that must run first *\/$/;"	m	struct:WhereLoop	file:	access:public
prereq	sqlite3.c	/^  Bitmask prereq;     \/* Prerequisites *\/$/;"	m	struct:WhereOrCost	file:	access:public
prereqAll	sqlite3.c	/^  Bitmask prereqAll;      \/* Bitmask of tables referenced by pExpr *\/$/;"	m	struct:WhereTerm	file:	access:public
prereqRight	sqlite3.c	/^  Bitmask prereqRight;    \/* Bitmask of tables used by pExpr->pRight *\/$/;"	m	struct:WhereTerm	file:	access:public
prev	sqlite3.c	/^      u32 prev;       \/* Index in mem3.aPool[] of previous free chunk *\/$/;"	m	struct:Mem3Block::__anon10::__anon12	file:	access:public
prev	sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:	access:public
prev	sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:	access:public
prev	sqlite3.c	/^  int prev;       \/* Index of previous free chunk *\/$/;"	m	struct:Mem5Link	file:	access:public
prevSize	sqlite3.c	/^      u32 prevSize;   \/* Size of previous chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon10::__anon11	file:	access:public
print_pager_state	sqlite3.c	/^static char *print_pager_state(Pager *p){$/;"	f	file:	signature:(Pager *p)
printfFunc	sqlite3.c	/^static void printfFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
profile	sqlite3.c	/^  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
progress_handler	sqlite3.c	/^  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
proxyBreakConchLock	sqlite3.c	/^static int proxyBreakConchLock(unixFile *pFile, uuid_t myHostID){$/;"	f	file:	signature:(unixFile *pFile, uuid_t myHostID)
proxyCheckReservedLock	sqlite3.c	/^static int proxyCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:	signature:(sqlite3_file *id, int *pResOut)
proxyCheckReservedLock	sqlite3.c	/^static int proxyCheckReservedLock(sqlite3_file*, int*);$/;"	p	file:	signature:(sqlite3_file*, int*)
proxyClose	sqlite3.c	/^static int proxyClose(sqlite3_file *id) {$/;"	f	file:	signature:(sqlite3_file *id)
proxyClose	sqlite3.c	/^static int proxyClose(sqlite3_file*);$/;"	p	file:	signature:(sqlite3_file*)
proxyConchLock	sqlite3.c	/^static int proxyConchLock(unixFile *pFile, uuid_t myHostID, int lockType){$/;"	f	file:	signature:(unixFile *pFile, uuid_t myHostID, int lockType)
proxyCreateConchPathname	sqlite3.c	/^static int proxyCreateConchPathname(char *dbPath, char **pConchPath){$/;"	f	file:	signature:(char *dbPath, char **pConchPath)
proxyCreateLockPath	sqlite3.c	/^static int proxyCreateLockPath(const char *lockPath){$/;"	f	file:	signature:(const char *lockPath)
proxyCreateUnixFile	sqlite3.c	/^static int proxyCreateUnixFile($/;"	f	file:	signature:( const char *path, unixFile **ppFile, int islockfile )
proxyFileControl	sqlite3.c	/^static int proxyFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:	signature:(sqlite3_file *id, int op, void *pArg)
proxyFileControl	sqlite3.c	/^static int proxyFileControl(sqlite3_file*,int,void*);$/;"	p	file:	signature:(sqlite3_file*,int,void*)
proxyGetDbPathForUnixFile	sqlite3.c	/^static int proxyGetDbPathForUnixFile(unixFile *pFile, char *dbPath){$/;"	f	file:	signature:(unixFile *pFile, char *dbPath)
proxyGetHostID	sqlite3.c	/^static int proxyGetHostID(unsigned char *pHostID, int *pError){$/;"	f	file:	signature:(unsigned char *pHostID, int *pError)
proxyGetLockPath	sqlite3.c	/^static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){$/;"	f	file:	signature:(const char *dbPath, char *lPath, size_t maxLen)
proxyLock	sqlite3.c	/^static int proxyLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:	signature:(sqlite3_file *id, int eFileLock)
proxyLock	sqlite3.c	/^static int proxyLock(sqlite3_file*, int);$/;"	p	file:	signature:(sqlite3_file*, int)
proxyLockingContext	sqlite3.c	/^struct proxyLockingContext {$/;"	s	file:
proxyLockingContext	sqlite3.c	/^typedef struct proxyLockingContext proxyLockingContext;$/;"	t	typeref:struct:proxyLockingContext	file:
proxyLockingContext::conchFile	sqlite3.c	/^  unixFile *conchFile;         \/* Open conch file *\/$/;"	m	struct:proxyLockingContext	file:	access:public
proxyLockingContext::conchFilePath	sqlite3.c	/^  char *conchFilePath;         \/* Name of the conch file *\/$/;"	m	struct:proxyLockingContext	file:	access:public
proxyLockingContext::conchHeld	sqlite3.c	/^  int conchHeld;               \/* 1 if the conch is held, -1 if lockless *\/$/;"	m	struct:proxyLockingContext	file:	access:public
proxyLockingContext::dbPath	sqlite3.c	/^  char *dbPath;                \/* Name of the open file *\/$/;"	m	struct:proxyLockingContext	file:	access:public
proxyLockingContext::lockProxy	sqlite3.c	/^  unixFile *lockProxy;         \/* Open proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:	access:public
proxyLockingContext::lockProxyPath	sqlite3.c	/^  char *lockProxyPath;         \/* Name of the proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:	access:public
proxyLockingContext::oldLockingContext	sqlite3.c	/^  void *oldLockingContext;     \/* Original lockingcontext to restore on close *\/$/;"	m	struct:proxyLockingContext	file:	access:public
proxyLockingContext::pOldMethod	sqlite3.c	/^  sqlite3_io_methods const *pOldMethod;     \/* Original I\/O methods for close *\/$/;"	m	struct:proxyLockingContext	file:	access:public
proxyReleaseConch	sqlite3.c	/^static int proxyReleaseConch(unixFile *pFile){$/;"	f	file:	signature:(unixFile *pFile)
proxyTakeConch	sqlite3.c	/^static int proxyTakeConch(unixFile *pFile){$/;"	f	file:	signature:(unixFile *pFile)
proxyTransformUnixFile	sqlite3.c	/^static int proxyTransformUnixFile(unixFile *pFile, const char *path) {$/;"	f	file:	signature:(unixFile *pFile, const char *path)
proxyTransformUnixFile	sqlite3.c	/^static int proxyTransformUnixFile(unixFile*, const char*);$/;"	p	file:	signature:(unixFile*, const char*)
proxyUnlock	sqlite3.c	/^static int proxyUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:	signature:(sqlite3_file *id, int eFileLock)
proxyUnlock	sqlite3.c	/^static int proxyUnlock(sqlite3_file*, int);$/;"	p	file:	signature:(sqlite3_file*, int)
pseudoTableReg	sqlite3.c	/^  int pseudoTableReg;   \/* Register holding pseudotable content. *\/$/;"	m	struct:VdbeCursor	file:	access:public
pthreadMutexAlloc	sqlite3.c	/^static sqlite3_mutex *pthreadMutexAlloc(int iType){$/;"	f	file:	signature:(int iType)
pthreadMutexEnd	sqlite3.c	/^static int pthreadMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:	signature:(void)
pthreadMutexEnter	sqlite3.c	/^static void pthreadMutexEnter(sqlite3_mutex *p){$/;"	f	file:	signature:(sqlite3_mutex *p)
pthreadMutexFree	sqlite3.c	/^static void pthreadMutexFree(sqlite3_mutex *p){$/;"	f	file:	signature:(sqlite3_mutex *p)
pthreadMutexHeld	sqlite3.c	/^static int pthreadMutexHeld(sqlite3_mutex *p){$/;"	f	file:	signature:(sqlite3_mutex *p)
pthreadMutexInit	sqlite3.c	/^static int pthreadMutexInit(void){ return SQLITE_OK; }$/;"	f	file:	signature:(void)
pthreadMutexLeave	sqlite3.c	/^static void pthreadMutexLeave(sqlite3_mutex *p){$/;"	f	file:	signature:(sqlite3_mutex *p)
pthreadMutexNotheld	sqlite3.c	/^static int pthreadMutexNotheld(sqlite3_mutex *p){$/;"	f	file:	signature:(sqlite3_mutex *p)
pthreadMutexTry	sqlite3.c	/^static int pthreadMutexTry(sqlite3_mutex *p){$/;"	f	file:	signature:(sqlite3_mutex *p)
ptrmapGet	sqlite3.c	/^static int ptrmapGet(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno){$/;"	f	file:	signature:(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno)
ptrmapGet	sqlite3.c	53127;"	d	file:
ptrmapPageno	sqlite3.c	/^static Pgno ptrmapPageno(BtShared *pBt, Pgno pgno){$/;"	f	file:	signature:(BtShared *pBt, Pgno pgno)
ptrmapPut	sqlite3.c	/^static void ptrmapPut(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC){$/;"	f	file:	signature:(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC)
ptrmapPut	sqlite3.c	53126;"	d	file:
ptrmapPutOvflPtr	sqlite3.c	/^static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){$/;"	f	file:	signature:(MemPage *pPage, u8 *pCell, int *pRC)
ptrmapPutOvflPtr	sqlite3.c	53128;"	d	file:
pushOntoSorter	sqlite3.c	/^static void pushOntoSorter($/;"	f	file:	signature:( Parse *pParse, SortCtx *pSort, Select *pSelect, int regData, int nData, int nPrefixReg )
put2byte	sqlite3.c	51906;"	d	file:
put32bits	sqlite3.c	41932;"	d	file:
put4byte	sqlite3.c	51908;"	d	file:
putVarint	sqlite3.c	12953;"	d	file:
putVarint32	sqlite3.c	12949;"	d	file:
putVarint64	sqlite3.c	/^static int SQLITE_NOINLINE putVarint64(unsigned char *p, u64 v){$/;"	f	file:	signature:(unsigned char *p, u64 v)
pzErrMsg	sqlite3.c	/^  char **pzErrMsg;    \/* Error message stored here *\/$/;"	m	struct:__anon7	file:	access:public
qmesg_t	comm.h	/^}qmesg_t;$/;"	t	typeref:struct:query_protocol
querySharedCacheTableLock	sqlite3.c	/^static int querySharedCacheTableLock(Btree *p, Pgno iTab, u8 eLock){$/;"	f	file:	signature:(Btree *p, Pgno iTab, u8 eLock)
querySharedCacheTableLock	sqlite3.c	52302;"	d	file:
queryTestTokenizer	sqlite3.c	/^static int queryTestTokenizer($/;"	f	file:	signature:( sqlite3 *db, const char *zName, const sqlite3_tokenizer_module **pp )
queryTokenizer	sqlite3.c	/^int queryTokenizer($/;"	f	file:	signature:( sqlite3 *db, char *zName, const sqlite3_tokenizer_module **pp )
query_protocol	comm.h	/^typedef struct query_protocol {$/;"	s
query_protocol::explan	comm.h	/^	char explan[QMESG_EXPLAN_LEN];$/;"	m	struct:query_protocol	access:public
query_protocol::flag	comm.h	/^	int flag;$/;"	m	struct:query_protocol	access:public
query_protocol::word	comm.h	/^	char word[QMESG_WORD_LEN];$/;"	m	struct:query_protocol	access:public
quoteFunc	sqlite3.c	/^static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:	signature:(sqlite3_context *context, int argc, sqlite3_value **argv)
r	sqlite3.c	/^    double r;           \/* Real value used when MEM_Real is set in flags *\/$/;"	m	union:Mem::MemValue	file:	access:public
r1	sqlite3.c	/^  int r1;             \/* Value to return if (lhs > rhs) *\/$/;"	m	struct:UnpackedRecord	file:	access:public
r2	sqlite3.c	/^  int r2;             \/* Value to return if (rhs < lhs) *\/$/;"	m	struct:UnpackedRecord	file:	access:public
rCost	sqlite3.c	/^  LogEst rCost;         \/* Total cost of this path *\/$/;"	m	struct:WherePath	file:	access:public
rParentScore	sqlite3.c	/^  sqlite3_rtree_dbl rParentScore;   \/* Score of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
rParentScore	sqlite3.h	/^  sqlite3_rtree_dbl rParentScore;   \/* Score of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
rRun	sqlite3.c	/^  LogEst rRun;          \/* Cost of running each loop *\/$/;"	m	struct:WhereLoop	file:	access:public
rRun	sqlite3.c	/^  LogEst rRun;        \/* Cost of running this subquery *\/$/;"	m	struct:WhereOrCost	file:	access:public
rScore	sqlite3.c	/^  RtreeDValue rScore;    \/* The score for this node.  Smallest goes first. *\/$/;"	m	struct:RtreeSearchPoint	file:	access:public
rScore	sqlite3.c	/^  sqlite3_rtree_dbl rScore;         \/* OUT: Write the score here *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
rScore	sqlite3.h	/^  sqlite3_rtree_dbl rScore;         \/* OUT: Write the score here *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
rSetup	sqlite3.c	/^  LogEst rSetup;        \/* One-time setup cost (ex: create transient index) *\/$/;"	m	struct:WhereLoop	file:	access:public
rSum	sqlite3.c	/^  double rSum;      \/* Floating point sum *\/$/;"	m	struct:SumCtx	file:	access:public
rUnsorted	sqlite3.c	/^  LogEst rUnsorted;     \/* Total cost of this path ignoring sorting costs *\/$/;"	m	struct:WherePath	file:	access:public
rValue	sqlite3.c	/^    RtreeDValue rValue;             \/* Constraint value. *\/$/;"	m	union:RtreeConstraint::__anon25	file:	access:public
randomBlob	sqlite3.c	/^static void randomBlob($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
randomFill	sqlite3.c	/^static void randomFill(char *pBuf, int nByte){$/;"	f	file:	signature:(char *pBuf, int nByte)
randomFunc	sqlite3.c	/^static void randomFunc($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **NotUsed2 )
randomness	sqlite3.c	/^  void (*randomness)(int,void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
randomnessPid	sqlite3.c	/^static int randomnessPid = 0;$/;"	v	file:
rc	sqlite3.c	/^  int rc;                  \/* Backup process error code *\/$/;"	m	struct:sqlite3_backup	file:	access:public
rc	sqlite3.c	/^  int rc;                 \/* Value to return *\/$/;"	m	struct:Vdbe	file:	access:public
rc	sqlite3.c	/^  int rc;              \/* Return code from execution *\/$/;"	m	struct:Parse	file:	access:public
rc	sqlite3.c	/^  int rc;             \/* Result code stored here *\/$/;"	m	struct:__anon7	file:	access:public
rc	sqlite3.c	/^  int rc;            \/* Return code from sqlite3_exec() *\/$/;"	m	struct:TabResult	file:	access:public
read32bits	sqlite3.c	/^static int read32bits(sqlite3_file *fd, i64 offset, u32 *pRes){$/;"	f	file:	signature:(sqlite3_file *fd, i64 offset, u32 *pRes)
readCoord	sqlite3.c	/^static void readCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:	signature:(u8 *p, RtreeCoord *pCoord)
readDbPage	sqlite3.c	/^static int readDbPage(PgHdr *pPg, u32 iFrame){$/;"	f	file:	signature:(PgHdr *pPg, u32 iFrame)
readInt16	sqlite3.c	/^static int readInt16(u8 *p){$/;"	f	file:	signature:(u8 *p)
readInt64	sqlite3.c	/^static i64 readInt64(u8 *p){$/;"	f	file:	signature:(u8 *p)
readJournalHdr	sqlite3.c	/^static int readJournalHdr($/;"	f	file:	signature:( Pager *pPager, int isHot, i64 journalSize, u32 *pNRec, u32 *pDbSize )
readLock	sqlite3.c	/^  i16 readLock;              \/* Which read lock is being held.  -1 for none *\/$/;"	m	struct:Wal	file:	access:public
readMasterJournal	sqlite3.c	/^static int readMasterJournal(sqlite3_file *pJrnl, char *zMaster, u32 nMaster){$/;"	f	file:	signature:(sqlite3_file *pJrnl, char *zMaster, u32 nMaster)
readOnly	sqlite3.c	/^  bft readOnly:1;         \/* True for statements that do not write *\/$/;"	m	struct:Vdbe	file:	access:public
readOnly	sqlite3.c	/^  u8 readOnly;                \/* True for a read-only database *\/$/;"	m	struct:Pager	file:	access:public
readOnly	sqlite3.c	/^  u8 readOnly;               \/* WAL_RDWR, WAL_RDONLY, or WAL_SHM_RDONLY *\/$/;"	m	struct:Wal	file:	access:public
readpoint	sqlite3.c	/^  FilePoint readpoint;            \/* Pointer to the end of the last xRead() *\/$/;"	m	struct:MemJournal	file:	access:public
readsTable	sqlite3.c	/^static int readsTable(Parse *p, int iDb, Table *pTab){$/;"	f	file:	signature:(Parse *p, int iDb, Table *pTab)
realloc	sqlite3.c	/^  void *(*realloc)(void*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
realloc64	sqlite3.c	/^  void *(*realloc64)(void*,sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:	access:public
recordFunc	sqlite3.c	/^static void recordFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
recv_mesg	client.c	/^int recv_mesg(int sockfd, void *buff, int size)$/;"	f	signature:(int sockfd, void *buff, int size)
recv_mesg	client.c	/^int recv_mesg(int sockfd, void *buff, int size);$/;"	p	file:	signature:(int sockfd, void *buff, int size)
recv_mesg	server.c	/^int recv_mesg(int sockfd, void *buff, int size)$/;"	f	signature:(int sockfd, void *buff, int size)
recv_mesg	server.c	/^int recv_mesg(int sockfd, void *buff, int size);$/;"	p	file:	signature:(int sockfd, void *buff, int size)
regCtr	sqlite3.c	/^  int regCtr;           \/* Memory register holding the rowid counter *\/$/;"	m	struct:AutoincInfo	file:	access:public
regResult	sqlite3.c	/^    int regResult;    \/* Registers holding results of a co-routine *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
regReturn	sqlite3.c	/^    int regReturn;    \/* Register holding return address of addrFillSub *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
regReturn	sqlite3.c	/^  int regReturn;        \/* Register holding block-output return address *\/$/;"	m	struct:SortCtx	file:	access:public
regRoot	sqlite3.c	/^  int regRoot;         \/* Register holding root page number for new objects *\/$/;"	m	struct:Parse	file:	access:public
regRowid	sqlite3.c	/^  int regRowid;        \/* Register holding rowid of CREATE TABLE entry *\/$/;"	m	struct:Parse	file:	access:public
registerTokenizer	sqlite3.c	/^int registerTokenizer($/;"	f	file:	signature:( sqlite3 *db, char *zName, const sqlite3_tokenizer_module *p )
registerTrace	sqlite3.c	/^static void registerTrace(int iReg, Mem *p){$/;"	f	file:	signature:(int iReg, Mem *p)
rehash	sqlite3.c	/^static int rehash(Hash *pH, unsigned int new_size){$/;"	f	file:	signature:(Hash *pH, unsigned int new_size)
reindexDatabases	sqlite3.c	/^static void reindexDatabases(Parse *pParse, char const *zColl){$/;"	f	file:	signature:(Parse *pParse, char const *zColl)
reindexTable	sqlite3.c	/^static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){$/;"	f	file:	signature:(Parse *pParse, Table *pTab, char const *zColl)
reinsertNodeContent	sqlite3.c	/^static int reinsertNodeContent(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:	signature:(Rtree *pRtree, RtreeNode *pNode)
releaseAllSavepoints	sqlite3.c	/^static void releaseAllSavepoints(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
releaseInodeInfo	sqlite3.c	/^static void releaseInodeInfo(unixFile *pFile){$/;"	f	file:	signature:(unixFile *pFile)
releaseMemArray	sqlite3.c	/^static void releaseMemArray(Mem *p, int N){$/;"	f	file:	signature:(Mem *p, int N)
releasePage	sqlite3.c	/^static void releasePage(MemPage *pPage);  \/* Forward reference *\/$/;"	p	file:	signature:(MemPage *pPage)
releasePage	sqlite3.c	/^static void releasePage(MemPage *pPage){$/;"	f	file:	signature:(MemPage *pPage)
release_memory	sqlite3.c	/^  int (*release_memory)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
reloadTableSchema	sqlite3.c	/^static void reloadTableSchema(Parse *pParse, Table *pTab, const char *zName){$/;"	f	file:	signature:(Parse *pParse, Table *pTab, const char *zName)
relocatePage	sqlite3.c	/^static int relocatePage($/;"	f	file:	signature:( BtShared *pBt, MemPage *pDbPage, u8 eType, Pgno iPtrPage, Pgno iFreePage, int isCommit )
removeElementGivenHash	sqlite3.c	/^static void removeElementGivenHash($/;"	f	file:	signature:( Hash *pH, HashElem* elem, unsigned int h )
removeFromBlockedList	sqlite3.c	/^static void removeFromBlockedList(sqlite3 *db){$/;"	f	file:	signature:(sqlite3 *db)
removeFromSharingList	sqlite3.c	/^static int removeFromSharingList(BtShared *pBt){$/;"	f	file:	signature:(BtShared *pBt)
removeNode	sqlite3.c	/^static int removeNode(Rtree *pRtree, RtreeNode *pNode, int iHeight){$/;"	f	file:	signature:(Rtree *pRtree, RtreeNode *pNode, int iHeight)
remove_diacritic	sqlite3.c	/^static int remove_diacritic(int c){$/;"	f	file:	signature:(int c)
renameParentFunc	sqlite3.c	/^static void renameParentFunc($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **argv )
renameTableFunc	sqlite3.c	/^static void renameTableFunc($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **argv )
renameTriggerFunc	sqlite3.c	/^static void renameTriggerFunc($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **argv )
renderLogMsg	sqlite3.c	/^static void renderLogMsg(int iErrCode, const char *zFormat, va_list ap){$/;"	f	file:	signature:(int iErrCode, const char *zFormat, va_list ap)
replaceFunc	sqlite3.c	/^static void replaceFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
reserved	sqlite3.c	/^  int reserved;$/;"	m	struct:afpLockingContext	file:	access:public
reset	sqlite3.c	/^  int  (*reset)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:	access:public
resetAccumulator	sqlite3.c	/^static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:	signature:(Parse *pParse, AggInfo *pAggInfo)
reset_auto_extension	sqlite3.c	/^  void (*reset_auto_extension)(void);$/;"	m	struct:sqlite3_api_routines	file:	access:public
resizeIndexObject	sqlite3.c	/^static int resizeIndexObject(sqlite3 *db, Index *pIdx, int N){$/;"	f	file:	signature:(sqlite3 *db, Index *pIdx, int N)
resolveAlias	sqlite3.c	/^static void resolveAlias($/;"	f	file:	signature:( Parse *pParse, ExprList *pEList, int iCol, Expr *pExpr, const char *zType, int nSubquery )
resolveAsName	sqlite3.c	/^static int resolveAsName($/;"	f	file:	signature:( Parse *pParse, ExprList *pEList, Expr *pE )
resolveAttachExpr	sqlite3.c	/^static int resolveAttachExpr(NameContext *pName, Expr *pExpr)$/;"	f	file:	signature:(NameContext *pName, Expr *pExpr)
resolveCompoundOrderBy	sqlite3.c	/^static int resolveCompoundOrderBy($/;"	f	file:	signature:( Parse *pParse, Select *pSelect )
resolveExprStep	sqlite3.c	/^static int resolveExprStep(Walker *pWalker, Expr *pExpr){$/;"	f	file:	signature:(Walker *pWalker, Expr *pExpr)
resolveOrderByTermToExprList	sqlite3.c	/^static int resolveOrderByTermToExprList($/;"	f	file:	signature:( Parse *pParse, Select *pSelect, Expr *pE )
resolveOrderGroupBy	sqlite3.c	/^static int resolveOrderGroupBy($/;"	f	file:	signature:( NameContext *pNC, Select *pSelect, ExprList *pOrderBy, const char *zType )
resolveOutOfRangeError	sqlite3.c	/^static void resolveOutOfRangeError($/;"	f	file:	signature:( Parse *pParse, const char *zType, int i, int mx )
resolveP2Values	sqlite3.c	/^static void resolveP2Values(Vdbe *p, int *pMaxFuncArgs){$/;"	f	file:	signature:(Vdbe *p, int *pMaxFuncArgs)
resolveSelectStep	sqlite3.c	/^static int resolveSelectStep(Walker *pWalker, Select *p){$/;"	f	file:	signature:(Walker *pWalker, Select *p)
restoreCursorPosition	sqlite3.c	52956;"	d	file:
result_blob	sqlite3.c	/^  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_blob64	sqlite3.c	/^  void (*result_blob64)(sqlite3_context*,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_double	sqlite3.c	/^  void  (*result_double)(sqlite3_context*,double);$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_error	sqlite3.c	/^  void  (*result_error)(sqlite3_context*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_error16	sqlite3.c	/^  void  (*result_error16)(sqlite3_context*,const void*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_error_code	sqlite3.c	/^  void (*result_error_code)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_error_nomem	sqlite3.c	/^  void (*result_error_nomem)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_error_toobig	sqlite3.c	/^  void (*result_error_toobig)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_int	sqlite3.c	/^  void  (*result_int)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_int64	sqlite3.c	/^  void  (*result_int64)(sqlite3_context*,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_null	sqlite3.c	/^  void  (*result_null)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_text	sqlite3.c	/^  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_text16	sqlite3.c	/^  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_text16be	sqlite3.c	/^  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_text16le	sqlite3.c	/^  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_text64	sqlite3.c	/^  void (*result_text64)(sqlite3_context*,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_value	sqlite3.c	/^  void  (*result_value)(sqlite3_context*,sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
result_zeroblob	sqlite3.c	/^  void (*result_zeroblob)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
retRangeStart	sqlite3.c	/^  unsigned long long retRangeStart; \/* nbr of 1st byte locked if successful *\/$/;"	m	struct:ByteRangeLockPB2	file:	access:public
returnSingleInt	sqlite3.c	/^static void returnSingleInt(Parse *pParse, const char *zLabel, i64 value){$/;"	f	file:	signature:(Parse *pParse, const char *zLabel, i64 value)
reusable	sqlite3.c	/^    unsigned reusable :1;   \/* Constant expression is reusable *\/$/;"	m	struct:ExprList::ExprList_item	file:	access:public
revLoop	sqlite3.c	/^  Bitmask revLoop;      \/* aLoop[]s that should be reversed for ORDER BY *\/$/;"	m	struct:WherePath	file:	access:public
revMask	sqlite3.c	/^  Bitmask revMask;          \/* Mask of ORDER BY terms that need reversing *\/$/;"	m	struct:WhereInfo	file:	access:public
robust_close	sqlite3.c	/^static void robust_close(unixFile *pFile, int h, int lineno){$/;"	f	file:	signature:(unixFile *pFile, int h, int lineno)
robust_flock	sqlite3.c	/^static int robust_flock(int fd, int op){$/;"	f	file:	signature:(int fd, int op)
robust_flock	sqlite3.c	27057;"	d	file:
robust_ftruncate	sqlite3.c	/^static int robust_ftruncate(int h, sqlite3_int64 sz){$/;"	f	file:	signature:(int h, sqlite3_int64 sz)
robust_open	sqlite3.c	/^static int robust_open(const char *z, int f, mode_t m){$/;"	f	file:	signature:(const char *z, int f, mode_t m)
rollback_hook	sqlite3.c	/^  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
rootOnly	sqlite3.c	/^  u8 rootOnly;                    \/* True for a root-only reader *\/$/;"	m	struct:Fts3SegReader	file:	access:public
roundFunc	sqlite3.c	/^static void roundFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:	signature:(sqlite3_context *context, int argc, sqlite3_value **argv)
rowSetEntryAlloc	sqlite3.c	/^static struct RowSetEntry *rowSetEntryAlloc(RowSet *p){$/;"	f	file:	signature:(RowSet *p)
rowSetEntryMerge	sqlite3.c	/^static struct RowSetEntry *rowSetEntryMerge($/;"	f	file:	signature:( struct RowSetEntry *pA, struct RowSetEntry *pB )
rowSetEntrySort	sqlite3.c	/^static struct RowSetEntry *rowSetEntrySort(struct RowSetEntry *pIn){$/;"	f	file:	signature:(struct RowSetEntry *pIn)
rowSetListToTree	sqlite3.c	/^static struct RowSetEntry *rowSetListToTree(struct RowSetEntry *pList){$/;"	f	file:	signature:(struct RowSetEntry *pList)
rowSetNDeepTree	sqlite3.c	/^static struct RowSetEntry *rowSetNDeepTree($/;"	f	file:	signature:( struct RowSetEntry **ppList, int iDepth )
rowSetToList	sqlite3.c	/^static void rowSetToList(RowSet *p){$/;"	f	file:	signature:(RowSet *p)
rowSetTreeToList	sqlite3.c	/^static void rowSetTreeToList($/;"	f	file:	signature:( struct RowSetEntry *pIn, struct RowSetEntry **ppFirst, struct RowSetEntry **ppLast )
rowidWrite	sqlite3.c	/^static int rowidWrite(Rtree *pRtree, sqlite3_int64 iRowid, sqlite3_int64 iNode){$/;"	f	file:	signature:(Rtree *pRtree, sqlite3_int64 iRowid, sqlite3_int64 iNode)
rsFlags	sqlite3.c	/^  u16 rsFlags;                   \/* Various flags *\/$/;"	m	struct:RowSet	file:	access:public
rtreeBestIndex	sqlite3.c	/^static int rtreeBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:	signature:(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo)
rtreeCallbackConstraint	sqlite3.c	/^static int rtreeCallbackConstraint($/;"	f	file:	signature:( RtreeConstraint *pConstraint, int eInt, u8 *pCellData, RtreeSearchPoint *pSearch, sqlite3_rtree_dbl *prScore, int *peWithin )
rtreeClose	sqlite3.c	/^static int rtreeClose(sqlite3_vtab_cursor *cur){$/;"	f	file:	signature:(sqlite3_vtab_cursor *cur)
rtreeColumn	sqlite3.c	/^static int rtreeColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:	signature:(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i)
rtreeConnect	sqlite3.c	/^static int rtreeConnect($/;"	f	file:	signature:( sqlite3 *db, void *pAux, int argc, const char *const*argv, sqlite3_vtab **ppVtab, char **pzErr )
rtreeCreate	sqlite3.c	/^static int rtreeCreate($/;"	f	file:	signature:( sqlite3 *db, void *pAux, int argc, const char *const*argv, sqlite3_vtab **ppVtab, char **pzErr )
rtreeDeleteRowid	sqlite3.c	/^static int rtreeDeleteRowid(Rtree *pRtree, sqlite3_int64 iDelete){$/;"	f	file:	signature:(Rtree *pRtree, sqlite3_int64 iDelete)
rtreeDestroy	sqlite3.c	/^static int rtreeDestroy(sqlite3_vtab *pVtab){$/;"	f	file:	signature:(sqlite3_vtab *pVtab)
rtreeDisconnect	sqlite3.c	/^static int rtreeDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:	signature:(sqlite3_vtab *pVtab)
rtreeEnqueue	sqlite3.c	/^static RtreeSearchPoint *rtreeEnqueue($/;"	f	file:	signature:( RtreeCursor *pCur, RtreeDValue rScore, u8 iLevel )
rtreeEof	sqlite3.c	/^static int rtreeEof(sqlite3_vtab_cursor *cur){$/;"	f	file:	signature:(sqlite3_vtab_cursor *cur)
rtreeFilter	sqlite3.c	/^static int rtreeFilter($/;"	f	file:	signature:( sqlite3_vtab_cursor *pVtabCursor, int idxNum, const char *idxStr, int argc, sqlite3_value **argv )
rtreeFreeCallback	sqlite3.c	/^static void rtreeFreeCallback(void *p){$/;"	f	file:	signature:(void *p)
rtreeInit	sqlite3.c	/^static int rtreeInit($/;"	f	file:	signature:( sqlite3 *db, void *pAux, int argc, const char *const*argv, sqlite3_vtab **ppVtab, char **pzErr, int isCreate )
rtreeInit	sqlite3.c	/^static int rtreeInit($/;"	p	file:	signature:( sqlite3 *, void *, int, const char *const*, sqlite3_vtab **, char **, int )
rtreeInsertCell	sqlite3.c	/^static int rtreeInsertCell($/;"	f	file:	signature:( Rtree *pRtree, RtreeNode *pNode, RtreeCell *pCell, int iHeight )
rtreeInsertCell	sqlite3.c	/^static int rtreeInsertCell(Rtree *, RtreeNode *, RtreeCell *, int);$/;"	p	file:	signature:(Rtree *, RtreeNode *, RtreeCell *, int)
rtreeLeafConstraint	sqlite3.c	/^static void rtreeLeafConstraint($/;"	f	file:	signature:( RtreeConstraint *p, int eInt, u8 *pCellData, int *peWithin )
rtreeModule	sqlite3.c	/^static sqlite3_module rtreeModule = {$/;"	v	file:
rtreeNext	sqlite3.c	/^static int rtreeNext(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:	signature:(sqlite3_vtab_cursor *pVtabCursor)
rtreeNodeOfFirstSearchPoint	sqlite3.c	/^static RtreeNode *rtreeNodeOfFirstSearchPoint(RtreeCursor *pCur, int *pRC){$/;"	f	file:	signature:(RtreeCursor *pCur, int *pRC)
rtreeNonleafConstraint	sqlite3.c	/^static void rtreeNonleafConstraint($/;"	f	file:	signature:( RtreeConstraint *p, int eInt, u8 *pCellData, int *peWithin )
rtreeOpen	sqlite3.c	/^static int rtreeOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:	signature:(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor)
rtreeQueryStat1	sqlite3.c	/^static int rtreeQueryStat1(sqlite3 *db, Rtree *pRtree){$/;"	f	file:	signature:(sqlite3 *db, Rtree *pRtree)
rtreeReference	sqlite3.c	/^static void rtreeReference(Rtree *pRtree){$/;"	f	file:	signature:(Rtree *pRtree)
rtreeRelease	sqlite3.c	/^static void rtreeRelease(Rtree *pRtree){$/;"	f	file:	signature:(Rtree *pRtree)
rtreeRename	sqlite3.c	/^static int rtreeRename(sqlite3_vtab *pVtab, const char *zNewName){$/;"	f	file:	signature:(sqlite3_vtab *pVtab, const char *zNewName)
rtreeRowid	sqlite3.c	/^static int rtreeRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid){$/;"	f	file:	signature:(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid)
rtreeSearchPointCompare	sqlite3.c	/^static int rtreeSearchPointCompare($/;"	f	file:	signature:( const RtreeSearchPoint *pA, const RtreeSearchPoint *pB )
rtreeSearchPointFirst	sqlite3.c	/^static RtreeSearchPoint *rtreeSearchPointFirst(RtreeCursor *pCur){$/;"	f	file:	signature:(RtreeCursor *pCur)
rtreeSearchPointNew	sqlite3.c	/^static RtreeSearchPoint *rtreeSearchPointNew($/;"	f	file:	signature:( RtreeCursor *pCur, RtreeDValue rScore, u8 iLevel )
rtreeSearchPointPop	sqlite3.c	/^static void rtreeSearchPointPop(RtreeCursor *p){$/;"	f	file:	signature:(RtreeCursor *p)
rtreeSearchPointSwap	sqlite3.c	/^static void rtreeSearchPointSwap(RtreeCursor *p, int i, int j){$/;"	f	file:	signature:(RtreeCursor *p, int i, int j)
rtreeSqlInit	sqlite3.c	/^static int rtreeSqlInit($/;"	f	file:	signature:( Rtree *pRtree, sqlite3 *db, const char *zDb, const char *zPrefix, int isCreate )
rtreeStepToLeaf	sqlite3.c	/^static int rtreeStepToLeaf(RtreeCursor *pCur){$/;"	f	file:	signature:(RtreeCursor *pCur)
rtreeUpdate	sqlite3.c	/^static int rtreeUpdate($/;"	f	file:	signature:( sqlite3_vtab *pVtab, int nData, sqlite3_value **azData, sqlite_int64 *pRowid )
rtreeValueDown	sqlite3.c	/^static RtreeValue rtreeValueDown(sqlite3_value *v){$/;"	f	file:	signature:(sqlite3_value *v)
rtreeValueUp	sqlite3.c	/^static RtreeValue rtreeValueUp(sqlite3_value *v){$/;"	f	file:	signature:(sqlite3_value *v)
rtreedepth	sqlite3.c	/^static void rtreedepth(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:	signature:(sqlite3_context *ctx, int nArg, sqlite3_value **apArg)
rtreenode	sqlite3.c	/^static void rtreenode(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:	signature:(sqlite3_context *ctx, int nArg, sqlite3_value **apArg)
runOnlyOnce	sqlite3.c	/^  bft runOnlyOnce:1;      \/* Automatically expire on reset *\/$/;"	m	struct:Vdbe	file:	access:public
s	sqlite3.c	/^  double s;          \/* Seconds *\/$/;"	m	struct:DateTime	file:	access:public
s	sqlite3.c	/^  unsigned char s[256];          \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:	access:public
sArg	sqlite3.c	/^  Token sArg;               \/* Complete text of a module argument *\/$/;"	m	struct:Parse	file:	access:public
sColMap	sqlite3.c	/^  struct sColMap {      \/* Mapping of columns in pFrom to columns in zTo *\/$/;"	s	struct:FKey	file:	access:public
sLastToken	sqlite3.c	/^  Token sLastToken;         \/* The last token parsed *\/$/;"	m	struct:Parse	file:	access:public
sMaskSet	sqlite3.c	/^  WhereMaskSet sMaskSet;    \/* Map cursor numbers to bitmasks *\/$/;"	m	struct:WhereInfo	file:	access:public
sNameToken	sqlite3.c	/^  Token sNameToken;         \/* Token with unqualified schema object name *\/$/;"	m	struct:Parse	file:	access:public
sPoint	sqlite3.c	/^  RtreeSearchPoint sPoint;          \/* Cached next search point *\/$/;"	m	struct:RtreeCursor	file:	access:public
sPragmaNames	sqlite3.c	/^static const struct sPragmaNames {$/;"	s	file:
sPragmaNames::ePragTyp	sqlite3.c	/^  u8 ePragTyp;              \/* PragTyp_XXX value *\/$/;"	m	struct:sPragmaNames	file:	access:public
sPragmaNames::iArg	sqlite3.c	/^  u32 iArg;                 \/* Extra argument *\/$/;"	m	struct:sPragmaNames	file:	access:public
sPragmaNames::mPragFlag	sqlite3.c	/^  u8 mPragFlag;             \/* Zero or more PragFlag_XXX values *\/$/;"	m	struct:sPragmaNames	file:	access:public
sPragmaNames::zName	sqlite3.c	/^  const char *const zName;  \/* Name of pragma *\/$/;"	m	struct:sPragmaNames	file:	access:public
sWC	sqlite3.c	/^  WhereClause sWC;          \/* Decomposition of the WHERE clause *\/$/;"	m	struct:WhereInfo	file:	access:public
safety_level	sqlite3.c	/^  u8 safety_level;     \/* How aggressive at syncing data to disk *\/$/;"	m	struct:Db	file:	access:public
sampleClear	sqlite3.c	/^static void sampleClear(sqlite3 *db, Stat4Sample *p){$/;"	f	file:	signature:(sqlite3 *db, Stat4Sample *p)
sampleCopy	sqlite3.c	/^static void sampleCopy(Stat4Accum *p, Stat4Sample *pTo, Stat4Sample *pFrom){$/;"	f	file:	signature:(Stat4Accum *p, Stat4Sample *pTo, Stat4Sample *pFrom)
sampleInsert	sqlite3.c	/^static void sampleInsert(Stat4Accum *p, Stat4Sample *pNew, int nEqZero){$/;"	f	file:	signature:(Stat4Accum *p, Stat4Sample *pNew, int nEqZero)
sampleIsBetter	sqlite3.c	/^static int sampleIsBetter($/;"	f	file:	signature:( Stat4Accum *pAccum, Stat4Sample *pNew, Stat4Sample *pOld )
sampleIsBetterPost	sqlite3.c	/^static int sampleIsBetterPost($/;"	f	file:	signature:( Stat4Accum *pAccum, Stat4Sample *pNew, Stat4Sample *pOld )
samplePushPrevious	sqlite3.c	/^static void samplePushPrevious(Stat4Accum *p, int iChng){$/;"	f	file:	signature:(Stat4Accum *p, int iChng)
sampleSetRowid	sqlite3.c	/^static void sampleSetRowid(sqlite3 *db, Stat4Sample *p, int n, const u8 *pData){$/;"	f	file:	signature:(sqlite3 *db, Stat4Sample *p, int n, const u8 *pData)
sampleSetRowidInt64	sqlite3.c	/^static void sampleSetRowidInt64(sqlite3 *db, Stat4Sample *p, i64 iRowid){$/;"	f	file:	signature:(sqlite3 *db, Stat4Sample *p, i64 iRowid)
saveAllCursors	sqlite3.c	/^static int saveAllCursors(BtShared *pBt, Pgno iRoot, BtCursor *pExcept){$/;"	f	file:	signature:(BtShared *pBt, Pgno iRoot, BtCursor *pExcept)
saveCursorPosition	sqlite3.c	/^static int saveCursorPosition(BtCursor *pCur){$/;"	f	file:	signature:(BtCursor *pCur)
saveCursorsOnList	sqlite3.c	/^static int SQLITE_NOINLINE saveCursorsOnList($/;"	f	file:	signature:( BtCursor *p, Pgno iRoot, BtCursor *pExcept )
saveCursorsOnList	sqlite3.c	/^static int SQLITE_NOINLINE saveCursorsOnList(BtCursor*,Pgno,BtCursor*);$/;"	p	file:	signature:(BtCursor*,Pgno,BtCursor*)
savedNQueryLoop	sqlite3.c	/^  int savedNQueryLoop;      \/* pParse->nQueryLoop outside the WHERE loop *\/$/;"	m	struct:WhereInfo	file:	access:public
saved_cnt	sqlite3.c	/^static int saved_cnt;$/;"	v	file:
scalarFunc	sqlite3.c	/^static void scalarFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
schemaFlags	sqlite3.c	/^  u16 schemaFlags;     \/* Flags associated with this schema *\/$/;"	m	struct:Schema	file:	access:public
schemaIsValid	sqlite3.c	/^static void schemaIsValid(Parse *pParse){$/;"	f	file:	signature:(Parse *pParse)
schema_cookie	sqlite3.c	/^  int schema_cookie;   \/* Database schema version number for this file *\/$/;"	m	struct:Schema	file:	access:public
scratchAllocOut	sqlite3.c	/^static int scratchAllocOut = 0;$/;"	v	file:
searchWith	sqlite3.c	/^static struct Cte *searchWith($/;"	f	file:	signature:( With *pWith, struct SrcList_item *pItem, With **ppContext )
search_callback	server.c	/^int search_callback(void *arg, int argc, char **data, char **column)$/;"	f	signature:(void *arg, int argc, char **data, char **column)
search_callback	server.c	/^int search_callback(void *arg, int argc, char **data, char **column);$/;"	p	file:	signature:(void *arg, int argc, char **data, char **column)
search_database	server.c	/^int search_database(sqlite3 *db, qmesg_t *msgbuf)$/;"	f	signature:(sqlite3 *db, qmesg_t *msgbuf)
search_database	server.c	/^int search_database(sqlite3 *db, qmesg_t *msgbuf);$/;"	p	file:	signature:(sqlite3 *db, qmesg_t *msgbuf)
sectorSize	sqlite3.c	/^  int sectorSize;                     \/* Device sector size *\/$/;"	m	struct:unixFile	file:	access:public
sectorSize	sqlite3.c	/^  u32 sectorSize;             \/* Assumed sector size during rollback *\/$/;"	m	struct:Pager	file:	access:public
seekAndRead	sqlite3.c	/^static int seekAndRead(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt){$/;"	f	file:	signature:(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt)
seekAndWrite	sqlite3.c	/^static int seekAndWrite(unixFile *id, i64 offset, const void *pBuf, int cnt){$/;"	f	file:	signature:(unixFile *id, i64 offset, const void *pBuf, int cnt)
seekAndWriteFd	sqlite3.c	/^static int seekAndWriteFd($/;"	f	file:	signature:( int fd, i64 iOff, const void *pBuf, int nBuf, int *piErrno )
seekOp	sqlite3.c	/^  u8 seekOp;            \/* Most recent seek operation on this cursor *\/$/;"	m	struct:VdbeCursor	file:	access:public
seekResult	sqlite3.c	/^  int seekResult;       \/* Result of previous sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	file:	access:public
selFlags	sqlite3.c	/^  u16 selFlags;          \/* Various SF_* values *\/$/;"	m	struct:Select	file:	access:public
selectAddColumnTypeAndCollation	sqlite3.c	/^static void selectAddColumnTypeAndCollation($/;"	f	file:	signature:( Parse *pParse, Table *pTab, Select *pSelect )
selectAddSubqueryTypeInfo	sqlite3.c	/^static void selectAddSubqueryTypeInfo(Walker *pWalker, Select *p){$/;"	f	file:	signature:(Walker *pWalker, Select *p)
selectColumnsFromExprList	sqlite3.c	/^static int selectColumnsFromExprList($/;"	f	file:	signature:( Parse *pParse, ExprList *pEList, i16 *pnCol, Column **paCol )
selectExpander	sqlite3.c	/^static int selectExpander(Walker *pWalker, Select *p){$/;"	f	file:	signature:(Walker *pWalker, Select *p)
selectInnerLoop	sqlite3.c	/^static void selectInnerLoop($/;"	f	file:	signature:( Parse *pParse, Select *p, ExprList *pEList, int srcTab, SortCtx *pSort, DistinctCtx *pDistinct, SelectDest *pDest, int iContinue, int iBreak )
selectNodeIsConstant	sqlite3.c	/^static int selectNodeIsConstant(Walker *pWalker, Select *NotUsed){$/;"	f	file:	signature:(Walker *pWalker, Select *NotUsed)
selectOpName	sqlite3.c	/^static const char *selectOpName(int id){$/;"	f	file:	signature:(int id)
selectPopWith	sqlite3.c	/^static void selectPopWith(Walker *pWalker, Select *p){$/;"	f	file:	signature:(Walker *pWalker, Select *p)
selectPopWith	sqlite3.c	108077;"	d	file:
semCheckReservedLock	sqlite3.c	/^static int semCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:	signature:(sqlite3_file *id, int *pResOut)
semClose	sqlite3.c	/^static int semClose(sqlite3_file *id) {$/;"	f	file:	signature:(sqlite3_file *id)
semLock	sqlite3.c	/^static int semLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:	signature:(sqlite3_file *id, int eFileLock)
semUnlock	sqlite3.c	/^static int semUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:	signature:(sqlite3_file *id, int eFileLock)
send_mesg	client.c	/^int send_mesg(int sockfd, void *buff, int size)$/;"	f	signature:(int sockfd, void *buff, int size)
send_mesg	client.c	/^int send_mesg(int sockfd, void *buff, int size);$/;"	p	file:	signature:(int sockfd, void *buff, int size)
send_mesg	server.c	/^int send_mesg(int sockfd, void *buff, int size)$/;"	f	signature:(int sockfd, void *buff, int size)
send_mesg	server.c	/^int send_mesg(int sockfd, void *buff, int size);$/;"	p	file:	signature:(int sockfd, void *buff, int size)
seqCount	sqlite3.c	/^  i64 seqCount;         \/* Sequence counter *\/$/;"	m	struct:VdbeCursor	file:	access:public
serialGet	sqlite3.c	/^static u32 SQLITE_NOINLINE serialGet($/;"	f	file:	signature:( const unsigned char *buf, u32 serial_type, Mem *pMem )
setAllPagerFlags	sqlite3.c	/^static void setAllPagerFlags(sqlite3 *db){$/;"	f	file:	signature:(sqlite3 *db)
setAllPagerFlags	sqlite3.c	101436;"	d	file:
setChildPtrmaps	sqlite3.c	/^static int setChildPtrmaps(MemPage *pPage){$/;"	f	file:	signature:(MemPage *pPage)
setChildPtrmaps	sqlite3.c	55500;"	d	file:
setDateTimeToCurrent	sqlite3.c	/^static int setDateTimeToCurrent(sqlite3_context *context, DateTime *p){$/;"	f	file:	signature:(sqlite3_context *context, DateTime *p)
setDestPgsz	sqlite3.c	/^static int setDestPgsz(sqlite3_backup *p){$/;"	f	file:	signature:(sqlite3_backup *p)
setEstimatedRows	sqlite3.c	/^static void setEstimatedRows(sqlite3_index_info *pIdxInfo, i64 nRow){$/;"	f	file:	signature:(sqlite3_index_info *pIdxInfo, i64 nRow)
setJoinExpr	sqlite3.c	/^static void setJoinExpr(Expr *p, int iTable){$/;"	f	file:	signature:(Expr *p, int iTable)
setLikeOptFlag	sqlite3.c	/^static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){$/;"	f	file:	signature:(sqlite3 *db, const char *zName, u8 flagVal)
setMaster	sqlite3.c	/^  u8 setMaster;               \/* True if a m-j name has been written to jrnl *\/$/;"	m	struct:Pager	file:	access:public
setPageReferenced	sqlite3.c	/^static void setPageReferenced(IntegrityCk *pCheck, Pgno iPg){$/;"	f	file:	signature:(IntegrityCk *pCheck, Pgno iPg)
setPendingFd	sqlite3.c	/^static void setPendingFd(unixFile *pFile){$/;"	f	file:	signature:(unixFile *pFile)
setResultStrOrError	sqlite3.c	/^static void setResultStrOrError($/;"	f	file:	signature:( sqlite3_context *pCtx, const char *z, int n, u8 enc, void (*xDel)(void*) )
setSectorSize	sqlite3.c	/^static void setSectorSize(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
setSharedCacheTableLock	sqlite3.c	/^static int setSharedCacheTableLock(Btree *p, Pgno iTable, u8 eLock){$/;"	f	file:	signature:(Btree *p, Pgno iTable, u8 eLock)
setSharedCacheTableLock	sqlite3.c	52303;"	d	file:
setStrAccumError	sqlite3.c	/^static void setStrAccumError(StrAccum *p, u8 eError){$/;"	f	file:	signature:(StrAccum *p, u8 eError)
set_authorizer	sqlite3.c	/^  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
set_auxdata	sqlite3.c	/^  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
setupLookaside	sqlite3.c	/^static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){$/;"	f	file:	signature:(sqlite3 *db, void *pBuf, int sz, int cnt)
sharable	sqlite3.c	/^  u8 sharable;       \/* True if we can share pBt with another db *\/$/;"	m	struct:Btree	file:	access:public
shared	sqlite3.c	/^  winceLock *shared;      \/* Global shared lock memory for the file  *\/$/;"	m	struct:winFile	file:	access:public
sharedByte	sqlite3.c	/^  unsigned long long sharedByte;  \/* for AFP simulated shared lock *\/$/;"	m	struct:unixInodeInfo	file:	access:public
sharedCacheEnabled	sqlite3.c	/^  int sharedCacheEnabled;           \/* true if shared-cache mode enabled *\/$/;"	m	struct:Sqlite3Config	file:	access:public
sharedLockByte	sqlite3.c	/^  short sharedLockByte;   \/* Randomly chosen byte used as a shared lock *\/$/;"	m	struct:winFile	file:	access:public
sharedMask	sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:unixShm	file:	access:public
sharedMask	sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:winShm	file:	access:public
sharedMask	sqlite3.c	/^  u8 sharedMask;             \/* Mask of shared locks held *\/$/;"	m	struct:unixShmNode	file:	access:public
simpleClose	sqlite3.c	/^static int simpleClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:	signature:(sqlite3_tokenizer_cursor *pCursor)
simpleCreate	sqlite3.c	/^static int simpleCreate($/;"	f	file:	signature:( int argc, const char * const *argv, sqlite3_tokenizer **ppTokenizer )
simpleDelim	sqlite3.c	/^static int simpleDelim(simple_tokenizer *t, unsigned char c){$/;"	f	file:	signature:(simple_tokenizer *t, unsigned char c)
simpleDestroy	sqlite3.c	/^static int simpleDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:	signature:(sqlite3_tokenizer *pTokenizer)
simpleNext	sqlite3.c	/^static int simpleNext($/;"	f	file:	signature:( sqlite3_tokenizer_cursor *pCursor, const char **ppToken, int *pnBytes, int *piStartOffset, int *piEndOffset, int *piPosition )
simpleOpen	sqlite3.c	/^static int simpleOpen($/;"	f	file:	signature:( sqlite3_tokenizer *pTokenizer, const char *pInput, int nBytes, sqlite3_tokenizer_cursor **ppCursor )
simpleTokenizerModule	sqlite3.c	/^static const sqlite3_tokenizer_module simpleTokenizerModule = {$/;"	v	file:
simple_tokenizer	sqlite3.c	/^typedef struct simple_tokenizer {$/;"	s	file:
simple_tokenizer	sqlite3.c	/^} simple_tokenizer;$/;"	t	typeref:struct:simple_tokenizer	file:
simple_tokenizer::base	sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:simple_tokenizer	file:	access:public
simple_tokenizer::delim	sqlite3.c	/^  char delim[128];             \/* flag ASCII delimiters *\/$/;"	m	struct:simple_tokenizer	file:	access:public
simple_tokenizer_cursor	sqlite3.c	/^typedef struct simple_tokenizer_cursor {$/;"	s	file:
simple_tokenizer_cursor	sqlite3.c	/^} simple_tokenizer_cursor;$/;"	t	typeref:struct:simple_tokenizer_cursor	file:
simple_tokenizer_cursor::base	sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:simple_tokenizer_cursor	file:	access:public
simple_tokenizer_cursor::iOffset	sqlite3.c	/^  int iOffset;                 \/* current position in pInput *\/$/;"	m	struct:simple_tokenizer_cursor	file:	access:public
simple_tokenizer_cursor::iToken	sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:simple_tokenizer_cursor	file:	access:public
simple_tokenizer_cursor::nBytes	sqlite3.c	/^  int nBytes;                  \/* size of the input *\/$/;"	m	struct:simple_tokenizer_cursor	file:	access:public
simple_tokenizer_cursor::nTokenAllocated	sqlite3.c	/^  int nTokenAllocated;         \/* space allocated to zToken buffer *\/$/;"	m	struct:simple_tokenizer_cursor	file:	access:public
simple_tokenizer_cursor::pInput	sqlite3.c	/^  const char *pInput;          \/* input we are tokenizing *\/$/;"	m	struct:simple_tokenizer_cursor	file:	access:public
simple_tokenizer_cursor::pToken	sqlite3.c	/^  char *pToken;                \/* storage for current token *\/$/;"	m	struct:simple_tokenizer_cursor	file:	access:public
size4x	sqlite3.c	/^      u32 size4x;     \/* 4x the size of current chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon10::__anon11	file:	access:public
sjfd	sqlite3.c	/^  sqlite3_file *sjfd;         \/* File descriptor for sub-journal *\/$/;"	m	struct:Pager	file:	access:public
skipFlag	sqlite3.c	/^  u8 skipFlag;          \/* Skip accumulator loading if true *\/$/;"	m	struct:sqlite3_context	file:	access:public
skipNext	sqlite3.c	/^  int skipNext;    \/* Prev() is noop if negative. Next() is noop if positive.$/;"	m	struct:BtCursor	file:	access:public
sleep	sqlite3.c	/^  int (*sleep)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sleepObj	sqlite3.c	/^static HANDLE sleepObj = NULL;$/;"	v	file:
snprintf	sqlite3.c	/^  char * (*snprintf)(int,char*,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:	access:public
softHeapLimitEnforcer	sqlite3.c	/^static void softHeapLimitEnforcer($/;"	f	file:	signature:( void *NotUsed, sqlite3_int64 NotUsed2, int allocSize )
soft_heap_limit	sqlite3.c	/^  void (*soft_heap_limit)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
soft_heap_limit64	sqlite3.c	/^  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sortFlags	sqlite3.c	/^  u8 sortFlags;         \/* Zero or more SORTFLAG_* bits *\/$/;"	m	struct:SortCtx	file:	access:public
sortOrder	sqlite3.c	/^    u8 sortOrder;           \/* 1 for DESC or 0 for ASC *\/$/;"	m	struct:ExprList::ExprList_item	file:	access:public
sorted	sqlite3.c	/^  u8 sorted;                \/* True if really sorted (not just grouped) *\/$/;"	m	struct:WhereInfo	file:	access:public
sortingIdx	sqlite3.c	/^  int sortingIdx;         \/* Cursor number of the sorting index *\/$/;"	m	struct:AggInfo	file:	access:public
sortingIdxPTab	sqlite3.c	/^  int sortingIdxPTab;     \/* Cursor number of pseudo-table *\/$/;"	m	struct:AggInfo	file:	access:public
soundexFunc	sqlite3.c	/^static void soundexFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
sourceid	sqlite3.c	/^  const char *(*sourceid)(void);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sourceidFunc	sqlite3.c	/^static void sourceidFunc($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **NotUsed2 )
spanBinaryExpr	sqlite3.c	/^  static void spanBinaryExpr($/;"	f	file:	signature:( ExprSpan *pOut, Parse *pParse, int op, ExprSpan *pLeft, ExprSpan *pRight )
spanExpr	sqlite3.c	/^  static void spanExpr(ExprSpan *pOut, Parse *pParse, int op, Token *pValue){$/;"	f	file:	signature:(ExprSpan *pOut, Parse *pParse, int op, Token *pValue)
spanSet	sqlite3.c	/^  static void spanSet(ExprSpan *pOut, Token *pStart, Token *pEnd){$/;"	f	file:	signature:(ExprSpan *pOut, Token *pStart, Token *pEnd)
spanUnaryPostfix	sqlite3.c	/^  static void spanUnaryPostfix($/;"	f	file:	signature:( ExprSpan *pOut, Parse *pParse, int op, ExprSpan *pOperand, Token *pPostOp )
spanUnaryPrefix	sqlite3.c	/^  static void spanUnaryPrefix($/;"	f	file:	signature:( ExprSpan *pOut, Parse *pParse, int op, ExprSpan *pOperand, Token *pPreOp )
splitNodeStartree	sqlite3.c	/^static int splitNodeStartree($/;"	f	file:	signature:( Rtree *pRtree, RtreeCell *aCell, int nCell, RtreeNode *pLeft, RtreeNode *pRight, RtreeCell *pBboxLeft, RtreeCell *pBboxRight )
sql	sqlite3.c	/^  const char *(*sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite2BtreeKeyCompare	sqlite3.c	/^int sqlite2BtreeKeyCompare(BtCursor *, const void *, int, int, int *);$/;"	p	file:	signature:(BtCursor *, const void *, int, int, int *)
sqlite3	sqlite3.c	/^struct sqlite3 {$/;"	s	file:
sqlite3	sqlite3.c	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3	file:
sqlite3	sqlite3.h	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3
sqlite3::__anon2::isInterrupted	sqlite3.c	/^    volatile int isInterrupted; \/* True if sqlite3_interrupt has been called *\/$/;"	m	union:sqlite3::__anon2	file:	access:public
sqlite3::__anon2::notUsed1	sqlite3.c	/^    double notUsed1;            \/* Spacer *\/$/;"	m	union:sqlite3::__anon2	file:	access:public
sqlite3::aCollSeq	sqlite3.c	/^  Hash aCollSeq;                \/* All collating sequences *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::aDb	sqlite3.c	/^  Db *aDb;                      \/* All backends *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::aDbStatic	sqlite3.c	/^  Db aDbStatic[2];              \/* Static space for the 2 default backends *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::aExtension	sqlite3.c	/^  void **aExtension;            \/* Array of shared library handles *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::aFunc	sqlite3.c	/^  FuncDefHash aFunc;            \/* Hash table of connection functions *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::aLimit	sqlite3.c	/^  int aLimit[SQLITE_N_LIMIT];   \/* Limits *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::aModule	sqlite3.c	/^  Hash aModule;                 \/* populated by sqlite3_create_module() *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::aVTrans	sqlite3.c	/^  VTable **aVTrans;             \/* Virtual tables with open transactions *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::auth	sqlite3.c	/^  sqlite3_userauth auth;        \/* User authentication information *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::autoCommit	sqlite3.c	/^  u8 autoCommit;                \/* The auto-commit flag. *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::busyHandler	sqlite3.c	/^  BusyHandler busyHandler;      \/* Busy callback *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::busyTimeout	sqlite3.c	/^  int busyTimeout;              \/* Busy handler timeout, in msec *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::dbOptFlags	sqlite3.c	/^  u16 dbOptFlags;               \/* Flags to enable\/disable optimizations *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::dfltLockMode	sqlite3.c	/^  u8 dfltLockMode;              \/* Default locking-mode for attached dbs *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::errCode	sqlite3.c	/^  int errCode;                  \/* Most recent error code (SQLITE_*) *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::errMask	sqlite3.c	/^  int errMask;                  \/* & result codes with this before returning *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::flags	sqlite3.c	/^  int flags;                    \/* Miscellaneous flags. See below *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::init	sqlite3.c	/^  } init;$/;"	m	struct:sqlite3	typeref:struct:sqlite3::sqlite3InitInfo	file:	access:public
sqlite3::isTransactionSavepoint	sqlite3.c	/^  u8 isTransactionSavepoint;    \/* True if the outermost savepoint is a TS *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::lastRowid	sqlite3.c	/^  i64 lastRowid;                \/* ROWID of most recent insert (see above) *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::lookaside	sqlite3.c	/^  Lookaside lookaside;          \/* Lookaside malloc configuration *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::magic	sqlite3.c	/^  u32 magic;                    \/* Magic number for detect library misuse *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::mallocFailed	sqlite3.c	/^  u8 mallocFailed;              \/* True if we have seen a malloc failure *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::mutex	sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Connection mutex *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nChange	sqlite3.c	/^  int nChange;                  \/* Value returned by sqlite3_changes() *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nDb	sqlite3.c	/^  int nDb;                      \/* Number of backends currently in use *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nDeferredCons	sqlite3.c	/^  i64 nDeferredCons;            \/* Net deferred constraints this transaction. *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nDeferredImmCons	sqlite3.c	/^  i64 nDeferredImmCons;         \/* Net deferred immediate constraints *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nExtension	sqlite3.c	/^  int nExtension;               \/* Number of loaded extensions *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nMaxSorterMmap	sqlite3.c	/^  int nMaxSorterMmap;           \/* Maximum size of regions mapped by sorter *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nProgressOps	sqlite3.c	/^  unsigned nProgressOps;        \/* Number of opcodes for progress callback *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nSavepoint	sqlite3.c	/^  int nSavepoint;               \/* Number of non-transaction savepoints *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nStatement	sqlite3.c	/^  int nStatement;               \/* Number of nested statement-transactions  *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nTotalChange	sqlite3.c	/^  int nTotalChange;             \/* Value returned by sqlite3_total_changes() *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nVTrans	sqlite3.c	/^  int nVTrans;                  \/* Allocated size of aVTrans *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nVdbeActive	sqlite3.c	/^  int nVdbeActive;              \/* Number of VDBEs currently running *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nVdbeExec	sqlite3.c	/^  int nVdbeExec;                \/* Number of nested calls to VdbeExec() *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nVdbeRead	sqlite3.c	/^  int nVdbeRead;                \/* Number of active VDBEs that read or write *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nVdbeWrite	sqlite3.c	/^  int nVdbeWrite;               \/* Number of active VDBEs that read and write *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nextAutovac	sqlite3.c	/^  signed char nextAutovac;      \/* Autovac setting after VACUUM if >=0 *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::nextPagesize	sqlite3.c	/^  int nextPagesize;             \/* Pagesize after VACUUM if >0 *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::openFlags	sqlite3.c	/^  unsigned int openFlags;       \/* Flags passed to sqlite3_vfs.xOpen() *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pAuthArg	sqlite3.c	/^  void *pAuthArg;               \/* 1st argument to the access auth function *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pBlockingConnection	sqlite3.c	/^  sqlite3 *pBlockingConnection; \/* Connection that caused SQLITE_LOCKED *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pCollNeededArg	sqlite3.c	/^  void *pCollNeededArg;$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pCommitArg	sqlite3.c	/^  void *pCommitArg;                 \/* Argument to xCommitCallback() *\/   $/;"	m	struct:sqlite3	file:	access:public
sqlite3::pDfltColl	sqlite3.c	/^  CollSeq *pDfltColl;           \/* The default collating sequence (BINARY) *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pDisconnect	sqlite3.c	/^  VTable *pDisconnect;    \/* Disconnect these in next sqlite3_prepare() *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pErr	sqlite3.c	/^  sqlite3_value *pErr;          \/* Most recent error message *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pNextBlocked	sqlite3.c	/^  sqlite3 *pNextBlocked;        \/* Next in list of all blocked connections *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pProfileArg	sqlite3.c	/^  void *pProfileArg;                        \/* Argument to profile function *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pProgressArg	sqlite3.c	/^  void *pProgressArg;           \/* Argument to the progress callback *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pRollbackArg	sqlite3.c	/^  void *pRollbackArg;               \/* Argument to xRollbackCallback() *\/   $/;"	m	struct:sqlite3	file:	access:public
sqlite3::pSavepoint	sqlite3.c	/^  Savepoint *pSavepoint;        \/* List of active savepoints *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pTraceArg	sqlite3.c	/^  void *pTraceArg;                          \/* Argument to the trace function *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pUnlockArg	sqlite3.c	/^  void *pUnlockArg;                     \/* Argument to xUnlockNotify *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pUnlockConnection	sqlite3.c	/^  sqlite3 *pUnlockConnection;           \/* Connection to watch for unlock *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pUpdateArg	sqlite3.c	/^  void *pUpdateArg;$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pVdbe	sqlite3.c	/^  struct Vdbe *pVdbe;           \/* List of active virtual machines *\/$/;"	m	struct:sqlite3	typeref:struct:sqlite3::Vdbe	file:	access:public
sqlite3::pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;            \/* OS Interface *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pVtabCtx	sqlite3.c	/^  VtabCtx *pVtabCtx;            \/* Context for active vtab connect\/create *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pWalArg	sqlite3.c	/^  void *pWalArg;$/;"	m	struct:sqlite3	file:	access:public
sqlite3::pnBytesFreed	sqlite3.c	/^  int *pnBytesFreed;            \/* If not NULL, increment this in DbFree() *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::sqlite3InitInfo	sqlite3.c	/^  struct sqlite3InitInfo {      \/* Information used during initialization *\/$/;"	s	struct:sqlite3	file:	access:public
sqlite3::sqlite3InitInfo::busy	sqlite3.c	/^    u8 busy;                    \/* TRUE if currently initializing *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:	access:public
sqlite3::sqlite3InitInfo::iDb	sqlite3.c	/^    u8 iDb;                     \/* Which db file is being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:	access:public
sqlite3::sqlite3InitInfo::newTnum	sqlite3.c	/^    int newTnum;                \/* Rootpage of table being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:	access:public
sqlite3::sqlite3InitInfo::orphanTrigger	sqlite3.c	/^    u8 orphanTrigger;           \/* Last statement is orphaned TEMP trigger *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:	access:public
sqlite3::suppressErr	sqlite3.c	/^  u8 suppressErr;               \/* Do not issue error messages if true *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::szMmap	sqlite3.c	/^  i64 szMmap;                   \/* Default mmap_size setting *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::temp_store	sqlite3.c	/^  u8 temp_store;                \/* 1: file 2: memory 0: default *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::u1	sqlite3.c	/^  } u1;$/;"	m	struct:sqlite3	typeref:union:sqlite3::__anon2	file:	access:public
sqlite3::vtabOnConflict	sqlite3.c	/^  u8 vtabOnConflict;            \/* Value to return for s3_vtab_on_conflict() *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::xAuth	sqlite3.c	/^  sqlite3_xauth xAuth;          \/* Access authorization function *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::xCollNeeded	sqlite3.c	/^  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);$/;"	m	struct:sqlite3	file:	access:public
sqlite3::xCollNeeded16	sqlite3.c	/^  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);$/;"	m	struct:sqlite3	file:	access:public
sqlite3::xCommitCallback	sqlite3.c	/^  int (*xCommitCallback)(void*);    \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::xProfile	sqlite3.c	/^  void (*xProfile)(void*,const char*,u64);  \/* Profiling function *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::xProgress	sqlite3.c	/^  int (*xProgress)(void *);     \/* The progress callback *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::xRollbackCallback	sqlite3.c	/^  void (*xRollbackCallback)(void*); \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::xTrace	sqlite3.c	/^  void (*xTrace)(void*,const char*);        \/* Trace function *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::xUnlockNotify	sqlite3.c	/^  void (*xUnlockNotify)(void **, int);  \/* Unlock notify callback *\/$/;"	m	struct:sqlite3	file:	access:public
sqlite3::xUpdateCallback	sqlite3.c	/^  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);$/;"	m	struct:sqlite3	file:	access:public
sqlite3::xWalCallback	sqlite3.c	/^  int (*xWalCallback)(void *, sqlite3 *, const char *, int);$/;"	m	struct:sqlite3	file:	access:public
sqlite3AbsInt32	sqlite3.c	/^SQLITE_PRIVATE int sqlite3AbsInt32(int x){$/;"	f	signature:(int x)
sqlite3AbsInt32	sqlite3.c	/^SQLITE_PRIVATE int sqlite3AbsInt32(int);$/;"	p	file:	signature:(int)
sqlite3AddCheckConstraint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCheckConstraint($/;"	f	signature:( Parse *pParse, Expr *pCheckExpr )
sqlite3AddCheckConstraint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCheckConstraint(Parse*, Expr*);$/;"	p	file:	signature:(Parse*, Expr*)
sqlite3AddCollateType	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCollateType(Parse *pParse, Token *pToken){$/;"	f	signature:(Parse *pParse, Token *pToken)
sqlite3AddCollateType	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCollateType(Parse*, Token*);$/;"	p	file:	signature:(Parse*, Token*)
sqlite3AddColumn	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumn(Parse *pParse, Token *pName){$/;"	f	signature:(Parse *pParse, Token *pName)
sqlite3AddColumn	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumn(Parse*,Token*);$/;"	p	file:	signature:(Parse*,Token*)
sqlite3AddColumnType	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumnType(Parse *pParse, Token *pType){$/;"	f	signature:(Parse *pParse, Token *pType)
sqlite3AddColumnType	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumnType(Parse*,Token*);$/;"	p	file:	signature:(Parse*,Token*)
sqlite3AddDefaultValue	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddDefaultValue(Parse *pParse, ExprSpan *pSpan){$/;"	f	signature:(Parse *pParse, ExprSpan *pSpan)
sqlite3AddDefaultValue	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddDefaultValue(Parse*,ExprSpan*);$/;"	p	file:	signature:(Parse*,ExprSpan*)
sqlite3AddInt64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3AddInt64(i64 *pA, i64 iB){$/;"	f	signature:(i64 *pA, i64 iB)
sqlite3AddInt64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3AddInt64(i64*,i64);$/;"	p	file:	signature:(i64*,i64)
sqlite3AddNotNull	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddNotNull(Parse *pParse, int onError){$/;"	f	signature:(Parse *pParse, int onError)
sqlite3AddNotNull	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddNotNull(Parse*, int);$/;"	p	file:	signature:(Parse*, int)
sqlite3AddPrimaryKey	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddPrimaryKey($/;"	f	signature:( Parse *pParse, ExprList *pList, int onError, int autoInc, int sortOrder )
sqlite3AddPrimaryKey	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddPrimaryKey(Parse*, ExprList*, int, int, int);$/;"	p	file:	signature:(Parse*, ExprList*, int, int, int)
sqlite3AffinityType	sqlite3.c	/^SQLITE_PRIVATE char sqlite3AffinityType(const char *zIn, u8 *pszEst){$/;"	f	signature:(const char *zIn, u8 *pszEst)
sqlite3AffinityType	sqlite3.c	/^SQLITE_PRIVATE char sqlite3AffinityType(const char*, u8*);$/;"	p	file:	signature:(const char*, u8*)
sqlite3AllocateIndexObject	sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3AllocateIndexObject($/;"	f	signature:( sqlite3 *db, i16 nCol, int nExtra, char **ppExtra )
sqlite3AllocateIndexObject	sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3AllocateIndexObject(sqlite3*,i16,int,char**);$/;"	p	file:	signature:(sqlite3*,i16,int,char**)
sqlite3AlterBeginAddColumn	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(Parse *, SrcList *);$/;"	p	file:	signature:(Parse *, SrcList *)
sqlite3AlterBeginAddColumn	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){$/;"	f	signature:(Parse *pParse, SrcList *pSrc)
sqlite3AlterFinishAddColumn	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(Parse *, Token *);$/;"	p	file:	signature:(Parse *, Token *)
sqlite3AlterFinishAddColumn	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){$/;"	f	signature:(Parse *pParse, Token *pColDef)
sqlite3AlterFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFunctions(void);$/;"	p	file:	signature:(void)
sqlite3AlterFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFunctions(void){$/;"	f	signature:(void)
sqlite3AlterRenameTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterRenameTable($/;"	f	signature:( Parse *pParse, SrcList *pSrc, Token *pName )
sqlite3AlterRenameTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterRenameTable(Parse*, SrcList*, Token*);$/;"	p	file:	signature:(Parse*, SrcList*, Token*)
sqlite3AnalysisLoad	sqlite3.c	/^SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){$/;"	f	signature:(sqlite3 *db, int iDb)
sqlite3AnalysisLoad	sqlite3.c	/^SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3*,int iDB);$/;"	p	file:	signature:(sqlite3*,int iDB)
sqlite3Analyze	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){$/;"	f	signature:(Parse *pParse, Token *pName1, Token *pName2)
sqlite3Analyze	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Analyze(Parse*, Token*, Token*);$/;"	p	file:	signature:(Parse*, Token*, Token*)
sqlite3AnalyzeFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AnalyzeFunctions(void);$/;"	p	file:	signature:(void)
sqlite3AnalyzeFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AnalyzeFunctions(void){$/;"	f	signature:(void)
sqlite3ApiExit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ApiExit(sqlite3 *db, int);$/;"	p	file:	signature:(sqlite3 *db, int)
sqlite3ApiExit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ApiExit(sqlite3* db, int rc){$/;"	f	signature:(sqlite3* db, int rc)
sqlite3Apis	sqlite3.c	/^static const sqlite3_api_routines sqlite3Apis = { 0 };$/;"	v	file:
sqlite3Apis	sqlite3.c	/^static const sqlite3_api_routines sqlite3Apis = {$/;"	v	file:
sqlite3AppendChar	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AppendChar(StrAccum *p, int N, char c){$/;"	f	signature:(StrAccum *p, int N, char c)
sqlite3AppendChar	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AppendChar(StrAccum*,int,char);$/;"	p	file:	signature:(StrAccum*,int,char)
sqlite3ArrayAllocate	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ArrayAllocate($/;"	f	signature:( sqlite3 *db, void *pArray, int szEntry, int *pnEntry, int *pIdx )
sqlite3ArrayAllocate	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ArrayAllocate(sqlite3*,void*,int,int*,int*);$/;"	p	file:	signature:(sqlite3*,void*,int,int*,int*)
sqlite3AtoF	sqlite3.c	/^SQLITE_PRIVATE int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){$/;"	f	signature:(const char *z, double *pResult, int length, u8 enc)
sqlite3AtoF	sqlite3.c	/^SQLITE_PRIVATE int sqlite3AtoF(const char *z, double*, int, u8);$/;"	p	file:	signature:(const char *z, double*, int, u8)
sqlite3Atoi	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi(const char *z){$/;"	f	signature:(const char *z)
sqlite3Atoi	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi(const char*);$/;"	p	file:	signature:(const char*)
sqlite3Atoi64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi64(const char *zNum, i64 *pNum, int length, u8 enc){$/;"	f	signature:(const char *zNum, i64 *pNum, int length, u8 enc)
sqlite3Atoi64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi64(const char*, i64*, int, u8);$/;"	p	file:	signature:(const char*, i64*, int, u8)
sqlite3Attach	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){$/;"	f	signature:(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey)
sqlite3Attach	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Attach(Parse*, Expr*, Expr*, Expr*);$/;"	p	file:	signature:(Parse*, Expr*, Expr*, Expr*)
sqlite3AuthCheck	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3AuthCheck(Parse*,int, const char*, const char*, const char*);$/;"	p	file:	signature:(Parse*,int, const char*, const char*, const char*)
sqlite3AuthCheck	sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthCheck($/;"	f	signature:( Parse *pParse, int code, const char *zArg1, const char *zArg2, const char *zArg3 )
sqlite3AuthCheck	sqlite3.c	12907;"	d	file:
sqlite3AuthContextPop	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3AuthContextPop(AuthContext*);$/;"	p	file:	signature:(AuthContext*)
sqlite3AuthContextPop	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPop(AuthContext *pContext){$/;"	f	signature:(AuthContext *pContext)
sqlite3AuthContextPop	sqlite3.c	12909;"	d	file:
sqlite3AuthContextPush	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3AuthContextPush(Parse*, AuthContext*, const char*);$/;"	p	file:	signature:(Parse*, AuthContext*, const char*)
sqlite3AuthContextPush	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPush($/;"	f	signature:( Parse *pParse, AuthContext *pContext, const char *zContext )
sqlite3AuthContextPush	sqlite3.c	12908;"	d	file:
sqlite3AuthRead	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3AuthRead(Parse*,Expr*,Schema*,SrcList*);$/;"	p	file:	signature:(Parse*,Expr*,Schema*,SrcList*)
sqlite3AuthRead	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthRead($/;"	f	signature:( Parse *pParse, Expr *pExpr, Schema *pSchema, SrcList *pTabList )
sqlite3AuthRead	sqlite3.c	12906;"	d	file:
sqlite3AuthReadCol	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3AuthReadCol(Parse*, const char *, const char *, int);$/;"	p	file:	signature:(Parse*, const char *, const char *, int)
sqlite3AuthReadCol	sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthReadCol($/;"	f	signature:( Parse *pParse, const char *zTab, const char *zCol, int iDb )
sqlite3AutoExtList	sqlite3.c	/^static SQLITE_WSD struct sqlite3AutoExtList {$/;"	s	file:
sqlite3AutoExtList	sqlite3.c	/^typedef struct sqlite3AutoExtList sqlite3AutoExtList;$/;"	t	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoExtList::aExt	sqlite3.c	/^  void (**aExt)(void);   \/* Pointers to the extension init functions *\/$/;"	m	struct:sqlite3AutoExtList	file:	access:public
sqlite3AutoExtList::nExt	sqlite3.c	/^  int nExt;              \/* Number of entries in aExt[] *\/          $/;"	m	struct:sqlite3AutoExtList	file:	access:public
sqlite3AutoLoadExtensions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoLoadExtensions(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3AutoLoadExtensions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoLoadExtensions(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3Autoext	sqlite3.c	/^} sqlite3Autoext = { 0, 0 };$/;"	v	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoincrementBegin	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3AutoincrementBegin(Parse *pParse);$/;"	p	file:	signature:(Parse *pParse)
sqlite3AutoincrementBegin	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementBegin(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3AutoincrementBegin	sqlite3.c	12729;"	d	file:
sqlite3AutoincrementEnd	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3AutoincrementEnd(Parse *pParse);$/;"	p	file:	signature:(Parse *pParse)
sqlite3AutoincrementEnd	sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementEnd(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3AutoincrementEnd	sqlite3.c	12730;"	d	file:
sqlite3BackupRestart	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupRestart(sqlite3_backup *);$/;"	p	file:	signature:(sqlite3_backup *)
sqlite3BackupRestart	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupRestart(sqlite3_backup *pBackup){$/;"	f	signature:(sqlite3_backup *pBackup)
sqlite3BackupUpdate	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupUpdate(sqlite3_backup *, Pgno, const u8 *);$/;"	p	file:	signature:(sqlite3_backup *, Pgno, const u8 *)
sqlite3BackupUpdate	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupUpdate(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData){$/;"	f	signature:(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData)
sqlite3BeginBenignMalloc	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3BeginBenignMalloc(void);$/;"	p	file:	signature:(void)
sqlite3BeginBenignMalloc	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginBenignMalloc(void){$/;"	f	signature:(void)
sqlite3BeginBenignMalloc	sqlite3.c	13213;"	d	file:
sqlite3BeginParse	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginParse(Parse *pParse, int explainFlag){$/;"	f	signature:(Parse *pParse, int explainFlag)
sqlite3BeginParse	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginParse(Parse*,int);$/;"	p	file:	signature:(Parse*,int)
sqlite3BeginTransaction	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTransaction(Parse *pParse, int type){$/;"	f	signature:(Parse *pParse, int type)
sqlite3BeginTransaction	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTransaction(Parse*, int);$/;"	p	file:	signature:(Parse*, int)
sqlite3BeginTrigger	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3BeginTrigger(Parse*, Token*,Token*,int,int,IdList*,SrcList*,$/;"	p	file:	signature:(Parse*, Token*,Token*,int,int,IdList*,SrcList*, Expr*,int, int)
sqlite3BeginTrigger	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTrigger($/;"	f	signature:( Parse *pParse, Token *pName1, Token *pName2, int tr_tm, int op, IdList *pColumns, SrcList *pTableName, Expr *pWhen, int isTemp, int noErr )
sqlite3BeginWriteOperation	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){$/;"	f	signature:(Parse *pParse, int setStatement, int iDb)
sqlite3BeginWriteOperation	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginWriteOperation(Parse*, int, int);$/;"	p	file:	signature:(Parse*, int, int)
sqlite3BenignMallocHooks	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BenignMallocHooks($/;"	f	signature:( void (*xBenignBegin)(void), void (*xBenignEnd)(void) )
sqlite3BenignMallocHooks	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BenignMallocHooks(void (*)(void), void (*)(void));$/;"	p	file:	signature:(void (*)(void), void (*)(void))
sqlite3BinaryCompareCollSeq	sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq($/;"	f	signature:( Parse *pParse, Expr *pLeft, Expr *pRight )
sqlite3BinaryCompareCollSeq	sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq(Parse *, Expr *, Expr *);$/;"	p	file:	signature:(Parse *, Expr *, Expr *)
sqlite3BitvecBuiltinTest	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(int sz, int *aOp){$/;"	f	signature:(int sz, int *aOp)
sqlite3BitvecBuiltinTest	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(int,int*);$/;"	p	file:	signature:(int,int*)
sqlite3BitvecClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecClear(Bitvec *p, u32 i, void *pBuf){$/;"	f	signature:(Bitvec *p, u32 i, void *pBuf)
sqlite3BitvecClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecClear(Bitvec*, u32, void*);$/;"	p	file:	signature:(Bitvec*, u32, void*)
sqlite3BitvecCreate	sqlite3.c	/^SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(u32 iSize){$/;"	f	signature:(u32 iSize)
sqlite3BitvecCreate	sqlite3.c	/^SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(u32);$/;"	p	file:
sqlite3BitvecDestroy	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecDestroy(Bitvec *p){$/;"	f	signature:(Bitvec *p)
sqlite3BitvecDestroy	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecDestroy(Bitvec*);$/;"	p	file:	signature:(Bitvec*)
sqlite3BitvecSet	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecSet(Bitvec *p, u32 i){$/;"	f	signature:(Bitvec *p, u32 i)
sqlite3BitvecSet	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecSet(Bitvec*, u32);$/;"	p	file:	signature:(Bitvec*, u32)
sqlite3BitvecSize	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BitvecSize(Bitvec *p){$/;"	f	signature:(Bitvec *p)
sqlite3BitvecSize	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BitvecSize(Bitvec*);$/;"	p	file:	signature:(Bitvec*)
sqlite3BitvecTest	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecTest(Bitvec *p, u32 i){$/;"	f	signature:(Bitvec *p, u32 i)
sqlite3BitvecTest	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecTest(Bitvec*, u32);$/;"	p	file:	signature:(Bitvec*, u32)
sqlite3BlobCompare	sqlite3.c	/^static SQLITE_NOINLINE int sqlite3BlobCompare(const Mem *pB1, const Mem *pB2){$/;"	f	file:	signature:(const Mem *pB1, const Mem *pB2)
sqlite3BlockedList	sqlite3.c	/^static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;$/;"	v	file:
sqlite3BtreeBeginStmt	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginStmt(Btree *p, int iStatement){$/;"	f	signature:(Btree *p, int iStatement)
sqlite3BtreeBeginStmt	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginStmt(Btree*,int);$/;"	p	file:	signature:(Btree*,int)
sqlite3BtreeBeginTrans	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginTrans(Btree *p, int wrflag){$/;"	f	signature:(Btree *p, int wrflag)
sqlite3BtreeBeginTrans	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginTrans(Btree*,int);$/;"	p	file:	signature:(Btree*,int)
sqlite3BtreeCheckpoint	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3BtreeCheckpoint(Btree*, int, int *, int *);$/;"	p	file:	signature:(Btree*, int, int *, int *)
sqlite3BtreeCheckpoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCheckpoint(Btree *p, int eMode, int *pnLog, int *pnCkpt){$/;"	f	signature:(Btree *p, int eMode, int *pnLog, int *pnCkpt)
sqlite3BtreeClearCursor	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeClearCursor(BtCursor *);$/;"	p	file:	signature:(BtCursor *)
sqlite3BtreeClearCursor	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeClearCursor(BtCursor *pCur){$/;"	f	signature:(BtCursor *pCur)
sqlite3BtreeClearTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTable(Btree *p, int iTable, int *pnChange){$/;"	f	signature:(Btree *p, int iTable, int *pnChange)
sqlite3BtreeClearTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTable(Btree*, int, int*);$/;"	p	file:	signature:(Btree*, int, int*)
sqlite3BtreeClearTableOfCursor	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTableOfCursor(BtCursor *pCur){$/;"	f	signature:(BtCursor *pCur)
sqlite3BtreeClearTableOfCursor	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTableOfCursor(BtCursor*);$/;"	p	file:	signature:(BtCursor*)
sqlite3BtreeClose	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClose(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeClose	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClose(Btree*);$/;"	p	file:	signature:(Btree*)
sqlite3BtreeCloseCursor	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCloseCursor(BtCursor *pCur){$/;"	f	signature:(BtCursor *pCur)
sqlite3BtreeCloseCursor	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCloseCursor(BtCursor*);$/;"	p	file:	signature:(BtCursor*)
sqlite3BtreeCommit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommit(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeCommit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommit(Btree*);$/;"	p	file:	signature:(Btree*)
sqlite3BtreeCommitPhaseOne	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(Btree *p, const char *zMaster){$/;"	f	signature:(Btree *p, const char *zMaster)
sqlite3BtreeCommitPhaseOne	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(Btree*, const char *zMaster);$/;"	p	file:	signature:(Btree*, const char *zMaster)
sqlite3BtreeCommitPhaseTwo	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(Btree *p, int bCleanup){$/;"	f	signature:(Btree *p, int bCleanup)
sqlite3BtreeCommitPhaseTwo	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(Btree*, int);$/;"	p	file:	signature:(Btree*, int)
sqlite3BtreeCopyFile	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCopyFile(Btree *, Btree *);$/;"	p	file:	signature:(Btree *, Btree *)
sqlite3BtreeCopyFile	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCopyFile(Btree *pTo, Btree *pFrom){$/;"	f	signature:(Btree *pTo, Btree *pFrom)
sqlite3BtreeCount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCount(BtCursor *, i64 *);$/;"	p	file:	signature:(BtCursor *, i64 *)
sqlite3BtreeCount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){$/;"	f	signature:(BtCursor *pCur, i64 *pnEntry)
sqlite3BtreeCreateTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){$/;"	f	signature:(Btree *p, int *piTable, int flags)
sqlite3BtreeCreateTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCreateTable(Btree*, int*, int flags);$/;"	p	file:	signature:(Btree*, int*, int flags)
sqlite3BtreeCursor	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursor($/;"	f	signature:( Btree *p, int iTable, int wrFlag, struct KeyInfo *pKeyInfo, BtCursor *pCur )
sqlite3BtreeCursor	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursor($/;"	p	file:	signature:( Btree*, int iTable, int wrFlag, struct KeyInfo*, BtCursor *pCursor )
sqlite3BtreeCursorHasMoved	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(BtCursor *pCur){$/;"	f	signature:(BtCursor *pCur)
sqlite3BtreeCursorHasMoved	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(BtCursor*);$/;"	p	file:	signature:(BtCursor*)
sqlite3BtreeCursorHints	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorHints(BtCursor *, unsigned int mask);$/;"	p	file:	signature:(BtCursor *, unsigned int mask)
sqlite3BtreeCursorHints	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorHints(BtCursor *pCsr, unsigned int mask){$/;"	f	signature:(BtCursor *pCsr, unsigned int mask)
sqlite3BtreeCursorInfo	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorInfo(BtCursor*, int*, int);$/;"	p	file:	signature:(BtCursor*, int*, int)
sqlite3BtreeCursorIsValid	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(BtCursor *pCur){$/;"	f	signature:(BtCursor *pCur)
sqlite3BtreeCursorIsValid	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(BtCursor*);$/;"	p	file:	signature:(BtCursor*)
sqlite3BtreeCursorList	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorList(Btree*);$/;"	p	file:	signature:(Btree*)
sqlite3BtreeCursorRestore	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorRestore(BtCursor *pCur, int *pDifferentRow){$/;"	f	signature:(BtCursor *pCur, int *pDifferentRow)
sqlite3BtreeCursorRestore	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorRestore(BtCursor*, int*);$/;"	p	file:	signature:(BtCursor*, int*)
sqlite3BtreeCursorSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorSize(void);$/;"	p	file:	signature:(void)
sqlite3BtreeCursorSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorSize(void){$/;"	f	signature:(void)
sqlite3BtreeCursorZero	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorZero(BtCursor *p){$/;"	f	signature:(BtCursor *p)
sqlite3BtreeCursorZero	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorZero(BtCursor*);$/;"	p	file:	signature:(BtCursor*)
sqlite3BtreeData	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeData(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f	signature:(BtCursor *pCur, u32 offset, u32 amt, void *pBuf)
sqlite3BtreeData	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeData(BtCursor*, u32 offset, u32 amt, void*);$/;"	p	file:	signature:(BtCursor*, u32 offset, u32 amt, void*)
sqlite3BtreeDataFetch	sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreeDataFetch(BtCursor *pCur, u32 *pAmt){$/;"	f	signature:(BtCursor *pCur, u32 *pAmt)
sqlite3BtreeDataFetch	sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreeDataFetch(BtCursor*, u32 *pAmt);$/;"	p	file:	signature:(BtCursor*, u32 *pAmt)
sqlite3BtreeDataSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDataSize(BtCursor *pCur, u32 *pSize){$/;"	f	signature:(BtCursor *pCur, u32 *pSize)
sqlite3BtreeDataSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDataSize(BtCursor*, u32 *pSize);$/;"	p	file:	signature:(BtCursor*, u32 *pSize)
sqlite3BtreeDelete	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDelete(BtCursor *pCur){$/;"	f	signature:(BtCursor *pCur)
sqlite3BtreeDelete	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDelete(BtCursor*);$/;"	p	file:	signature:(BtCursor*)
sqlite3BtreeDropTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDropTable(Btree *p, int iTable, int *piMoved){$/;"	f	signature:(Btree *p, int iTable, int *piMoved)
sqlite3BtreeDropTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDropTable(Btree*, int, int*);$/;"	p	file:	signature:(Btree*, int, int*)
sqlite3BtreeEnter	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3BtreeEnter(Btree*);$/;"	p	file:	signature:(Btree*)
sqlite3BtreeEnter	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeEnter	sqlite3.c	9156;"	d	file:
sqlite3BtreeEnterAll	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3BtreeEnterAll(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3BtreeEnterAll	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3BtreeEnterAll	sqlite3.c	9157;"	d	file:
sqlite3BtreeEnterCursor	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3BtreeEnterCursor(BtCursor*);$/;"	p	file:	signature:(BtCursor*)
sqlite3BtreeEnterCursor	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterCursor(BtCursor *pCur){$/;"	f	signature:(BtCursor *pCur)
sqlite3BtreeEnterCursor	sqlite3.c	9176;"	d	file:
sqlite3BtreeEof	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeEof(BtCursor *pCur){$/;"	f	signature:(BtCursor *pCur)
sqlite3BtreeEof	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeEof(BtCursor*);$/;"	p	file:	signature:(BtCursor*)
sqlite3BtreeFirst	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeFirst(BtCursor *pCur, int *pRes){$/;"	f	signature:(BtCursor *pCur, int *pRes)
sqlite3BtreeFirst	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeFirst(BtCursor*, int *pRes);$/;"	p	file:	signature:(BtCursor*, int *pRes)
sqlite3BtreeGetAutoVacuum	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(Btree *);$/;"	p	file:	signature:(Btree *)
sqlite3BtreeGetAutoVacuum	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeGetFilename	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(Btree *);$/;"	p	file:	signature:(Btree *)
sqlite3BtreeGetFilename	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeGetJournalname	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(Btree *);$/;"	p	file:	signature:(Btree *)
sqlite3BtreeGetJournalname	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeGetMeta	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){$/;"	f	signature:(Btree *p, int idx, u32 *pMeta)
sqlite3BtreeGetMeta	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *pBtree, int idx, u32 *pValue);$/;"	p	file:	signature:(Btree *pBtree, int idx, u32 *pValue)
sqlite3BtreeGetPageSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetPageSize(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeGetPageSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetPageSize(Btree*);$/;"	p	file:	signature:(Btree*)
sqlite3BtreeGetReserve	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetReserve(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeGetReserve	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetReserve(Btree*);$/;"	p	file:	signature:(Btree*)
sqlite3BtreeGetReserveNoMutex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetReserveNoMutex(Btree *p);$/;"	p	file:	signature:(Btree *p)
sqlite3BtreeGetReserveNoMutex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetReserveNoMutex(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeHoldsAllMutexes	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3BtreeHoldsAllMutexes(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3BtreeHoldsAllMutexes	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3BtreeHoldsAllMutexes	sqlite3.c	9181;"	d	file:
sqlite3BtreeHoldsMutex	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3BtreeHoldsMutex(Btree*);$/;"	p	file:	signature:(Btree*)
sqlite3BtreeHoldsMutex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeHoldsMutex	sqlite3.c	9180;"	d	file:
sqlite3BtreeIncrVacuum	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(Btree *);$/;"	p	file:	signature:(Btree *)
sqlite3BtreeIncrVacuum	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeIncrblobCursor	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeIncrblobCursor(BtCursor *);$/;"	p	file:	signature:(BtCursor *)
sqlite3BtreeIncrblobCursor	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeIncrblobCursor(BtCursor *pCur){$/;"	f	signature:(BtCursor *pCur)
sqlite3BtreeInsert	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeInsert($/;"	f	signature:( BtCursor *pCur, const void *pKey, i64 nKey, const void *pData, int nData, int nZero, int appendBias, int seekResult )
sqlite3BtreeInsert	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeInsert(BtCursor*, const void *pKey, i64 nKey,$/;"	p	file:	signature:(BtCursor*, const void *pKey, i64 nKey, const void *pData, int nData, int nZero, int bias, int seekResult)
sqlite3BtreeIntegrityCheck	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck($/;"	f	signature:( Btree *p, int *aRoot, int nRoot, int mxErr, int *pnErr )
sqlite3BtreeIntegrityCheck	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck(Btree*, int *aRoot, int nRoot, int, int*);$/;"	p	file:	signature:(Btree*, int *aRoot, int nRoot, int, int*)
sqlite3BtreeIsInBackup	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInBackup(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeIsInBackup	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInBackup(Btree*);$/;"	p	file:	signature:(Btree*)
sqlite3BtreeIsInReadTrans	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeIsInReadTrans	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(Btree*);$/;"	p	file:	signature:(Btree*)
sqlite3BtreeIsInTrans	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInTrans(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeIsInTrans	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInTrans(Btree*);$/;"	p	file:	signature:(Btree*)
sqlite3BtreeIsReadonly	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeIsReadonly	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *pBt);$/;"	p	file:	signature:(Btree *pBt)
sqlite3BtreeKey	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeKey(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f	signature:(BtCursor *pCur, u32 offset, u32 amt, void *pBuf)
sqlite3BtreeKey	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeKey(BtCursor*, u32 offset, u32 amt, void*);$/;"	p	file:	signature:(BtCursor*, u32 offset, u32 amt, void*)
sqlite3BtreeKeyFetch	sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreeKeyFetch(BtCursor *pCur, u32 *pAmt){$/;"	f	signature:(BtCursor *pCur, u32 *pAmt)
sqlite3BtreeKeyFetch	sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreeKeyFetch(BtCursor*, u32 *pAmt);$/;"	p	file:	signature:(BtCursor*, u32 *pAmt)
sqlite3BtreeKeySize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeKeySize(BtCursor *pCur, i64 *pSize){$/;"	f	signature:(BtCursor *pCur, i64 *pSize)
sqlite3BtreeKeySize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeKeySize(BtCursor*, i64 *pSize);$/;"	p	file:	signature:(BtCursor*, i64 *pSize)
sqlite3BtreeLast	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLast(BtCursor *pCur, int *pRes){$/;"	f	signature:(BtCursor *pCur, int *pRes)
sqlite3BtreeLast	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLast(BtCursor*, int *pRes);$/;"	p	file:	signature:(BtCursor*, int *pRes)
sqlite3BtreeLastPage	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BtreeLastPage(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeLastPage	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BtreeLastPage(Btree*);$/;"	p	file:	signature:(Btree*)
sqlite3BtreeLeave	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3BtreeLeave(Btree*);$/;"	p	file:	signature:(Btree*)
sqlite3BtreeLeave	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeave(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeLeave	sqlite3.c	9175;"	d	file:
sqlite3BtreeLeaveAll	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3BtreeLeaveAll(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3BtreeLeaveAll	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveAll(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3BtreeLeaveAll	sqlite3.c	9178;"	d	file:
sqlite3BtreeLeaveCursor	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3BtreeLeaveCursor(BtCursor*);$/;"	p	file:	signature:(BtCursor*)
sqlite3BtreeLeaveCursor	sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(BtCursor *pCur){$/;"	f	signature:(BtCursor *pCur)
sqlite3BtreeLeaveCursor	sqlite3.c	9177;"	d	file:
sqlite3BtreeLockTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){$/;"	f	signature:(Btree *p, int iTab, u8 isWriteLock)
sqlite3BtreeLockTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *pBtree, int iTab, u8 isWriteLock);$/;"	p	file:	signature:(Btree *pBtree, int iTab, u8 isWriteLock)
sqlite3BtreeMaxPageCount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){$/;"	f	signature:(Btree *p, int mxPage)
sqlite3BtreeMaxPageCount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(Btree*,int);$/;"	p	file:	signature:(Btree*,int)
sqlite3BtreeMovetoUnpacked	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked($/;"	f	signature:( BtCursor *pCur, UnpackedRecord *pIdxKey, i64 intKey, int biasRight, int *pRes )
sqlite3BtreeMovetoUnpacked	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked($/;"	p	file:	signature:( BtCursor*, UnpackedRecord *pUnKey, i64 intKey, int bias, int *pRes )
sqlite3BtreeNewDb	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeNewDb(Btree *p);$/;"	p	file:	signature:(Btree *p)
sqlite3BtreeNewDb	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeNewDb(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeNext	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeNext(BtCursor *pCur, int *pRes){$/;"	f	signature:(BtCursor *pCur, int *pRes)
sqlite3BtreeNext	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeNext(BtCursor*, int *pRes);$/;"	p	file:	signature:(BtCursor*, int *pRes)
sqlite3BtreeOpen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeOpen($/;"	f	signature:( sqlite3_vfs *pVfs, const char *zFilename, sqlite3 *db, Btree **ppBtree, int flags, int vfsFlags )
sqlite3BtreeOpen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeOpen($/;"	p	file:	signature:( sqlite3_vfs *pVfs, const char *zFilename, sqlite3 *db, Btree **ppBtree, int flags, int vfsFlags )
sqlite3BtreePager	sqlite3.c	/^SQLITE_PRIVATE Pager *sqlite3BtreePager(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreePager	sqlite3.c	/^SQLITE_PRIVATE struct Pager *sqlite3BtreePager(Btree*);$/;"	p	file:	signature:(Btree*)
sqlite3BtreePrevious	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePrevious(BtCursor *pCur, int *pRes){$/;"	f	signature:(BtCursor *pCur, int *pRes)
sqlite3BtreePrevious	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePrevious(BtCursor*, int *pRes);$/;"	p	file:	signature:(BtCursor*, int *pRes)
sqlite3BtreePutData	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePutData(BtCursor *pCsr, u32 offset, u32 amt, void *z){$/;"	f	signature:(BtCursor *pCsr, u32 offset, u32 amt, void *z)
sqlite3BtreePutData	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePutData(BtCursor*, u32 offset, u32 amt, void*);$/;"	p	file:	signature:(BtCursor*, u32 offset, u32 amt, void*)
sqlite3BtreeRollback	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeRollback(Btree *p, int tripCode, int writeOnly){$/;"	f	signature:(Btree *p, int tripCode, int writeOnly)
sqlite3BtreeRollback	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeRollback(Btree*,int,int);$/;"	p	file:	signature:(Btree*,int,int)
sqlite3BtreeSavepoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSavepoint(Btree *, int, int);$/;"	p	file:	signature:(Btree *, int, int)
sqlite3BtreeSavepoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSavepoint(Btree *p, int op, int iSavepoint){$/;"	f	signature:(Btree *p, int op, int iSavepoint)
sqlite3BtreeSchema	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3BtreeSchema(Btree *, int, void(*)(void *));$/;"	p	file:	signature:(Btree *, int, void(*)(void *))
sqlite3BtreeSchema	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3BtreeSchema(Btree *p, int nBytes, void(*xFree)(void *)){$/;"	f	signature:(Btree *p, int nBytes, void(*xFree)(void *))
sqlite3BtreeSchemaLocked	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeSchemaLocked	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *pBtree);$/;"	p	file:	signature:(Btree *pBtree)
sqlite3BtreeSecureDelete	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSecureDelete(Btree *p, int newFlag){$/;"	f	signature:(Btree *p, int newFlag)
sqlite3BtreeSecureDelete	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSecureDelete(Btree*,int);$/;"	p	file:	signature:(Btree*,int)
sqlite3BtreeSetAutoVacuum	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(Btree *, int);$/;"	p	file:	signature:(Btree *, int)
sqlite3BtreeSetAutoVacuum	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(Btree *p, int autoVacuum){$/;"	f	signature:(Btree *p, int autoVacuum)
sqlite3BtreeSetCacheSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(Btree *p, int mxPage){$/;"	f	signature:(Btree *p, int mxPage)
sqlite3BtreeSetCacheSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(Btree*,int);$/;"	p	file:	signature:(Btree*,int)
sqlite3BtreeSetMmapLimit	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3BtreeSetMmapLimit(Btree*,sqlite3_int64);$/;"	p	file:	signature:(Btree*,sqlite3_int64)
sqlite3BtreeSetMmapLimit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetMmapLimit(Btree *p, sqlite3_int64 szMmap){$/;"	f	signature:(Btree *p, sqlite3_int64 szMmap)
sqlite3BtreeSetPageSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int nPagesize, int nReserve, int eFix);$/;"	p	file:	signature:(Btree *p, int nPagesize, int nReserve, int eFix)
sqlite3BtreeSetPageSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){$/;"	f	signature:(Btree *p, int pageSize, int nReserve, int iFix)
sqlite3BtreeSetPagerFlags	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPagerFlags($/;"	f	signature:( Btree *p, unsigned pgFlags )
sqlite3BtreeSetPagerFlags	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPagerFlags(Btree*,unsigned);$/;"	p	file:	signature:(Btree*,unsigned)
sqlite3BtreeSetVersion	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBt, int iVersion);$/;"	p	file:	signature:(Btree *pBt, int iVersion)
sqlite3BtreeSetVersion	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){$/;"	f	signature:(Btree *pBtree, int iVersion)
sqlite3BtreeSharable	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3BtreeSharable(Btree*);$/;"	p	file:	signature:(Btree*)
sqlite3BtreeSharable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSharable(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeSharable	sqlite3.c	9174;"	d	file:
sqlite3BtreeSyncDisabled	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSyncDisabled(Btree *p){$/;"	f	signature:(Btree *p)
sqlite3BtreeSyncDisabled	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSyncDisabled(Btree*);$/;"	p	file:	signature:(Btree*)
sqlite3BtreeTripAllCursors	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeTripAllCursors(Btree *pBtree, int errCode, int writeOnly){$/;"	f	signature:(Btree *pBtree, int errCode, int writeOnly)
sqlite3BtreeTripAllCursors	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeTripAllCursors(Btree*, int, int);$/;"	p	file:	signature:(Btree*, int, int)
sqlite3BtreeUpdateMeta	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){$/;"	f	signature:(Btree *p, int idx, u32 iMeta)
sqlite3BtreeUpdateMeta	sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree*, int idx, u32 value);$/;"	p	file:	signature:(Btree*, int idx, u32 value)
sqlite3CantopenError	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CantopenError(int lineno){$/;"	f	signature:(int lineno)
sqlite3CantopenError	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CantopenError(int);$/;"	p	file:	signature:(int)
sqlite3ChangeCookie	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ChangeCookie(Parse *pParse, int iDb){$/;"	f	signature:(Parse *pParse, int iDb)
sqlite3ChangeCookie	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ChangeCookie(Parse*, int);$/;"	p	file:	signature:(Parse*, int)
sqlite3CheckCollSeq	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckCollSeq(Parse *, CollSeq *);$/;"	p	file:	signature:(Parse *, CollSeq *)
sqlite3CheckCollSeq	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckCollSeq(Parse *pParse, CollSeq *pColl){$/;"	f	signature:(Parse *pParse, CollSeq *pColl)
sqlite3CheckObjectName	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckObjectName(Parse *, const char *);$/;"	p	file:	signature:(Parse *, const char *)
sqlite3CheckObjectName	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckObjectName(Parse *pParse, const char *zName){$/;"	f	signature:(Parse *pParse, const char *zName)
sqlite3Checkpoint	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3Checkpoint(sqlite3*, int, int, int*, int*);$/;"	p	file:	signature:(sqlite3*, int, int, int*, int*)
sqlite3Checkpoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Checkpoint(sqlite3 *db, int iDb, int eMode, int *pnLog, int *pnCkpt){$/;"	f	signature:(sqlite3 *db, int iDb, int eMode, int *pnLog, int *pnCkpt)
sqlite3ClearStatTables	sqlite3.c	/^static void sqlite3ClearStatTables($/;"	f	file:	signature:( Parse *pParse, int iDb, const char *zType, const char *zName )
sqlite3ClearTempRegCache	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ClearTempRegCache(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3ClearTempRegCache	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ClearTempRegCache(Parse*);$/;"	p	file:	signature:(Parse*)
sqlite3Close	sqlite3.c	/^static int sqlite3Close(sqlite3 *db, int forceZombie){$/;"	f	file:	signature:(sqlite3 *db, int forceZombie)
sqlite3CloseExtensions	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3CloseExtensions(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3CloseExtensions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseExtensions(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3CloseExtensions	sqlite3.c	13097;"	d	file:
sqlite3CloseSavepoints	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseSavepoints(sqlite3 *);$/;"	p	file:	signature:(sqlite3 *)
sqlite3CloseSavepoints	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseSavepoints(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3CodeDropTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeDropTable(Parse *pParse, Table *pTab, int iDb, int isView){$/;"	f	signature:(Parse *pParse, Table *pTab, int iDb, int isView)
sqlite3CodeDropTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeDropTable(Parse*, Table*, int, int);$/;"	p	file:	signature:(Parse*, Table*, int, int)
sqlite3CodeOnce	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CodeOnce(Parse *);$/;"	p	file:	signature:(Parse *)
sqlite3CodeOnce	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CodeOnce(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3CodeRowTrigger	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3CodeRowTrigger(Parse*, Trigger *, int, ExprList*, int, Table *,$/;"	p	file:	signature:(Parse*, Trigger *, int, ExprList*, int, Table *, int, int, int)
sqlite3CodeRowTrigger	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTrigger($/;"	f	signature:( Parse *pParse, Trigger *pTrigger, int op, ExprList *pChanges, int tr_tm, Table *pTab, int reg, int orconf, int ignoreJump )
sqlite3CodeRowTrigger	sqlite3.c	12889;"	d	file:
sqlite3CodeRowTriggerDirect	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3CodeRowTriggerDirect(Parse *, Trigger *, Table *, int, int, int);$/;"	p	file:	signature:(Parse *, Trigger *, Table *, int, int, int)
sqlite3CodeRowTriggerDirect	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect($/;"	f	signature:( Parse *pParse, Trigger *p, Table *pTab, int reg, int orconf, int ignoreJump )
sqlite3CodeRowTriggerDirect	sqlite3.c	12890;"	d	file:
sqlite3CodeSubselect	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CodeSubselect($/;"	f	signature:( Parse *pParse, Expr *pExpr, int rHasNullFlag, int isRowid )
sqlite3CodeSubselect	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CodeSubselect(Parse *, Expr *, int, int);$/;"	p	file:	signature:(Parse *, Expr *, int, int)
sqlite3CodeVerifyNamedSchema	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifyNamedSchema(Parse *pParse, const char *zDb){$/;"	f	signature:(Parse *pParse, const char *zDb)
sqlite3CodeVerifyNamedSchema	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifyNamedSchema(Parse*, const char *zDb);$/;"	p	file:	signature:(Parse*, const char *zDb)
sqlite3CodeVerifySchema	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifySchema(Parse *pParse, int iDb){$/;"	f	signature:(Parse *pParse, int iDb)
sqlite3CodeVerifySchema	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifySchema(Parse*, int);$/;"	p	file:	signature:(Parse*, int)
sqlite3CollapseDatabaseArray	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CollapseDatabaseArray(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3CollapseDatabaseArray	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CollapseDatabaseArray(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3ColumnDefault	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ColumnDefault(Vdbe *, Table *, int, int);$/;"	p	file:	signature:(Vdbe *, Table *, int, int)
sqlite3ColumnDefault	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ColumnDefault(Vdbe *v, Table *pTab, int i, int iReg){$/;"	f	signature:(Vdbe *v, Table *pTab, int i, int iReg)
sqlite3ColumnOfIndex	sqlite3.c	/^SQLITE_PRIVATE i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){$/;"	f	signature:(Index *pIdx, i16 iCol)
sqlite3ColumnOfIndex	sqlite3.c	/^SQLITE_PRIVATE i16 sqlite3ColumnOfIndex(Index*, i16);$/;"	p	file:	signature:(Index*, i16)
sqlite3CommitInternalChanges	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitInternalChanges(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3CommitInternalChanges	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitInternalChanges(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3CommitTransaction	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitTransaction(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3CommitTransaction	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitTransaction(Parse*);$/;"	p	file:	signature:(Parse*)
sqlite3CompareAffinity	sqlite3.c	/^SQLITE_PRIVATE char sqlite3CompareAffinity(Expr *pExpr, char aff2);$/;"	p	file:	signature:(Expr *pExpr, char aff2)
sqlite3CompareAffinity	sqlite3.c	/^SQLITE_PRIVATE char sqlite3CompareAffinity(Expr *pExpr, char aff2){$/;"	f	signature:(Expr *pExpr, char aff2)
sqlite3CompleteInsertion	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CompleteInsertion($/;"	f	signature:( Parse *pParse, Table *pTab, int iDataCur, int iIdxCur, int regNewData, int *aRegIdx, int isUpdate, int appendBias, int useSeekResult )
sqlite3CompleteInsertion	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CompleteInsertion(Parse*,Table*,int,int,int,int*,int,int,int);$/;"	p	file:	signature:(Parse*,Table*,int,int,int,int*,int,int,int)
sqlite3Config	sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config = {$/;"	v	typeref:struct:Sqlite3Config
sqlite3Config	sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;$/;"	v	typeref:struct:Sqlite3Config
sqlite3ConnectionBlocked	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3ConnectionBlocked(sqlite3 *, sqlite3 *);$/;"	p	file:	signature:(sqlite3 *, sqlite3 *)
sqlite3ConnectionBlocked	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionBlocked(sqlite3 *db, sqlite3 *pBlocker){$/;"	f	signature:(sqlite3 *db, sqlite3 *pBlocker)
sqlite3ConnectionBlocked	sqlite3.c	13265;"	d	file:
sqlite3ConnectionClosed	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3ConnectionClosed(sqlite3 *db);$/;"	p	file:	signature:(sqlite3 *db)
sqlite3ConnectionClosed	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionClosed(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3ConnectionClosed	sqlite3.c	13267;"	d	file:
sqlite3ConnectionUnlocked	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3ConnectionUnlocked(sqlite3 *db);$/;"	p	file:	signature:(sqlite3 *db)
sqlite3ConnectionUnlocked	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionUnlocked(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3ConnectionUnlocked	sqlite3.c	13266;"	d	file:
sqlite3CorruptError	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CorruptError(int lineno){$/;"	f	signature:(int lineno)
sqlite3CorruptError	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CorruptError(int);$/;"	p	file:	signature:(int)
sqlite3Coverage	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3Coverage(int);$/;"	p	file:	signature:(int)
sqlite3Coverage	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Coverage(int x){$/;"	f	signature:(int x)
sqlite3CreateColumnExpr	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3 *, SrcList *, int, int);$/;"	p	file:	signature:(sqlite3 *, SrcList *, int, int)
sqlite3CreateColumnExpr	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){$/;"	f	signature:(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol)
sqlite3CreateForeignKey	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateForeignKey($/;"	f	signature:( Parse *pParse, ExprList *pFromCol, Token *pTo, ExprList *pToCol, int flags )
sqlite3CreateForeignKey	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateForeignKey(Parse*, ExprList*, Token*, ExprList*, int);$/;"	p	file:	signature:(Parse*, ExprList*, Token*, ExprList*, int)
sqlite3CreateFunc	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CreateFunc($/;"	f	signature:( sqlite3 *db, const char *zFunctionName, int nArg, int enc, void *pUserData, void (*xFunc)(sqlite3_context*,int,sqlite3_value **), void (*xStep)(sqlite3_context*,int,sqlite3_value **), void (*xFinal)(sqlite3_context*), FuncDestructor *pDestructor )
sqlite3CreateFunc	sqlite3.c	/^SQLITE_PRIVATE int sqlite3CreateFunc(sqlite3 *, const char *, int, int, void *, $/;"	p	file:	signature:(sqlite3 *, const char *, int, int, void *, void (*)(sqlite3_context*,int,sqlite3_value **), void (*)(sqlite3_context*,int,sqlite3_value **), void (*)(sqlite3_context*), FuncDestructor *pDestructor )
sqlite3CreateIndex	sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3CreateIndex($/;"	f	signature:( Parse *pParse, Token *pName1, Token *pName2, SrcList *pTblName, ExprList *pList, int onError, Token *pStart, Expr *pPIWhere, int sortOrder, int ifNotExist )
sqlite3CreateIndex	sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3CreateIndex(Parse*,Token*,Token*,SrcList*,ExprList*,int,Token*,$/;"	p	file:	signature:(Parse*,Token*,Token*,SrcList*,ExprList*,int,Token*, Expr*, int, int)
sqlite3CreateView	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateView($/;"	f	signature:( Parse *pParse, Token *pBegin, Token *pName1, Token *pName2, Select *pSelect, int isTemp, int noErr )
sqlite3CreateView	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateView(Parse*,Token*,Token*,Token*,Select*,int,int);$/;"	p	file:	signature:(Parse*,Token*,Token*,Token*,Select*,int,int)
sqlite3CryptFunc	sqlite3.c	/^SQLITE_PRIVATE void sqlite3CryptFunc(sqlite3_context*,int,sqlite3_value**);$/;"	p	file:	signature:(sqlite3_context*,int,sqlite3_value**)
sqlite3CtypeMap	sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[256] = {$/;"	v
sqlite3CtypeMap	sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[];$/;"	v
sqlite3DbFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DbFree(sqlite3 *db, void *p){$/;"	f	signature:(sqlite3 *db, void *p)
sqlite3DbFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DbFree(sqlite3*, void*);$/;"	p	file:	signature:(sqlite3*, void*)
sqlite3DbMallocRaw	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3 *db, u64 n){$/;"	f	signature:(sqlite3 *db, u64 n)
sqlite3DbMallocRaw	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3*, u64);$/;"	p	file:	signature:(sqlite3*, u64)
sqlite3DbMallocSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbMallocSize(sqlite3 *db, void *p){$/;"	f	signature:(sqlite3 *db, void *p)
sqlite3DbMallocSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbMallocSize(sqlite3*, void*);$/;"	p	file:	signature:(sqlite3*, void*)
sqlite3DbMallocZero	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3 *db, u64 n){$/;"	f	signature:(sqlite3 *db, u64 n)
sqlite3DbMallocZero	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3*, u64);$/;"	p	file:	signature:(sqlite3*, u64)
sqlite3DbMaskAllZero	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3DbMaskAllZero(yDbMask);$/;"	p	file:
sqlite3DbMaskAllZero	sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbMaskAllZero(yDbMask m){$/;"	f	signature:(yDbMask m)
sqlite3DbNameToBtree	sqlite3.c	/^SQLITE_PRIVATE Btree *sqlite3DbNameToBtree(sqlite3 *db, const char *zDbName){$/;"	f	signature:(sqlite3 *db, const char *zDbName)
sqlite3DbNameToBtree	sqlite3.c	/^SQLITE_PRIVATE Btree *sqlite3DbNameToBtree(sqlite3*,const char*);$/;"	p	file:	signature:(sqlite3*,const char*)
sqlite3DbRealloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3 *, void *, u64);$/;"	p	file:	signature:(sqlite3 *, void *, u64)
sqlite3DbRealloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3 *db, void *p, u64 n){$/;"	f	signature:(sqlite3 *db, void *p, u64 n)
sqlite3DbReallocOrFree	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3 *, void *, u64);$/;"	p	file:	signature:(sqlite3 *, void *, u64)
sqlite3DbReallocOrFree	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3 *db, void *p, u64 n){$/;"	f	signature:(sqlite3 *db, void *p, u64 n)
sqlite3DbStrDup	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3 *db, const char *z){$/;"	f	signature:(sqlite3 *db, const char *z)
sqlite3DbStrDup	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3*,const char*);$/;"	p	file:	signature:(sqlite3*,const char*)
sqlite3DbStrNDup	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3 *db, const char *z, u64 n){$/;"	f	signature:(sqlite3 *db, const char *z, u64 n)
sqlite3DbStrNDup	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3*,const char*, u64);$/;"	p	file:	signature:(sqlite3*,const char*, u64)
sqlite3DebugPrintf	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3DebugPrintf(const char*, ...);$/;"	p	file:	signature:(const char*, ...)
sqlite3DebugPrintf	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DebugPrintf(const char *zFormat, ...){$/;"	f	signature:(const char *zFormat, ...)
sqlite3DecOrHexToI64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3DecOrHexToI64(const char *z, i64 *pOut){$/;"	f	signature:(const char *z, i64 *pOut)
sqlite3DecOrHexToI64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3DecOrHexToI64(const char*, i64*);$/;"	p	file:	signature:(const char*, i64*)
sqlite3DefaultMutex	sqlite3.c	/^SQLITE_PRIVATE   sqlite3_mutex_methods const *sqlite3DefaultMutex(void);$/;"	p	file:	signature:(void)
sqlite3DefaultMutex	sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f	signature:(void)
sqlite3DefaultRowEst	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DefaultRowEst(Index *pIdx){$/;"	f	signature:(Index *pIdx)
sqlite3DefaultRowEst	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DefaultRowEst(Index*);$/;"	p	file:	signature:(Index*)
sqlite3DeferForeignKey	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){$/;"	f	signature:(Parse *pParse, int isDeferred)
sqlite3DeferForeignKey	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeferForeignKey(Parse*, int);$/;"	p	file:	signature:(Parse*, int)
sqlite3DeleteFrom	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteFrom($/;"	f	signature:( Parse *pParse, SrcList *pTabList, Expr *pWhere )
sqlite3DeleteFrom	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteFrom(Parse*, SrcList*, Expr*);$/;"	p	file:	signature:(Parse*, SrcList*, Expr*)
sqlite3DeleteIndexSamples	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteIndexSamples(sqlite3 *db, Index *pIdx){$/;"	f	signature:(sqlite3 *db, Index *pIdx)
sqlite3DeleteIndexSamples	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteIndexSamples(sqlite3*,Index*);$/;"	p	file:	signature:(sqlite3*,Index*)
sqlite3DeleteTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTable(sqlite3 *db, Table *pTable){$/;"	f	signature:(sqlite3 *db, Table *pTable)
sqlite3DeleteTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTable(sqlite3*, Table*);$/;"	p	file:	signature:(sqlite3*, Table*)
sqlite3DeleteTrigger	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3DeleteTrigger(sqlite3*, Trigger*);$/;"	p	file:	signature:(sqlite3*, Trigger*)
sqlite3DeleteTrigger	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTrigger(sqlite3 *db, Trigger *pTrigger){$/;"	f	signature:(sqlite3 *db, Trigger *pTrigger)
sqlite3DeleteTrigger	sqlite3.c	12886;"	d	file:
sqlite3DeleteTriggerStep	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3DeleteTriggerStep(sqlite3*, TriggerStep*);$/;"	p	file:	signature:(sqlite3*, TriggerStep*)
sqlite3DeleteTriggerStep	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTriggerStep(sqlite3 *db, TriggerStep *pTriggerStep){$/;"	f	signature:(sqlite3 *db, TriggerStep *pTriggerStep)
sqlite3Dequote	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Dequote(char *z){$/;"	f	signature:(char *z)
sqlite3Dequote	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Dequote(char*);$/;"	p	file:	signature:(char*)
sqlite3Detach	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Detach(Parse *pParse, Expr *pDbname){$/;"	f	signature:(Parse *pParse, Expr *pDbname)
sqlite3Detach	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Detach(Parse*, Expr*);$/;"	p	file:	signature:(Parse*, Expr*)
sqlite3DropIndex	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){$/;"	f	signature:(Parse *pParse, SrcList *pName, int ifExists)
sqlite3DropIndex	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropIndex(Parse*, SrcList*, int);$/;"	p	file:	signature:(Parse*, SrcList*, int)
sqlite3DropTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){$/;"	f	signature:(Parse *pParse, SrcList *pName, int isView, int noErr)
sqlite3DropTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTable(Parse*, SrcList*, int, int);$/;"	p	file:	signature:(Parse*, SrcList*, int, int)
sqlite3DropTrigger	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3DropTrigger(Parse*, SrcList*, int);$/;"	p	file:	signature:(Parse*, SrcList*, int)
sqlite3DropTrigger	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){$/;"	f	signature:(Parse *pParse, SrcList *pName, int noErr)
sqlite3DropTriggerPtr	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3DropTriggerPtr(Parse*, Trigger*);$/;"	p	file:	signature:(Parse*, Trigger*)
sqlite3DropTriggerPtr	sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTriggerPtr(Parse *pParse, Trigger *pTrigger){$/;"	f	signature:(Parse *pParse, Trigger *pTrigger)
sqlite3DropTriggerPtr	sqlite3.c	12887;"	d	file:
sqlite3EndBenignMalloc	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3EndBenignMalloc(void);$/;"	p	file:	signature:(void)
sqlite3EndBenignMalloc	sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndBenignMalloc(void){$/;"	f	signature:(void)
sqlite3EndBenignMalloc	sqlite3.c	13214;"	d	file:
sqlite3EndTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndTable($/;"	f	signature:( Parse *pParse, Token *pCons, Token *pEnd, u8 tabOpts, Select *pSelect )
sqlite3EndTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndTable(Parse*,Token*,Token*,u8,Select*);$/;"	p	file:	signature:(Parse*,Token*,Token*,u8,Select*)
sqlite3ErrName	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3ErrName(int rc){$/;"	f	signature:(int rc)
sqlite3ErrName	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3ErrName(int);$/;"	p	file:	signature:(int)
sqlite3ErrStr	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3ErrStr(int rc){$/;"	f	signature:(int rc)
sqlite3ErrStr	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3ErrStr(int);$/;"	p	file:	signature:(int)
sqlite3Error	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Error(sqlite3 *db, int err_code){$/;"	f	signature:(sqlite3 *db, int err_code)
sqlite3Error	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Error(sqlite3*,int);$/;"	p	file:	signature:(sqlite3*,int)
sqlite3ErrorMsg	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ErrorMsg(Parse *pParse, const char *zFormat, ...){$/;"	f	signature:(Parse *pParse, const char *zFormat, ...)
sqlite3ErrorMsg	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ErrorMsg(Parse*, const char*, ...);$/;"	p	file:	signature:(Parse*, const char*, ...)
sqlite3ErrorWithMsg	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ErrorWithMsg(sqlite3 *db, int err_code, const char *zFormat, ...){$/;"	f	signature:(sqlite3 *db, int err_code, const char *zFormat, ...)
sqlite3ErrorWithMsg	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ErrorWithMsg(sqlite3*, int, const char*,...);$/;"	p	file:	signature:(sqlite3*, int, const char*,...)
sqlite3ExpirePreparedStatements	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3ExpirePreparedStatements	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3Expr	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3Expr($/;"	f	signature:( sqlite3 *db, int op, const char *zToken )
sqlite3Expr	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3Expr(sqlite3*,int,const char*);$/;"	p	file:	signature:(sqlite3*,int,const char*)
sqlite3ExprAddCollateString	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAddCollateString(Parse *pParse, Expr *pExpr, const char *zC){$/;"	f	signature:(Parse *pParse, Expr *pExpr, const char *zC)
sqlite3ExprAddCollateString	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAddCollateString(Parse*,Expr*,const char*);$/;"	p	file:	signature:(Parse*,Expr*,const char*)
sqlite3ExprAddCollateToken	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAddCollateToken($/;"	f	signature:( Parse *pParse, Expr *pExpr, const Token *pCollName )
sqlite3ExprAddCollateToken	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAddCollateToken(Parse *pParse, Expr*, const Token*);$/;"	p	file:	signature:(Parse *pParse, Expr*, const Token*)
sqlite3ExprAffinity	sqlite3.c	/^SQLITE_PRIVATE char sqlite3ExprAffinity(Expr *pExpr);$/;"	p	file:	signature:(Expr *pExpr)
sqlite3ExprAffinity	sqlite3.c	/^SQLITE_PRIVATE char sqlite3ExprAffinity(Expr *pExpr){$/;"	f	signature:(Expr *pExpr)
sqlite3ExprAlloc	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAlloc($/;"	f	signature:( sqlite3 *db, int op, const Token *pToken, int dequote )
sqlite3ExprAlloc	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAlloc(sqlite3*,int,const Token*,int);$/;"	p	file:	signature:(sqlite3*,int,const Token*,int)
sqlite3ExprAnalyzeAggList	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(NameContext *pNC, ExprList *pList){$/;"	f	signature:(NameContext *pNC, ExprList *pList)
sqlite3ExprAnalyzeAggList	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(NameContext*,ExprList*);$/;"	p	file:	signature:(NameContext*,ExprList*)
sqlite3ExprAnalyzeAggregates	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(NameContext *pNC, Expr *pExpr){$/;"	f	signature:(NameContext *pNC, Expr *pExpr)
sqlite3ExprAnalyzeAggregates	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(NameContext*, Expr*);$/;"	p	file:	signature:(NameContext*, Expr*)
sqlite3ExprAnd	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){$/;"	f	signature:(sqlite3 *db, Expr *pLeft, Expr *pRight)
sqlite3ExprAnd	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3*,Expr*, Expr*);$/;"	p	file:	signature:(sqlite3*,Expr*, Expr*)
sqlite3ExprAssignVarNumber	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr){$/;"	f	signature:(Parse *pParse, Expr *pExpr)
sqlite3ExprAssignVarNumber	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(Parse*, Expr*);$/;"	p	file:	signature:(Parse*, Expr*)
sqlite3ExprAttachSubtrees	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAttachSubtrees($/;"	f	signature:( sqlite3 *db, Expr *pRoot, Expr *pLeft, Expr *pRight )
sqlite3ExprAttachSubtrees	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAttachSubtrees(sqlite3*,Expr*,Expr*,Expr*);$/;"	p	file:	signature:(sqlite3*,Expr*,Expr*,Expr*)
sqlite3ExprCacheAffinityChange	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(Parse *pParse, int iStart, int iCount){$/;"	f	signature:(Parse *pParse, int iStart, int iCount)
sqlite3ExprCacheAffinityChange	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(Parse*, int, int);$/;"	p	file:	signature:(Parse*, int, int)
sqlite3ExprCacheClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheClear(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3ExprCacheClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheClear(Parse*);$/;"	p	file:	signature:(Parse*)
sqlite3ExprCachePinRegister	sqlite3.c	/^static void sqlite3ExprCachePinRegister(Parse *pParse, int iReg){$/;"	f	file:	signature:(Parse *pParse, int iReg)
sqlite3ExprCachePop	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePop(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3ExprCachePop	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePop(Parse*);$/;"	p	file:	signature:(Parse*)
sqlite3ExprCachePush	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePush(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3ExprCachePush	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePush(Parse*);$/;"	p	file:	signature:(Parse*)
sqlite3ExprCacheRemove	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheRemove(Parse *pParse, int iReg, int nReg){$/;"	f	signature:(Parse *pParse, int iReg, int nReg)
sqlite3ExprCacheRemove	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheRemove(Parse*, int, int);$/;"	p	file:	signature:(Parse*, int, int)
sqlite3ExprCacheStore	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheStore(Parse *pParse, int iTab, int iCol, int iReg){$/;"	f	signature:(Parse *pParse, int iTab, int iCol, int iReg)
sqlite3ExprCacheStore	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheStore(Parse*, int, int, int);$/;"	p	file:	signature:(Parse*, int, int, int)
sqlite3ExprCanBeNull	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCanBeNull(const Expr *p){$/;"	f	signature:(const Expr *p)
sqlite3ExprCanBeNull	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCanBeNull(const Expr*);$/;"	p	file:	signature:(const Expr*)
sqlite3ExprCheckHeight	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3ExprCheckHeight(Parse*, int);$/;"	p	file:	signature:(Parse*, int)
sqlite3ExprCheckHeight	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCheckHeight(Parse *pParse, int nHeight){$/;"	f	signature:(Parse *pParse, int nHeight)
sqlite3ExprCheckHeight	sqlite3.c	13254;"	d	file:
sqlite3ExprCode	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){$/;"	f	signature:(Parse *pParse, Expr *pExpr, int target)
sqlite3ExprCode	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCode(Parse*, Expr*, int);$/;"	p	file:	signature:(Parse*, Expr*, int)
sqlite3ExprCodeAndCache	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){$/;"	f	signature:(Parse *pParse, Expr *pExpr, int target)
sqlite3ExprCodeAndCache	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeAndCache(Parse*, Expr*, int);$/;"	p	file:	signature:(Parse*, Expr*, int)
sqlite3ExprCodeAtInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeAtInit($/;"	f	signature:( Parse *pParse, Expr *pExpr, int regDest, u8 reusable )
sqlite3ExprCodeAtInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeAtInit(Parse*, Expr*, int, u8);$/;"	p	file:	signature:(Parse*, Expr*, int, u8)
sqlite3ExprCodeExprList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeExprList($/;"	f	signature:( Parse *pParse, ExprList *pList, int target, u8 flags )
sqlite3ExprCodeExprList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeExprList(Parse*, ExprList*, int, u8);$/;"	p	file:	signature:(Parse*, ExprList*, int, u8)
sqlite3ExprCodeFactorable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeFactorable(Parse *pParse, Expr *pExpr, int target){$/;"	f	signature:(Parse *pParse, Expr *pExpr, int target)
sqlite3ExprCodeFactorable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeFactorable(Parse*, Expr*, int);$/;"	p	file:	signature:(Parse*, Expr*, int)
sqlite3ExprCodeGetColumn	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeGetColumn($/;"	f	signature:( Parse *pParse, Table *pTab, int iColumn, int iTable, int iReg, u8 p5 )
sqlite3ExprCodeGetColumn	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeGetColumn(Parse*, Table*, int, int, int, u8);$/;"	p	file:	signature:(Parse*, Table*, int, int, int, u8)
sqlite3ExprCodeGetColumnOfTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeGetColumnOfTable($/;"	f	signature:( Vdbe *v, Table *pTab, int iTabCur, int iCol, int regOut )
sqlite3ExprCodeGetColumnOfTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeGetColumnOfTable(Vdbe*, Table*, int, int, int);$/;"	p	file:	signature:(Vdbe*, Table*, int, int, int)
sqlite3ExprCodeIN	sqlite3.c	/^static void sqlite3ExprCodeIN($/;"	f	file:	signature:( Parse *pParse, Expr *pExpr, int destIfFalse, int destIfNull )
sqlite3ExprCodeMove	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f	signature:(Parse *pParse, int iFrom, int iTo, int nReg)
sqlite3ExprCodeMove	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeMove(Parse*, int, int, int);$/;"	p	file:	signature:(Parse*, int, int, int)
sqlite3ExprCodeTarget	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTarget(Parse *pParse, Expr *pExpr, int target){$/;"	f	signature:(Parse *pParse, Expr *pExpr, int target)
sqlite3ExprCodeTarget	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTarget(Parse*, Expr*, int);$/;"	p	file:	signature:(Parse*, Expr*, int)
sqlite3ExprCodeTemp	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){$/;"	f	signature:(Parse *pParse, Expr *pExpr, int *pReg)
sqlite3ExprCodeTemp	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTemp(Parse*, Expr*, int*);$/;"	p	file:	signature:(Parse*, Expr*, int*)
sqlite3ExprCollSeq	sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr);$/;"	p	file:	signature:(Parse *pParse, Expr *pExpr)
sqlite3ExprCollSeq	sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){$/;"	f	signature:(Parse *pParse, Expr *pExpr)
sqlite3ExprCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCompare(Expr *pA, Expr *pB, int iTab){$/;"	f	signature:(Expr *pA, Expr *pB, int iTab)
sqlite3ExprCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCompare(Expr*, Expr*, int);$/;"	p	file:	signature:(Expr*, Expr*, int)
sqlite3ExprDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprDelete(sqlite3 *db, Expr *p){$/;"	f	signature:(sqlite3 *db, Expr *p)
sqlite3ExprDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprDelete(sqlite3*, Expr*);$/;"	p	file:	signature:(sqlite3*, Expr*)
sqlite3ExprDup	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3 *db, Expr *p, int flags){$/;"	f	signature:(sqlite3 *db, Expr *p, int flags)
sqlite3ExprDup	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3*,Expr*,int);$/;"	p	file:	signature:(sqlite3*,Expr*,int)
sqlite3ExprFunction	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprFunction(Parse *pParse, ExprList *pList, Token *pToken){$/;"	f	signature:(Parse *pParse, ExprList *pList, Token *pToken)
sqlite3ExprFunction	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprFunction(Parse*,ExprList*, Token*);$/;"	p	file:	signature:(Parse*,ExprList*, Token*)
sqlite3ExprIfFalse	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfFalse(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f	signature:(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull)
sqlite3ExprIfFalse	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfFalse(Parse*, Expr*, int, int);$/;"	p	file:	signature:(Parse*, Expr*, int, int)
sqlite3ExprIfTrue	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfTrue(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f	signature:(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull)
sqlite3ExprIfTrue	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfTrue(Parse*, Expr*, int, int);$/;"	p	file:	signature:(Parse*, Expr*, int, int)
sqlite3ExprImpliesExpr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprImpliesExpr(Expr *pE1, Expr *pE2, int iTab){$/;"	f	signature:(Expr *pE1, Expr *pE2, int iTab)
sqlite3ExprImpliesExpr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprImpliesExpr(Expr*, Expr*, int);$/;"	p	file:	signature:(Expr*, Expr*, int)
sqlite3ExprIsConstant	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstant(Expr *p){$/;"	f	signature:(Expr *p)
sqlite3ExprIsConstant	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstant(Expr*);$/;"	p	file:	signature:(Expr*)
sqlite3ExprIsConstantNotJoin	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(Expr *p){$/;"	f	signature:(Expr *p)
sqlite3ExprIsConstantNotJoin	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(Expr*);$/;"	p	file:	signature:(Expr*)
sqlite3ExprIsConstantOrFunction	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(Expr *p, u8 isInit){$/;"	f	signature:(Expr *p, u8 isInit)
sqlite3ExprIsConstantOrFunction	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(Expr*, u8);$/;"	p	file:	signature:(Expr*, u8)
sqlite3ExprIsInteger	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsInteger(Expr *p, int *pValue){$/;"	f	signature:(Expr *p, int *pValue)
sqlite3ExprIsInteger	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsInteger(Expr*, int*);$/;"	p	file:	signature:(Expr*, int*)
sqlite3ExprListAppend	sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListAppend($/;"	f	signature:( Parse *pParse, ExprList *pList, Expr *pExpr )
sqlite3ExprListAppend	sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListAppend(Parse*,ExprList*,Expr*);$/;"	p	file:	signature:(Parse*,ExprList*,Expr*)
sqlite3ExprListCheckLength	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListCheckLength($/;"	f	signature:( Parse *pParse, ExprList *pEList, const char *zObject )
sqlite3ExprListCheckLength	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListCheckLength(Parse*, ExprList*, const char*);$/;"	p	file:	signature:(Parse*, ExprList*, const char*)
sqlite3ExprListCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprListCompare(ExprList *pA, ExprList *pB, int iTab){$/;"	f	signature:(ExprList *pA, ExprList *pB, int iTab)
sqlite3ExprListCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprListCompare(ExprList*, ExprList*, int);$/;"	p	file:	signature:(ExprList*, ExprList*, int)
sqlite3ExprListDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListDelete(sqlite3 *db, ExprList *pList){$/;"	f	signature:(sqlite3 *db, ExprList *pList)
sqlite3ExprListDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListDelete(sqlite3*, ExprList*);$/;"	p	file:	signature:(sqlite3*, ExprList*)
sqlite3ExprListDup	sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3 *db, ExprList *p, int flags){$/;"	f	signature:(sqlite3 *db, ExprList *p, int flags)
sqlite3ExprListDup	sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3*,ExprList*,int);$/;"	p	file:	signature:(sqlite3*,ExprList*,int)
sqlite3ExprListSetName	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetName($/;"	f	signature:( Parse *pParse, ExprList *pList, Token *pName, int dequote )
sqlite3ExprListSetName	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetName(Parse*,ExprList*,Token*,int);$/;"	p	file:	signature:(Parse*,ExprList*,Token*,int)
sqlite3ExprListSetSpan	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetSpan($/;"	f	signature:( Parse *pParse, ExprList *pList, ExprSpan *pSpan )
sqlite3ExprListSetSpan	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetSpan(Parse*,ExprList*,ExprSpan*);$/;"	p	file:	signature:(Parse*,ExprList*,ExprSpan*)
sqlite3ExprNeedsNoAffinityChange	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){$/;"	f	signature:(const Expr *p, char aff)
sqlite3ExprNeedsNoAffinityChange	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(const Expr*, char);$/;"	p	file:	signature:(const Expr*, char)
sqlite3ExprSetHeight	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3ExprSetHeight(Parse *pParse, Expr *p);$/;"	p	file:	signature:(Parse *pParse, Expr *p)
sqlite3ExprSetHeight	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprSetHeight(Parse *pParse, Expr *p){$/;"	f	signature:(Parse *pParse, Expr *p)
sqlite3ExprSetHeight	sqlite3.c	13252;"	d	file:
sqlite3ExprSkipCollate	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprSkipCollate(Expr *pExpr){$/;"	f	signature:(Expr *pExpr)
sqlite3ExprSkipCollate	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprSkipCollate(Expr*);$/;"	p	file:	signature:(Expr*)
sqlite3FaultSim	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3FaultSim(int);$/;"	p	file:	signature:(int)
sqlite3FaultSim	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FaultSim(int iTest){$/;"	f	signature:(int iTest)
sqlite3FaultSim	sqlite3.c	12692;"	d	file:
sqlite3FileSuffix3	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FileSuffix3(const char *zBaseFilename, char *z){$/;"	f	signature:(const char *zBaseFilename, char *z)
sqlite3FileSuffix3	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FileSuffix3(const char*, char*);$/;"	p	file:	signature:(const char*, char*)
sqlite3FileSuffix3	sqlite3.c	12991;"	d	file:
sqlite3FindCollSeq	sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq($/;"	f	signature:( sqlite3 *db, u8 enc, const char *zName, int create )
sqlite3FindCollSeq	sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq(sqlite3*,u8 enc, const char*,int);$/;"	p	file:	signature:(sqlite3*,u8 enc, const char*,int)
sqlite3FindDb	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDb(sqlite3 *db, Token *pName){$/;"	f	signature:(sqlite3 *db, Token *pName)
sqlite3FindDb	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDb(sqlite3*, Token*);$/;"	p	file:	signature:(sqlite3*, Token*)
sqlite3FindDbName	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDbName(sqlite3 *, const char *);$/;"	p	file:	signature:(sqlite3 *, const char *)
sqlite3FindDbName	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDbName(sqlite3 *db, const char *zName){$/;"	f	signature:(sqlite3 *db, const char *zName)
sqlite3FindFunction	sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3FindFunction($/;"	f	signature:( sqlite3 *db, const char *zName, int nName, int nArg, u8 enc, u8 createFlag )
sqlite3FindFunction	sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3FindFunction(sqlite3*,const char*,int,int,u8,u8);$/;"	p	file:	signature:(sqlite3*,const char*,int,int,u8,u8)
sqlite3FindInIndex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindInIndex(Parse *, Expr *, u32, int*);$/;"	p	file:	signature:(Parse *, Expr *, u32, int*)
sqlite3FindInIndex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindInIndex(Parse *pParse, Expr *pX, u32 inFlags, int *prRhsHasNull){$/;"	f	signature:(Parse *pParse, Expr *pX, u32 inFlags, int *prRhsHasNull)
sqlite3FindIndex	sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3 *db, const char *zName, const char *zDb){$/;"	f	signature:(sqlite3 *db, const char *zName, const char *zDb)
sqlite3FindIndex	sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3*,const char*, const char*);$/;"	p	file:	signature:(sqlite3*,const char*, const char*)
sqlite3FindTable	sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3 *db, const char *zName, const char *zDatabase){$/;"	f	signature:(sqlite3 *db, const char *zName, const char *zDatabase)
sqlite3FindTable	sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3*,const char*, const char*);$/;"	p	file:	signature:(sqlite3*,const char*, const char*)
sqlite3FinishCoding	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishCoding(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3FinishCoding	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishCoding(Parse*);$/;"	p	file:	signature:(Parse*)
sqlite3FinishTrigger	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3FinishTrigger(Parse*, TriggerStep*, Token*);$/;"	p	file:	signature:(Parse*, TriggerStep*, Token*)
sqlite3FinishTrigger	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishTrigger($/;"	f	signature:( Parse *pParse, TriggerStep *pStepList, Token *pAll )
sqlite3FixExpr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExpr($/;"	f	signature:( DbFixer *pFix, Expr *pExpr )
sqlite3FixExpr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExpr(DbFixer*, Expr*);$/;"	p	file:	signature:(DbFixer*, Expr*)
sqlite3FixExprList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExprList($/;"	f	signature:( DbFixer *pFix, ExprList *pList )
sqlite3FixExprList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExprList(DbFixer*, ExprList*);$/;"	p	file:	signature:(DbFixer*, ExprList*)
sqlite3FixInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FixInit($/;"	f	signature:( DbFixer *pFix, Parse *pParse, int iDb, const char *zType, const Token *pName )
sqlite3FixInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FixInit(DbFixer*, Parse*, int, const char*, const Token*);$/;"	p	file:	signature:(DbFixer*, Parse*, int, const char*, const Token*)
sqlite3FixSelect	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSelect($/;"	f	signature:( DbFixer *pFix, Select *pSelect )
sqlite3FixSelect	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSelect(DbFixer*, Select*);$/;"	p	file:	signature:(DbFixer*, Select*)
sqlite3FixSrcList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSrcList($/;"	f	signature:( DbFixer *pFix, SrcList *pList )
sqlite3FixSrcList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSrcList(DbFixer*, SrcList*);$/;"	p	file:	signature:(DbFixer*, SrcList*)
sqlite3FixTriggerStep	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixTriggerStep($/;"	f	signature:( DbFixer *pFix, TriggerStep *pStep )
sqlite3FixTriggerStep	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixTriggerStep(DbFixer*, TriggerStep*);$/;"	p	file:	signature:(DbFixer*, TriggerStep*)
sqlite3FkActions	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3FkActions(Parse*, Table*, ExprList*, int, int*, int);$/;"	p	file:	signature:(Parse*, Table*, ExprList*, int, int*, int)
sqlite3FkActions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkActions($/;"	f	signature:( Parse *pParse, Table *pTab, ExprList *pChanges, int regOld, int *aChange, int bChngRowid )
sqlite3FkActions	sqlite3.c	13183;"	d	file:
sqlite3FkCheck	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3FkCheck(Parse*, Table*, int, int, int*, int);$/;"	p	file:	signature:(Parse*, Table*, int, int, int*, int)
sqlite3FkCheck	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkCheck($/;"	f	signature:( Parse *pParse, Table *pTab, int regOld, int regNew, int *aChange, int bChngRowid )
sqlite3FkCheck	sqlite3.c	13184;"	d	file:
sqlite3FkDelete	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3FkDelete(sqlite3 *, Table*);$/;"	p	file:	signature:(sqlite3 *, Table*)
sqlite3FkDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDelete(sqlite3 *db, Table *pTab){$/;"	f	signature:(sqlite3 *db, Table *pTab)
sqlite3FkDelete	sqlite3.c	13193;"	d	file:
sqlite3FkDropTable	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3FkDropTable(Parse*, SrcList *, Table*);$/;"	p	file:	signature:(Parse*, SrcList *, Table*)
sqlite3FkDropTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){$/;"	f	signature:(Parse *pParse, SrcList *pName, Table *pTab)
sqlite3FkDropTable	sqlite3.c	13185;"	d	file:
sqlite3FkLocateIndex	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3FkLocateIndex(Parse*,Table*,FKey*,Index**,int**);$/;"	p	file:	signature:(Parse*,Table*,FKey*,Index**,int**)
sqlite3FkLocateIndex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FkLocateIndex($/;"	f	signature:( Parse *pParse, Table *pParent, FKey *pFKey, Index **ppIdx, int **paiCol )
sqlite3FkLocateIndex	sqlite3.c	13194;"	d	file:
sqlite3FkOldmask	sqlite3.c	/^SQLITE_PRIVATE   u32 sqlite3FkOldmask(Parse*, Table*);$/;"	p	file:	signature:(Parse*, Table*)
sqlite3FkOldmask	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3FkOldmask($/;"	f	signature:( Parse *pParse, Table *pTab )
sqlite3FkOldmask	sqlite3.c	13186;"	d	file:
sqlite3FkReferences	sqlite3.c	/^SQLITE_PRIVATE   FKey *sqlite3FkReferences(Table *);$/;"	p	file:	signature:(Table *)
sqlite3FkReferences	sqlite3.c	/^SQLITE_PRIVATE FKey *sqlite3FkReferences(Table *pTab){$/;"	f	signature:(Table *pTab)
sqlite3FkRequired	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3FkRequired(Parse*, Table*, int*, int);$/;"	p	file:	signature:(Parse*, Table*, int*, int)
sqlite3FkRequired	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FkRequired($/;"	f	signature:( Parse *pParse, Table *pTab, int *aChange, int chngRowid )
sqlite3FkRequired	sqlite3.c	13187;"	d	file:
sqlite3Fts3AllSegdirs	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3AllSegdirs($/;"	f	signature:( Fts3Table *p, int iLangid, int iIndex, int iLevel, sqlite3_stmt **ppStmt )
sqlite3Fts3AllSegdirs	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3AllSegdirs(Fts3Table*, int, int, int, sqlite3_stmt **);$/;"	p	file:	signature:(Fts3Table*, int, int, int, sqlite3_stmt **)
sqlite3Fts3CacheDeferredDoclists	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3CacheDeferredDoclists(Fts3Cursor *);$/;"	p	file:	signature:(Fts3Cursor *)
sqlite3Fts3CacheDeferredDoclists	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3CacheDeferredDoclists(Fts3Cursor *pCsr){$/;"	f	signature:(Fts3Cursor *pCsr)
sqlite3Fts3CacheDeferredDoclists	sqlite3.c	129818;"	d	file:
sqlite3Fts3Corrupt	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Corrupt(){$/;"	f
sqlite3Fts3Corrupt	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Corrupt(void);$/;"	p	file:	signature:(void)
sqlite3Fts3CreateStatTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3CreateStatTable(int *pRc, Fts3Table *p){$/;"	f	signature:(int *pRc, Fts3Table *p)
sqlite3Fts3CreateStatTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3CreateStatTable(int*, Fts3Table*);$/;"	p	file:	signature:(int*, Fts3Table*)
sqlite3Fts3DeferToken	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferToken($/;"	f	signature:( Fts3Cursor *pCsr, Fts3PhraseToken *pToken, int iCol )
sqlite3Fts3DeferToken	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferToken(Fts3Cursor *, Fts3PhraseToken *, int);$/;"	p	file:	signature:(Fts3Cursor *, Fts3PhraseToken *, int)
sqlite3Fts3DeferToken	sqlite3.c	129817;"	d	file:
sqlite3Fts3DeferredTokenList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferredTokenList($/;"	f	signature:( Fts3DeferredToken *p, char **ppData, int *pnData )
sqlite3Fts3DeferredTokenList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferredTokenList(Fts3DeferredToken *, char **, int *);$/;"	p	file:	signature:(Fts3DeferredToken *, char **, int *)
sqlite3Fts3DeferredTokenList	sqlite3.c	129820;"	d	file:
sqlite3Fts3Dequote	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Dequote(char *);$/;"	p	file:	signature:(char *)
sqlite3Fts3Dequote	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Dequote(char *z){$/;"	f	signature:(char *z)
sqlite3Fts3DoclistNext	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistNext($/;"	f	signature:( int bDescIdx, char *aDoclist, int nDoclist, char **ppIter, sqlite3_int64 *piDocid, u8 *pbEof )
sqlite3Fts3DoclistPrev	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistPrev($/;"	f	signature:( int bDescIdx, char *aDoclist, int nDoclist, char **ppIter, sqlite3_int64 *piDocid, int *pnList, u8 *pbEof )
sqlite3Fts3DoclistPrev	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistPrev(int,char*,int,char**,sqlite3_int64*,int*,u8*);$/;"	p	file:	signature:(int,char*,int,char**,sqlite3_int64*,int*,u8*)
sqlite3Fts3EvalPhraseCleanup	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3EvalPhraseCleanup(Fts3Phrase *);$/;"	p	file:	signature:(Fts3Phrase *)
sqlite3Fts3EvalPhraseCleanup	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3EvalPhraseCleanup(Fts3Phrase *pPhrase){$/;"	f	signature:(Fts3Phrase *pPhrase)
sqlite3Fts3EvalPhrasePoslist	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhrasePoslist($/;"	f	signature:( Fts3Cursor *pCsr, Fts3Expr *pExpr, int iCol, char **ppOut )
sqlite3Fts3EvalPhrasePoslist	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhrasePoslist(Fts3Cursor *, Fts3Expr *, int iCol, char **); $/;"	p	file:	signature:(Fts3Cursor *, Fts3Expr *, int iCol, char **)
sqlite3Fts3EvalPhraseStats	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhraseStats($/;"	f	signature:( Fts3Cursor *pCsr, Fts3Expr *pExpr, u32 *aiOut )
sqlite3Fts3EvalPhraseStats	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhraseStats(Fts3Cursor *, Fts3Expr *, u32 *);$/;"	p	file:	signature:(Fts3Cursor *, Fts3Expr *, u32 *)
sqlite3Fts3ExprFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3ExprFree(Fts3Expr *);$/;"	p	file:	signature:(Fts3Expr *)
sqlite3Fts3ExprFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3ExprFree(Fts3Expr *pDel){$/;"	f	signature:(Fts3Expr *pDel)
sqlite3Fts3ExprInitTestInterface	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(sqlite3 *db);$/;"	p	file:	signature:(sqlite3 *db)
sqlite3Fts3ExprInitTestInterface	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(sqlite3* db){$/;"	f	signature:(sqlite3* db)
sqlite3Fts3ExprParse	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprParse($/;"	f	signature:( sqlite3_tokenizer *pTokenizer, int iLangid, char **azCol, int bFts4, int nCol, int iDefaultCol, const char *z, int n, Fts3Expr **ppExpr, char **pzErr )
sqlite3Fts3ExprParse	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprParse(sqlite3_tokenizer *, int,$/;"	p	file:	signature:(sqlite3_tokenizer *, int, char **, int, int, int, const char *, int, Fts3Expr **, char ** )
sqlite3Fts3FirstFilter	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3FirstFilter($/;"	f	signature:( sqlite3_int64 iDelta, char *pList, int nList, char *pOut )
sqlite3Fts3FirstFilter	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3FirstFilter(sqlite3_int64, char *, int, char *);$/;"	p	file:	signature:(sqlite3_int64, char *, int, char *)
sqlite3Fts3FreeDeferredDoclists	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredDoclists(Fts3Cursor *);$/;"	p	file:	signature:(Fts3Cursor *)
sqlite3Fts3FreeDeferredDoclists	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredDoclists(Fts3Cursor *pCsr){$/;"	f	signature:(Fts3Cursor *pCsr)
sqlite3Fts3FreeDeferredDoclists	sqlite3.c	129819;"	d	file:
sqlite3Fts3FreeDeferredTokens	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredTokens(Fts3Cursor *);$/;"	p	file:	signature:(Fts3Cursor *)
sqlite3Fts3FreeDeferredTokens	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredTokens(Fts3Cursor *pCsr){$/;"	f	signature:(Fts3Cursor *pCsr)
sqlite3Fts3FreeDeferredTokens	sqlite3.c	129816;"	d	file:
sqlite3Fts3GetVarint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint(const char *, sqlite_int64 *);$/;"	p	file:	signature:(const char *, sqlite_int64 *)
sqlite3Fts3GetVarint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint(const char *p, sqlite_int64 *v){$/;"	f	signature:(const char *p, sqlite_int64 *v)
sqlite3Fts3GetVarint32	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint32(const char *, int *);$/;"	p	file:	signature:(const char *, int *)
sqlite3Fts3GetVarint32	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint32(const char *p, int *pi){$/;"	f	signature:(const char *p, int *pi)
sqlite3Fts3HashClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashClear(Fts3Hash *pH){$/;"	f	signature:(Fts3Hash *pH)
sqlite3Fts3HashClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashClear(Fts3Hash*);$/;"	p	file:	signature:(Fts3Hash*)
sqlite3Fts3HashFind	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashFind(const Fts3Hash *pH, const void *pKey, int nKey){$/;"	f	signature:(const Fts3Hash *pH, const void *pKey, int nKey)
sqlite3Fts3HashFind	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashFind(const Fts3Hash*, const void *pKey, int nKey);$/;"	p	file:	signature:(const Fts3Hash*, const void *pKey, int nKey)
sqlite3Fts3HashFindElem	sqlite3.c	/^SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem($/;"	f	signature:( const Fts3Hash *pH, const void *pKey, int nKey )
sqlite3Fts3HashFindElem	sqlite3.c	/^SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem(const Fts3Hash *, const void *, int);$/;"	p	file:	signature:(const Fts3Hash *, const void *, int)
sqlite3Fts3HashInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashInit(Fts3Hash *pNew, char keyClass, char copyKey);$/;"	p	file:	signature:(Fts3Hash *pNew, char keyClass, char copyKey)
sqlite3Fts3HashInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashInit(Fts3Hash *pNew, char keyClass, char copyKey){$/;"	f	signature:(Fts3Hash *pNew, char keyClass, char copyKey)
sqlite3Fts3HashInsert	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashInsert($/;"	f	signature:( Fts3Hash *pH, const void *pKey, int nKey, void *data )
sqlite3Fts3HashInsert	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashInsert(Fts3Hash*, const void *pKey, int nKey, void *pData);$/;"	p	file:	signature:(Fts3Hash*, const void *pKey, int nKey, void *pData)
sqlite3Fts3IcuTokenizerModule	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule($/;"	f	signature:( sqlite3_tokenizer_module const**ppModule )
sqlite3Fts3IcuTokenizerModule	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule(sqlite3_tokenizer_module const**ppModule);$/;"	p	file:	signature:(sqlite3_tokenizer_module const**ppModule)
sqlite3Fts3Incrmerge	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Incrmerge(Fts3Table *p, int nMerge, int nMin){$/;"	f	signature:(Fts3Table *p, int nMerge, int nMin)
sqlite3Fts3Incrmerge	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Incrmerge(Fts3Table*,int,int);$/;"	p	file:	signature:(Fts3Table*,int,int)
sqlite3Fts3Init	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Init(sqlite3 *db);$/;"	p	file:	signature:(sqlite3 *db)
sqlite3Fts3Init	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Init(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3Fts3InitAux	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitAux(sqlite3 *db);$/;"	p	file:	signature:(sqlite3 *db)
sqlite3Fts3InitAux	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitAux(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3Fts3InitHashTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitHashTable($/;"	f	signature:( sqlite3 *db, Fts3Hash *pHash, const char *zName )
sqlite3Fts3InitHashTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitHashTable(sqlite3 *, Fts3Hash *, const char *);$/;"	p	file:	signature:(sqlite3 *, Fts3Hash *, const char *)
sqlite3Fts3InitTerm	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTerm(sqlite3 *db);$/;"	p	file:	signature:(sqlite3 *db)
sqlite3Fts3InitTok	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTok(sqlite3 *db, Fts3Hash *pHash){$/;"	f	signature:(sqlite3 *db, Fts3Hash *pHash)
sqlite3Fts3InitTok	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTok(sqlite3*, Fts3Hash *);$/;"	p	file:	signature:(sqlite3*, Fts3Hash *)
sqlite3Fts3InitTokenizer	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTokenizer($/;"	f	signature:( Fts3Hash *pHash, const char *zArg, sqlite3_tokenizer **ppTok, char **pzErr )
sqlite3Fts3InitTokenizer	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTokenizer(Fts3Hash *pHash, const char *, $/;"	p	file:	signature:(Fts3Hash *pHash, const char *, sqlite3_tokenizer **, char ** )
sqlite3Fts3IsIdChar	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3IsIdChar(char c){$/;"	f	signature:(char c)
sqlite3Fts3IsIdChar	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3IsIdChar(char);$/;"	p	file:	signature:(char)
sqlite3Fts3Matchinfo	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Matchinfo($/;"	f	signature:( sqlite3_context *pContext, Fts3Cursor *pCsr, const char *zArg )
sqlite3Fts3Matchinfo	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Matchinfo(sqlite3_context *, Fts3Cursor *, const char *);$/;"	p	file:	signature:(sqlite3_context *, Fts3Cursor *, const char *)
sqlite3Fts3MaxLevel	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MaxLevel(Fts3Table *, int *);$/;"	p	file:	signature:(Fts3Table *, int *)
sqlite3Fts3MaxLevel	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MaxLevel(Fts3Table *p, int *pnMax){$/;"	f	signature:(Fts3Table *p, int *pnMax)
sqlite3Fts3MsrIncrNext	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrNext($/;"	f	signature:( Fts3Table *p, Fts3MultiSegReader *pMsr, sqlite3_int64 *piDocid, char **paPoslist, int *pnPoslist )
sqlite3Fts3MsrIncrNext	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrNext($/;"	p	file:	signature:( Fts3Table *, Fts3MultiSegReader *, sqlite3_int64 *, char **, int *)
sqlite3Fts3MsrIncrRestart	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrRestart(Fts3MultiSegReader *pCsr);$/;"	p	file:	signature:(Fts3MultiSegReader *pCsr)
sqlite3Fts3MsrIncrRestart	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrRestart(Fts3MultiSegReader *pCsr){$/;"	f	signature:(Fts3MultiSegReader *pCsr)
sqlite3Fts3MsrIncrStart	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrStart($/;"	f	signature:( Fts3Table *p, Fts3MultiSegReader *pCsr, int iCol, const char *zTerm, int nTerm )
sqlite3Fts3MsrIncrStart	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrStart($/;"	p	file:	signature:( Fts3Table*, Fts3MultiSegReader*, int, const char*, int)
sqlite3Fts3MsrOvfl	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrOvfl($/;"	f	signature:( Fts3Cursor *pCsr, Fts3MultiSegReader *pMsr, int *pnOvfl )
sqlite3Fts3MsrOvfl	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrOvfl(Fts3Cursor *, Fts3MultiSegReader *, int *);$/;"	p	file:	signature:(Fts3Cursor *, Fts3MultiSegReader *, int *)
sqlite3Fts3NextToken	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3Fts3NextToken(const char *, int *);$/;"	p	file:	signature:(const char *, int *)
sqlite3Fts3NextToken	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3Fts3NextToken(const char *zStr, int *pn){$/;"	f	signature:(const char *zStr, int *pn)
sqlite3Fts3Offsets	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Offsets($/;"	f	signature:( sqlite3_context *pCtx, Fts3Cursor *pCsr )
sqlite3Fts3Offsets	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Offsets(sqlite3_context*, Fts3Cursor*);$/;"	p	file:	signature:(sqlite3_context*, Fts3Cursor*)
sqlite3Fts3OpenTokenizer	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3OpenTokenizer($/;"	f	signature:( sqlite3_tokenizer *pTokenizer, int iLangid, const char *z, int n, sqlite3_tokenizer_cursor **ppCsr )
sqlite3Fts3OpenTokenizer	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3OpenTokenizer(sqlite3_tokenizer *, int, const char *, int,$/;"	p	file:	signature:(sqlite3_tokenizer *, int, const char *, int, sqlite3_tokenizer_cursor ** )
sqlite3Fts3Optimize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Optimize(Fts3Table *);$/;"	p	file:	signature:(Fts3Table *)
sqlite3Fts3Optimize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Optimize(Fts3Table *p){$/;"	f	signature:(Fts3Table *p)
sqlite3Fts3PendingTermsClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(Fts3Table *);$/;"	p	file:	signature:(Fts3Table *)
sqlite3Fts3PendingTermsClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(Fts3Table *p){$/;"	f	signature:(Fts3Table *p)
sqlite3Fts3PendingTermsFlush	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(Fts3Table *);$/;"	p	file:	signature:(Fts3Table *)
sqlite3Fts3PendingTermsFlush	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(Fts3Table *p){$/;"	f	signature:(Fts3Table *p)
sqlite3Fts3PorterTokenizerModule	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule($/;"	f	signature:( sqlite3_tokenizer_module const**ppModule )
sqlite3Fts3PorterTokenizerModule	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule(sqlite3_tokenizer_module const**ppModule);$/;"	p	file:	signature:(sqlite3_tokenizer_module const**ppModule)
sqlite3Fts3PutVarint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PutVarint(char *, sqlite3_int64);$/;"	p	file:	signature:(char *, sqlite3_int64)
sqlite3Fts3PutVarint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PutVarint(char *p, sqlite_int64 v){$/;"	f	signature:(char *p, sqlite_int64 v)
sqlite3Fts3ReadBlock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ReadBlock($/;"	f	signature:( Fts3Table *p, sqlite3_int64 iBlockid, char **paBlob, int *pnBlob, int *pnLoad )
sqlite3Fts3ReadBlock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ReadBlock(Fts3Table*, sqlite3_int64, char **, int*, int*);$/;"	p	file:	signature:(Fts3Table*, sqlite3_int64, char **, int*, int*)
sqlite3Fts3SegReaderCursor	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderCursor($/;"	f	signature:( Fts3Table *p, int iLangid, int iIndex, int iLevel, const char *zTerm, int nTerm, int isPrefix, int isScan, Fts3MultiSegReader *pCsr )
sqlite3Fts3SegReaderCursor	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderCursor(Fts3Table *, $/;"	p	file:	signature:(Fts3Table *, int, int, int, const char *, int, int, int, Fts3MultiSegReader *)
sqlite3Fts3SegReaderFinish	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFinish($/;"	f	signature:( Fts3MultiSegReader *pCsr )
sqlite3Fts3SegReaderFinish	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFinish(Fts3MultiSegReader *);$/;"	p	file:	signature:(Fts3MultiSegReader *)
sqlite3Fts3SegReaderFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(Fts3SegReader *);$/;"	p	file:	signature:(Fts3SegReader *)
sqlite3Fts3SegReaderFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(Fts3SegReader *pReader){$/;"	f	signature:(Fts3SegReader *pReader)
sqlite3Fts3SegReaderNew	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderNew($/;"	f	signature:( int iAge, int bLookup, sqlite3_int64 iStartLeaf, sqlite3_int64 iEndLeaf, sqlite3_int64 iEndBlock, const char *zRoot, int nRoot, Fts3SegReader **ppReader )
sqlite3Fts3SegReaderNew	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderNew(int, int, sqlite3_int64,$/;"	p	file:	signature:(int, int, sqlite3_int64, sqlite3_int64, sqlite3_int64, const char *, int, Fts3SegReader**)
sqlite3Fts3SegReaderPending	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderPending($/;"	f	signature:( Fts3Table *p, int iIndex, const char *zTerm, int nTerm, int bPrefix, Fts3SegReader **ppReader )
sqlite3Fts3SegReaderPending	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderPending($/;"	p	file:	signature:( Fts3Table*,int,const char*,int,int,Fts3SegReader**)
sqlite3Fts3SegReaderStart	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStart($/;"	f	signature:( Fts3Table *p, Fts3MultiSegReader *pCsr, Fts3SegFilter *pFilter )
sqlite3Fts3SegReaderStart	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStart(Fts3Table*, Fts3MultiSegReader*, Fts3SegFilter*);$/;"	p	file:	signature:(Fts3Table*, Fts3MultiSegReader*, Fts3SegFilter*)
sqlite3Fts3SegReaderStep	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStep($/;"	f	signature:( Fts3Table *p, Fts3MultiSegReader *pCsr )
sqlite3Fts3SegReaderStep	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStep(Fts3Table *, Fts3MultiSegReader *);$/;"	p	file:	signature:(Fts3Table *, Fts3MultiSegReader *)
sqlite3Fts3SegmentsClose	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegmentsClose(Fts3Table *);$/;"	p	file:	signature:(Fts3Table *)
sqlite3Fts3SegmentsClose	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegmentsClose(Fts3Table *p){$/;"	f	signature:(Fts3Table *p)
sqlite3Fts3SelectDocsize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDocsize($/;"	f	signature:( Fts3Table *pTab, sqlite3_int64 iDocid, sqlite3_stmt **ppStmt )
sqlite3Fts3SelectDocsize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDocsize(Fts3Table *, sqlite3_int64, sqlite3_stmt **);$/;"	p	file:	signature:(Fts3Table *, sqlite3_int64, sqlite3_stmt **)
sqlite3Fts3SelectDoctotal	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDoctotal($/;"	f	signature:( Fts3Table *pTab, sqlite3_stmt **ppStmt )
sqlite3Fts3SelectDoctotal	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDoctotal(Fts3Table *, sqlite3_stmt **);$/;"	p	file:	signature:(Fts3Table *, sqlite3_stmt **)
sqlite3Fts3SimpleTokenizerModule	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule($/;"	f	signature:( sqlite3_tokenizer_module const**ppModule )
sqlite3Fts3SimpleTokenizerModule	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule(sqlite3_tokenizer_module const**ppModule);$/;"	p	file:	signature:(sqlite3_tokenizer_module const**ppModule)
sqlite3Fts3Snippet	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Snippet($/;"	f	signature:( sqlite3_context *pCtx, Fts3Cursor *pCsr, const char *zStart, const char *zEnd, const char *zEllipsis, int iCol, int nToken )
sqlite3Fts3Snippet	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Snippet(sqlite3_context *, Fts3Cursor *, const char *,$/;"	p	file:	signature:(sqlite3_context *, Fts3Cursor *, const char *, const char *, const char *, int, int )
sqlite3Fts3UnicodeTokenizer	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3UnicodeTokenizer(sqlite3_tokenizer_module const **ppModule){$/;"	f	signature:(sqlite3_tokenizer_module const **ppModule)
sqlite3Fts3UnicodeTokenizer	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3UnicodeTokenizer(sqlite3_tokenizer_module const**ppModule);$/;"	p	file:	signature:(sqlite3_tokenizer_module const**ppModule)
sqlite3Fts3UpdateMethod	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3UpdateMethod($/;"	f	signature:( sqlite3_vtab *pVtab, int nArg, sqlite3_value **apVal, sqlite_int64 *pRowid )
sqlite3Fts3UpdateMethod	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3UpdateMethod(sqlite3_vtab*,int,sqlite3_value**,sqlite3_int64*);$/;"	p	file:	signature:(sqlite3_vtab*,int,sqlite3_value**,sqlite3_int64*)
sqlite3Fts3VarintLen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3VarintLen(sqlite3_uint64 v){$/;"	f	signature:(sqlite3_uint64 v)
sqlite3Fts3VarintLen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3VarintLen(sqlite3_uint64);$/;"	p	file:
sqlite3FtsUnicodeFold	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeFold(int c, int bRemoveDiacritic){$/;"	f	signature:(int c, int bRemoveDiacritic)
sqlite3FtsUnicodeFold	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeFold(int, int);$/;"	p	file:	signature:(int, int)
sqlite3FtsUnicodeIsalnum	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeIsalnum(int c){$/;"	f	signature:(int c)
sqlite3FtsUnicodeIsalnum	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeIsalnum(int);$/;"	p	file:	signature:(int)
sqlite3FtsUnicodeIsdiacritic	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeIsdiacritic(int c){$/;"	f	signature:(int c)
sqlite3FtsUnicodeIsdiacritic	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeIsdiacritic(int);$/;"	p	file:	signature:(int)
sqlite3FuncDefInsert	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FuncDefInsert($/;"	f	signature:( FuncDefHash *pHash, FuncDef *pDef )
sqlite3FuncDefInsert	sqlite3.c	/^SQLITE_PRIVATE void sqlite3FuncDefInsert(FuncDefHash*, FuncDef*);$/;"	p	file:	signature:(FuncDefHash*, FuncDef*)
sqlite3FunctionUsesThisSrc	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FunctionUsesThisSrc(Expr *pExpr, SrcList *pSrcList){$/;"	f	signature:(Expr *pExpr, SrcList *pSrcList)
sqlite3FunctionUsesThisSrc	sqlite3.c	/^SQLITE_PRIVATE int sqlite3FunctionUsesThisSrc(Expr*, SrcList*);$/;"	p	file:	signature:(Expr*, SrcList*)
sqlite3GenerateConstraintChecks	sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateConstraintChecks($/;"	f	signature:( Parse *pParse, Table *pTab, int *aRegIdx, int iDataCur, int iIdxCur, int regNewData, int regOldData, u8 pkChng, u8 overrideError, int ignoreDest, int *pbMayReplace )
sqlite3GenerateConstraintChecks	sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateConstraintChecks(Parse*,Table*,int*,int,int,int,int,$/;"	p	file:	signature:(Parse*,Table*,int*,int,int,int,int, u8,u8,int,int*)
sqlite3GenerateIndexKey	sqlite3.c	/^SQLITE_PRIVATE int sqlite3GenerateIndexKey($/;"	f	signature:( Parse *pParse, Index *pIdx, int iDataCur, int regOut, int prefixOnly, int *piPartIdxLabel, Index *pPrior, int regPrior )
sqlite3GenerateIndexKey	sqlite3.c	/^SQLITE_PRIVATE int sqlite3GenerateIndexKey(Parse*, Index*, int, int, int, int*,Index*,int);$/;"	p	file:	signature:(Parse*, Index*, int, int, int, int*,Index*,int)
sqlite3GenerateRowDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowDelete($/;"	f	signature:( Parse *pParse, Table *pTab, Trigger *pTrigger, int iDataCur, int iIdxCur, int iPk, i16 nPk, u8 count, u8 onconf, u8 bNoSeek )
sqlite3GenerateRowDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowDelete(Parse*,Table*,Trigger*,int,int,int,i16,u8,u8,u8);$/;"	p	file:	signature:(Parse*,Table*,Trigger*,int,int,int,i16,u8,u8,u8)
sqlite3GenerateRowIndexDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete($/;"	f	signature:( Parse *pParse, Table *pTab, int iDataCur, int iIdxCur, int *aRegIdx )
sqlite3GenerateRowIndexDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete(Parse*, Table*, int, int, int*);$/;"	p	file:	signature:(Parse*, Table*, int, int, int*)
sqlite3Get4byte	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Get4byte(const u8 *p){$/;"	f	signature:(const u8 *p)
sqlite3Get4byte	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Get4byte(const u8*);$/;"	p	file:	signature:(const u8*)
sqlite3GetBoolean	sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetBoolean(const char *z, u8 dflt){$/;"	f	signature:(const char *z, u8 dflt)
sqlite3GetBoolean	sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetBoolean(const char *z,u8);$/;"	p	file:	signature:(const char *z,u8)
sqlite3GetCollSeq	sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq($/;"	f	signature:( Parse *pParse, u8 enc, CollSeq *pColl, const char *zName )
sqlite3GetCollSeq	sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq(Parse*, u8, CollSeq *, const char*);$/;"	p	file:	signature:(Parse*, u8, CollSeq *, const char*)
sqlite3GetFuncCollSeq	sqlite3.c	/^static CollSeq *sqlite3GetFuncCollSeq(sqlite3_context *context){$/;"	f	file:	signature:(sqlite3_context *context)
sqlite3GetInt32	sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetInt32(const char *, int*);$/;"	p	file:	signature:(const char *, int*)
sqlite3GetInt32	sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetInt32(const char *zNum, int *pValue){$/;"	f	signature:(const char *zNum, int *pValue)
sqlite3GetTempRange	sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempRange(Parse *pParse, int nReg){$/;"	f	signature:(Parse *pParse, int nReg)
sqlite3GetTempRange	sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempRange(Parse*,int);$/;"	p	file:	signature:(Parse*,int)
sqlite3GetTempReg	sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempReg(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3GetTempReg	sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempReg(Parse*);$/;"	p	file:	signature:(Parse*)
sqlite3GetToken	sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetToken(const unsigned char *, int *);$/;"	p	file:	signature:(const unsigned char *, int *)
sqlite3GetToken	sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetToken(const unsigned char *z, int *tokenType){$/;"	f	signature:(const unsigned char *z, int *tokenType)
sqlite3GetVTable	sqlite3.c	/^SQLITE_PRIVATE    VTable *sqlite3GetVTable(sqlite3*, Table*);$/;"	p	file:	signature:(sqlite3*, Table*)
sqlite3GetVTable	sqlite3.c	/^SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){$/;"	f	signature:(sqlite3 *db, Table *pTab)
sqlite3GetVTable	sqlite3.c	13120;"	d	file:
sqlite3GetVarint	sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint(const unsigned char *, u64 *);$/;"	p	file:	signature:(const unsigned char *, u64 *)
sqlite3GetVarint	sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint(const unsigned char *p, u64 *v){$/;"	f	signature:(const unsigned char *p, u64 *v)
sqlite3GetVarint32	sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint32(const unsigned char *, u32 *);$/;"	p	file:	signature:(const unsigned char *, u32 *)
sqlite3GetVarint32	sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint32(const unsigned char *p, u32 *v){$/;"	f	signature:(const unsigned char *p, u32 *v)
sqlite3GetVdbe	sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3GetVdbe	sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(Parse*);$/;"	p	file:	signature:(Parse*)
sqlite3GlobalConfig	sqlite3.c	8846;"	d	file:
sqlite3GlobalConfig	sqlite3.c	8852;"	d	file:
sqlite3GlobalFunctions	sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;$/;"	v
sqlite3HaltConstraint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3HaltConstraint($/;"	f	signature:( Parse *pParse, int errCode, int onError, char *p4, i8 p4type, u8 p5Errmsg )
sqlite3HaltConstraint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3HaltConstraint(Parse*, int, int, char*, i8, u8);$/;"	p	file:	signature:(Parse*, int, int, char*, i8, u8)
sqlite3HashClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashClear(Hash *pH){$/;"	f	signature:(Hash *pH)
sqlite3HashClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashClear(Hash*);$/;"	p	file:	signature:(Hash*)
sqlite3HashFind	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashFind(const Hash *pH, const char *pKey){$/;"	f	signature:(const Hash *pH, const char *pKey)
sqlite3HashFind	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashFind(const Hash*, const char *pKey);$/;"	p	file:	signature:(const Hash*, const char *pKey)
sqlite3HashInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashInit(Hash *pNew){$/;"	f	signature:(Hash *pNew)
sqlite3HashInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashInit(Hash*);$/;"	p	file:	signature:(Hash*)
sqlite3HashInsert	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, void *data){$/;"	f	signature:(Hash *pH, const char *pKey, void *data)
sqlite3HashInsert	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashInsert(Hash*, const char *pKey, void *pData);$/;"	p	file:	signature:(Hash*, const char *pKey, void *pData)
sqlite3HeapNearlyFull	sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeapNearlyFull(void);$/;"	p	file:	signature:(void)
sqlite3HeapNearlyFull	sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeapNearlyFull(void){$/;"	f	signature:(void)
sqlite3HexToBlob	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3 *db, const char *z, int n){$/;"	f	signature:(sqlite3 *db, const char *z, int n)
sqlite3HexToBlob	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3*, const char *z, int n);$/;"	p	file:	signature:(sqlite3*, const char *z, int n)
sqlite3HexToInt	sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3HexToInt(int h);$/;"	p	file:	signature:(int h)
sqlite3HexToInt	sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3HexToInt(int h){$/;"	f	signature:(int h)
sqlite3Hooks	sqlite3.c	/^} sqlite3Hooks = { 0, 0 };$/;"	v	typeref:struct:BenignMallocHooks	file:
sqlite3Hwtime	sqlite3.c	/^  __inline__ sqlite_uint64 sqlite3Hwtime(void){$/;"	f	signature:(void)
sqlite3Hwtime	sqlite3.c	/^SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }$/;"	f	signature:(void)
sqlite3IcuInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IcuInit(sqlite3 *db);$/;"	p	file:	signature:(sqlite3 *db)
sqlite3IcuInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IcuInit(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3IdListAppend	sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3 *db, IdList *pList, Token *pToken){$/;"	f	signature:(sqlite3 *db, IdList *pList, Token *pToken)
sqlite3IdListAppend	sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3*, IdList*, Token*);$/;"	p	file:	signature:(sqlite3*, IdList*, Token*)
sqlite3IdListDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3IdListDelete(sqlite3 *db, IdList *pList){$/;"	f	signature:(sqlite3 *db, IdList *pList)
sqlite3IdListDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3IdListDelete(sqlite3*, IdList*);$/;"	p	file:	signature:(sqlite3*, IdList*)
sqlite3IdListDup	sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3 *db, IdList *p){$/;"	f	signature:(sqlite3 *db, IdList *p)
sqlite3IdListDup	sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3*,IdList*);$/;"	p	file:	signature:(sqlite3*,IdList*)
sqlite3IdListIndex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IdListIndex(IdList *pList, const char *zName){$/;"	f	signature:(IdList *pList, const char *zName)
sqlite3IdListIndex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IdListIndex(IdList*,const char*);$/;"	p	file:	signature:(IdList*,const char*)
sqlite3InRhsIsConstant	sqlite3.c	/^static int sqlite3InRhsIsConstant(Expr *pIn){$/;"	f	file:	signature:(Expr *pIn)
sqlite3IndexAffinityOk	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity);$/;"	p	file:	signature:(Expr *pExpr, char idx_affinity)
sqlite3IndexAffinityOk	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){$/;"	f	signature:(Expr *pExpr, char idx_affinity)
sqlite3IndexAffinityStr	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(Vdbe *, Index *);$/;"	p	file:	signature:(Vdbe *, Index *)
sqlite3IndexAffinityStr	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(Vdbe *v, Index *pIdx){$/;"	f	signature:(Vdbe *v, Index *pIdx)
sqlite3IndexedByLookup	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexedByLookup(Parse *, struct SrcList_item *);$/;"	p	file:	signature:(Parse *, struct SrcList_item *)
sqlite3IndexedByLookup	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexedByLookup(Parse *pParse, struct SrcList_item *pFrom){$/;"	f	signature:(Parse *pParse, struct SrcList_item *pFrom)
sqlite3Init	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Init(sqlite3 *db, char **pzErrMsg){$/;"	f	signature:(sqlite3 *db, char **pzErrMsg)
sqlite3Init	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Init(sqlite3*, char**);$/;"	p	file:	signature:(sqlite3*, char**)
sqlite3InitCallback	sqlite3.c	/^SQLITE_PRIVATE int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){$/;"	f	signature:(void *pInit, int argc, char **argv, char **NotUsed)
sqlite3InitCallback	sqlite3.c	/^SQLITE_PRIVATE int sqlite3InitCallback(void*, int, char**, char**);$/;"	p	file:	signature:(void*, int, char**, char**)
sqlite3InitInfo	sqlite3.c	/^  struct sqlite3InitInfo {      \/* Information used during initialization *\/$/;"	s	struct:sqlite3	file:	access:public
sqlite3InitOne	sqlite3.c	/^static int sqlite3InitOne(sqlite3 *db, int iDb, char **pzErrMsg){$/;"	f	file:	signature:(sqlite3 *db, int iDb, char **pzErrMsg)
sqlite3Insert	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Insert($/;"	f	signature:( Parse *pParse, SrcList *pTabList, Select *pSelect, IdList *pColumn, int onError )
sqlite3Insert	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Insert(Parse*, SrcList*, Select*, IdList*, int);$/;"	p	file:	signature:(Parse*, SrcList*, Select*, IdList*, int)
sqlite3IntTokens	sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[] = {$/;"	v
sqlite3IntTokens	sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[];$/;"	v
sqlite3InvalidFunction	sqlite3.c	/^SQLITE_PRIVATE void sqlite3InvalidFunction($/;"	f	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **NotUsed2 )
sqlite3InvalidFunction	sqlite3.c	/^SQLITE_PRIVATE void sqlite3InvalidFunction(sqlite3_context*,int,sqlite3_value**);$/;"	p	file:	signature:(sqlite3_context*,int,sqlite3_value**)
sqlite3InvokeBusyHandler	sqlite3.c	/^SQLITE_PRIVATE int sqlite3InvokeBusyHandler(BusyHandler *p){$/;"	f	signature:(BusyHandler *p)
sqlite3InvokeBusyHandler	sqlite3.c	/^SQLITE_PRIVATE int sqlite3InvokeBusyHandler(BusyHandler*);$/;"	p	file:	signature:(BusyHandler*)
sqlite3IoTrace	sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3IoTrace)(const char*, ...) = 0;$/;"	v
sqlite3IoTrace	sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3IoTrace)(const char*,...);$/;"	v
sqlite3IsEbcdicIdChar	sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[] = {$/;"	v
sqlite3IsEbcdicIdChar	sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[];$/;"	v
sqlite3IsIdChar	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsIdChar(u8 c){ return IdChar(c); }$/;"	f	signature:(u8 c)
sqlite3IsIdChar	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsIdChar(u8);$/;"	p	file:
sqlite3IsLikeFunction	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsLikeFunction(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc){$/;"	f	signature:(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc)
sqlite3IsLikeFunction	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsLikeFunction(sqlite3*,Expr*,int*,char*);$/;"	p	file:	signature:(sqlite3*,Expr*,int*,char*)
sqlite3IsMemJournal	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsMemJournal(sqlite3_file *);$/;"	p	file:	signature:(sqlite3_file *)
sqlite3IsMemJournal	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsMemJournal(sqlite3_file *pJfd){$/;"	f	signature:(sqlite3_file *pJfd)
sqlite3IsNaN	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3IsNaN(double);$/;"	p	file:	signature:(double)
sqlite3IsNaN	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsNaN(double x){$/;"	f	signature:(double x)
sqlite3IsNaN	sqlite3.c	12604;"	d	file:
sqlite3IsNumericAffinity	sqlite3.c	10977;"	d	file:
sqlite3IsReadOnly	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsReadOnly(Parse *pParse, Table *pTab, int viewOk){$/;"	f	signature:(Parse *pParse, Table *pTab, int viewOk)
sqlite3IsReadOnly	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsReadOnly(Parse*, Table*, int);$/;"	p	file:	signature:(Parse*, Table*, int)
sqlite3IsRowid	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsRowid(const char *z){$/;"	f	signature:(const char *z)
sqlite3IsRowid	sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsRowid(const char*);$/;"	p	file:	signature:(const char*)
sqlite3Isalnum	sqlite3.c	12518;"	d	file:
sqlite3Isalnum	sqlite3.c	12526;"	d	file:
sqlite3Isalpha	sqlite3.c	12519;"	d	file:
sqlite3Isalpha	sqlite3.c	12527;"	d	file:
sqlite3Isdigit	sqlite3.c	12520;"	d	file:
sqlite3Isdigit	sqlite3.c	12528;"	d	file:
sqlite3Isspace	sqlite3.c	12517;"	d	file:
sqlite3Isspace	sqlite3.c	12525;"	d	file:
sqlite3Isxdigit	sqlite3.c	12521;"	d	file:
sqlite3Isxdigit	sqlite3.c	12529;"	d	file:
sqlite3JoinType	sqlite3.c	/^SQLITE_PRIVATE int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){$/;"	f	signature:(Parse *pParse, Token *pA, Token *pB, Token *pC)
sqlite3JoinType	sqlite3.c	/^SQLITE_PRIVATE int sqlite3JoinType(Parse*, Token*, Token*, Token*);$/;"	p	file:	signature:(Parse*, Token*, Token*, Token*)
sqlite3JournalCreate	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3JournalCreate(sqlite3_file *);$/;"	p	file:	signature:(sqlite3_file *)
sqlite3JournalCreate	sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalCreate(sqlite3_file *p){$/;"	f	signature:(sqlite3_file *p)
sqlite3JournalExists	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3JournalExists(sqlite3_file *p);$/;"	p	file:	signature:(sqlite3_file *p)
sqlite3JournalExists	sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalExists(sqlite3_file *p){$/;"	f	signature:(sqlite3_file *p)
sqlite3JournalExists	sqlite3.c	13240;"	d	file:
sqlite3JournalModename	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3JournalModename(int eMode){$/;"	f	signature:(int eMode)
sqlite3JournalModename	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3JournalModename(int);$/;"	p	file:	signature:(int)
sqlite3JournalOpen	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3JournalOpen(sqlite3_vfs *, const char *, sqlite3_file *, int, int);$/;"	p	file:	signature:(sqlite3_vfs *, const char *, sqlite3_file *, int, int)
sqlite3JournalOpen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalOpen($/;"	f	signature:( sqlite3_vfs *pVfs, const char *zName, sqlite3_file *pJfd, int flags, int nBuf )
sqlite3JournalSize	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3JournalSize(sqlite3_vfs *);$/;"	p	file:	signature:(sqlite3_vfs *)
sqlite3JournalSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalSize(sqlite3_vfs *pVfs){$/;"	f	signature:(sqlite3_vfs *pVfs)
sqlite3JournalSize	sqlite3.c	13239;"	d	file:
sqlite3KeyInfoAlloc	sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoAlloc(sqlite3 *db, int N, int X){$/;"	f	signature:(sqlite3 *db, int N, int X)
sqlite3KeyInfoAlloc	sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoAlloc(sqlite3*,int,int);$/;"	p	file:	signature:(sqlite3*,int,int)
sqlite3KeyInfoIsWriteable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3KeyInfoIsWriteable(KeyInfo *p){ return p->nRef==1; }$/;"	f	signature:(KeyInfo *p)
sqlite3KeyInfoIsWriteable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3KeyInfoIsWriteable(KeyInfo*);$/;"	p	file:	signature:(KeyInfo*)
sqlite3KeyInfoOfIndex	sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoOfIndex(Parse *pParse, Index *pIdx){$/;"	f	signature:(Parse *pParse, Index *pIdx)
sqlite3KeyInfoOfIndex	sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoOfIndex(Parse*, Index*);$/;"	p	file:	signature:(Parse*, Index*)
sqlite3KeyInfoRef	sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoRef(KeyInfo *p){$/;"	f	signature:(KeyInfo *p)
sqlite3KeyInfoRef	sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoRef(KeyInfo*);$/;"	p	file:	signature:(KeyInfo*)
sqlite3KeyInfoUnref	sqlite3.c	/^SQLITE_PRIVATE void sqlite3KeyInfoUnref(KeyInfo *p){$/;"	f	signature:(KeyInfo *p)
sqlite3KeyInfoUnref	sqlite3.c	/^SQLITE_PRIVATE void sqlite3KeyInfoUnref(KeyInfo*);$/;"	p	file:	signature:(KeyInfo*)
sqlite3KeywordCode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3KeywordCode(const unsigned char *z, int n){$/;"	f	signature:(const unsigned char *z, int n)
sqlite3KeywordCode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3KeywordCode(const unsigned char*, int);$/;"	p	file:	signature:(const unsigned char*, int)
sqlite3LeaveMutexAndCloseZombie	sqlite3.c	/^SQLITE_PRIVATE void sqlite3LeaveMutexAndCloseZombie(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3LeaveMutexAndCloseZombie	sqlite3.c	/^SQLITE_PRIVATE void sqlite3LeaveMutexAndCloseZombie(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3LimitWhere	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3LimitWhere($/;"	f	signature:( Parse *pParse, SrcList *pSrc, Expr *pWhere, ExprList *pOrderBy, Expr *pLimit, Expr *pOffset, char *zStmtType )
sqlite3LimitWhere	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3LimitWhere(Parse*,SrcList*,Expr*,ExprList*,Expr*,Expr*,char*);$/;"	p	file:	signature:(Parse*,SrcList*,Expr*,ExprList*,Expr*,Expr*,char*)
sqlite3LoadExtension	sqlite3.c	/^static int sqlite3LoadExtension($/;"	f	file:	signature:( sqlite3 *db, const char *zFile, const char *zProc, char **pzErrMsg )
sqlite3LocateCollSeq	sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){$/;"	f	signature:(Parse *pParse, const char *zName)
sqlite3LocateCollSeq	sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char*zName);$/;"	p	file:	signature:(Parse *pParse, const char*zName)
sqlite3LocateTable	sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3LocateTable($/;"	f	signature:( Parse *pParse, int isView, const char *zName, const char *zDbase )
sqlite3LocateTable	sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3LocateTable(Parse*,int isView,const char*, const char*);$/;"	p	file:	signature:(Parse*,int isView,const char*, const char*)
sqlite3LocateTableItem	sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3LocateTableItem($/;"	f	signature:( Parse *pParse, int isView, struct SrcList_item *p )
sqlite3LocateTableItem	sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3LocateTableItem(Parse*,int isView,struct SrcList_item *);$/;"	p	file:	signature:(Parse*,int isView,struct SrcList_item *)
sqlite3LockAndPrepare	sqlite3.c	/^static int sqlite3LockAndPrepare($/;"	f	file:	signature:( sqlite3 *db, const char *zSql, int nBytes, int saveSqlFlag, Vdbe *pOld, sqlite3_stmt **ppStmt, const char **pzTail )
sqlite3LogEst	sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEst(u64 x){$/;"	f	signature:(u64 x)
sqlite3LogEst	sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEst(u64);$/;"	p	file:
sqlite3LogEstAdd	sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEstAdd(LogEst a, LogEst b){$/;"	f	signature:(LogEst a, LogEst b)
sqlite3LogEstAdd	sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEstAdd(LogEst,LogEst);$/;"	p	file:
sqlite3LogEstFromDouble	sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEstFromDouble(double x){$/;"	f	signature:(double x)
sqlite3LogEstFromDouble	sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEstFromDouble(double);$/;"	p	file:	signature:(double)
sqlite3LogEstToInt	sqlite3.c	/^SQLITE_PRIVATE u64 sqlite3LogEstToInt(LogEst x){$/;"	f	signature:(LogEst x)
sqlite3LogEstToInt	sqlite3.c	/^SQLITE_PRIVATE u64 sqlite3LogEstToInt(LogEst);$/;"	p	file:
sqlite3MAppendf	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MAppendf(sqlite3 *db, char *zStr, const char *zFormat, ...){$/;"	f	signature:(sqlite3 *db, char *zStr, const char *zFormat, ...)
sqlite3MAppendf	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MAppendf(sqlite3*,char*,const char*,...);$/;"	p	file:	signature:(sqlite3*,char*,const char*,...)
sqlite3MPrintf	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3 *db, const char *zFormat, ...){$/;"	f	signature:(sqlite3 *db, const char *zFormat, ...)
sqlite3MPrintf	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3*,const char*, ...);$/;"	p	file:	signature:(sqlite3*,const char*, ...)
sqlite3Malloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Malloc(u64 n){$/;"	f	signature:(u64 n)
sqlite3Malloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Malloc(u64);$/;"	p	file:
sqlite3MallocAlarm	sqlite3.c	/^static void sqlite3MallocAlarm(int nByte){$/;"	f	file:	signature:(int nByte)
sqlite3MallocEnd	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MallocEnd(void);$/;"	p	file:	signature:(void)
sqlite3MallocEnd	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MallocEnd(void){$/;"	f	signature:(void)
sqlite3MallocInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocInit(void);$/;"	p	file:	signature:(void)
sqlite3MallocInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocInit(void){$/;"	f	signature:(void)
sqlite3MallocSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocSize(void *p){$/;"	f	signature:(void *p)
sqlite3MallocSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocSize(void*);$/;"	p	file:	signature:(void*)
sqlite3MallocZero	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3MallocZero(u64 n){$/;"	f	signature:(u64 n)
sqlite3MallocZero	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3MallocZero(u64);$/;"	p	file:
sqlite3MatchSpanName	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MatchSpanName($/;"	f	signature:( const char *zSpan, const char *zCol, const char *zTab, const char *zDb )
sqlite3MatchSpanName	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MatchSpanName(const char*, const char*, const char*, const char*);$/;"	p	file:	signature:(const char*, const char*, const char*, const char*)
sqlite3MaterializeView	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MaterializeView($/;"	f	signature:( Parse *pParse, Table *pView, Expr *pWhere, int iCur )
sqlite3MaterializeView	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MaterializeView(Parse*, Table*, Expr*, int);$/;"	p	file:	signature:(Parse*, Table*, Expr*, int)
sqlite3MayAbort	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MayAbort(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3MayAbort	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MayAbort(Parse*);$/;"	p	file:	signature:(Parse*)
sqlite3MemCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemCompare(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl){$/;"	f	signature:(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl)
sqlite3MemCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemCompare(const Mem*, const Mem*, const CollSeq*);$/;"	p	file:	signature:(const Mem*, const Mem*, const CollSeq*)
sqlite3MemFree	sqlite3.c	/^static void sqlite3MemFree(void *pPrior){ return; }$/;"	f	file:	signature:(void *pPrior)
sqlite3MemFree	sqlite3.c	/^static void sqlite3MemFree(void *pPrior){$/;"	f	file:	signature:(void *pPrior)
sqlite3MemGetMemsys3	sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(void);$/;"	p	file:	signature:(void)
sqlite3MemGetMemsys3	sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){$/;"	f	signature:(void)
sqlite3MemGetMemsys5	sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(void);$/;"	p	file:	signature:(void)
sqlite3MemGetMemsys5	sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){$/;"	f	signature:(void)
sqlite3MemGetWin32	sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetWin32(void);$/;"	p	file:	signature:(void)
sqlite3MemGetWin32	sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetWin32(void){$/;"	f	signature:(void)
sqlite3MemInit	sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }$/;"	f	file:	signature:(void *NotUsed)
sqlite3MemInit	sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){$/;"	f	file:	signature:(void *NotUsed)
sqlite3MemJournalOpen	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemJournalOpen(sqlite3_file *);$/;"	p	file:	signature:(sqlite3_file *)
sqlite3MemJournalOpen	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemJournalOpen(sqlite3_file *pJfd){$/;"	f	signature:(sqlite3_file *pJfd)
sqlite3MemJournalSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemJournalSize(void);$/;"	p	file:	signature:(void)
sqlite3MemJournalSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemJournalSize(void){$/;"	f	signature:(void)
sqlite3MemMalloc	sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){ return 0; }$/;"	f	file:	signature:(int nByte)
sqlite3MemMalloc	sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){$/;"	f	file:	signature:(int nByte)
sqlite3MemRealloc	sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }$/;"	f	file:	signature:(void *pPrior, int nByte)
sqlite3MemRealloc	sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){$/;"	f	file:	signature:(void *pPrior, int nByte)
sqlite3MemRoundup	sqlite3.c	/^static int sqlite3MemRoundup(int n){ return n; }$/;"	f	file:	signature:(int n)
sqlite3MemRoundup	sqlite3.c	/^static int sqlite3MemRoundup(int n){$/;"	f	file:	signature:(int n)
sqlite3MemSetDefault	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemSetDefault(void);$/;"	p	file:	signature:(void)
sqlite3MemSetDefault	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemSetDefault(void){$/;"	f	signature:(void)
sqlite3MemShutdown	sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){ return; }$/;"	f	file:	signature:(void *NotUsed)
sqlite3MemShutdown	sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){$/;"	f	file:	signature:(void *NotUsed)
sqlite3MemSize	sqlite3.c	/^static int sqlite3MemSize(void *p){$/;"	f	file:	signature:(void *p)
sqlite3MemSize	sqlite3.c	/^static int sqlite3MemSize(void *pPrior){ return 0; }$/;"	f	file:	signature:(void *pPrior)
sqlite3MemSize	sqlite3.c	/^static int sqlite3MemSize(void *pPrior){$/;"	f	file:	signature:(void *pPrior)
sqlite3MemdebugBacktrace	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktrace(int depth){$/;"	f	signature:(int depth)
sqlite3MemdebugBacktraceCallback	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){$/;"	f	signature:(void (*xBacktrace)(int, int, void **))
sqlite3MemdebugDump	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugDump(const char *zFilename){$/;"	f	signature:(const char *zFilename)
sqlite3MemdebugHasType	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3MemdebugHasType(void*,u8);$/;"	p	file:	signature:(void*,u8)
sqlite3MemdebugHasType	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugHasType(void *p, u8 eType){$/;"	f	signature:(void *p, u8 eType)
sqlite3MemdebugHasType	sqlite3.c	13322;"	d	file:
sqlite3MemdebugMallocCount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugMallocCount(){$/;"	f
sqlite3MemdebugNoType	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3MemdebugNoType(void*,u8);$/;"	p	file:	signature:(void*,u8)
sqlite3MemdebugNoType	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugNoType(void *p, u8 eType){$/;"	f	signature:(void *p, u8 eType)
sqlite3MemdebugNoType	sqlite3.c	13323;"	d	file:
sqlite3MemdebugSetType	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3MemdebugSetType(void*,u8);$/;"	p	file:	signature:(void*,u8)
sqlite3MemdebugSetType	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSetType(void *p, u8 eType){$/;"	f	signature:(void *p, u8 eType)
sqlite3MemdebugSetType	sqlite3.c	13321;"	d	file:
sqlite3MemdebugSettitle	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSettitle(const char *zTitle){$/;"	f	signature:(const char *zTitle)
sqlite3MemdebugSync	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSync(){$/;"	f
sqlite3MemoryAlarm	sqlite3.c	/^static int sqlite3MemoryAlarm($/;"	f	file:	signature:( void(*xCallback)(void *pArg, sqlite3_int64 used,int N), void *pArg, sqlite3_int64 iThreshold )
sqlite3Memsys3Dump	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys3Dump(const char *zFilename){$/;"	f	signature:(const char *zFilename)
sqlite3Memsys5Dump	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys5Dump(const char *zFilename){$/;"	f	signature:(const char *zFilename)
sqlite3MemsysGetHeader	sqlite3.c	/^static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){$/;"	f	file:	signature:(void *pAllocation)
sqlite3MinimumFileFormat	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MinimumFileFormat(Parse *pParse, int iDb, int minFormat){$/;"	f	signature:(Parse *pParse, int iDb, int minFormat)
sqlite3MinimumFileFormat	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MinimumFileFormat(Parse*, int, int);$/;"	p	file:	signature:(Parse*, int, int)
sqlite3MisuseError	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MisuseError(int lineno){$/;"	f	signature:(int lineno)
sqlite3MisuseError	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MisuseError(int);$/;"	p	file:	signature:(int)
sqlite3MulInt64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MulInt64(i64 *pA, i64 iB){$/;"	f	signature:(i64 *pA, i64 iB)
sqlite3MulInt64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MulInt64(i64*,i64);$/;"	p	file:	signature:(i64*,i64)
sqlite3MultiWrite	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MultiWrite(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3MultiWrite	sqlite3.c	/^SQLITE_PRIVATE void sqlite3MultiWrite(Parse*);$/;"	p	file:	signature:(Parse*)
sqlite3MutexAlloc	sqlite3.c	/^SQLITE_PRIVATE   sqlite3_mutex *sqlite3MutexAlloc(int);$/;"	p	file:	signature:(int)
sqlite3MutexAlloc	sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(int id){$/;"	f	signature:(int id)
sqlite3MutexAlloc	sqlite3.c	10399;"	d	file:
sqlite3MutexEnd	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3MutexEnd(void);$/;"	p	file:	signature:(void)
sqlite3MutexEnd	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexEnd(void){$/;"	f	signature:(void)
sqlite3MutexEnd	sqlite3.c	10401;"	d	file:
sqlite3MutexInit	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3MutexInit(void);$/;"	p	file:	signature:(void)
sqlite3MutexInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexInit(void){ $/;"	f	signature:(void)
sqlite3MutexInit	sqlite3.c	10400;"	d	file:
sqlite3NameFromToken	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3 *db, Token *pName){$/;"	f	signature:(sqlite3 *db, Token *pName)
sqlite3NameFromToken	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3*, Token*);$/;"	p	file:	signature:(sqlite3*, Token*)
sqlite3NestedParse	sqlite3.c	/^SQLITE_PRIVATE void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){$/;"	f	signature:(Parse *pParse, const char *zFormat, ...)
sqlite3NestedParse	sqlite3.c	/^SQLITE_PRIVATE void sqlite3NestedParse(Parse*, const char*, ...);$/;"	p	file:	signature:(Parse*, const char*, ...)
sqlite3NoopMutex	sqlite3.c	/^SQLITE_PRIVATE   sqlite3_mutex_methods const *sqlite3NoopMutex(void);$/;"	p	file:	signature:(void)
sqlite3NoopMutex	sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){$/;"	f	signature:(void)
sqlite3OSTrace	sqlite3.c	/^  int sqlite3OSTrace = SQLITE_DEBUG_OS_TRACE;$/;"	v
sqlite3OpcodeName	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){$/;"	f	signature:(int i)
sqlite3OpcodeName	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3OpcodeName(int);$/;"	p	file:	signature:(int)
sqlite3OpcodeProperty	sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;$/;"	v
sqlite3OpcodeProperty	sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[];$/;"	v
sqlite3OpenMasterTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenMasterTable(Parse *, int);$/;"	p	file:	signature:(Parse *, int)
sqlite3OpenMasterTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenMasterTable(Parse *p, int iDb){$/;"	f	signature:(Parse *p, int iDb)
sqlite3OpenTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenTable($/;"	f	signature:( Parse *pParse, int iCur, int iDb, Table *pTab, int opcode )
sqlite3OpenTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenTable(Parse*, int iCur, int iDb, Table*, int);$/;"	p	file:	signature:(Parse*, int iCur, int iDb, Table*, int)
sqlite3OpenTableAndIndices	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTableAndIndices($/;"	f	signature:( Parse *pParse, Table *pTab, int op, int iBase, u8 *aToOpen, int *piDataCur, int *piIdxCur )
sqlite3OpenTableAndIndices	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTableAndIndices(Parse*, Table*, int, int, u8*, int*, int*);$/;"	p	file:	signature:(Parse*, Table*, int, int, u8*, int*, int*)
sqlite3OpenTempDatabase	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTempDatabase(Parse *);$/;"	p	file:	signature:(Parse *)
sqlite3OpenTempDatabase	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTempDatabase(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3OsAccess	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsAccess($/;"	f	signature:( sqlite3_vfs *pVfs, const char *zPath, int flags, int *pResOut )
sqlite3OsAccess	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsAccess(sqlite3_vfs *, const char *, int, int *pResOut);$/;"	p	file:	signature:(sqlite3_vfs *, const char *, int, int *pResOut)
sqlite3OsCheckReservedLock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut);$/;"	p	file:	signature:(sqlite3_file *id, int *pResOut)
sqlite3OsCheckReservedLock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	signature:(sqlite3_file *id, int *pResOut)
sqlite3OsClose	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsClose(sqlite3_file *pId){$/;"	f	signature:(sqlite3_file *pId)
sqlite3OsClose	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsClose(sqlite3_file*);$/;"	p	file:	signature:(sqlite3_file*)
sqlite3OsCloseFree	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCloseFree(sqlite3_file *);$/;"	p	file:	signature:(sqlite3_file *)
sqlite3OsCloseFree	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCloseFree(sqlite3_file *pFile){$/;"	f	signature:(sqlite3_file *pFile)
sqlite3OsCurrentTimeInt64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCurrentTimeInt64(sqlite3_vfs *, sqlite3_int64*);$/;"	p	file:	signature:(sqlite3_vfs *, sqlite3_int64*)
sqlite3OsCurrentTimeInt64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){$/;"	f	signature:(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut)
sqlite3OsDelete	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDelete(sqlite3_vfs *, const char *, int);$/;"	p	file:	signature:(sqlite3_vfs *, const char *, int)
sqlite3OsDelete	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f	signature:(sqlite3_vfs *pVfs, const char *zPath, int dirSync)
sqlite3OsDeviceCharacteristics	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id);$/;"	p	file:	signature:(sqlite3_file *id)
sqlite3OsDeviceCharacteristics	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id){$/;"	f	signature:(sqlite3_file *id)
sqlite3OsDlClose	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlClose(sqlite3_vfs *, void *);$/;"	p	file:	signature:(sqlite3_vfs *, void *)
sqlite3OsDlClose	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	signature:(sqlite3_vfs *pVfs, void *pHandle)
sqlite3OsDlError	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlError(sqlite3_vfs *, int, char *);$/;"	p	file:	signature:(sqlite3_vfs *, int, char *)
sqlite3OsDlError	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f	signature:(sqlite3_vfs *pVfs, int nByte, char *zBufOut)
sqlite3OsDlOpen	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3_vfs *, const char *);$/;"	p	file:	signature:(sqlite3_vfs *, const char *)
sqlite3OsDlOpen	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f	signature:(sqlite3_vfs *pVfs, const char *zPath)
sqlite3OsDlSym	sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3_vfs *, void *, const char *))(void);$/;"	p	file:	signature:(sqlite3_vfs *, void *, const char *)
sqlite3OsDlSym	sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){$/;"	f	signature:(sqlite3_vfs *pVfs, void *pHdle, const char *zSym)
sqlite3OsFetch	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){$/;"	f	signature:(sqlite3_file *id, i64 iOff, int iAmt, void **pp)
sqlite3OsFetch	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64, int, void **);$/;"	p	file:	signature:(sqlite3_file *id, i64, int, void **)
sqlite3OsFileControl	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	signature:(sqlite3_file *id, int op, void *pArg)
sqlite3OsFileControl	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file*,int,void*);$/;"	p	file:	signature:(sqlite3_file*,int,void*)
sqlite3OsFileControlHint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsFileControlHint(sqlite3_file *id, int op, void *pArg){$/;"	f	signature:(sqlite3_file *id, int op, void *pArg)
sqlite3OsFileControlHint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsFileControlHint(sqlite3_file*,int,void*);$/;"	p	file:	signature:(sqlite3_file*,int,void*)
sqlite3OsFileSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){$/;"	f	signature:(sqlite3_file *id, i64 *pSize)
sqlite3OsFileSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileSize(sqlite3_file*, i64 *pSize);$/;"	p	file:	signature:(sqlite3_file*, i64 *pSize)
sqlite3OsFullPathname	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFullPathname($/;"	f	signature:( sqlite3_vfs *pVfs, const char *zPath, int nPathOut, char *zPathOut )
sqlite3OsFullPathname	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFullPathname(sqlite3_vfs *, const char *, int, char *);$/;"	p	file:	signature:(sqlite3_vfs *, const char *, int, char *)
sqlite3OsInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsInit(void);$/;"	p	file:	signature:(void)
sqlite3OsInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsInit(void){$/;"	f	signature:(void)
sqlite3OsLock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsLock(sqlite3_file *id, int lockType){$/;"	f	signature:(sqlite3_file *id, int lockType)
sqlite3OsLock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsLock(sqlite3_file*, int);$/;"	p	file:	signature:(sqlite3_file*, int)
sqlite3OsOpen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpen($/;"	f	signature:( sqlite3_vfs *pVfs, const char *zPath, sqlite3_file *pFile, int flags, int *pFlagsOut )
sqlite3OsOpen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpen(sqlite3_vfs *, const char *, sqlite3_file*, int, int *);$/;"	p	file:	signature:(sqlite3_vfs *, const char *, sqlite3_file*, int, int *)
sqlite3OsOpenMalloc	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpenMalloc($/;"	f	signature:( sqlite3_vfs *pVfs, const char *zFile, sqlite3_file **ppFile, int flags, int *pOutFlags )
sqlite3OsOpenMalloc	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpenMalloc(sqlite3_vfs *, const char *, sqlite3_file **, int,int*);$/;"	p	file:	signature:(sqlite3_vfs *, const char *, sqlite3_file **, int,int*)
sqlite3OsRandomness	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRandomness(sqlite3_vfs *, int, char *);$/;"	p	file:	signature:(sqlite3_vfs *, int, char *)
sqlite3OsRandomness	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f	signature:(sqlite3_vfs *pVfs, int nByte, char *zBufOut)
sqlite3OsRead	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){$/;"	f	signature:(sqlite3_file *id, void *pBuf, int amt, i64 offset)
sqlite3OsRead	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRead(sqlite3_file*, void*, int amt, i64 offset);$/;"	p	file:	signature:(sqlite3_file*, void*, int amt, i64 offset)
sqlite3OsSectorSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id);$/;"	p	file:	signature:(sqlite3_file *id)
sqlite3OsSectorSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id){$/;"	f	signature:(sqlite3_file *id)
sqlite3OsShmBarrier	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsShmBarrier(sqlite3_file *id);$/;"	p	file:	signature:(sqlite3_file *id)
sqlite3OsShmBarrier	sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsShmBarrier(sqlite3_file *id){$/;"	f	signature:(sqlite3_file *id)
sqlite3OsShmLock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmLock(sqlite3_file *id, int offset, int n, int flags){$/;"	f	signature:(sqlite3_file *id, int offset, int n, int flags)
sqlite3OsShmLock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmLock(sqlite3_file *id, int, int, int);$/;"	p	file:	signature:(sqlite3_file *id, int, int, int)
sqlite3OsShmMap	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmMap($/;"	f	signature:( sqlite3_file *id, int iPage, int pgsz, int bExtend, void volatile **pp )
sqlite3OsShmMap	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmMap(sqlite3_file *,int,int,int,void volatile **);$/;"	p	file:	signature:(sqlite3_file *,int,int,int,void volatile **)
sqlite3OsShmUnmap	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmUnmap(sqlite3_file *id, int deleteFlag){$/;"	f	signature:(sqlite3_file *id, int deleteFlag)
sqlite3OsShmUnmap	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmUnmap(sqlite3_file *id, int);$/;"	p	file:	signature:(sqlite3_file *id, int)
sqlite3OsSleep	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSleep(sqlite3_vfs *, int);$/;"	p	file:	signature:(sqlite3_vfs *, int)
sqlite3OsSleep	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f	signature:(sqlite3_vfs *pVfs, int nMicro)
sqlite3OsSync	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSync(sqlite3_file *id, int flags){$/;"	f	signature:(sqlite3_file *id, int flags)
sqlite3OsSync	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSync(sqlite3_file*, int);$/;"	p	file:	signature:(sqlite3_file*, int)
sqlite3OsTruncate	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsTruncate(sqlite3_file *id, i64 size){$/;"	f	signature:(sqlite3_file *id, i64 size)
sqlite3OsTruncate	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsTruncate(sqlite3_file*, i64 size);$/;"	p	file:	signature:(sqlite3_file*, i64 size)
sqlite3OsUnfetch	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *, i64, void *);$/;"	p	file:	signature:(sqlite3_file *, i64, void *)
sqlite3OsUnfetch	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){$/;"	f	signature:(sqlite3_file *id, i64 iOff, void *p)
sqlite3OsUnlock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file *id, int lockType){$/;"	f	signature:(sqlite3_file *id, int lockType)
sqlite3OsUnlock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file*, int);$/;"	p	file:	signature:(sqlite3_file*, int)
sqlite3OsWrite	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){$/;"	f	signature:(sqlite3_file *id, const void *pBuf, int amt, i64 offset)
sqlite3OsWrite	sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsWrite(sqlite3_file*, const void*, int amt, i64 offset);$/;"	p	file:	signature:(sqlite3_file*, const void*, int amt, i64 offset)
sqlite3PCacheBufferSetup	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheBufferSetup(void *, int sz, int n);$/;"	p	file:	signature:(void *, int sz, int n)
sqlite3PCacheBufferSetup	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheBufferSetup(void *pBuf, int sz, int n){$/;"	f	signature:(void *pBuf, int sz, int n)
sqlite3PCacheSetDefault	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheSetDefault(void);$/;"	p	file:	signature:(void)
sqlite3PCacheSetDefault	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheSetDefault(void){$/;"	f	signature:(void)
sqlite3PExpr	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3PExpr($/;"	f	signature:( Parse *pParse, int op, Expr *pLeft, Expr *pRight, const Token *pToken )
sqlite3PExpr	sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3PExpr(Parse*, int, Expr*, Expr*, const Token*);$/;"	p	file:	signature:(Parse*, int, Expr*, Expr*, const Token*)
sqlite3PageFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PageFree(void *p){$/;"	f	signature:(void *p)
sqlite3PageFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PageFree(void*);$/;"	p	file:	signature:(void*)
sqlite3PageMalloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PageMalloc(int sz){$/;"	f	signature:(int sz)
sqlite3PageMalloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PageMalloc(int);$/;"	p	file:	signature:(int)
sqlite3PagerAcquire	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerAcquire($/;"	f	signature:( Pager *pPager, Pgno pgno, DbPage **ppPage, int flags )
sqlite3PagerAcquire	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerAcquire(Pager *pPager, Pgno pgno, DbPage **ppPage, int clrFlag);$/;"	p	file:	signature:(Pager *pPager, Pgno pgno, DbPage **ppPage, int clrFlag)
sqlite3PagerBackupPtr	sqlite3.c	/^SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerBackupPtr	sqlite3.c	/^SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerBegin	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){$/;"	f	signature:(Pager *pPager, int exFlag, int subjInMemory)
sqlite3PagerBegin	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerBegin(Pager*, int exFlag, int);$/;"	p	file:	signature:(Pager*, int exFlag, int)
sqlite3PagerCacheStat	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerCacheStat(Pager *, int, int, int *);$/;"	p	file:	signature:(Pager *, int, int, int *)
sqlite3PagerCacheStat	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerCacheStat(Pager *pPager, int eStat, int reset, int *pnVal){$/;"	f	signature:(Pager *pPager, int eStat, int reset, int *pnVal)
sqlite3PagerCheckpoint	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3PagerCheckpoint(Pager *pPager, int, int*, int*);$/;"	p	file:	signature:(Pager *pPager, int, int*, int*)
sqlite3PagerCheckpoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCheckpoint(Pager *pPager, int eMode, int *pnLog, int *pnCkpt){$/;"	f	signature:(Pager *pPager, int eMode, int *pnLog, int *pnCkpt)
sqlite3PagerClearCache	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerClearCache(Pager *);$/;"	p	file:	signature:(Pager *)
sqlite3PagerClearCache	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerClearCache(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerClose	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerClose(Pager *pPager);$/;"	p	file:	signature:(Pager *pPager)
sqlite3PagerClose	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerClose(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerCloseWal	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3PagerCloseWal(Pager *pPager);$/;"	p	file:	signature:(Pager *pPager)
sqlite3PagerCloseWal	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCloseWal(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerCodec	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerCodec(DbPage *);$/;"	p	file:	signature:(DbPage *)
sqlite3PagerCodec	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerCodec(PgHdr *pPg){$/;"	f	signature:(PgHdr *pPg)
sqlite3PagerCommitPhaseOne	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne($/;"	f	signature:( Pager *pPager, const char *zMaster, int noSync )
sqlite3PagerCommitPhaseOne	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne(Pager*,const char *zMaster, int);$/;"	p	file:	signature:(Pager*,const char *zMaster, int)
sqlite3PagerCommitPhaseTwo	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerCommitPhaseTwo	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerDontWrite	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerDontWrite(DbPage*);$/;"	p	file:	signature:(DbPage*)
sqlite3PagerDontWrite	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerDontWrite(PgHdr *pPg){$/;"	f	signature:(PgHdr *pPg)
sqlite3PagerExclusiveLock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerExclusiveLock(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerExclusiveLock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerExclusiveLock(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerFile	sqlite3.c	/^SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerFile	sqlite3.c	/^SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerFilename	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerFilename(Pager *pPager, int nullIfMemDb){$/;"	f	signature:(Pager *pPager, int nullIfMemDb)
sqlite3PagerFilename	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerFilename(Pager*, int);$/;"	p	file:	signature:(Pager*, int)
sqlite3PagerGet	sqlite3.c	9811;"	d	file:
sqlite3PagerGetCodec	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetCodec(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerGetData	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetData(DbPage *); $/;"	p	file:	signature:(DbPage *)
sqlite3PagerGetData	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetData(DbPage *pPg){$/;"	f	signature:(DbPage *pPg)
sqlite3PagerGetExtra	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetExtra(DbPage *); $/;"	p	file:	signature:(DbPage *)
sqlite3PagerGetExtra	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetExtra(DbPage *pPg){$/;"	f	signature:(DbPage *pPg)
sqlite3PagerGetJournalMode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerGetJournalMode(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerGetJournalMode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerGetJournalMode(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerIsMemdb	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIsMemdb(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerIsMemdb	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIsMemdb(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerIsreadonly	sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerIsreadonly	sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerIswriteable	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3PagerIswriteable(DbPage*);$/;"	p	file:	signature:(DbPage*)
sqlite3PagerIswriteable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIswriteable(DbPage *pPg){$/;"	f	signature:(DbPage *pPg)
sqlite3PagerJournalSizeLimit	sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(Pager *, i64);$/;"	p	file:	signature:(Pager *, i64)
sqlite3PagerJournalSizeLimit	sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(Pager *pPager, i64 iLimit){$/;"	f	signature:(Pager *pPager, i64 iLimit)
sqlite3PagerJournalname	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerJournalname(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerJournalname	sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerJournalname(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerLockingMode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerLockingMode(Pager *, int);$/;"	p	file:	signature:(Pager *, int)
sqlite3PagerLockingMode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerLockingMode(Pager *pPager, int eMode){$/;"	f	signature:(Pager *pPager, int eMode)
sqlite3PagerLookup	sqlite3.c	/^SQLITE_PRIVATE DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno);$/;"	p	file:	signature:(Pager *pPager, Pgno pgno)
sqlite3PagerLookup	sqlite3.c	/^SQLITE_PRIVATE DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno){$/;"	f	signature:(Pager *pPager, Pgno pgno)
sqlite3PagerMaxPageCount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){$/;"	f	signature:(Pager *pPager, int mxPage)
sqlite3PagerMaxPageCount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMaxPageCount(Pager*, int);$/;"	p	file:	signature:(Pager*, int)
sqlite3PagerMemUsed	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMemUsed(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerMemUsed	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMemUsed(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerMovepage	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){$/;"	f	signature:(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit)
sqlite3PagerMovepage	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMovepage(Pager*,DbPage*,Pgno,int);$/;"	p	file:	signature:(Pager*,DbPage*,Pgno,int)
sqlite3PagerNosync	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerNosync(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerNosync	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerNosync(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerOkToChangeJournalMode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOkToChangeJournalMode(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerOkToChangeJournalMode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOkToChangeJournalMode(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerOpen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpen($/;"	f	signature:( sqlite3_vfs *pVfs, Pager **ppPager, const char *zFilename, int nExtra, int flags, int vfsFlags, void (*xReinit)(DbPage*) )
sqlite3PagerOpen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpen($/;"	p	file:	signature:( sqlite3_vfs*, Pager **ppPager, const char*, int, int, int, void(*)(DbPage*) )
sqlite3PagerOpenSavepoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int n);$/;"	p	file:	signature:(Pager *pPager, int n)
sqlite3PagerOpenSavepoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){$/;"	f	signature:(Pager *pPager, int nSavepoint)
sqlite3PagerOpenWal	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3PagerOpenWal(Pager *pPager, int *pisOpen);$/;"	p	file:	signature:(Pager *pPager, int *pisOpen)
sqlite3PagerOpenWal	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenWal($/;"	f	signature:( Pager *pPager, int *pbOpen )
sqlite3PagerPageRefcount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerPageRefcount(DbPage *pPage){$/;"	f	signature:(DbPage *pPage)
sqlite3PagerPageRefcount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerPageRefcount(DbPage*);$/;"	p	file:	signature:(DbPage*)
sqlite3PagerPagecount	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerPagecount(Pager *pPager, int *pnPage){$/;"	f	signature:(Pager *pPager, int *pnPage)
sqlite3PagerPagecount	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerPagecount(Pager*, int*);$/;"	p	file:	signature:(Pager*, int*)
sqlite3PagerPagenumber	sqlite3.c	/^SQLITE_PRIVATE   Pgno sqlite3PagerPagenumber(DbPage*);$/;"	p	file:	signature:(DbPage*)
sqlite3PagerPagenumber	sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(DbPage *pPg){$/;"	f	signature:(DbPage *pPg)
sqlite3PagerReadFileheader	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){$/;"	f	signature:(Pager *pPager, int N, unsigned char *pDest)
sqlite3PagerReadFileheader	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerReadFileheader(Pager*, int, unsigned char*);$/;"	p	file:	signature:(Pager*, int, unsigned char*)
sqlite3PagerRef	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerRef(DbPage *pPg){$/;"	f	signature:(DbPage *pPg)
sqlite3PagerRef	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerRef(DbPage*);$/;"	p	file:	signature:(DbPage*)
sqlite3PagerRefcount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRefcount(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerRefcount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRefcount(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerRefdump	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3PagerRefdump(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerRollback	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRollback(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerRollback	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRollback(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerSavepoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint);$/;"	p	file:	signature:(Pager *pPager, int op, int iSavepoint)
sqlite3PagerSavepoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint){$/;"	f	signature:(Pager *pPager, int op, int iSavepoint)
sqlite3PagerSetBusyhandler	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetBusyhandler($/;"	f	signature:( Pager *pPager, int (*xBusyHandler)(void *), void *pBusyHandlerArg )
sqlite3PagerSetBusyhandler	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetBusyhandler(Pager*, int(*)(void *), void *);$/;"	p	file:	signature:(Pager*, int(*)(void *), void *)
sqlite3PagerSetCachesize	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCachesize(Pager *pPager, int mxPage){$/;"	f	signature:(Pager *pPager, int mxPage)
sqlite3PagerSetCachesize	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCachesize(Pager*, int);$/;"	p	file:	signature:(Pager*, int)
sqlite3PagerSetCodec	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCodec($/;"	f	signature:( Pager *pPager, void *(*xCodec)(void*,void*,Pgno,int), void (*xCodecSizeChng)(void*,int,int), void (*xCodecFree)(void*), void *pCodec )
sqlite3PagerSetFlags	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetFlags($/;"	f	signature:( Pager *pPager, unsigned pgFlags )
sqlite3PagerSetFlags	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetFlags(Pager*,unsigned);$/;"	p	file:	signature:(Pager*,unsigned)
sqlite3PagerSetJournalMode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetJournalMode(Pager *, int);$/;"	p	file:	signature:(Pager *, int)
sqlite3PagerSetJournalMode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetJournalMode(Pager *pPager, int eMode){$/;"	f	signature:(Pager *pPager, int eMode)
sqlite3PagerSetMmapLimit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetMmapLimit(Pager *, sqlite3_int64);$/;"	p	file:	signature:(Pager *, sqlite3_int64)
sqlite3PagerSetMmapLimit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetMmapLimit(Pager *pPager, sqlite3_int64 szMmap){$/;"	f	signature:(Pager *pPager, sqlite3_int64 szMmap)
sqlite3PagerSetPagesize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetPagesize(Pager *pPager, u32 *pPageSize, int nReserve){$/;"	f	signature:(Pager *pPager, u32 *pPageSize, int nReserve)
sqlite3PagerSetPagesize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetPagesize(Pager*, u32*, int);$/;"	p	file:	signature:(Pager*, u32*, int)
sqlite3PagerSharedLock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSharedLock(Pager *pPager);$/;"	p	file:	signature:(Pager *pPager)
sqlite3PagerSharedLock	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSharedLock(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerShrink	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerShrink(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerShrink	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerShrink(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerState	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerState(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerStats	sqlite3.c	/^SQLITE_PRIVATE   int *sqlite3PagerStats(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerStats	sqlite3.c	/^SQLITE_PRIVATE int *sqlite3PagerStats(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerSync	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSync(Pager *pPager, const char *zMaster);$/;"	p	file:	signature:(Pager *pPager, const char *zMaster)
sqlite3PagerSync	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSync(Pager *pPager, const char *zMaster){$/;"	f	signature:(Pager *pPager, const char *zMaster)
sqlite3PagerTempSpace	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerTempSpace(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerTempSpace	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerTempSpace(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerTruncateImage	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerTruncateImage(Pager *pPager, Pgno nPage){$/;"	f	signature:(Pager *pPager, Pgno nPage)
sqlite3PagerTruncateImage	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerTruncateImage(Pager*,Pgno);$/;"	p	file:	signature:(Pager*,Pgno)
sqlite3PagerUnref	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnref(DbPage *pPg){$/;"	f	signature:(DbPage *pPg)
sqlite3PagerUnref	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnref(DbPage*);$/;"	p	file:	signature:(DbPage*)
sqlite3PagerUnrefNotNull	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnrefNotNull(DbPage *pPg){$/;"	f	signature:(DbPage *pPg)
sqlite3PagerUnrefNotNull	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnrefNotNull(DbPage*);$/;"	p	file:	signature:(DbPage*)
sqlite3PagerVfs	sqlite3.c	/^SQLITE_PRIVATE const sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerVfs	sqlite3.c	/^SQLITE_PRIVATE const sqlite3_vfs *sqlite3PagerVfs(Pager*);$/;"	p	file:	signature:(Pager*)
sqlite3PagerWalCallback	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3PagerWalCallback(Pager *pPager);$/;"	p	file:	signature:(Pager *pPager)
sqlite3PagerWalCallback	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalCallback(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerWalFramesize	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3PagerWalFramesize(Pager *pPager);$/;"	p	file:	signature:(Pager *pPager)
sqlite3PagerWalFramesize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalFramesize(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerWalSupported	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3PagerWalSupported(Pager *pPager);$/;"	p	file:	signature:(Pager *pPager)
sqlite3PagerWalSupported	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalSupported(Pager *pPager){$/;"	f	signature:(Pager *pPager)
sqlite3PagerWrite	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWrite(DbPage*);$/;"	p	file:	signature:(DbPage*)
sqlite3PagerWrite	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWrite(PgHdr *pPg){$/;"	f	signature:(PgHdr *pPg)
sqlite3ParseToplevel	sqlite3.c	12883;"	d	file:
sqlite3ParseToplevel	sqlite3.c	12892;"	d	file:
sqlite3ParseUri	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParseUri($/;"	f	signature:( const char *zDefaultVfs, const char *zUri, unsigned int *pFlags, sqlite3_vfs **ppVfs, char **pzFile, char **pzErrMsg )
sqlite3ParseUri	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParseUri(const char*,const char*,unsigned int*,$/;"	p	file:	signature:(const char*,const char*,unsigned int*, sqlite3_vfs**,char**,char **)
sqlite3Parser	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Parser($/;"	f	signature:( void *yyp, int yymajor, sqlite3ParserTOKENTYPE yyminor sqlite3ParserARG_PDECL )
sqlite3Parser	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Parser(void*, int, Token, Parse*);$/;"	p	file:	signature:(void*, int, Token, Parse*)
sqlite3ParserARG_FETCH	sqlite3.c	120440;"	d	file:
sqlite3ParserARG_PDECL	sqlite3.c	120439;"	d	file:
sqlite3ParserARG_SDECL	sqlite3.c	120438;"	d	file:
sqlite3ParserARG_STORE	sqlite3.c	120441;"	d	file:
sqlite3ParserAlloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ParserAlloc(void *(*mallocProc)(u64)){$/;"	f	signature:(void *(*mallocProc)(u64))
sqlite3ParserAlloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ParserAlloc(void*(*)(u64));$/;"	p	file:	signature:(void*(*)(u64))
sqlite3ParserFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserFree($/;"	f	signature:( void *p, void (*freeProc)(void*) )
sqlite3ParserFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserFree(void*, void(*)(void*));$/;"	p	file:	signature:(void*, void(*)(void*))
sqlite3ParserReset	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserReset(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3ParserReset	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserReset(Parse*);$/;"	p	file:	signature:(Parse*)
sqlite3ParserStackPeak	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3ParserStackPeak(void*);$/;"	p	file:	signature:(void*)
sqlite3ParserStackPeak	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParserStackPeak(void *p){$/;"	f	signature:(void *p)
sqlite3ParserTOKENTYPE	sqlite3.c	120415;"	d	file:
sqlite3ParserTrace	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3ParserTrace(FILE*, char *);$/;"	p	file:	signature:(FILE*, char *)
sqlite3ParserTrace	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserTrace(FILE *TraceFILE, char *zTracePrompt){$/;"	f	signature:(FILE *TraceFILE, char *zTracePrompt)
sqlite3PcacheCleanAll	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheCleanAll(PCache *pCache){$/;"	f	signature:(PCache *pCache)
sqlite3PcacheCleanAll	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheCleanAll(PCache*);    \/* Mark all dirty list pages as clean *\/$/;"	p	file:	signature:(PCache*)
sqlite3PcacheClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClear(PCache *pCache){$/;"	f	signature:(PCache *pCache)
sqlite3PcacheClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClear(PCache*);$/;"	p	file:	signature:(PCache*)
sqlite3PcacheClearSyncFlags	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(PCache *);$/;"	p	file:	signature:(PCache *)
sqlite3PcacheClearSyncFlags	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(PCache *pCache){$/;"	f	signature:(PCache *pCache)
sqlite3PcacheClose	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClose(PCache *pCache){$/;"	f	signature:(PCache *pCache)
sqlite3PcacheClose	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClose(PCache*);$/;"	p	file:	signature:(PCache*)
sqlite3PcacheDirtyList	sqlite3.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(PCache *pCache){$/;"	f	signature:(PCache *pCache)
sqlite3PcacheDirtyList	sqlite3.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(PCache*);$/;"	p	file:	signature:(PCache*)
sqlite3PcacheDrop	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheDrop(PgHdr *p){$/;"	f	signature:(PgHdr *p)
sqlite3PcacheDrop	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheDrop(PgHdr*);         \/* Remove page from cache *\/$/;"	p	file:	signature:(PgHdr*)
sqlite3PcacheFetch	sqlite3.c	/^SQLITE_PRIVATE sqlite3_pcache_page *sqlite3PcacheFetch($/;"	f	signature:( PCache *pCache, Pgno pgno, int createFlag )
sqlite3PcacheFetch	sqlite3.c	/^SQLITE_PRIVATE sqlite3_pcache_page *sqlite3PcacheFetch(PCache*, Pgno, int createFlag);$/;"	p	file:	signature:(PCache*, Pgno, int createFlag)
sqlite3PcacheFetchFinish	sqlite3.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheFetchFinish($/;"	f	signature:( PCache *pCache, Pgno pgno, sqlite3_pcache_page *pPage )
sqlite3PcacheFetchFinish	sqlite3.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheFetchFinish(PCache*, Pgno, sqlite3_pcache_page *pPage);$/;"	p	file:	signature:(PCache*, Pgno, sqlite3_pcache_page *pPage)
sqlite3PcacheFetchStress	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheFetchStress($/;"	f	signature:( PCache *pCache, Pgno pgno, sqlite3_pcache_page **ppPage )
sqlite3PcacheFetchStress	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheFetchStress(PCache*, Pgno, sqlite3_pcache_page**);$/;"	p	file:	signature:(PCache*, Pgno, sqlite3_pcache_page**)
sqlite3PcacheGetCachesize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheGetCachesize(PCache *);$/;"	p	file:	signature:(PCache *)
sqlite3PcacheGetCachesize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheGetCachesize(PCache *pCache){$/;"	f	signature:(PCache *pCache)
sqlite3PcacheInitialize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheInitialize(void);$/;"	p	file:	signature:(void)
sqlite3PcacheInitialize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheInitialize(void){$/;"	f	signature:(void)
sqlite3PcacheIterateDirty	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *));$/;"	p	file:	signature:(PCache *pCache, void (*xIter)(PgHdr *))
sqlite3PcacheIterateDirty	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *)){$/;"	f	signature:(PCache *pCache, void (*xIter)(PgHdr *))
sqlite3PcacheMakeClean	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeClean(PgHdr *p){$/;"	f	signature:(PgHdr *p)
sqlite3PcacheMakeClean	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeClean(PgHdr*);    \/* Mark a single page as clean *\/$/;"	p	file:	signature:(PgHdr*)
sqlite3PcacheMakeDirty	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeDirty(PgHdr *p){$/;"	f	signature:(PgHdr *p)
sqlite3PcacheMakeDirty	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeDirty(PgHdr*);    \/* Make sure page is marked dirty *\/$/;"	p	file:	signature:(PgHdr*)
sqlite3PcacheMove	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMove(PgHdr *p, Pgno newPgno){$/;"	f	signature:(PgHdr *p, Pgno newPgno)
sqlite3PcacheMove	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMove(PgHdr*, Pgno);$/;"	p	file:	signature:(PgHdr*, Pgno)
sqlite3PcacheOpen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheOpen($/;"	f	signature:( int szPage, int szExtra, int bPurgeable, int (*xStress)(void*,PgHdr*), void *pStress, PCache *p )
sqlite3PcacheOpen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheOpen($/;"	p	file:	signature:( int szPage, int szExtra, int bPurgeable, int (*xStress)(void*, PgHdr*), void *pStress, PCache *pToInit )
sqlite3PcachePageRefcount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePageRefcount(PgHdr *p){$/;"	f	signature:(PgHdr *p)
sqlite3PcachePageRefcount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePageRefcount(PgHdr*);$/;"	p	file:	signature:(PgHdr*)
sqlite3PcachePagecount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePagecount(PCache *pCache){$/;"	f	signature:(PCache *pCache)
sqlite3PcachePagecount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePagecount(PCache*);$/;"	p	file:	signature:(PCache*)
sqlite3PcacheRef	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheRef(PgHdr *p){$/;"	f	signature:(PgHdr *p)
sqlite3PcacheRef	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheRef(PgHdr*);$/;"	p	file:	signature:(PgHdr*)
sqlite3PcacheRefCount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheRefCount(PCache *pCache){$/;"	f	signature:(PCache *pCache)
sqlite3PcacheRefCount	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheRefCount(PCache*);$/;"	p	file:	signature:(PCache*)
sqlite3PcacheRelease	sqlite3.c	/^SQLITE_PRIVATE void SQLITE_NOINLINE sqlite3PcacheRelease(PgHdr *p){$/;"	f	signature:(PgHdr *p)
sqlite3PcacheRelease	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheRelease(PgHdr*);$/;"	p	file:	signature:(PgHdr*)
sqlite3PcacheReleaseMemory	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(int nReq){$/;"	f	signature:(int nReq)
sqlite3PcacheReleaseMemory	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(int);$/;"	p	file:	signature:(int)
sqlite3PcacheSetCachesize	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheSetCachesize(PCache *, int);$/;"	p	file:	signature:(PCache *, int)
sqlite3PcacheSetCachesize	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheSetCachesize(PCache *pCache, int mxPage){$/;"	f	signature:(PCache *pCache, int mxPage)
sqlite3PcacheSetPageSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSetPageSize(PCache *, int);$/;"	p	file:	signature:(PCache *, int)
sqlite3PcacheSetPageSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSetPageSize(PCache *pCache, int szPage){$/;"	f	signature:(PCache *pCache, int szPage)
sqlite3PcacheShrink	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShrink(PCache *pCache){$/;"	f	signature:(PCache *pCache)
sqlite3PcacheShrink	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShrink(PCache*);$/;"	p	file:	signature:(PCache*)
sqlite3PcacheShutdown	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShutdown(void);$/;"	p	file:	signature:(void)
sqlite3PcacheShutdown	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShutdown(void){$/;"	f	signature:(void)
sqlite3PcacheSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSize(void);$/;"	p	file:	signature:(void)
sqlite3PcacheSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSize(void){ return sizeof(PCache); }$/;"	f	signature:(void)
sqlite3PcacheStats	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheStats($/;"	f	signature:( int *pnCurrent, int *pnMax, int *pnMin, int *pnRecyclable )
sqlite3PcacheStats	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheStats(int*,int*,int*,int*);$/;"	p	file:	signature:(int*,int*,int*,int*)
sqlite3PcacheTruncate	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){$/;"	f	signature:(PCache *pCache, Pgno pgno)
sqlite3PcacheTruncate	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache*, Pgno x);$/;"	p	file:	signature:(PCache*, Pgno x)
sqlite3PendingByte	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte = 0x40000000;$/;"	v
sqlite3PendingByte	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte;$/;"	v
sqlite3Pragma	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Pragma($/;"	f	signature:( Parse *pParse, Token *pId1, Token *pId2, Token *pValue, int minusFlag )
sqlite3Pragma	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Pragma(Parse*,Token*,Token*,Token*,int);$/;"	p	file:	signature:(Parse*,Token*,Token*,Token*,int)
sqlite3Prepare	sqlite3.c	/^static int sqlite3Prepare($/;"	f	file:	signature:( sqlite3 *db, const char *zSql, int nBytes, int saveSqlFlag, Vdbe *pReprepare, sqlite3_stmt **ppStmt, const char **pzTail )
sqlite3Prepare16	sqlite3.c	/^static int sqlite3Prepare16($/;"	f	file:	signature:( sqlite3 *db, const void *zSql, int nBytes, int saveSqlFlag, sqlite3_stmt **ppStmt, const void **pzTail )
sqlite3PrimaryKeyIndex	sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3PrimaryKeyIndex(Table *pTab){$/;"	f	signature:(Table *pTab)
sqlite3PrimaryKeyIndex	sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3PrimaryKeyIndex(Table*);$/;"	p	file:	signature:(Table*)
sqlite3Prng	sqlite3.c	/^} sqlite3Prng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3PrngRestoreState	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngRestoreState(void);$/;"	p	file:	signature:(void)
sqlite3PrngRestoreState	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngRestoreState(void){$/;"	f	signature:(void)
sqlite3PrngSaveState	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngSaveState(void);$/;"	p	file:	signature:(void)
sqlite3PrngSaveState	sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngSaveState(void){$/;"	f	signature:(void)
sqlite3PrngType	sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType {$/;"	s	file:
sqlite3PrngType::i	sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:	access:public
sqlite3PrngType::isInit	sqlite3.c	/^  unsigned char isInit;          \/* True if initialized *\/$/;"	m	struct:sqlite3PrngType	file:	access:public
sqlite3PrngType::j	sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:	access:public
sqlite3PrngType::s	sqlite3.c	/^  unsigned char s[256];          \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:	access:public
sqlite3Put4byte	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Put4byte(u8*, u32);$/;"	p	file:	signature:(u8*, u32)
sqlite3Put4byte	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Put4byte(unsigned char *p, u32 v){$/;"	f	signature:(unsigned char *p, u32 v)
sqlite3PutVarint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PutVarint(unsigned char *p, u64 v){$/;"	f	signature:(unsigned char *p, u64 v)
sqlite3PutVarint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3PutVarint(unsigned char*, u64);$/;"	p	file:	signature:(unsigned char*, u64)
sqlite3ReadSchema	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ReadSchema(Parse *pParse);$/;"	p	file:	signature:(Parse *pParse)
sqlite3ReadSchema	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ReadSchema(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3Realloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Realloc(void *pOld, u64 nBytes){$/;"	f	signature:(void *pOld, u64 nBytes)
sqlite3Realloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Realloc(void*, u64);$/;"	p	file:	signature:(void*, u64)
sqlite3RefillIndex	sqlite3.c	/^static void sqlite3RefillIndex(Parse *pParse, Index *pIndex, int memRootPage){$/;"	f	file:	signature:(Parse *pParse, Index *pIndex, int memRootPage)
sqlite3RegisterBuiltinFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3RegisterBuiltinFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3RegisterDateTimeFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(void);$/;"	p	file:	signature:(void)
sqlite3RegisterDateTimeFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(void){$/;"	f	signature:(void)
sqlite3RegisterGlobalFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterGlobalFunctions(void);$/;"	p	file:	signature:(void)
sqlite3RegisterGlobalFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterGlobalFunctions(void){$/;"	f	signature:(void)
sqlite3RegisterLikeFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){$/;"	f	signature:(sqlite3 *db, int caseSensitive)
sqlite3RegisterLikeFunctions	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(sqlite3*, int);$/;"	p	file:	signature:(sqlite3*, int)
sqlite3Reindex	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){$/;"	f	signature:(Parse *pParse, Token *pName1, Token *pName2)
sqlite3Reindex	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Reindex(Parse*, Token*, Token*);$/;"	p	file:	signature:(Parse*, Token*, Token*)
sqlite3ReleaseTempRange	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempRange(Parse *pParse, int iReg, int nReg){$/;"	f	signature:(Parse *pParse, int iReg, int nReg)
sqlite3ReleaseTempRange	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempRange(Parse*,int,int);$/;"	p	file:	signature:(Parse*,int,int)
sqlite3ReleaseTempReg	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempReg(Parse *pParse, int iReg){$/;"	f	signature:(Parse *pParse, int iReg)
sqlite3ReleaseTempReg	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempReg(Parse*,int);$/;"	p	file:	signature:(Parse*,int)
sqlite3Reprepare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Reprepare(Vdbe *p){$/;"	f	signature:(Vdbe *p)
sqlite3Reprepare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Reprepare(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3ResetAllSchemasOfConnection	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetAllSchemasOfConnection(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3ResetAllSchemasOfConnection	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetAllSchemasOfConnection(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3ResetOneSchema	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetOneSchema(sqlite3 *db, int iDb){$/;"	f	signature:(sqlite3 *db, int iDb)
sqlite3ResetOneSchema	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetOneSchema(sqlite3*,int);$/;"	p	file:	signature:(sqlite3*,int)
sqlite3ResolveExprNames	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveExprNames( $/;"	f	signature:( NameContext *pNC, Expr *pExpr )
sqlite3ResolveExprNames	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveExprNames(NameContext*, Expr*);$/;"	p	file:	signature:(NameContext*, Expr*)
sqlite3ResolveOrderGroupBy	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy($/;"	f	signature:( Parse *pParse, Select *pSelect, ExprList *pOrderBy, const char *zType )
sqlite3ResolveOrderGroupBy	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy(Parse*, Select*, ExprList*, const char*);$/;"	p	file:	signature:(Parse*, Select*, ExprList*, const char*)
sqlite3ResolvePartIdxLabel	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolvePartIdxLabel(Parse *pParse, int iLabel){$/;"	f	signature:(Parse *pParse, int iLabel)
sqlite3ResolvePartIdxLabel	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolvePartIdxLabel(Parse*,int);$/;"	p	file:	signature:(Parse*,int)
sqlite3ResolveSelectNames	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolveSelectNames($/;"	f	signature:( Parse *pParse, Select *p, NameContext *pOuterNC )
sqlite3ResolveSelectNames	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolveSelectNames(Parse*, Select*, NameContext*);$/;"	p	file:	signature:(Parse*, Select*, NameContext*)
sqlite3ResolveSelfReference	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolveSelfReference($/;"	f	signature:( Parse *pParse, Table *pTab, int type, Expr *pExpr, ExprList *pList )
sqlite3ResolveSelfReference	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolveSelfReference(Parse*,Table*,int,Expr*,ExprList*);$/;"	p	file:	signature:(Parse*,Table*,int,Expr*,ExprList*)
sqlite3ResultSetOfSelect	sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){$/;"	f	signature:(Parse *pParse, Select *pSelect)
sqlite3ResultSetOfSelect	sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(Parse*,Select*);$/;"	p	file:	signature:(Parse*,Select*)
sqlite3RollbackAll	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackAll(sqlite3 *db, int tripCode){$/;"	f	signature:(sqlite3 *db, int tripCode)
sqlite3RollbackAll	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackAll(sqlite3*,int);$/;"	p	file:	signature:(sqlite3*,int)
sqlite3RollbackTransaction	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackTransaction(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3RollbackTransaction	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackTransaction(Parse*);$/;"	p	file:	signature:(Parse*)
sqlite3RootPageMoved	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RootPageMoved(sqlite3 *db, int iDb, int iFrom, int iTo){$/;"	f	signature:(sqlite3 *db, int iDb, int iFrom, int iTo)
sqlite3RootPageMoved	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RootPageMoved(sqlite3*, int, int, int);$/;"	p	file:	signature:(sqlite3*, int, int, int)
sqlite3RowSetClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetClear(RowSet *p){$/;"	f	signature:(RowSet *p)
sqlite3RowSetClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetClear(RowSet*);$/;"	p	file:	signature:(RowSet*)
sqlite3RowSetInit	sqlite3.c	/^SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3 *db, void *pSpace, unsigned int N){$/;"	f	signature:(sqlite3 *db, void *pSpace, unsigned int N)
sqlite3RowSetInit	sqlite3.c	/^SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3*, void*, unsigned int);$/;"	p	file:	signature:(sqlite3*, void*, unsigned int)
sqlite3RowSetInsert	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetInsert(RowSet *p, i64 rowid){$/;"	f	signature:(RowSet *p, i64 rowid)
sqlite3RowSetInsert	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetInsert(RowSet*, i64);$/;"	p	file:	signature:(RowSet*, i64)
sqlite3RowSetNext	sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetNext(RowSet *p, i64 *pRowid){$/;"	f	signature:(RowSet *p, i64 *pRowid)
sqlite3RowSetNext	sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetNext(RowSet*, i64*);$/;"	p	file:	signature:(RowSet*, i64*)
sqlite3RowSetTest	sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetTest(RowSet *pRowSet, int iBatch, sqlite3_int64 iRowid){$/;"	f	signature:(RowSet *pRowSet, int iBatch, sqlite3_int64 iRowid)
sqlite3RowSetTest	sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetTest(RowSet*, int iBatch, i64);$/;"	p	file:	signature:(RowSet*, int iBatch, i64)
sqlite3RowidConstraint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowidConstraint($/;"	f	signature:( Parse *pParse, int onError, Table *pTab )
sqlite3RowidConstraint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowidConstraint(Parse*, int, Table*);$/;"	p	file:	signature:(Parse*, int, Table*)
sqlite3RtreeInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3RtreeInit(sqlite3 *db);$/;"	p	file:	signature:(sqlite3 *db)
sqlite3RtreeInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3RtreeInit(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3RunParser	sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){$/;"	f	signature:(Parse *pParse, const char *zSql, char **pzErrMsg)
sqlite3RunParser	sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunParser(Parse*, const char*, char **);$/;"	p	file:	signature:(Parse*, const char*, char **)
sqlite3RunVacuum	sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db){$/;"	f	signature:(char **pzErrMsg, sqlite3 *db)
sqlite3RunVacuum	sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunVacuum(char**, sqlite3*);$/;"	p	file:	signature:(char**, sqlite3*)
sqlite3SafetyCheckOk	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckOk(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3SafetyCheckOk	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckOk(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3SafetyCheckSickOrOk	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3SafetyCheckSickOrOk	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3SavedPrng	sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3Savepoint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Savepoint(Parse *pParse, int op, Token *pName){$/;"	f	signature:(Parse *pParse, int op, Token *pName)
sqlite3Savepoint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Savepoint(Parse*, int, Token*);$/;"	p	file:	signature:(Parse*, int, Token*)
sqlite3SchemaClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SchemaClear(void *);$/;"	p	file:	signature:(void *)
sqlite3SchemaClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SchemaClear(void *p){$/;"	f	signature:(void *p)
sqlite3SchemaGet	sqlite3.c	/^SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3 *, Btree *);$/;"	p	file:	signature:(sqlite3 *, Btree *)
sqlite3SchemaGet	sqlite3.c	/^SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3 *db, Btree *pBt){$/;"	f	signature:(sqlite3 *db, Btree *pBt)
sqlite3SchemaMutexHeld	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3SchemaMutexHeld(sqlite3*,int,Schema*);$/;"	p	file:	signature:(sqlite3*,int,Schema*)
sqlite3SchemaMutexHeld	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaMutexHeld(sqlite3 *db, int iDb, Schema *pSchema){$/;"	f	signature:(sqlite3 *db, int iDb, Schema *pSchema)
sqlite3SchemaMutexHeld	sqlite3.c	9182;"	d	file:
sqlite3SchemaToIndex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaToIndex(sqlite3 *db, Schema *);$/;"	p	file:	signature:(sqlite3 *db, Schema *)
sqlite3SchemaToIndex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){$/;"	f	signature:(sqlite3 *db, Schema *pSchema)
sqlite3ScratchFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ScratchFree(void *p){$/;"	f	signature:(void *p)
sqlite3ScratchFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ScratchFree(void*);$/;"	p	file:	signature:(void*)
sqlite3ScratchMalloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ScratchMalloc(int n){$/;"	f	signature:(int n)
sqlite3ScratchMalloc	sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ScratchMalloc(int);$/;"	p	file:	signature:(int)
sqlite3SectorSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SectorSize(sqlite3_file *);$/;"	p	file:	signature:(sqlite3_file *)
sqlite3SectorSize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SectorSize(sqlite3_file *pFile){$/;"	f	signature:(sqlite3_file *pFile)
sqlite3Select	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Select($/;"	f	signature:( Parse *pParse, Select *p, SelectDest *pDest )
sqlite3Select	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Select(Parse*, Select*, SelectDest*);$/;"	p	file:	signature:(Parse*, Select*, SelectDest*)
sqlite3SelectAddTypeInfo	sqlite3.c	/^static void sqlite3SelectAddTypeInfo(Parse *pParse, Select *pSelect){$/;"	f	file:	signature:(Parse *pParse, Select *pSelect)
sqlite3SelectDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDelete(sqlite3 *db, Select *p){$/;"	f	signature:(sqlite3 *db, Select *p)
sqlite3SelectDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDelete(sqlite3*, Select*);$/;"	p	file:	signature:(sqlite3*, Select*)
sqlite3SelectDestInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){$/;"	f	signature:(SelectDest *pDest, int eDest, int iParm)
sqlite3SelectDestInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDestInit(SelectDest*,int,int);$/;"	p	file:	signature:(SelectDest*,int,int)
sqlite3SelectDup	sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){$/;"	f	signature:(sqlite3 *db, Select *p, int flags)
sqlite3SelectDup	sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3*,Select*,int);$/;"	p	file:	signature:(sqlite3*,Select*,int)
sqlite3SelectExpand	sqlite3.c	/^static void sqlite3SelectExpand(Parse *pParse, Select *pSelect){$/;"	f	file:	signature:(Parse *pParse, Select *pSelect)
sqlite3SelectExprHeight	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3SelectExprHeight(Select *);$/;"	p	file:	signature:(Select *)
sqlite3SelectExprHeight	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SelectExprHeight(Select *p){$/;"	f	signature:(Select *p)
sqlite3SelectExprHeight	sqlite3.c	13253;"	d	file:
sqlite3SelectNew	sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectNew($/;"	f	signature:( Parse *pParse, ExprList *pEList, SrcList *pSrc, Expr *pWhere, ExprList *pGroupBy, Expr *pHaving, ExprList *pOrderBy, u16 selFlags, Expr *pLimit, Expr *pOffset )
sqlite3SelectNew	sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectNew(Parse*,ExprList*,SrcList*,Expr*,ExprList*,$/;"	p	file:	signature:(Parse*,ExprList*,SrcList*,Expr*,ExprList*, Expr*,ExprList*,u16,Expr*,Expr*)
sqlite3SelectPrep	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectPrep($/;"	f	signature:( Parse *pParse, Select *p, NameContext *pOuterNC )
sqlite3SelectPrep	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectPrep(Parse*, Select*, NameContext*);$/;"	p	file:	signature:(Parse*, Select*, NameContext*)
sqlite3SelectSetName	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectSetName(Select *p, const char *zName){$/;"	f	signature:(Select *p, const char *zName)
sqlite3SelectSetName	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectSetName(Select*,const char*);$/;"	p	file:	signature:(Select*,const char*)
sqlite3SelectSetName	sqlite3.c	12847;"	d	file:
sqlite3SelectTrace	sqlite3.c	/^\/***\/ int sqlite3SelectTrace = 0;$/;"	v
sqlite3SetHasNullFlag	sqlite3.c	/^static void sqlite3SetHasNullFlag(Vdbe *v, int iCur, int regHasNull){$/;"	f	file:	signature:(Vdbe *v, int iCur, int regHasNull)
sqlite3SetString	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SetString(char **, sqlite3*, const char*, ...);$/;"	p	file:	signature:(char **, sqlite3*, const char*, ...)
sqlite3SetString	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SetString(char **pz, sqlite3 *db, const char *zFormat, ...){$/;"	f	signature:(char **pz, sqlite3 *db, const char *zFormat, ...)
sqlite3SharedCacheList	sqlite3.c	/^SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v
sqlite3SharedCacheList	sqlite3.c	/^static BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v	file:
sqlite3SkipAccumulatorLoad	sqlite3.c	/^static void sqlite3SkipAccumulatorLoad(sqlite3_context *context){$/;"	f	file:	signature:(sqlite3_context *context)
sqlite3SrcListAppend	sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppend($/;"	f	signature:( sqlite3 *db, SrcList *pList, Token *pTable, Token *pDatabase )
sqlite3SrcListAppend	sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppend(sqlite3*, SrcList*, Token*, Token*);$/;"	p	file:	signature:(sqlite3*, SrcList*, Token*, Token*)
sqlite3SrcListAppendFromTerm	sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm($/;"	f	signature:( Parse *pParse, SrcList *p, Token *pTable, Token *pDatabase, Token *pAlias, Select *pSubquery, Expr *pOn, IdList *pUsing )
sqlite3SrcListAppendFromTerm	sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm(Parse*, SrcList*, Token*, Token*,$/;"	p	file:	signature:(Parse*, SrcList*, Token*, Token*, Token*, Select*, Expr*, IdList*)
sqlite3SrcListAssignCursors	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){$/;"	f	signature:(Parse *pParse, SrcList *pList)
sqlite3SrcListAssignCursors	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListAssignCursors(Parse*, SrcList*);$/;"	p	file:	signature:(Parse*, SrcList*)
sqlite3SrcListDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListDelete(sqlite3 *db, SrcList *pList){$/;"	f	signature:(sqlite3 *db, SrcList *pList)
sqlite3SrcListDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListDelete(sqlite3*, SrcList*);$/;"	p	file:	signature:(sqlite3*, SrcList*)
sqlite3SrcListDup	sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3 *db, SrcList *p, int flags){$/;"	f	signature:(sqlite3 *db, SrcList *p, int flags)
sqlite3SrcListDup	sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3*,SrcList*,int);$/;"	p	file:	signature:(sqlite3*,SrcList*,int)
sqlite3SrcListEnlarge	sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge($/;"	f	signature:( sqlite3 *db, SrcList *pSrc, int nExtra, int iStart )
sqlite3SrcListEnlarge	sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge(sqlite3*, SrcList*, int, int);$/;"	p	file:	signature:(sqlite3*, SrcList*, int, int)
sqlite3SrcListIndexedBy	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListIndexedBy(Parse *, SrcList *, Token *);$/;"	p	file:	signature:(Parse *, SrcList *, Token *)
sqlite3SrcListIndexedBy	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){$/;"	f	signature:(Parse *pParse, SrcList *p, Token *pIndexedBy)
sqlite3SrcListLookup	sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3SrcListLookup(Parse *pParse, SrcList *pSrc){$/;"	f	signature:(Parse *pParse, SrcList *pSrc)
sqlite3SrcListLookup	sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3SrcListLookup(Parse*, SrcList*);$/;"	p	file:	signature:(Parse*, SrcList*)
sqlite3SrcListShiftJoinType	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList *p){$/;"	f	signature:(SrcList *p)
sqlite3SrcListShiftJoinType	sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList*);$/;"	p	file:	signature:(SrcList*)
sqlite3StackAllocRaw	sqlite3.c	12572;"	d	file:
sqlite3StackAllocRaw	sqlite3.c	12576;"	d	file:
sqlite3StackAllocZero	sqlite3.c	12573;"	d	file:
sqlite3StackAllocZero	sqlite3.c	12577;"	d	file:
sqlite3StackFree	sqlite3.c	12574;"	d	file:
sqlite3StackFree	sqlite3.c	12578;"	d	file:
sqlite3StartTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StartTable($/;"	f	signature:( Parse *pParse, Token *pName1, Token *pName2, int isTemp, int isView, int isVirtual, int noErr )
sqlite3StartTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StartTable(Parse*,Token*,Token*,int,int,int,int);$/;"	p	file:	signature:(Parse*,Token*,Token*,int,int,int,int)
sqlite3Stat	sqlite3.c	/^} sqlite3Stat = { {0,}, {0,} };$/;"	v	typeref:struct:sqlite3StatType	file:
sqlite3Stat4Column	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4Column($/;"	f	signature:( sqlite3 *db, const void *pRec, int nRec, int iCol, sqlite3_value **ppVal )
sqlite3Stat4Column	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4Column(sqlite3*, const void*, int, int, sqlite3_value**);$/;"	p	file:	signature:(sqlite3*, const void*, int, int, sqlite3_value**)
sqlite3Stat4ProbeFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Stat4ProbeFree(UnpackedRecord *pRec){$/;"	f	signature:(UnpackedRecord *pRec)
sqlite3Stat4ProbeFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Stat4ProbeFree(UnpackedRecord*);$/;"	p	file:	signature:(UnpackedRecord*)
sqlite3Stat4ProbeSetValue	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4ProbeSetValue($/;"	f	signature:( Parse *pParse, Index *pIdx, UnpackedRecord **ppRec, Expr *pExpr, u8 affinity, int iVal, int *pbOk )
sqlite3Stat4ProbeSetValue	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4ProbeSetValue(Parse*,Index*,UnpackedRecord**,Expr*,u8,int,int*);$/;"	p	file:	signature:(Parse*,Index*,UnpackedRecord**,Expr*,u8,int,int*)
sqlite3Stat4ValueFromExpr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4ValueFromExpr($/;"	f	signature:( Parse *pParse, Expr *pExpr, u8 affinity, sqlite3_value **ppVal )
sqlite3Stat4ValueFromExpr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4ValueFromExpr(Parse*, Expr*, u8, sqlite3_value**);$/;"	p	file:	signature:(Parse*, Expr*, u8, sqlite3_value**)
sqlite3StatType	sqlite3.c	/^static SQLITE_WSD struct sqlite3StatType {$/;"	s	file:
sqlite3StatType	sqlite3.c	/^typedef struct sqlite3StatType sqlite3StatType;$/;"	t	typeref:struct:sqlite3StatType	file:
sqlite3StatType::mxValue	sqlite3.c	/^  int mxValue[10];          \/* Maximum value *\/$/;"	m	struct:sqlite3StatType	file:	access:public
sqlite3StatType::nowValue	sqlite3.c	/^  int nowValue[10];         \/* Current value *\/$/;"	m	struct:sqlite3StatType	file:	access:public
sqlite3StatusAdd	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusAdd(int op, int N){$/;"	f	signature:(int op, int N)
sqlite3StatusAdd	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusAdd(int, int);$/;"	p	file:	signature:(int, int)
sqlite3StatusSet	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusSet(int op, int X){$/;"	f	signature:(int op, int X)
sqlite3StatusSet	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusSet(int, int);$/;"	p	file:	signature:(int, int)
sqlite3StatusValue	sqlite3.c	/^SQLITE_PRIVATE int sqlite3StatusValue(int op){$/;"	f	signature:(int op)
sqlite3StatusValue	sqlite3.c	/^SQLITE_PRIVATE int sqlite3StatusValue(int);$/;"	p	file:	signature:(int)
sqlite3Step	sqlite3.c	/^static int sqlite3Step(Vdbe *p){$/;"	f	file:	signature:(Vdbe *p)
sqlite3StmtCurrentTime	sqlite3.c	/^SQLITE_PRIVATE sqlite3_int64 sqlite3StmtCurrentTime(sqlite3_context *p){$/;"	f	signature:(sqlite3_context *p)
sqlite3StmtCurrentTime	sqlite3.c	/^SQLITE_PRIVATE sqlite3_int64 sqlite3StmtCurrentTime(sqlite3_context*);$/;"	p	file:	signature:(sqlite3_context*)
sqlite3StrAccumAppend	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppend(StrAccum *p, const char *z, int N){$/;"	f	signature:(StrAccum *p, const char *z, int N)
sqlite3StrAccumAppend	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppend(StrAccum*,const char*,int);$/;"	p	file:	signature:(StrAccum*,const char*,int)
sqlite3StrAccumAppendAll	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppendAll(StrAccum *p, const char *z){$/;"	f	signature:(StrAccum *p, const char *z)
sqlite3StrAccumAppendAll	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppendAll(StrAccum*,const char*);$/;"	p	file:	signature:(StrAccum*,const char*)
sqlite3StrAccumEnlarge	sqlite3.c	/^static int sqlite3StrAccumEnlarge(StrAccum *p, int N){$/;"	f	file:	signature:(StrAccum *p, int N)
sqlite3StrAccumFinish	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3StrAccumFinish(StrAccum *p){$/;"	f	signature:(StrAccum *p)
sqlite3StrAccumFinish	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3StrAccumFinish(StrAccum*);$/;"	p	file:	signature:(StrAccum*)
sqlite3StrAccumInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumInit(StrAccum *p, char *zBase, int n, int mx){$/;"	f	signature:(StrAccum *p, char *zBase, int n, int mx)
sqlite3StrAccumInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumInit(StrAccum*, char*, int, int);$/;"	p	file:	signature:(StrAccum*, char*, int, int)
sqlite3StrAccumReset	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumReset(StrAccum *p){$/;"	f	signature:(StrAccum *p)
sqlite3StrAccumReset	sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumReset(StrAccum*);$/;"	p	file:	signature:(StrAccum*)
sqlite3StrICmp	sqlite3.c	12537;"	d	file:
sqlite3StrNICmp	sqlite3.c	12539;"	d	file:
sqlite3Strlen30	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Strlen30(const char *z){$/;"	f	signature:(const char *z)
sqlite3Strlen30	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Strlen30(const char*);$/;"	p	file:	signature:(const char*)
sqlite3SubInt64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SubInt64(i64 *pA, i64 iB){$/;"	f	signature:(i64 *pA, i64 iB)
sqlite3SubInt64	sqlite3.c	/^SQLITE_PRIVATE int sqlite3SubInt64(i64*,i64);$/;"	p	file:	signature:(i64*,i64)
sqlite3TableAffinity	sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableAffinity(Vdbe *v, Table *pTab, int iReg){$/;"	f	signature:(Vdbe *v, Table *pTab, int iReg)
sqlite3TableAffinity	sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableAffinity(Vdbe*, Table*, int);$/;"	p	file:	signature:(Vdbe*, Table*, int)
sqlite3TableLock	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3TableLock(Parse *, int, int, u8, const char *);$/;"	p	file:	signature:(Parse *, int, int, u8, const char *)
sqlite3TableLock	sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableLock($/;"	f	signature:( Parse *pParse, int iDb, int iTab, u8 isWriteLock, const char *zName )
sqlite3TableLock	sqlite3.c	13103;"	d	file:
sqlite3TempInMemory	sqlite3.c	/^SQLITE_PRIVATE int sqlite3TempInMemory(const sqlite3 *db){$/;"	f	signature:(const sqlite3 *db)
sqlite3TempInMemory	sqlite3.c	/^SQLITE_PRIVATE int sqlite3TempInMemory(const sqlite3*);$/;"	p	file:	signature:(const sqlite3*)
sqlite3TestTextToPtr	sqlite3.c	/^SQLITE_PRIVATE   void *sqlite3TestTextToPtr(const char*);$/;"	p	file:	signature:(const char*)
sqlite3ThreadCreate	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ThreadCreate($/;"	f	signature:( SQLiteThread **ppThread, void *(*xTask)(void*), void *pIn )
sqlite3ThreadCreate	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ThreadCreate(SQLiteThread**,void*(*)(void*),void*);$/;"	p	file:	signature:(SQLiteThread**,void*(*)(void*),void*)
sqlite3ThreadJoin	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ThreadJoin(SQLiteThread *p, void **ppOut){$/;"	f	signature:(SQLiteThread *p, void **ppOut)
sqlite3ThreadJoin	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ThreadJoin(SQLiteThread*, void**);$/;"	p	file:	signature:(SQLiteThread*, void**)
sqlite3ThreadProc	sqlite3.c	/^static unsigned __stdcall sqlite3ThreadProc($/;"	f	file:	signature:( void *pArg )
sqlite3Tolower	sqlite3.c	12522;"	d	file:
sqlite3Tolower	sqlite3.c	12530;"	d	file:
sqlite3Toupper	sqlite3.c	12516;"	d	file:
sqlite3Toupper	sqlite3.c	12524;"	d	file:
sqlite3TransferBindings	sqlite3.c	/^SQLITE_PRIVATE int sqlite3TransferBindings(sqlite3_stmt *, sqlite3_stmt *);$/;"	p	file:	signature:(sqlite3_stmt *, sqlite3_stmt *)
sqlite3TransferBindings	sqlite3.c	/^SQLITE_PRIVATE int sqlite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f	signature:(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt)
sqlite3TreeViewExpr	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3TreeViewExpr(TreeView*, const Expr*, u8);$/;"	p	file:	signature:(TreeView*, const Expr*, u8)
sqlite3TreeViewExpr	sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewExpr(TreeView *pView, const Expr *pExpr, u8 moreToFollow){$/;"	f	signature:(TreeView *pView, const Expr *pExpr, u8 moreToFollow)
sqlite3TreeViewExprList	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3TreeViewExprList(TreeView*, const ExprList*, u8, const char*);$/;"	p	file:	signature:(TreeView*, const ExprList*, u8, const char*)
sqlite3TreeViewExprList	sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewExprList($/;"	f	signature:( TreeView *pView, const ExprList *pList, u8 moreToFollow, const char *zLabel )
sqlite3TreeViewItem	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3TreeViewItem(TreeView*, const char*, u8);$/;"	p	file:	signature:(TreeView*, const char*, u8)
sqlite3TreeViewItem	sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewItem(TreeView *p, const char *zLabel, u8 moreToFollow){$/;"	f	signature:(TreeView *p, const char *zLabel, u8 moreToFollow)
sqlite3TreeViewLine	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3TreeViewLine(TreeView*, const char*, ...);$/;"	p	file:	signature:(TreeView*, const char*, ...)
sqlite3TreeViewLine	sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewLine(TreeView *p, const char *zFormat, ...){$/;"	f	signature:(TreeView *p, const char *zFormat, ...)
sqlite3TreeViewPop	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3TreeViewPop(TreeView*);$/;"	p	file:	signature:(TreeView*)
sqlite3TreeViewPop	sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewPop(TreeView *p){$/;"	f	signature:(TreeView *p)
sqlite3TreeViewPush	sqlite3.c	/^SQLITE_PRIVATE   TreeView *sqlite3TreeViewPush(TreeView*,u8);$/;"	p	file:	signature:(TreeView*,u8)
sqlite3TreeViewPush	sqlite3.c	/^SQLITE_PRIVATE TreeView *sqlite3TreeViewPush(TreeView *p, u8 moreToFollow){$/;"	f	signature:(TreeView *p, u8 moreToFollow)
sqlite3TreeViewSelect	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3TreeViewSelect(TreeView*, const Select*, u8);$/;"	p	file:	signature:(TreeView*, const Select*, u8)
sqlite3TreeViewSelect	sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewSelect(TreeView *pView, const Select *p, u8 moreToFollow){$/;"	f	signature:(TreeView *pView, const Select *p, u8 moreToFollow)
sqlite3TriggerColmask	sqlite3.c	/^SQLITE_PRIVATE   u32 sqlite3TriggerColmask(Parse*,Trigger*,ExprList*,int,int,Table*,int);$/;"	p	file:	signature:(Parse*,Trigger*,ExprList*,int,int,Table*,int)
sqlite3TriggerColmask	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3TriggerColmask($/;"	f	signature:( Parse *pParse, Trigger *pTrigger, ExprList *pChanges, int isNew, int tr_tm, Table *pTab, int orconf )
sqlite3TriggerColmask	sqlite3.c	12893;"	d	file:
sqlite3TriggerDeleteStep	sqlite3.c	/^SQLITE_PRIVATE   TriggerStep *sqlite3TriggerDeleteStep(sqlite3*,Token*, Expr*);$/;"	p	file:	signature:(sqlite3*,Token*, Expr*)
sqlite3TriggerDeleteStep	sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep($/;"	f	signature:( sqlite3 *db, Token *pTableName, Expr *pWhere )
sqlite3TriggerInsertStep	sqlite3.c	/^SQLITE_PRIVATE   TriggerStep *sqlite3TriggerInsertStep(sqlite3*,Token*, IdList*,$/;"	p	file:	signature:(sqlite3*,Token*, IdList*, Select*,u8)
sqlite3TriggerInsertStep	sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep($/;"	f	signature:( sqlite3 *db, Token *pTableName, IdList *pColumn, Select *pSelect, u8 orconf )
sqlite3TriggerList	sqlite3.c	/^SQLITE_PRIVATE   Trigger *sqlite3TriggerList(Parse *, Table *);$/;"	p	file:	signature:(Parse *, Table *)
sqlite3TriggerList	sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggerList(Parse *pParse, Table *pTab){$/;"	f	signature:(Parse *pParse, Table *pTab)
sqlite3TriggerList	sqlite3.c	12891;"	d	file:
sqlite3TriggerSelectStep	sqlite3.c	/^SQLITE_PRIVATE   TriggerStep *sqlite3TriggerSelectStep(sqlite3*,Select*);$/;"	p	file:	signature:(sqlite3*,Select*)
sqlite3TriggerSelectStep	sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep(sqlite3 *db, Select *pSelect){$/;"	f	signature:(sqlite3 *db, Select *pSelect)
sqlite3TriggerUpdateStep	sqlite3.c	/^SQLITE_PRIVATE   TriggerStep *sqlite3TriggerUpdateStep(sqlite3*,Token*,ExprList*, Expr*, u8);$/;"	p	file:	signature:(sqlite3*,Token*,ExprList*, Expr*, u8)
sqlite3TriggerUpdateStep	sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep($/;"	f	signature:( sqlite3 *db, Token *pTableName, ExprList *pEList, Expr *pWhere, u8 orconf )
sqlite3TriggersExist	sqlite3.c	/^SQLITE_PRIVATE   Trigger *sqlite3TriggersExist(Parse *, Table*, int, ExprList*, int *pMask);$/;"	p	file:	signature:(Parse *, Table*, int, ExprList*, int *pMask)
sqlite3TriggersExist	sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggersExist($/;"	f	signature:( Parse *pParse, Table *pTab, int op, ExprList *pChanges, int *pMask )
sqlite3TriggersExist	sqlite3.c	12885;"	d	file:
sqlite3TwoPartName	sqlite3.c	/^SQLITE_PRIVATE int sqlite3TwoPartName($/;"	f	signature:( Parse *pParse, Token *pName1, Token *pName2, Token **pUnqual )
sqlite3TwoPartName	sqlite3.c	/^SQLITE_PRIVATE int sqlite3TwoPartName(Parse *, Token *, Token *, Token **);$/;"	p	file:	signature:(Parse *, Token *, Token *, Token **)
sqlite3UniqueConstraint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3UniqueConstraint($/;"	f	signature:( Parse *pParse, int onError, Index *pIdx )
sqlite3UniqueConstraint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3UniqueConstraint(Parse*, int, Index*);$/;"	p	file:	signature:(Parse*, int, Index*)
sqlite3UnlinkAndDeleteIndex	sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(sqlite3 *db, int iDb, const char *zIdxName){$/;"	f	signature:(sqlite3 *db, int iDb, const char *zIdxName)
sqlite3UnlinkAndDeleteIndex	sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(sqlite3*,int,const char*);$/;"	p	file:	signature:(sqlite3*,int,const char*)
sqlite3UnlinkAndDeleteTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(sqlite3 *db, int iDb, const char *zTabName){$/;"	f	signature:(sqlite3 *db, int iDb, const char *zTabName)
sqlite3UnlinkAndDeleteTable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(sqlite3*,int,const char*);$/;"	p	file:	signature:(sqlite3*,int,const char*)
sqlite3UnlinkAndDeleteTrigger	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3UnlinkAndDeleteTrigger(sqlite3*,int,const char*);$/;"	p	file:	signature:(sqlite3*,int,const char*)
sqlite3UnlinkAndDeleteTrigger	sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(sqlite3 *db, int iDb, const char *zName){$/;"	f	signature:(sqlite3 *db, int iDb, const char *zName)
sqlite3UnlinkAndDeleteTrigger	sqlite3.c	12888;"	d	file:
sqlite3Update	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Update($/;"	f	signature:( Parse *pParse, SrcList *pTabList, ExprList *pChanges, Expr *pWhere, int onError )
sqlite3Update	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Update(Parse*, SrcList*, ExprList*, Expr*, int);$/;"	p	file:	signature:(Parse*, SrcList*, ExprList*, Expr*, int)
sqlite3UpperToLower	sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[] = {$/;"	v
sqlite3UpperToLower	sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[];$/;"	v
sqlite3UserAuthCheckLogin	sqlite3.c	/^SQLITE_PRIVATE int sqlite3UserAuthCheckLogin(sqlite3*,const char*,u8*);$/;"	p	file:	signature:(sqlite3*,const char*,u8*)
sqlite3UserAuthInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3UserAuthInit(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3UserAuthTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3UserAuthTable(const char *zTable){$/;"	f	signature:(const char *zTable)
sqlite3UserAuthTable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3UserAuthTable(const char*);$/;"	p	file:	signature:(const char*)
sqlite3Utf16ByteLen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *pData, int nChar);$/;"	p	file:	signature:(const void *pData, int nChar)
sqlite3Utf16ByteLen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){$/;"	f	signature:(const void *zIn, int nChar)
sqlite3Utf16to8	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3 *, const void*, int, u8);$/;"	p	file:	signature:(sqlite3 *, const void*, int, u8)
sqlite3Utf16to8	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3 *db, const void *z, int nByte, u8 enc){$/;"	f	signature:(sqlite3 *db, const void *z, int nByte, u8 enc)
sqlite3Utf8CharLen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *pData, int nByte);$/;"	p	file:	signature:(const char *pData, int nByte)
sqlite3Utf8CharLen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){$/;"	f	signature:(const char *zIn, int nByte)
sqlite3Utf8Read	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Utf8Read($/;"	f	signature:( const unsigned char **pz )
sqlite3Utf8Read	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Utf8Read(const u8**);$/;"	p	file:	signature:(const u8**)
sqlite3Utf8Read	sqlite3.c	94746;"	d	file:
sqlite3Utf8To8	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3Utf8To8(unsigned char*);$/;"	p	file:	signature:(unsigned char*)
sqlite3Utf8To8	sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8To8(unsigned char *zIn){$/;"	f	signature:(unsigned char *zIn)
sqlite3Utf8Trans1	sqlite3.c	/^static const unsigned char sqlite3Utf8Trans1[] = {$/;"	v	file:
sqlite3UtfSelfTest	sqlite3.c	/^SQLITE_PRIVATE void sqlite3UtfSelfTest(void){$/;"	f	signature:(void)
sqlite3VMPrintf	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3 *db, const char *zFormat, va_list ap){$/;"	f	signature:(sqlite3 *db, const char *zFormat, va_list ap)
sqlite3VMPrintf	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3*,const char*, va_list);$/;"	p	file:	signature:(sqlite3*,const char*, va_list)
sqlite3VXPrintf	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VXPrintf($/;"	f	signature:( StrAccum *pAccum, u32 bFlags, const char *fmt, va_list ap )
sqlite3VXPrintf	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VXPrintf(StrAccum*, u32, const char*, va_list);$/;"	p	file:	signature:(StrAccum*, u32, const char*, va_list)
sqlite3Vacuum	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Vacuum(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3Vacuum	sqlite3.c	/^SQLITE_PRIVATE void sqlite3Vacuum(Parse*);$/;"	p	file:	signature:(Parse*)
sqlite3ValueApplyAffinity	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueApplyAffinity($/;"	f	signature:( sqlite3_value *pVal, u8 affinity, u8 enc )
sqlite3ValueApplyAffinity	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueApplyAffinity(sqlite3_value *, u8, u8);$/;"	p	file:	signature:(sqlite3_value *, u8, u8)
sqlite3ValueBytes	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueBytes(sqlite3_value *pVal, u8 enc){$/;"	f	signature:(sqlite3_value *pVal, u8 enc)
sqlite3ValueBytes	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueBytes(sqlite3_value*, u8);$/;"	p	file:	signature:(sqlite3_value*, u8)
sqlite3ValueFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueFree(sqlite3_value *v){$/;"	f	signature:(sqlite3_value *v)
sqlite3ValueFree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueFree(sqlite3_value*);$/;"	p	file:	signature:(sqlite3_value*)
sqlite3ValueFromExpr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueFromExpr($/;"	f	signature:( sqlite3 *db, Expr *pExpr, u8 enc, u8 affinity, sqlite3_value **ppVal )
sqlite3ValueFromExpr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueFromExpr(sqlite3 *, Expr *, u8, u8, sqlite3_value **);$/;"	p	file:	signature:(sqlite3 *, Expr *, u8, u8, sqlite3_value **)
sqlite3ValueNew	sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3 *);$/;"	p	file:	signature:(sqlite3 *)
sqlite3ValueNew	sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3ValueSetNull	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueSetNull(sqlite3_value *p){$/;"	f	signature:(sqlite3_value *p)
sqlite3ValueSetNull	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueSetNull(sqlite3_value*);$/;"	p	file:	signature:(sqlite3_value*)
sqlite3ValueSetStr	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueSetStr($/;"	f	signature:( sqlite3_value *v, int n, const void *z, u8 enc, void (*xDel)(void*) )
sqlite3ValueSetStr	sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueSetStr(sqlite3_value*, int, const void *,u8, $/;"	p	file:	signature:(sqlite3_value*, int, const void *,u8, void(*)(void*))
sqlite3ValueText	sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3_value* pVal, u8 enc){$/;"	f	signature:(sqlite3_value* pVal, u8 enc)
sqlite3ValueText	sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3_value*, u8);$/;"	p	file:	signature:(sqlite3_value*, u8)
sqlite3VarintLen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VarintLen(u64 v);$/;"	p	file:	signature:(u64 v)
sqlite3VarintLen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VarintLen(u64 v){$/;"	f	signature:(u64 v)
sqlite3VdbeAddOp0	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp0(Vdbe *p, int op){$/;"	f	signature:(Vdbe *p, int op)
sqlite3VdbeAddOp0	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp0(Vdbe*,int);$/;"	p	file:	signature:(Vdbe*,int)
sqlite3VdbeAddOp1	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp1(Vdbe *p, int op, int p1){$/;"	f	signature:(Vdbe *p, int op, int p1)
sqlite3VdbeAddOp1	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp1(Vdbe*,int,int);$/;"	p	file:	signature:(Vdbe*,int,int)
sqlite3VdbeAddOp2	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp2(Vdbe *p, int op, int p1, int p2){$/;"	f	signature:(Vdbe *p, int op, int p1, int p2)
sqlite3VdbeAddOp2	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp2(Vdbe*,int,int,int);$/;"	p	file:	signature:(Vdbe*,int,int,int)
sqlite3VdbeAddOp3	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){$/;"	f	signature:(Vdbe *p, int op, int p1, int p2, int p3)
sqlite3VdbeAddOp3	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp3(Vdbe*,int,int,int,int);$/;"	p	file:	signature:(Vdbe*,int,int,int,int)
sqlite3VdbeAddOp4	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4($/;"	f	signature:( Vdbe *p, int op, int p1, int p2, int p3, const char *zP4, int p4type )
sqlite3VdbeAddOp4	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4(Vdbe*,int,int,int,int,const char *zP4,int);$/;"	p	file:	signature:(Vdbe*,int,int,int,int,const char *zP4,int)
sqlite3VdbeAddOp4Int	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4Int($/;"	f	signature:( Vdbe *p, int op, int p1, int p2, int p3, int p4 )
sqlite3VdbeAddOp4Int	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4Int(Vdbe*,int,int,int,int,int);$/;"	p	file:	signature:(Vdbe*,int,int,int,int,int)
sqlite3VdbeAddOpList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOpList(Vdbe *p, int nOp, VdbeOpList const *aOp, int iLineno){$/;"	f	signature:(Vdbe *p, int nOp, VdbeOpList const *aOp, int iLineno)
sqlite3VdbeAddOpList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOpList(Vdbe*, int nOp, VdbeOpList const *aOp, int iLineno);$/;"	p	file:	signature:(Vdbe*, int nOp, VdbeOpList const *aOp, int iLineno)
sqlite3VdbeAddParseSchemaOp	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeAddParseSchemaOp(Vdbe *p, int iDb, char *zWhere){$/;"	f	signature:(Vdbe *p, int iDb, char *zWhere)
sqlite3VdbeAddParseSchemaOp	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeAddParseSchemaOp(Vdbe*,int,char*);$/;"	p	file:	signature:(Vdbe*,int,char*)
sqlite3VdbeAllocUnpackedRecord	sqlite3.c	/^SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeAllocUnpackedRecord($/;"	f	signature:( KeyInfo *pKeyInfo, char *pSpace, int szSpace, char **ppFree )
sqlite3VdbeAllocUnpackedRecord	sqlite3.c	/^SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeAllocUnpackedRecord(KeyInfo *, char *, int, char **);$/;"	p	file:	signature:(KeyInfo *, char *, int, char **)
sqlite3VdbeAssertMayAbort	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3VdbeAssertMayAbort(Vdbe *, int);$/;"	p	file:	signature:(Vdbe *, int)
sqlite3VdbeAssertMayAbort	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){$/;"	f	signature:(Vdbe *v, int mayAbort)
sqlite3VdbeChangeEncoding	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(Mem *, int);$/;"	p	file:	signature:(Mem *, int)
sqlite3VdbeChangeEncoding	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(Mem *pMem, int desiredEnc){$/;"	f	signature:(Mem *pMem, int desiredEnc)
sqlite3VdbeChangeP1	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, u32 addr, int val){$/;"	f	signature:(Vdbe *p, u32 addr, int val)
sqlite3VdbeChangeP1	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe*, u32 addr, int P1);$/;"	p	file:	signature:(Vdbe*, u32 addr, int P1)
sqlite3VdbeChangeP2	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, u32 addr, int val){$/;"	f	signature:(Vdbe *p, u32 addr, int val)
sqlite3VdbeChangeP2	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe*, u32 addr, int P2);$/;"	p	file:	signature:(Vdbe*, u32 addr, int P2)
sqlite3VdbeChangeP3	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, u32 addr, int val){$/;"	f	signature:(Vdbe *p, u32 addr, int val)
sqlite3VdbeChangeP3	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe*, u32 addr, int P3);$/;"	p	file:	signature:(Vdbe*, u32 addr, int P3)
sqlite3VdbeChangeP4	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){$/;"	f	signature:(Vdbe *p, int addr, const char *zP4, int n)
sqlite3VdbeChangeP4	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe*, int addr, const char *zP4, int N);$/;"	p	file:	signature:(Vdbe*, int addr, const char *zP4, int N)
sqlite3VdbeChangeP5	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u8 val){$/;"	f	signature:(Vdbe *p, u8 val)
sqlite3VdbeChangeP5	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe*, u8 P5);$/;"	p	file:	signature:(Vdbe*, u8 P5)
sqlite3VdbeChangeToNoop	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeToNoop(Vdbe *p, int addr){$/;"	f	signature:(Vdbe *p, int addr)
sqlite3VdbeChangeToNoop	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeToNoop(Vdbe*, int addr);$/;"	p	file:	signature:(Vdbe*, int addr)
sqlite3VdbeCheckFk	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckFk(Vdbe *, int);$/;"	p	file:	signature:(Vdbe *, int)
sqlite3VdbeCheckFk	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckFk(Vdbe *p, int deferred){$/;"	f	signature:(Vdbe *p, int deferred)
sqlite3VdbeCheckFk	sqlite3.c	14490;"	d	file:
sqlite3VdbeCheckMemInvariants	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckMemInvariants(Mem *p){$/;"	f	signature:(Mem *p)
sqlite3VdbeCheckMemInvariants	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckMemInvariants(Mem*);$/;"	p	file:	signature:(Mem*)
sqlite3VdbeClearObject	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeClearObject(sqlite3 *db, Vdbe *p){$/;"	f	signature:(sqlite3 *db, Vdbe *p)
sqlite3VdbeClearObject	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeClearObject(sqlite3*,Vdbe*);$/;"	p	file:	signature:(sqlite3*,Vdbe*)
sqlite3VdbeCloseStatement	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCloseStatement(Vdbe *, int);$/;"	p	file:	signature:(Vdbe *, int)
sqlite3VdbeCloseStatement	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCloseStatement(Vdbe *p, int eOp){$/;"	f	signature:(Vdbe *p, int eOp)
sqlite3VdbeComment	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3VdbeComment(Vdbe*, const char*, ...);$/;"	p	file:	signature:(Vdbe*, const char*, ...)
sqlite3VdbeComment	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeComment(Vdbe *p, const char *zFormat, ...){$/;"	f	signature:(Vdbe *p, const char *zFormat, ...)
sqlite3VdbeCountChanges	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeCountChanges(Vdbe *v){$/;"	f	signature:(Vdbe *v)
sqlite3VdbeCountChanges	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeCountChanges(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbeCreate	sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3VdbeCreate	sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(Parse*);$/;"	p	file:	signature:(Parse*)
sqlite3VdbeCurrentAddr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(Vdbe *p){$/;"	f	signature:(Vdbe *p)
sqlite3VdbeCurrentAddr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbeCursorMoveto	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor *p){$/;"	f	signature:(VdbeCursor *p)
sqlite3VdbeCursorMoveto	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor*);$/;"	p	file:	signature:(VdbeCursor*)
sqlite3VdbeCursorRestore	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorRestore(VdbeCursor *p){$/;"	f	signature:(VdbeCursor *p)
sqlite3VdbeCursorRestore	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorRestore(VdbeCursor*);$/;"	p	file:	signature:(VdbeCursor*)
sqlite3VdbeDb	sqlite3.c	/^SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(Vdbe *v){$/;"	f	signature:(Vdbe *v)
sqlite3VdbeDb	sqlite3.c	/^SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbeDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDelete(Vdbe *p){$/;"	f	signature:(Vdbe *p)
sqlite3VdbeDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDelete(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbeDeleteAuxData	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(Vdbe *pVdbe, int iOp, int mask){$/;"	f	signature:(Vdbe *pVdbe, int iOp, int mask)
sqlite3VdbeDeleteAuxData	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(Vdbe*, int, int);$/;"	p	file:	signature:(Vdbe*, int, int)
sqlite3VdbeDeletePriorOpcode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeDeletePriorOpcode(Vdbe *p, u8 op){$/;"	f	signature:(Vdbe *p, u8 op)
sqlite3VdbeDeletePriorOpcode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeDeletePriorOpcode(Vdbe*, u8 op);$/;"	p	file:	signature:(Vdbe*, u8 op)
sqlite3VdbeEnter	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3VdbeEnter(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbeEnter	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeEnter(Vdbe *p){$/;"	f	signature:(Vdbe *p)
sqlite3VdbeEnter	sqlite3.c	14478;"	d	file:
sqlite3VdbeExec	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeExec($/;"	f	signature:( Vdbe *p )
sqlite3VdbeExec	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeExec(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbeExpandSql	sqlite3.c	/^SQLITE_PRIVATE   char *sqlite3VdbeExpandSql(Vdbe*, const char*);$/;"	p	file:	signature:(Vdbe*, const char*)
sqlite3VdbeExpandSql	sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VdbeExpandSql($/;"	f	signature:( Vdbe *p, const char *zRawSql )
sqlite3VdbeFinalize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFinalize(Vdbe *p){$/;"	f	signature:(Vdbe *p)
sqlite3VdbeFinalize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFinalize(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbeFindCompare	sqlite3.c	/^SQLITE_PRIVATE RecordCompare sqlite3VdbeFindCompare(UnpackedRecord *p){$/;"	f	signature:(UnpackedRecord *p)
sqlite3VdbeFindCompare	sqlite3.c	/^SQLITE_PRIVATE RecordCompare sqlite3VdbeFindCompare(UnpackedRecord*);$/;"	p	file:	signature:(UnpackedRecord*)
sqlite3VdbeFrameDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFrameDelete(VdbeFrame *p){$/;"	f	signature:(VdbeFrame *p)
sqlite3VdbeFrameDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFrameDelete(VdbeFrame*);$/;"	p	file:	signature:(VdbeFrame*)
sqlite3VdbeFrameRestore	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFrameRestore(VdbeFrame *);$/;"	p	file:	signature:(VdbeFrame *)
sqlite3VdbeFrameRestore	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){$/;"	f	signature:(VdbeFrame *pFrame)
sqlite3VdbeFreeCursor	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFreeCursor(Vdbe *, VdbeCursor*);$/;"	p	file:	signature:(Vdbe *, VdbeCursor*)
sqlite3VdbeFreeCursor	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFreeCursor(Vdbe *p, VdbeCursor *pCx){$/;"	f	signature:(Vdbe *p, VdbeCursor *pCx)
sqlite3VdbeGetBoundValue	sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetBoundValue(Vdbe *v, int iVar, u8 aff){$/;"	f	signature:(Vdbe *v, int iVar, u8 aff)
sqlite3VdbeGetBoundValue	sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetBoundValue(Vdbe*, int, u8);$/;"	p	file:	signature:(Vdbe*, int, u8)
sqlite3VdbeGetOp	sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(Vdbe *p, int addr){$/;"	f	signature:(Vdbe *p, int addr)
sqlite3VdbeGetOp	sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(Vdbe*, int);$/;"	p	file:	signature:(Vdbe*, int)
sqlite3VdbeHalt	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeHalt(Vdbe *p){$/;"	f	signature:(Vdbe *p)
sqlite3VdbeHalt	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeHalt(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbeIOTraceSql	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3VdbeIOTraceSql(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbeIOTraceSql	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(Vdbe *p){$/;"	f	signature:(Vdbe *p)
sqlite3VdbeIOTraceSql	sqlite3.c	13285;"	d	file:
sqlite3VdbeIdxKeyCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare($/;"	f	signature:( sqlite3 *db, VdbeCursor *pC, UnpackedRecord *pUnpacked, int *res )
sqlite3VdbeIdxKeyCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare(sqlite3*,VdbeCursor*,UnpackedRecord*,int*);$/;"	p	file:	signature:(sqlite3*,VdbeCursor*,UnpackedRecord*,int*)
sqlite3VdbeIdxRowid	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxRowid(sqlite3 *db, BtCursor *pCur, i64 *rowid){$/;"	f	signature:(sqlite3 *db, BtCursor *pCur, i64 *rowid)
sqlite3VdbeIdxRowid	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxRowid(sqlite3*, BtCursor*, i64*);$/;"	p	file:	signature:(sqlite3*, BtCursor*, i64*)
sqlite3VdbeIntValue	sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem *pMem){$/;"	f	signature:(Mem *pMem)
sqlite3VdbeIntValue	sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem*);$/;"	p	file:	signature:(Mem*)
sqlite3VdbeIntegerAffinity	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(Mem *pMem){$/;"	f	signature:(Mem *pMem)
sqlite3VdbeIntegerAffinity	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(Mem*);$/;"	p	file:	signature:(Mem*)
sqlite3VdbeJumpHere	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeJumpHere(Vdbe *p, int addr){$/;"	f	signature:(Vdbe *p, int addr)
sqlite3VdbeJumpHere	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeJumpHere(Vdbe*, int addr);$/;"	p	file:	signature:(Vdbe*, int addr)
sqlite3VdbeLeave	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3VdbeLeave(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbeLeave	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLeave(Vdbe *p){$/;"	f	signature:(Vdbe *p)
sqlite3VdbeLeave	sqlite3.c	14479;"	d	file:
sqlite3VdbeLinkSubProgram	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLinkSubProgram(Vdbe *, SubProgram *);$/;"	p	file:	signature:(Vdbe *, SubProgram *)
sqlite3VdbeLinkSubProgram	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLinkSubProgram(Vdbe *pVdbe, SubProgram *p){$/;"	f	signature:(Vdbe *pVdbe, SubProgram *p)
sqlite3VdbeList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeList($/;"	f	signature:( Vdbe *p )
sqlite3VdbeList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeList(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbeMakeLabel	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMakeLabel(Vdbe *v){$/;"	f	signature:(Vdbe *v)
sqlite3VdbeMakeLabel	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMakeLabel(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbeMakeReady	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMakeReady($/;"	f	signature:( Vdbe *p, Parse *pParse )
sqlite3VdbeMakeReady	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMakeReady(Vdbe*,Parse*);$/;"	p	file:	signature:(Vdbe*,Parse*)
sqlite3VdbeMemAboutToChange	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemAboutToChange(Vdbe *pVdbe, Mem *pMem){$/;"	f	signature:(Vdbe *pVdbe, Mem *pMem)
sqlite3VdbeMemAboutToChange	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemAboutToChange(Vdbe*,Mem*);$/;"	p	file:	signature:(Vdbe*,Mem*)
sqlite3VdbeMemCast	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemCast(Mem *pMem, u8 aff, u8 encoding){$/;"	f	signature:(Mem *pMem, u8 aff, u8 encoding)
sqlite3VdbeMemCast	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemCast(Mem*,u8,u8);$/;"	p	file:	signature:(Mem*,u8,u8)
sqlite3VdbeMemClearAndResize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int n);$/;"	p	file:	signature:(Mem *pMem, int n)
sqlite3VdbeMemClearAndResize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){$/;"	f	signature:(Mem *pMem, int szNew)
sqlite3VdbeMemCopy	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemCopy(Mem *pTo, const Mem *pFrom){$/;"	f	signature:(Mem *pTo, const Mem *pFrom)
sqlite3VdbeMemCopy	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemCopy(Mem*, const Mem*);$/;"	p	file:	signature:(Mem*, const Mem*)
sqlite3VdbeMemExpandBlob	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3VdbeMemExpandBlob(Mem *);$/;"	p	file:	signature:(Mem *)
sqlite3VdbeMemExpandBlob	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(Mem *pMem){$/;"	f	signature:(Mem *pMem)
sqlite3VdbeMemExpandBlob	sqlite3.c	14504;"	d	file:
sqlite3VdbeMemFinalize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFinalize(Mem *pMem, FuncDef *pFunc){$/;"	f	signature:(Mem *pMem, FuncDef *pFunc)
sqlite3VdbeMemFinalize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFinalize(Mem*, FuncDef*);$/;"	p	file:	signature:(Mem*, FuncDef*)
sqlite3VdbeMemFromBtree	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFromBtree($/;"	f	signature:( BtCursor *pCur, u32 offset, u32 amt, int key, Mem *pMem )
sqlite3VdbeMemFromBtree	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFromBtree(BtCursor*,u32,u32,int,Mem*);$/;"	p	file:	signature:(BtCursor*,u32,u32,int,Mem*)
sqlite3VdbeMemGrow	sqlite3.c	/^SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemGrow(Mem *pMem, int n, int bPreserve){$/;"	f	signature:(Mem *pMem, int n, int bPreserve)
sqlite3VdbeMemGrow	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemGrow(Mem *pMem, int n, int preserve);$/;"	p	file:	signature:(Mem *pMem, int n, int preserve)
sqlite3VdbeMemHandleBom	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(Mem *pMem);$/;"	p	file:	signature:(Mem *pMem)
sqlite3VdbeMemHandleBom	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(Mem *pMem){$/;"	f	signature:(Mem *pMem)
sqlite3VdbeMemInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemInit(Mem *pMem, sqlite3 *db, u16 flags){$/;"	f	signature:(Mem *pMem, sqlite3 *db, u16 flags)
sqlite3VdbeMemInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemInit(Mem*,sqlite3*,u16);$/;"	p	file:	signature:(Mem*,sqlite3*,u16)
sqlite3VdbeMemIntegerify	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(Mem *pMem){$/;"	f	signature:(Mem *pMem)
sqlite3VdbeMemIntegerify	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(Mem*);$/;"	p	file:	signature:(Mem*)
sqlite3VdbeMemMakeWriteable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(Mem *pMem){$/;"	f	signature:(Mem *pMem)
sqlite3VdbeMemMakeWriteable	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(Mem*);$/;"	p	file:	signature:(Mem*)
sqlite3VdbeMemMove	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemMove(Mem *pTo, Mem *pFrom){$/;"	f	signature:(Mem *pTo, Mem *pFrom)
sqlite3VdbeMemMove	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemMove(Mem*, Mem*);$/;"	p	file:	signature:(Mem*, Mem*)
sqlite3VdbeMemNulTerminate	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(Mem *pMem){$/;"	f	signature:(Mem *pMem)
sqlite3VdbeMemNulTerminate	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(Mem*);$/;"	p	file:	signature:(Mem*)
sqlite3VdbeMemNumerify	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNumerify(Mem *pMem){$/;"	f	signature:(Mem *pMem)
sqlite3VdbeMemNumerify	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNumerify(Mem*);$/;"	p	file:	signature:(Mem*)
sqlite3VdbeMemPrettyPrint	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf);$/;"	p	file:	signature:(Mem *pMem, char *zBuf)
sqlite3VdbeMemPrettyPrint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){$/;"	f	signature:(Mem *pMem, char *zBuf)
sqlite3VdbeMemRealify	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemRealify(Mem *pMem){$/;"	f	signature:(Mem *pMem)
sqlite3VdbeMemRealify	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemRealify(Mem*);$/;"	p	file:	signature:(Mem*)
sqlite3VdbeMemRelease	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemRelease(Mem *p);$/;"	p	file:	signature:(Mem *p)
sqlite3VdbeMemRelease	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemRelease(Mem *p){$/;"	f	signature:(Mem *p)
sqlite3VdbeMemSetDouble	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3VdbeMemSetDouble(Mem*, double);$/;"	p	file:	signature:(Mem*, double)
sqlite3VdbeMemSetDouble	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(Mem *pMem, double val){$/;"	f	signature:(Mem *pMem, double val)
sqlite3VdbeMemSetDouble	sqlite3.c	14435;"	d	file:
sqlite3VdbeMemSetInt64	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(Mem *pMem, i64 val){$/;"	f	signature:(Mem *pMem, i64 val)
sqlite3VdbeMemSetInt64	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(Mem*, i64);$/;"	p	file:	signature:(Mem*, i64)
sqlite3VdbeMemSetNull	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetNull(Mem *pMem){$/;"	f	signature:(Mem *pMem)
sqlite3VdbeMemSetNull	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetNull(Mem*);$/;"	p	file:	signature:(Mem*)
sqlite3VdbeMemSetRowSet	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(Mem *pMem){$/;"	f	signature:(Mem *pMem)
sqlite3VdbeMemSetRowSet	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(Mem*);$/;"	p	file:	signature:(Mem*)
sqlite3VdbeMemSetStr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemSetStr($/;"	f	signature:( Mem *pMem, const char *z, int n, u8 enc, void (*xDel)(void*) )
sqlite3VdbeMemSetStr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemSetStr(Mem*, const char*, int, u8, void(*)(void*));$/;"	p	file:	signature:(Mem*, const char*, int, u8, void(*)(void*))
sqlite3VdbeMemSetZeroBlob	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(Mem *pMem, int n){$/;"	f	signature:(Mem *pMem, int n)
sqlite3VdbeMemSetZeroBlob	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(Mem*,int);$/;"	p	file:	signature:(Mem*,int)
sqlite3VdbeMemShallowCopy	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(Mem *pTo, const Mem *pFrom, int srcType){$/;"	f	signature:(Mem *pTo, const Mem *pFrom, int srcType)
sqlite3VdbeMemShallowCopy	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(Mem*, const Mem*, int);$/;"	p	file:	signature:(Mem*, const Mem*, int)
sqlite3VdbeMemStringify	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemStringify(Mem *pMem, u8 enc, u8 bForce){$/;"	f	signature:(Mem *pMem, u8 enc, u8 bForce)
sqlite3VdbeMemStringify	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemStringify(Mem*, u8, u8);$/;"	p	file:	signature:(Mem*, u8, u8)
sqlite3VdbeMemTooBig	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemTooBig(Mem *p){$/;"	f	signature:(Mem *p)
sqlite3VdbeMemTooBig	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemTooBig(Mem*);$/;"	p	file:	signature:(Mem*)
sqlite3VdbeMemTranslate	sqlite3.c	/^SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemTranslate(Mem *pMem, u8 desiredEnc){$/;"	f	signature:(Mem *pMem, u8 desiredEnc)
sqlite3VdbeMemTranslate	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemTranslate(Mem*, u8);$/;"	p	file:	signature:(Mem*, u8)
sqlite3VdbeNoopComment	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3VdbeNoopComment(Vdbe*, const char*, ...);$/;"	p	file:	signature:(Vdbe*, const char*, ...)
sqlite3VdbeNoopComment	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeNoopComment(Vdbe *p, const char *zFormat, ...){$/;"	f	signature:(Vdbe *p, const char *zFormat, ...)
sqlite3VdbeParameterIndex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeParameterIndex(Vdbe *p, const char *zName, int nName){$/;"	f	signature:(Vdbe *p, const char *zName, int nName)
sqlite3VdbeParameterIndex	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeParameterIndex(Vdbe*, const char*, int);$/;"	p	file:	signature:(Vdbe*, const char*, int)
sqlite3VdbePrintOp	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintOp(FILE *pOut, int pc, Op *pOp){$/;"	f	signature:(FILE *pOut, int pc, Op *pOp)
sqlite3VdbePrintOp	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintOp(FILE*, int, Op*);$/;"	p	file:	signature:(FILE*, int, Op*)
sqlite3VdbePrintSql	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3VdbePrintSql(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbePrintSql	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintSql(Vdbe *p){$/;"	f	signature:(Vdbe *p)
sqlite3VdbeRealValue	sqlite3.c	/^SQLITE_PRIVATE double sqlite3VdbeRealValue(Mem *pMem){$/;"	f	signature:(Mem *pMem)
sqlite3VdbeRealValue	sqlite3.c	/^SQLITE_PRIVATE double sqlite3VdbeRealValue(Mem*);$/;"	p	file:	signature:(Mem*)
sqlite3VdbeRecordCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeRecordCompare($/;"	f	signature:( int nKey1, const void *pKey1, UnpackedRecord *pPKey2 )
sqlite3VdbeRecordCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeRecordCompare(int,const void*,UnpackedRecord*);$/;"	p	file:	signature:(int,const void*,UnpackedRecord*)
sqlite3VdbeRecordUnpack	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRecordUnpack($/;"	f	signature:( KeyInfo *pKeyInfo, int nKey, const void *pKey, UnpackedRecord *p )
sqlite3VdbeRecordUnpack	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRecordUnpack(KeyInfo*,int,const void*,UnpackedRecord*);$/;"	p	file:	signature:(KeyInfo*,int,const void*,UnpackedRecord*)
sqlite3VdbeReset	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeReset(Vdbe *p){$/;"	f	signature:(Vdbe *p)
sqlite3VdbeReset	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeReset(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbeResetStepResult	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResetStepResult(Vdbe *p){$/;"	f	signature:(Vdbe *p)
sqlite3VdbeResetStepResult	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResetStepResult(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbeResolveLabel	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResolveLabel(Vdbe *v, int x){$/;"	f	signature:(Vdbe *v, int x)
sqlite3VdbeResolveLabel	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResolveLabel(Vdbe*, int);$/;"	p	file:	signature:(Vdbe*, int)
sqlite3VdbeRewind	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRewind(Vdbe *p){$/;"	f	signature:(Vdbe *p)
sqlite3VdbeRewind	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRewind(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbeRunOnlyOnce	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(Vdbe *p){$/;"	f	signature:(Vdbe *p)
sqlite3VdbeRunOnlyOnce	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(Vdbe*);$/;"	p	file:	signature:(Vdbe*)
sqlite3VdbeSerialGet	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialGet($/;"	f	signature:( const unsigned char *buf, u32 serial_type, Mem *pMem )
sqlite3VdbeSerialGet	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialGet(const unsigned char*, u32, Mem*);$/;"	p	file:	signature:(const unsigned char*, u32, Mem*)
sqlite3VdbeSerialPut	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(u8 *buf, Mem *pMem, u32 serial_type){$/;"	f	signature:(u8 *buf, Mem *pMem, u32 serial_type)
sqlite3VdbeSerialPut	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(unsigned char*, Mem*, u32);$/;"	p	file:	signature:(unsigned char*, Mem*, u32)
sqlite3VdbeSerialType	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialType(Mem *pMem, int file_format){$/;"	f	signature:(Mem *pMem, int file_format)
sqlite3VdbeSerialType	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialType(Mem*, int);$/;"	p	file:	signature:(Mem*, int)
sqlite3VdbeSerialTypeLen	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(u32 serial_type){$/;"	f	signature:(u32 serial_type)
sqlite3VdbeSerialTypeLen	sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(u32);$/;"	p	file:
sqlite3VdbeSetChanges	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetChanges(sqlite3 *, int);$/;"	p	file:	signature:(sqlite3 *, int)
sqlite3VdbeSetChanges	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetChanges(sqlite3 *db, int nChange){$/;"	f	signature:(sqlite3 *db, int nChange)
sqlite3VdbeSetColName	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSetColName($/;"	f	signature:( Vdbe *p, int idx, int var, const char *zName, void (*xDel)(void*) )
sqlite3VdbeSetColName	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSetColName(Vdbe*, int, int, const char *, void(*)(void*));$/;"	p	file:	signature:(Vdbe*, int, int, const char *, void(*)(void*))
sqlite3VdbeSetLineNumber	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3VdbeSetLineNumber(Vdbe*,int);$/;"	p	file:	signature:(Vdbe*,int)
sqlite3VdbeSetLineNumber	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetLineNumber(Vdbe *v, int iLine){$/;"	f	signature:(Vdbe *v, int iLine)
sqlite3VdbeSetNumCols	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetNumCols(Vdbe *p, int nResColumn){$/;"	f	signature:(Vdbe *p, int nResColumn)
sqlite3VdbeSetNumCols	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetNumCols(Vdbe*,int);$/;"	p	file:	signature:(Vdbe*,int)
sqlite3VdbeSetP4KeyInfo	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetP4KeyInfo(Parse *pParse, Index *pIdx){$/;"	f	signature:(Parse *pParse, Index *pIdx)
sqlite3VdbeSetP4KeyInfo	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetP4KeyInfo(Parse*, Index*);$/;"	p	file:	signature:(Parse*, Index*)
sqlite3VdbeSetSql	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetSql(Vdbe *p, const char *z, int n, int isPrepareV2){$/;"	f	signature:(Vdbe *p, const char *z, int n, int isPrepareV2)
sqlite3VdbeSetSql	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetSql(Vdbe*, const char *z, int n, int);$/;"	p	file:	signature:(Vdbe*, const char *z, int n, int)
sqlite3VdbeSetVarmask	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetVarmask(Vdbe *v, int iVar){$/;"	f	signature:(Vdbe *v, int iVar)
sqlite3VdbeSetVarmask	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetVarmask(Vdbe*, int);$/;"	p	file:	signature:(Vdbe*, int)
sqlite3VdbeSorterClose	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSorterClose(sqlite3 *, VdbeCursor *);$/;"	p	file:	signature:(sqlite3 *, VdbeCursor *)
sqlite3VdbeSorterClose	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSorterClose(sqlite3 *db, VdbeCursor *pCsr){$/;"	f	signature:(sqlite3 *db, VdbeCursor *pCsr)
sqlite3VdbeSorterCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterCompare($/;"	f	signature:( const VdbeCursor *pCsr, Mem *pVal, int nKeyCol, int *pRes )
sqlite3VdbeSorterCompare	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterCompare(const VdbeCursor *, Mem *, int, int *);$/;"	p	file:	signature:(const VdbeCursor *, Mem *, int, int *)
sqlite3VdbeSorterInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterInit($/;"	f	signature:( sqlite3 *db, int nField, VdbeCursor *pCsr )
sqlite3VdbeSorterInit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterInit(sqlite3 *, int, VdbeCursor *);$/;"	p	file:	signature:(sqlite3 *, int, VdbeCursor *)
sqlite3VdbeSorterNext	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterNext(sqlite3 *, const VdbeCursor *, int *);$/;"	p	file:	signature:(sqlite3 *, const VdbeCursor *, int *)
sqlite3VdbeSorterNext	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterNext(sqlite3 *db, const VdbeCursor *pCsr, int *pbEof){$/;"	f	signature:(sqlite3 *db, const VdbeCursor *pCsr, int *pbEof)
sqlite3VdbeSorterReset	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSorterReset(sqlite3 *, VdbeSorter *);$/;"	p	file:	signature:(sqlite3 *, VdbeSorter *)
sqlite3VdbeSorterReset	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSorterReset(sqlite3 *db, VdbeSorter *pSorter){$/;"	f	signature:(sqlite3 *db, VdbeSorter *pSorter)
sqlite3VdbeSorterRewind	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRewind(const VdbeCursor *, int *);$/;"	p	file:	signature:(const VdbeCursor *, int *)
sqlite3VdbeSorterRewind	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRewind(const VdbeCursor *pCsr, int *pbEof){$/;"	f	signature:(const VdbeCursor *pCsr, int *pbEof)
sqlite3VdbeSorterRowkey	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRowkey(const VdbeCursor *, Mem *);$/;"	p	file:	signature:(const VdbeCursor *, Mem *)
sqlite3VdbeSorterRowkey	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRowkey(const VdbeCursor *pCsr, Mem *pOut){$/;"	f	signature:(const VdbeCursor *pCsr, Mem *pOut)
sqlite3VdbeSorterWrite	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterWrite($/;"	f	signature:( const VdbeCursor *pCsr, Mem *pVal )
sqlite3VdbeSorterWrite	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterWrite(const VdbeCursor *, Mem *);$/;"	p	file:	signature:(const VdbeCursor *, Mem *)
sqlite3VdbeSwap	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSwap(Vdbe *pA, Vdbe *pB){$/;"	f	signature:(Vdbe *pA, Vdbe *pB)
sqlite3VdbeSwap	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSwap(Vdbe*,Vdbe*);$/;"	p	file:	signature:(Vdbe*,Vdbe*)
sqlite3VdbeTakeOpArray	sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(Vdbe *p, int *pnOp, int *pnMaxArg){$/;"	f	signature:(Vdbe *p, int *pnOp, int *pnMaxArg)
sqlite3VdbeTakeOpArray	sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(Vdbe*, int*, int*);$/;"	p	file:	signature:(Vdbe*, int*, int*)
sqlite3VdbeTransferError	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeTransferError(Vdbe *p);$/;"	p	file:	signature:(Vdbe *p)
sqlite3VdbeTransferError	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeTransferError(Vdbe *p){$/;"	f	signature:(Vdbe *p)
sqlite3VdbeUsesBtree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeUsesBtree(Vdbe *p, int i){$/;"	f	signature:(Vdbe *p, int i)
sqlite3VdbeUsesBtree	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeUsesBtree(Vdbe*, int);$/;"	p	file:	signature:(Vdbe*, int)
sqlite3ViewGetColumnNames	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3ViewGetColumnNames(Parse*,Table*);$/;"	p	file:	signature:(Parse*,Table*)
sqlite3ViewGetColumnNames	sqlite3.c	/^SQLITE_PRIVATE int sqlite3ViewGetColumnNames(Parse *pParse, Table *pTable){$/;"	f	signature:(Parse *pParse, Table *pTable)
sqlite3ViewGetColumnNames	sqlite3.c	12716;"	d	file:
sqlite3VtabArgExtend	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgExtend(Parse *pParse, Token *p){$/;"	f	signature:(Parse *pParse, Token *p)
sqlite3VtabArgExtend	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgExtend(Parse*, Token*);$/;"	p	file:	signature:(Parse*, Token*)
sqlite3VtabArgInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgInit(Parse *pParse){$/;"	f	signature:(Parse *pParse)
sqlite3VtabArgInit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgInit(Parse*);$/;"	p	file:	signature:(Parse*)
sqlite3VtabBegin	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabBegin(sqlite3 *, VTable *);$/;"	p	file:	signature:(sqlite3 *, VTable *)
sqlite3VtabBegin	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabBegin(sqlite3 *db, VTable *pVTab){$/;"	f	signature:(sqlite3 *db, VTable *pVTab)
sqlite3VtabBeginParse	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabBeginParse($/;"	f	signature:( Parse *pParse, Token *pName1, Token *pName2, Token *pModuleName, int ifNotExists )
sqlite3VtabBeginParse	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabBeginParse(Parse*, Token*, Token*, Token*, int);$/;"	p	file:	signature:(Parse*, Token*, Token*, Token*, int)
sqlite3VtabCallConnect	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallConnect(Parse *pParse, Table *pTab){$/;"	f	signature:(Parse *pParse, Table *pTab)
sqlite3VtabCallConnect	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallConnect(Parse*, Table*);$/;"	p	file:	signature:(Parse*, Table*)
sqlite3VtabCallCreate	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallCreate(sqlite3 *db, int iDb, const char *zTab, char **pzErr){$/;"	f	signature:(sqlite3 *db, int iDb, const char *zTab, char **pzErr)
sqlite3VtabCallCreate	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallCreate(sqlite3*, int, const char *, char **);$/;"	p	file:	signature:(sqlite3*, int, const char *, char **)
sqlite3VtabCallDestroy	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallDestroy(sqlite3 *db, int iDb, const char *zTab){$/;"	f	signature:(sqlite3 *db, int iDb, const char *zTab)
sqlite3VtabCallDestroy	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallDestroy(sqlite3*, int, const char *);$/;"	p	file:	signature:(sqlite3*, int, const char *)
sqlite3VtabClear	sqlite3.c	/^SQLITE_PRIVATE    void sqlite3VtabClear(sqlite3 *db, Table*);$/;"	p	file:	signature:(sqlite3 *db, Table*)
sqlite3VtabClear	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabClear(sqlite3 *db, Table *p){$/;"	f	signature:(sqlite3 *db, Table *p)
sqlite3VtabClear	sqlite3.c	13111;"	d	file:
sqlite3VtabCommit	sqlite3.c	/^SQLITE_PRIVATE    int sqlite3VtabCommit(sqlite3 *db);$/;"	p	file:	signature:(sqlite3 *db)
sqlite3VtabCommit	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCommit(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3VtabCommit	sqlite3.c	13114;"	d	file:
sqlite3VtabDisconnect	sqlite3.c	/^SQLITE_PRIVATE    void sqlite3VtabDisconnect(sqlite3 *db, Table *p);$/;"	p	file:	signature:(sqlite3 *db, Table *p)
sqlite3VtabDisconnect	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabDisconnect(sqlite3 *db, Table *p){$/;"	f	signature:(sqlite3 *db, Table *p)
sqlite3VtabFinishParse	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){$/;"	f	signature:(Parse *pParse, Token *pEnd)
sqlite3VtabFinishParse	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabFinishParse(Parse*, Token*);$/;"	p	file:	signature:(Parse*, Token*)
sqlite3VtabImportErrmsg	sqlite3.c	/^SQLITE_PRIVATE    void sqlite3VtabImportErrmsg(Vdbe*, sqlite3_vtab*);$/;"	p	file:	signature:(Vdbe*, sqlite3_vtab*)
sqlite3VtabImportErrmsg	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabImportErrmsg(Vdbe *p, sqlite3_vtab *pVtab){$/;"	f	signature:(Vdbe *p, sqlite3_vtab *pVtab)
sqlite3VtabInSync	sqlite3.c	13115;"	d	file:
sqlite3VtabInSync	sqlite3.c	13133;"	d	file:
sqlite3VtabLock	sqlite3.c	/^SQLITE_PRIVATE    void sqlite3VtabLock(VTable *);$/;"	p	file:	signature:(VTable *)
sqlite3VtabLock	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabLock(VTable *pVTab){$/;"	f	signature:(VTable *pVTab)
sqlite3VtabLock	sqlite3.c	13116;"	d	file:
sqlite3VtabMakeWritable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabMakeWritable(Parse *pParse, Table *pTab){$/;"	f	signature:(Parse *pParse, Table *pTab)
sqlite3VtabMakeWritable	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabMakeWritable(Parse*,Table*);$/;"	p	file:	signature:(Parse*,Table*)
sqlite3VtabOverloadFunction	sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction($/;"	f	signature:( sqlite3 *db, FuncDef *pDef, int nArg, Expr *pExpr )
sqlite3VtabOverloadFunction	sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction(sqlite3 *,FuncDef*, int nArg, Expr*);$/;"	p	file:	signature:(sqlite3 *,FuncDef*, int nArg, Expr*)
sqlite3VtabRollback	sqlite3.c	/^SQLITE_PRIVATE    int sqlite3VtabRollback(sqlite3 *db);$/;"	p	file:	signature:(sqlite3 *db)
sqlite3VtabRollback	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabRollback(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3VtabRollback	sqlite3.c	13113;"	d	file:
sqlite3VtabSavepoint	sqlite3.c	/^SQLITE_PRIVATE    int sqlite3VtabSavepoint(sqlite3 *, int, int);$/;"	p	file:	signature:(sqlite3 *, int, int)
sqlite3VtabSavepoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSavepoint(sqlite3 *db, int op, int iSavepoint){$/;"	f	signature:(sqlite3 *db, int op, int iSavepoint)
sqlite3VtabSavepoint	sqlite3.c	13119;"	d	file:
sqlite3VtabSync	sqlite3.c	/^SQLITE_PRIVATE    int sqlite3VtabSync(sqlite3 *db, Vdbe*);$/;"	p	file:	signature:(sqlite3 *db, Vdbe*)
sqlite3VtabSync	sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSync(sqlite3 *db, Vdbe *p){$/;"	f	signature:(sqlite3 *db, Vdbe *p)
sqlite3VtabSync	sqlite3.c	13112;"	d	file:
sqlite3VtabUnlock	sqlite3.c	/^SQLITE_PRIVATE    void sqlite3VtabUnlock(VTable *);$/;"	p	file:	signature:(VTable *)
sqlite3VtabUnlock	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlock(VTable *pVTab){$/;"	f	signature:(VTable *pVTab)
sqlite3VtabUnlock	sqlite3.c	13117;"	d	file:
sqlite3VtabUnlockList	sqlite3.c	/^SQLITE_PRIVATE    void sqlite3VtabUnlockList(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3VtabUnlockList	sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlockList(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3VtabUnlockList	sqlite3.c	13118;"	d	file:
sqlite3WalBeginReadTransaction	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginReadTransaction(Wal *pWal, int *);$/;"	p	file:	signature:(Wal *pWal, int *)
sqlite3WalBeginReadTransaction	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){$/;"	f	signature:(Wal *pWal, int *pChanged)
sqlite3WalBeginReadTransaction	sqlite3.c	40782;"	d	file:
sqlite3WalBeginWriteTransaction	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginWriteTransaction(Wal *pWal);$/;"	p	file:	signature:(Wal *pWal)
sqlite3WalBeginWriteTransaction	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginWriteTransaction(Wal *pWal){$/;"	f	signature:(Wal *pWal)
sqlite3WalBeginWriteTransaction	sqlite3.c	40785;"	d	file:
sqlite3WalCallback	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCallback(Wal *pWal);$/;"	p	file:	signature:(Wal *pWal)
sqlite3WalCallback	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCallback(Wal *pWal){$/;"	f	signature:(Wal *pWal)
sqlite3WalCallback	sqlite3.c	40792;"	d	file:
sqlite3WalCheckpoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCheckpoint($/;"	f	signature:( Wal *pWal, int eMode, int (*xBusy)(void*), void *pBusyArg, int sync_flags, int nBuf, u8 *zBuf, int *pnLog, int *pnCkpt )
sqlite3WalCheckpoint	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCheckpoint($/;"	p	file:	signature:( Wal *pWal, int eMode, int (*xBusy)(void*), void *pBusyArg, int sync_flags, int nBuf, u8 *zBuf, int *pnLog, int *pnCkpt )
sqlite3WalCheckpoint	sqlite3.c	40791;"	d	file:
sqlite3WalClose	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalClose($/;"	f	signature:( Wal *pWal, int sync_flags, int nBuf, u8 *zBuf )
sqlite3WalClose	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalClose(Wal *pWal, int sync_flags, int, u8 *);$/;"	p	file:	signature:(Wal *pWal, int sync_flags, int, u8 *)
sqlite3WalClose	sqlite3.c	40781;"	d	file:
sqlite3WalDbsize	sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3WalDbsize(Wal *pWal);$/;"	p	file:	signature:(Wal *pWal)
sqlite3WalDbsize	sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3WalDbsize(Wal *pWal){$/;"	f	signature:(Wal *pWal)
sqlite3WalDbsize	sqlite3.c	40784;"	d	file:
sqlite3WalDefaultHook	sqlite3.c	/^SQLITE_PRIVATE   int sqlite3WalDefaultHook(void*,sqlite3*,const char*,int);$/;"	p	file:	signature:(void*,sqlite3*,const char*,int)
sqlite3WalDefaultHook	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalDefaultHook($/;"	f	signature:( void *pClientData, sqlite3 *db, const char *zDb, int nFrame )
sqlite3WalEndReadTransaction	sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalEndReadTransaction(Wal *pWal);$/;"	p	file:	signature:(Wal *pWal)
sqlite3WalEndReadTransaction	sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalEndReadTransaction(Wal *pWal){$/;"	f	signature:(Wal *pWal)
sqlite3WalEndReadTransaction	sqlite3.c	40783;"	d	file:
sqlite3WalEndWriteTransaction	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalEndWriteTransaction(Wal *pWal);$/;"	p	file:	signature:(Wal *pWal)
sqlite3WalEndWriteTransaction	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalEndWriteTransaction(Wal *pWal){$/;"	f	signature:(Wal *pWal)
sqlite3WalEndWriteTransaction	sqlite3.c	40786;"	d	file:
sqlite3WalExclusiveMode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalExclusiveMode(Wal *pWal, int op);$/;"	p	file:	signature:(Wal *pWal, int op)
sqlite3WalExclusiveMode	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalExclusiveMode(Wal *pWal, int op){$/;"	f	signature:(Wal *pWal, int op)
sqlite3WalExclusiveMode	sqlite3.c	40793;"	d	file:
sqlite3WalFindFrame	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFindFrame($/;"	f	signature:( Wal *pWal, Pgno pgno, u32 *piRead )
sqlite3WalFindFrame	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFindFrame(Wal *, Pgno, u32 *);$/;"	p	file:	signature:(Wal *, Pgno, u32 *)
sqlite3WalFindFrame	sqlite3.c	40796;"	d	file:
sqlite3WalFrames	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFrames($/;"	f	signature:( Wal *pWal, int szPage, PgHdr *pList, Pgno nTruncate, int isCommit, int sync_flags )
sqlite3WalFrames	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFrames(Wal *pWal, int, PgHdr *, Pgno, int, int);$/;"	p	file:	signature:(Wal *pWal, int, PgHdr *, Pgno, int, int)
sqlite3WalFrames	sqlite3.c	40790;"	d	file:
sqlite3WalFramesize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFramesize(Wal *pWal);$/;"	p	file:	signature:(Wal *pWal)
sqlite3WalFramesize	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFramesize(Wal *pWal){$/;"	f	signature:(Wal *pWal)
sqlite3WalFramesize	sqlite3.c	40795;"	d	file:
sqlite3WalHeapMemory	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalHeapMemory(Wal *pWal);$/;"	p	file:	signature:(Wal *pWal)
sqlite3WalHeapMemory	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalHeapMemory(Wal *pWal){$/;"	f	signature:(Wal *pWal)
sqlite3WalHeapMemory	sqlite3.c	40794;"	d	file:
sqlite3WalLimit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalLimit(Wal *pWal, i64 iLimit){$/;"	f	signature:(Wal *pWal, i64 iLimit)
sqlite3WalLimit	sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalLimit(Wal*, i64);$/;"	p	file:	signature:(Wal*, i64)
sqlite3WalLimit	sqlite3.c	40780;"	d	file:
sqlite3WalOpen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalOpen($/;"	f	signature:( sqlite3_vfs *pVfs, sqlite3_file *pDbFd, const char *zWalName, int bNoShm, i64 mxWalSize, Wal **ppWal )
sqlite3WalOpen	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalOpen(sqlite3_vfs*, sqlite3_file*, const char *, int, i64, Wal**);$/;"	p	file:	signature:(sqlite3_vfs*, sqlite3_file*, const char *, int, i64, Wal**)
sqlite3WalOpen	sqlite3.c	40779;"	d	file:
sqlite3WalReadFrame	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalReadFrame($/;"	f	signature:( Wal *pWal, u32 iRead, int nOut, u8 *pOut )
sqlite3WalReadFrame	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalReadFrame(Wal *, u32, int, u8 *);$/;"	p	file:	signature:(Wal *, u32, int, u8 *)
sqlite3WalSavepoint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalSavepoint(Wal *pWal, u32 *aWalData);$/;"	p	file:	signature:(Wal *pWal, u32 *aWalData)
sqlite3WalSavepoint	sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalSavepoint(Wal *pWal, u32 *aWalData){$/;"	f	signature:(Wal *pWal, u32 *aWalData)
sqlite3WalSavepoint	sqlite3.c	40788;"	d	file:
sqlite3WalSavepointUndo	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalSavepointUndo(Wal *pWal, u32 *aWalData);$/;"	p	file:	signature:(Wal *pWal, u32 *aWalData)
sqlite3WalSavepointUndo	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalSavepointUndo(Wal *pWal, u32 *aWalData){$/;"	f	signature:(Wal *pWal, u32 *aWalData)
sqlite3WalSavepointUndo	sqlite3.c	40789;"	d	file:
sqlite3WalTrace	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalTrace = 0;$/;"	v
sqlite3WalUndo	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalUndo(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx);$/;"	p	file:	signature:(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx)
sqlite3WalUndo	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalUndo(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx){$/;"	f	signature:(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx)
sqlite3WalUndo	sqlite3.c	40787;"	d	file:
sqlite3WalkExpr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExpr(Walker *pWalker, Expr *pExpr){$/;"	f	signature:(Walker *pWalker, Expr *pExpr)
sqlite3WalkExpr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExpr(Walker*, Expr*);$/;"	p	file:	signature:(Walker*, Expr*)
sqlite3WalkExprList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExprList(Walker *pWalker, ExprList *p){$/;"	f	signature:(Walker *pWalker, ExprList *p)
sqlite3WalkExprList	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExprList(Walker*, ExprList*);$/;"	p	file:	signature:(Walker*, ExprList*)
sqlite3WalkSelect	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelect(Walker *pWalker, Select *p){$/;"	f	signature:(Walker *pWalker, Select *p)
sqlite3WalkSelect	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelect(Walker*, Select*);$/;"	p	file:	signature:(Walker*, Select*)
sqlite3WalkSelectExpr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectExpr(Walker *pWalker, Select *p){$/;"	f	signature:(Walker *pWalker, Select *p)
sqlite3WalkSelectExpr	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectExpr(Walker*, Select*);$/;"	p	file:	signature:(Walker*, Select*)
sqlite3WalkSelectFrom	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectFrom(Walker *pWalker, Select *p){$/;"	f	signature:(Walker *pWalker, Select *p)
sqlite3WalkSelectFrom	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectFrom(Walker*, Select*);$/;"	p	file:	signature:(Walker*, Select*)
sqlite3WhereBegin	sqlite3.c	/^SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin($/;"	f	signature:( Parse *pParse, SrcList *pTabList, Expr *pWhere, ExprList *pOrderBy, ExprList *pResultSet, u16 wctrlFlags, int iIdxCur )
sqlite3WhereBegin	sqlite3.c	/^SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin(Parse*,SrcList*,Expr*,ExprList*,ExprList*,u16,int);$/;"	p	file:	signature:(Parse*,SrcList*,Expr*,ExprList*,ExprList*,u16,int)
sqlite3WhereBreakLabel	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereBreakLabel(WhereInfo *pWInfo){$/;"	f	signature:(WhereInfo *pWInfo)
sqlite3WhereBreakLabel	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereBreakLabel(WhereInfo*);$/;"	p	file:	signature:(WhereInfo*)
sqlite3WhereContinueLabel	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereContinueLabel(WhereInfo *pWInfo){$/;"	f	signature:(WhereInfo *pWInfo)
sqlite3WhereContinueLabel	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereContinueLabel(WhereInfo*);$/;"	p	file:	signature:(WhereInfo*)
sqlite3WhereEnd	sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereEnd(WhereInfo *pWInfo){$/;"	f	signature:(WhereInfo *pWInfo)
sqlite3WhereEnd	sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereEnd(WhereInfo*);$/;"	p	file:	signature:(WhereInfo*)
sqlite3WhereIsDistinct	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsDistinct(WhereInfo *pWInfo){$/;"	f	signature:(WhereInfo *pWInfo)
sqlite3WhereIsDistinct	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsDistinct(WhereInfo*);$/;"	p	file:	signature:(WhereInfo*)
sqlite3WhereIsOrdered	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsOrdered(WhereInfo *pWInfo){$/;"	f	signature:(WhereInfo *pWInfo)
sqlite3WhereIsOrdered	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsOrdered(WhereInfo*);$/;"	p	file:	signature:(WhereInfo*)
sqlite3WhereIsSorted	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsSorted(WhereInfo *pWInfo){$/;"	f	signature:(WhereInfo *pWInfo)
sqlite3WhereIsSorted	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsSorted(WhereInfo*);$/;"	p	file:	signature:(WhereInfo*)
sqlite3WhereOkOnePass	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereOkOnePass(WhereInfo *pWInfo, int *aiCur){$/;"	f	signature:(WhereInfo *pWInfo, int *aiCur)
sqlite3WhereOkOnePass	sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereOkOnePass(WhereInfo*, int*);$/;"	p	file:	signature:(WhereInfo*, int*)
sqlite3WhereOutputRowCount	sqlite3.c	/^SQLITE_PRIVATE u64 sqlite3WhereOutputRowCount(WhereInfo *pWInfo){$/;"	f	signature:(WhereInfo *pWInfo)
sqlite3WhereOutputRowCount	sqlite3.c	/^SQLITE_PRIVATE u64 sqlite3WhereOutputRowCount(WhereInfo*);$/;"	p	file:	signature:(WhereInfo*)
sqlite3WhereTrace	sqlite3.c	/^\/***\/ int sqlite3WhereTrace = 0;$/;"	v
sqlite3Win32Wait	sqlite3.c	/^SQLITE_PRIVATE DWORD sqlite3Win32Wait(HANDLE hObject); \/* os_win.c *\/$/;"	p	file:	signature:(HANDLE hObject)
sqlite3Win32Wait	sqlite3.c	/^SQLITE_PRIVATE DWORD sqlite3Win32Wait(HANDLE hObject){$/;"	f	signature:(HANDLE hObject)
sqlite3WithAdd	sqlite3.c	/^SQLITE_PRIVATE   With *sqlite3WithAdd(Parse*,With*,Token*,ExprList*,Select*);$/;"	p	file:	signature:(Parse*,With*,Token*,ExprList*,Select*)
sqlite3WithAdd	sqlite3.c	/^SQLITE_PRIVATE With *sqlite3WithAdd($/;"	f	signature:( Parse *pParse, With *pWith, Token *pName, ExprList *pArglist, Select *pQuery )
sqlite3WithDelete	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3WithDelete(sqlite3*,With*);$/;"	p	file:	signature:(sqlite3*,With*)
sqlite3WithDelete	sqlite3.c	/^SQLITE_PRIVATE void sqlite3WithDelete(sqlite3 *db, With *pWith){$/;"	f	signature:(sqlite3 *db, With *pWith)
sqlite3WithDelete	sqlite3.c	13165;"	d	file:
sqlite3WithPush	sqlite3.c	/^SQLITE_PRIVATE   void sqlite3WithPush(Parse*, With*, u8);$/;"	p	file:	signature:(Parse*, With*, u8)
sqlite3WithPush	sqlite3.c	/^SQLITE_PRIVATE void sqlite3WithPush(Parse *pParse, With *pWith, u8 bFree){$/;"	f	signature:(Parse *pParse, With *pWith, u8 bFree)
sqlite3WithPush	sqlite3.c	13164;"	d	file:
sqlite3XPrintf	sqlite3.c	/^SQLITE_PRIVATE void sqlite3XPrintf(StrAccum *p, u32 bFlags, const char *zFormat, ...){$/;"	f	signature:(StrAccum *p, u32 bFlags, const char *zFormat, ...)
sqlite3XPrintf	sqlite3.c	/^SQLITE_PRIVATE void sqlite3XPrintf(StrAccum*, u32, const char*, ...);$/;"	p	file:	signature:(StrAccum*, u32, const char*, ...)
sqlite3_activate_cerod	sqlite3.c	/^SQLITE_API void sqlite3_activate_cerod($/;"	p	file:	signature:( const char *zPassPhrase )
sqlite3_activate_cerod	sqlite3.h	/^SQLITE_API void sqlite3_activate_cerod($/;"	p	signature:( const char *zPassPhrase )
sqlite3_activate_see	sqlite3.c	/^SQLITE_API void sqlite3_activate_see($/;"	p	file:	signature:( const char *zPassPhrase )
sqlite3_activate_see	sqlite3.h	/^SQLITE_API void sqlite3_activate_see($/;"	p	signature:( const char *zPassPhrase )
sqlite3_aggregate_context	sqlite3.c	/^SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){$/;"	f	signature:(sqlite3_context *p, int nByte)
sqlite3_aggregate_context	sqlite3.c	/^SQLITE_API void *sqlite3_aggregate_context(sqlite3_context*, int nBytes);$/;"	p	file:	signature:(sqlite3_context*, int nBytes)
sqlite3_aggregate_context	sqlite3.c	99799;"	d	file:
sqlite3_aggregate_context	sqlite3.h	/^SQLITE_API void *sqlite3_aggregate_context(sqlite3_context*, int nBytes);$/;"	p	signature:(sqlite3_context*, int nBytes)
sqlite3_aggregate_count	sqlite3.c	/^SQLITE_API SQLITE_DEPRECATED int sqlite3_aggregate_count(sqlite3_context*);$/;"	p	file:	signature:(sqlite3_context*)
sqlite3_aggregate_count	sqlite3.c	/^SQLITE_API int sqlite3_aggregate_count(sqlite3_context *p){$/;"	f	signature:(sqlite3_context *p)
sqlite3_aggregate_count	sqlite3.c	99801;"	d	file:
sqlite3_aggregate_count	sqlite3.h	/^SQLITE_API SQLITE_DEPRECATED int sqlite3_aggregate_count(sqlite3_context*);$/;"	p	signature:(sqlite3_context*)
sqlite3_api_routines	sqlite3.c	/^struct sqlite3_api_routines {$/;"	s	file:
sqlite3_api_routines	sqlite3.c	/^typedef struct sqlite3_api_routines sqlite3_api_routines;$/;"	t	typeref:struct:sqlite3_api_routines	file:
sqlite3_api_routines::aggregate_context	sqlite3.c	/^  void * (*aggregate_context)(sqlite3_context*,int nBytes);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::aggregate_count	sqlite3.c	/^  int  (*aggregate_count)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::auto_extension	sqlite3.c	/^  int (*auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::backup_finish	sqlite3.c	/^  int (*backup_finish)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::backup_init	sqlite3.c	/^  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::backup_pagecount	sqlite3.c	/^  int (*backup_pagecount)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::backup_remaining	sqlite3.c	/^  int (*backup_remaining)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::backup_step	sqlite3.c	/^  int (*backup_step)(sqlite3_backup*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::bind_blob	sqlite3.c	/^  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::bind_blob64	sqlite3.c	/^  int (*bind_blob64)(sqlite3_stmt*,int,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::bind_double	sqlite3.c	/^  int  (*bind_double)(sqlite3_stmt*,int,double);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::bind_int	sqlite3.c	/^  int  (*bind_int)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::bind_int64	sqlite3.c	/^  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::bind_null	sqlite3.c	/^  int  (*bind_null)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::bind_parameter_count	sqlite3.c	/^  int  (*bind_parameter_count)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::bind_parameter_index	sqlite3.c	/^  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::bind_parameter_name	sqlite3.c	/^  const char * (*bind_parameter_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::bind_text	sqlite3.c	/^  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::bind_text16	sqlite3.c	/^  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::bind_text64	sqlite3.c	/^  int (*bind_text64)(sqlite3_stmt*,int,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::bind_value	sqlite3.c	/^  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::bind_zeroblob	sqlite3.c	/^  int (*bind_zeroblob)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::blob_bytes	sqlite3.c	/^  int (*blob_bytes)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::blob_close	sqlite3.c	/^  int (*blob_close)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::blob_open	sqlite3.c	/^  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::blob_read	sqlite3.c	/^  int (*blob_read)(sqlite3_blob*,void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::blob_reopen	sqlite3.c	/^  int (*blob_reopen)(sqlite3_blob*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::blob_write	sqlite3.c	/^  int (*blob_write)(sqlite3_blob*,const void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::busy_handler	sqlite3.c	/^  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::busy_timeout	sqlite3.c	/^  int  (*busy_timeout)(sqlite3*,int ms);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::cancel_auto_extension	sqlite3.c	/^  int (*cancel_auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::changes	sqlite3.c	/^  int  (*changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::clear_bindings	sqlite3.c	/^  int (*clear_bindings)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::close	sqlite3.c	/^  int  (*close)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::close_v2	sqlite3.c	/^  int (*close_v2)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::collation_needed	sqlite3.c	/^  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::collation_needed16	sqlite3.c	/^  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_blob	sqlite3.c	/^  const void * (*column_blob)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_bytes	sqlite3.c	/^  int  (*column_bytes)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_bytes16	sqlite3.c	/^  int  (*column_bytes16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_count	sqlite3.c	/^  int  (*column_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_database_name	sqlite3.c	/^  const char * (*column_database_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_database_name16	sqlite3.c	/^  const void * (*column_database_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_decltype	sqlite3.c	/^  const char * (*column_decltype)(sqlite3_stmt*,int i);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_decltype16	sqlite3.c	/^  const void * (*column_decltype16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_double	sqlite3.c	/^  double  (*column_double)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_int	sqlite3.c	/^  int  (*column_int)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_int64	sqlite3.c	/^  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_name	sqlite3.c	/^  const char * (*column_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_name16	sqlite3.c	/^  const void * (*column_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_origin_name	sqlite3.c	/^  const char * (*column_origin_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_origin_name16	sqlite3.c	/^  const void * (*column_origin_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_table_name	sqlite3.c	/^  const char * (*column_table_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_table_name16	sqlite3.c	/^  const void * (*column_table_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_text	sqlite3.c	/^  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_text16	sqlite3.c	/^  const void * (*column_text16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_type	sqlite3.c	/^  int  (*column_type)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::column_value	sqlite3.c	/^  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::commit_hook	sqlite3.c	/^  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::compileoption_get	sqlite3.c	/^  const char *(*compileoption_get)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::compileoption_used	sqlite3.c	/^  int (*compileoption_used)(const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::complete	sqlite3.c	/^  int  (*complete)(const char*sql);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::complete16	sqlite3.c	/^  int  (*complete16)(const void*sql);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::context_db_handle	sqlite3.c	/^  sqlite3 *(*context_db_handle)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::create_collation	sqlite3.c	/^  int  (*create_collation)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::create_collation16	sqlite3.c	/^  int  (*create_collation16)(sqlite3*,const void*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::create_collation_v2	sqlite3.c	/^  int (*create_collation_v2)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::create_function	sqlite3.c	/^  int  (*create_function)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::create_function16	sqlite3.c	/^  int  (*create_function16)(sqlite3*,const void*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::create_function_v2	sqlite3.c	/^  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::create_module	sqlite3.c	/^  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::create_module_v2	sqlite3.c	/^  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::data_count	sqlite3.c	/^  int  (*data_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::db_config	sqlite3.c	/^  int (*db_config)(sqlite3*,int,...);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::db_filename	sqlite3.c	/^  const char *(*db_filename)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::db_handle	sqlite3.c	/^  sqlite3 * (*db_handle)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::db_mutex	sqlite3.c	/^  sqlite3_mutex *(*db_mutex)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::db_readonly	sqlite3.c	/^  int (*db_readonly)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::db_release_memory	sqlite3.c	/^  int (*db_release_memory)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::db_status	sqlite3.c	/^  int (*db_status)(sqlite3*,int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::declare_vtab	sqlite3.c	/^  int (*declare_vtab)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::enable_shared_cache	sqlite3.c	/^  int  (*enable_shared_cache)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::errcode	sqlite3.c	/^  int  (*errcode)(sqlite3*db);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::errmsg	sqlite3.c	/^  const char * (*errmsg)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::errmsg16	sqlite3.c	/^  const void * (*errmsg16)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::errstr	sqlite3.c	/^  const char *(*errstr)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::exec	sqlite3.c	/^  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::expired	sqlite3.c	/^  int  (*expired)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::extended_errcode	sqlite3.c	/^  int (*extended_errcode)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::extended_result_codes	sqlite3.c	/^  int (*extended_result_codes)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::file_control	sqlite3.c	/^  int (*file_control)(sqlite3*,const char*,int,void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::finalize	sqlite3.c	/^  int  (*finalize)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::free	sqlite3.c	/^  void  (*free)(void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::free_table	sqlite3.c	/^  void  (*free_table)(char**result);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::get_autocommit	sqlite3.c	/^  int  (*get_autocommit)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::get_auxdata	sqlite3.c	/^  void * (*get_auxdata)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::get_table	sqlite3.c	/^  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::global_recover	sqlite3.c	/^  int  (*global_recover)(void);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::interruptx	sqlite3.c	/^  void  (*interruptx)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::last_insert_rowid	sqlite3.c	/^  sqlite_int64  (*last_insert_rowid)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::libversion	sqlite3.c	/^  const char * (*libversion)(void);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::libversion_number	sqlite3.c	/^  int  (*libversion_number)(void);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::limit	sqlite3.c	/^  int (*limit)(sqlite3*,int,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::load_extension	sqlite3.c	/^  int (*load_extension)(sqlite3*,const char*,const char*,char**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::log	sqlite3.c	/^  void (*log)(int,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::malloc	sqlite3.c	/^  void *(*malloc)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::malloc64	sqlite3.c	/^  void *(*malloc64)(sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::memory_highwater	sqlite3.c	/^  sqlite3_int64 (*memory_highwater)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::memory_used	sqlite3.c	/^  sqlite3_int64 (*memory_used)(void);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::mprintf	sqlite3.c	/^  char * (*mprintf)(const char*,...);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::msize	sqlite3.c	/^  sqlite3_uint64 (*msize)(void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::mutex_alloc	sqlite3.c	/^  sqlite3_mutex *(*mutex_alloc)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::mutex_enter	sqlite3.c	/^  void (*mutex_enter)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::mutex_free	sqlite3.c	/^  void (*mutex_free)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::mutex_leave	sqlite3.c	/^  void (*mutex_leave)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::mutex_try	sqlite3.c	/^  int (*mutex_try)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::next_stmt	sqlite3.c	/^  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::open	sqlite3.c	/^  int  (*open)(const char*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::open16	sqlite3.c	/^  int  (*open16)(const void*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::open_v2	sqlite3.c	/^  int (*open_v2)(const char*,sqlite3**,int,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::overload_function	sqlite3.c	/^  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::prepare	sqlite3.c	/^  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::prepare16	sqlite3.c	/^  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::prepare16_v2	sqlite3.c	/^  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::prepare_v2	sqlite3.c	/^  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::profile	sqlite3.c	/^  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::progress_handler	sqlite3.c	/^  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::randomness	sqlite3.c	/^  void (*randomness)(int,void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::realloc	sqlite3.c	/^  void *(*realloc)(void*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::realloc64	sqlite3.c	/^  void *(*realloc64)(void*,sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::release_memory	sqlite3.c	/^  int (*release_memory)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::reset	sqlite3.c	/^  int  (*reset)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::reset_auto_extension	sqlite3.c	/^  void (*reset_auto_extension)(void);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_blob	sqlite3.c	/^  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_blob64	sqlite3.c	/^  void (*result_blob64)(sqlite3_context*,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_double	sqlite3.c	/^  void  (*result_double)(sqlite3_context*,double);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_error	sqlite3.c	/^  void  (*result_error)(sqlite3_context*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_error16	sqlite3.c	/^  void  (*result_error16)(sqlite3_context*,const void*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_error_code	sqlite3.c	/^  void (*result_error_code)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_error_nomem	sqlite3.c	/^  void (*result_error_nomem)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_error_toobig	sqlite3.c	/^  void (*result_error_toobig)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_int	sqlite3.c	/^  void  (*result_int)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_int64	sqlite3.c	/^  void  (*result_int64)(sqlite3_context*,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_null	sqlite3.c	/^  void  (*result_null)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_text	sqlite3.c	/^  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_text16	sqlite3.c	/^  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_text16be	sqlite3.c	/^  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_text16le	sqlite3.c	/^  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_text64	sqlite3.c	/^  void (*result_text64)(sqlite3_context*,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_value	sqlite3.c	/^  void  (*result_value)(sqlite3_context*,sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::result_zeroblob	sqlite3.c	/^  void (*result_zeroblob)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::rollback_hook	sqlite3.c	/^  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::set_authorizer	sqlite3.c	/^  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::set_auxdata	sqlite3.c	/^  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::sleep	sqlite3.c	/^  int (*sleep)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::snprintf	sqlite3.c	/^  char * (*snprintf)(int,char*,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::soft_heap_limit	sqlite3.c	/^  void (*soft_heap_limit)(int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::soft_heap_limit64	sqlite3.c	/^  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::sourceid	sqlite3.c	/^  const char *(*sourceid)(void);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::sql	sqlite3.c	/^  const char *(*sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::status	sqlite3.c	/^  int (*status)(int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::step	sqlite3.c	/^  int  (*step)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::stmt_busy	sqlite3.c	/^  int (*stmt_busy)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::stmt_readonly	sqlite3.c	/^  int (*stmt_readonly)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::stmt_status	sqlite3.c	/^  int (*stmt_status)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::strglob	sqlite3.c	/^  int (*strglob)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::stricmp	sqlite3.c	/^  int (*stricmp)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::strnicmp	sqlite3.c	/^  int (*strnicmp)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::table_column_metadata	sqlite3.c	/^  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::test_control	sqlite3.c	/^  int (*test_control)(int, ...);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::thread_cleanup	sqlite3.c	/^  void  (*thread_cleanup)(void);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::total_changes	sqlite3.c	/^  int  (*total_changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::trace	sqlite3.c	/^  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::transfer_bindings	sqlite3.c	/^  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::unlock_notify	sqlite3.c	/^  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::update_hook	sqlite3.c	/^  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::uri_boolean	sqlite3.c	/^  int (*uri_boolean)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::uri_int64	sqlite3.c	/^  sqlite3_int64 (*uri_int64)(const char*,const char*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::uri_parameter	sqlite3.c	/^  const char *(*uri_parameter)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::user_data	sqlite3.c	/^  void * (*user_data)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::value_blob	sqlite3.c	/^  const void * (*value_blob)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::value_bytes	sqlite3.c	/^  int  (*value_bytes)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::value_bytes16	sqlite3.c	/^  int  (*value_bytes16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::value_double	sqlite3.c	/^  double  (*value_double)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::value_int	sqlite3.c	/^  int  (*value_int)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::value_int64	sqlite3.c	/^  sqlite_int64  (*value_int64)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::value_numeric_type	sqlite3.c	/^  int  (*value_numeric_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::value_text	sqlite3.c	/^  const unsigned char * (*value_text)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::value_text16	sqlite3.c	/^  const void * (*value_text16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::value_text16be	sqlite3.c	/^  const void * (*value_text16be)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::value_text16le	sqlite3.c	/^  const void * (*value_text16le)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::value_type	sqlite3.c	/^  int  (*value_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::vfs_find	sqlite3.c	/^  sqlite3_vfs *(*vfs_find)(const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::vfs_register	sqlite3.c	/^  int (*vfs_register)(sqlite3_vfs*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::vfs_unregister	sqlite3.c	/^  int (*vfs_unregister)(sqlite3_vfs*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::vmprintf	sqlite3.c	/^  char *(*vmprintf)(const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::vsnprintf	sqlite3.c	/^  char *(*vsnprintf)(int,char*,const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::vtab_config	sqlite3.c	/^  int (*vtab_config)(sqlite3*,int op,...);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::vtab_on_conflict	sqlite3.c	/^  int (*vtab_on_conflict)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::wal_autocheckpoint	sqlite3.c	/^  int (*wal_autocheckpoint)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::wal_checkpoint	sqlite3.c	/^  int (*wal_checkpoint)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::wal_checkpoint_v2	sqlite3.c	/^  int (*wal_checkpoint_v2)(sqlite3*,const char*,int,int*,int*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::wal_hook	sqlite3.c	/^  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_api_routines::xthreadsafe	sqlite3.c	/^  int (*xthreadsafe)(void);$/;"	m	struct:sqlite3_api_routines	file:	access:public
sqlite3_auto_extension	sqlite3.c	/^SQLITE_API int sqlite3_auto_extension(void (*xEntryPoint)(void));$/;"	p	file:	signature:(void (*xEntryPoint)(void))
sqlite3_auto_extension	sqlite3.c	/^SQLITE_API int sqlite3_auto_extension(void (*xInit)(void)){$/;"	f	signature:(void (*xInit)(void))
sqlite3_auto_extension	sqlite3.c	100003;"	d	file:
sqlite3_auto_extension	sqlite3.h	/^SQLITE_API int sqlite3_auto_extension(void (*xEntryPoint)(void));$/;"	p	signature:(void (*xEntryPoint)(void))
sqlite3_backup	sqlite3.c	/^struct sqlite3_backup {$/;"	s	file:
sqlite3_backup	sqlite3.c	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup	file:
sqlite3_backup	sqlite3.h	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup
sqlite3_backup::bDestLocked	sqlite3.c	/^  int bDestLocked;         \/* True once a write-transaction is open on pDest *\/$/;"	m	struct:sqlite3_backup	file:	access:public
sqlite3_backup::iDestSchema	sqlite3.c	/^  u32 iDestSchema;         \/* Original schema cookie in destination *\/$/;"	m	struct:sqlite3_backup	file:	access:public
sqlite3_backup::iNext	sqlite3.c	/^  Pgno iNext;              \/* Page number of the next source page to copy *\/$/;"	m	struct:sqlite3_backup	file:	access:public
sqlite3_backup::isAttached	sqlite3.c	/^  int isAttached;          \/* True once backup has been registered with pager *\/$/;"	m	struct:sqlite3_backup	file:	access:public
sqlite3_backup::nPagecount	sqlite3.c	/^  Pgno nPagecount;         \/* Total number of pages to copy *\/$/;"	m	struct:sqlite3_backup	file:	access:public
sqlite3_backup::nRemaining	sqlite3.c	/^  Pgno nRemaining;         \/* Number of pages left to copy *\/$/;"	m	struct:sqlite3_backup	file:	access:public
sqlite3_backup::pDest	sqlite3.c	/^  Btree *pDest;            \/* Destination b-tree file *\/$/;"	m	struct:sqlite3_backup	file:	access:public
sqlite3_backup::pDestDb	sqlite3.c	/^  sqlite3* pDestDb;        \/* Destination database handle *\/$/;"	m	struct:sqlite3_backup	file:	access:public
sqlite3_backup::pNext	sqlite3.c	/^  sqlite3_backup *pNext;   \/* Next backup associated with source pager *\/$/;"	m	struct:sqlite3_backup	file:	access:public
sqlite3_backup::pSrc	sqlite3.c	/^  Btree *pSrc;             \/* Source b-tree file *\/$/;"	m	struct:sqlite3_backup	file:	access:public
sqlite3_backup::pSrcDb	sqlite3.c	/^  sqlite3* pSrcDb;         \/* Source database handle *\/$/;"	m	struct:sqlite3_backup	file:	access:public
sqlite3_backup::rc	sqlite3.c	/^  int rc;                  \/* Backup process error code *\/$/;"	m	struct:sqlite3_backup	file:	access:public
sqlite3_backup_finish	sqlite3.c	/^SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p);$/;"	p	file:	signature:(sqlite3_backup *p)
sqlite3_backup_finish	sqlite3.c	/^SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p){$/;"	f	signature:(sqlite3_backup *p)
sqlite3_backup_finish	sqlite3.c	99964;"	d	file:
sqlite3_backup_finish	sqlite3.h	/^SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p);$/;"	p	signature:(sqlite3_backup *p)
sqlite3_backup_init	sqlite3.c	/^SQLITE_API sqlite3_backup *sqlite3_backup_init($/;"	f	signature:( sqlite3* pDestDb, const char *zDestDb, sqlite3* pSrcDb, const char *zSrcDb )
sqlite3_backup_init	sqlite3.c	/^SQLITE_API sqlite3_backup *sqlite3_backup_init($/;"	p	file:	signature:( sqlite3 *pDest, const char *zDestName, sqlite3 *pSource, const char *zSourceName )
sqlite3_backup_init	sqlite3.c	99965;"	d	file:
sqlite3_backup_init	sqlite3.h	/^SQLITE_API sqlite3_backup *sqlite3_backup_init($/;"	p	signature:( sqlite3 *pDest, const char *zDestName, sqlite3 *pSource, const char *zSourceName )
sqlite3_backup_pagecount	sqlite3.c	/^SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p);$/;"	p	file:	signature:(sqlite3_backup *p)
sqlite3_backup_pagecount	sqlite3.c	/^SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p){$/;"	f	signature:(sqlite3_backup *p)
sqlite3_backup_pagecount	sqlite3.c	99966;"	d	file:
sqlite3_backup_pagecount	sqlite3.h	/^SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p);$/;"	p	signature:(sqlite3_backup *p)
sqlite3_backup_remaining	sqlite3.c	/^SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p);$/;"	p	file:	signature:(sqlite3_backup *p)
sqlite3_backup_remaining	sqlite3.c	/^SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p){$/;"	f	signature:(sqlite3_backup *p)
sqlite3_backup_remaining	sqlite3.c	99967;"	d	file:
sqlite3_backup_remaining	sqlite3.h	/^SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p);$/;"	p	signature:(sqlite3_backup *p)
sqlite3_backup_step	sqlite3.c	/^SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage);$/;"	p	file:	signature:(sqlite3_backup *p, int nPage)
sqlite3_backup_step	sqlite3.c	/^SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage){$/;"	f	signature:(sqlite3_backup *p, int nPage)
sqlite3_backup_step	sqlite3.c	99968;"	d	file:
sqlite3_backup_step	sqlite3.h	/^SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage);$/;"	p	signature:(sqlite3_backup *p, int nPage)
sqlite3_bind_blob	sqlite3.c	/^SQLITE_API int sqlite3_bind_blob($/;"	f	signature:( sqlite3_stmt *pStmt, int i, const void *zData, int nData, void (*xDel)(void*) )
sqlite3_bind_blob	sqlite3.c	/^SQLITE_API int sqlite3_bind_blob(sqlite3_stmt*, int, const void*, int n, void(*)(void*));$/;"	p	file:	signature:(sqlite3_stmt*, int, const void*, int n, void(*)(void*))
sqlite3_bind_blob	sqlite3.c	99803;"	d	file:
sqlite3_bind_blob	sqlite3.h	/^SQLITE_API int sqlite3_bind_blob(sqlite3_stmt*, int, const void*, int n, void(*)(void*));$/;"	p	signature:(sqlite3_stmt*, int, const void*, int n, void(*)(void*))
sqlite3_bind_blob64	sqlite3.c	/^SQLITE_API int sqlite3_bind_blob64($/;"	f	signature:( sqlite3_stmt *pStmt, int i, const void *zData, sqlite3_uint64 nData, void (*xDel)(void*) )
sqlite3_bind_blob64	sqlite3.c	/^SQLITE_API int sqlite3_bind_blob64(sqlite3_stmt*, int, const void*, sqlite3_uint64,$/;"	p	file:	signature:(sqlite3_stmt*, int, const void*, sqlite3_uint64, void(*)(void*))
sqlite3_bind_blob64	sqlite3.c	100004;"	d	file:
sqlite3_bind_blob64	sqlite3.h	/^SQLITE_API int sqlite3_bind_blob64(sqlite3_stmt*, int, const void*, sqlite3_uint64,$/;"	p	signature:(sqlite3_stmt*, int, const void*, sqlite3_uint64, void(*)(void*))
sqlite3_bind_double	sqlite3.c	/^SQLITE_API int sqlite3_bind_double(sqlite3_stmt *pStmt, int i, double rValue){$/;"	f	signature:(sqlite3_stmt *pStmt, int i, double rValue)
sqlite3_bind_double	sqlite3.c	/^SQLITE_API int sqlite3_bind_double(sqlite3_stmt*, int, double);$/;"	p	file:	signature:(sqlite3_stmt*, int, double)
sqlite3_bind_double	sqlite3.c	99804;"	d	file:
sqlite3_bind_double	sqlite3.h	/^SQLITE_API int sqlite3_bind_double(sqlite3_stmt*, int, double);$/;"	p	signature:(sqlite3_stmt*, int, double)
sqlite3_bind_int	sqlite3.c	/^SQLITE_API int sqlite3_bind_int(sqlite3_stmt *p, int i, int iValue){$/;"	f	signature:(sqlite3_stmt *p, int i, int iValue)
sqlite3_bind_int	sqlite3.c	/^SQLITE_API int sqlite3_bind_int(sqlite3_stmt*, int, int);$/;"	p	file:	signature:(sqlite3_stmt*, int, int)
sqlite3_bind_int	sqlite3.c	99805;"	d	file:
sqlite3_bind_int	sqlite3.h	/^SQLITE_API int sqlite3_bind_int(sqlite3_stmt*, int, int);$/;"	p	signature:(sqlite3_stmt*, int, int)
sqlite3_bind_int64	sqlite3.c	/^SQLITE_API int sqlite3_bind_int64(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue){$/;"	f	signature:(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue)
sqlite3_bind_int64	sqlite3.c	/^SQLITE_API int sqlite3_bind_int64(sqlite3_stmt*, int, sqlite3_int64);$/;"	p	file:	signature:(sqlite3_stmt*, int, sqlite3_int64)
sqlite3_bind_int64	sqlite3.c	99806;"	d	file:
sqlite3_bind_int64	sqlite3.h	/^SQLITE_API int sqlite3_bind_int64(sqlite3_stmt*, int, sqlite3_int64);$/;"	p	signature:(sqlite3_stmt*, int, sqlite3_int64)
sqlite3_bind_null	sqlite3.c	/^SQLITE_API int sqlite3_bind_null(sqlite3_stmt *pStmt, int i){$/;"	f	signature:(sqlite3_stmt *pStmt, int i)
sqlite3_bind_null	sqlite3.c	/^SQLITE_API int sqlite3_bind_null(sqlite3_stmt*, int);$/;"	p	file:	signature:(sqlite3_stmt*, int)
sqlite3_bind_null	sqlite3.c	99807;"	d	file:
sqlite3_bind_null	sqlite3.h	/^SQLITE_API int sqlite3_bind_null(sqlite3_stmt*, int);$/;"	p	signature:(sqlite3_stmt*, int)
sqlite3_bind_parameter_count	sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt *pStmt){$/;"	f	signature:(sqlite3_stmt *pStmt)
sqlite3_bind_parameter_count	sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt*);$/;"	p	file:	signature:(sqlite3_stmt*)
sqlite3_bind_parameter_count	sqlite3.c	99808;"	d	file:
sqlite3_bind_parameter_count	sqlite3.h	/^SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt*);$/;"	p	signature:(sqlite3_stmt*)
sqlite3_bind_parameter_index	sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt *pStmt, const char *zName){$/;"	f	signature:(sqlite3_stmt *pStmt, const char *zName)
sqlite3_bind_parameter_index	sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt*, const char *zName);$/;"	p	file:	signature:(sqlite3_stmt*, const char *zName)
sqlite3_bind_parameter_index	sqlite3.c	99809;"	d	file:
sqlite3_bind_parameter_index	sqlite3.h	/^SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt*, const char *zName);$/;"	p	signature:(sqlite3_stmt*, const char *zName)
sqlite3_bind_parameter_name	sqlite3.c	/^SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt *pStmt, int i){$/;"	f	signature:(sqlite3_stmt *pStmt, int i)
sqlite3_bind_parameter_name	sqlite3.c	/^SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt*, int);$/;"	p	file:	signature:(sqlite3_stmt*, int)
sqlite3_bind_parameter_name	sqlite3.c	99810;"	d	file:
sqlite3_bind_parameter_name	sqlite3.h	/^SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt*, int);$/;"	p	signature:(sqlite3_stmt*, int)
sqlite3_bind_text	sqlite3.c	/^SQLITE_API int sqlite3_bind_text( $/;"	f	signature:( sqlite3_stmt *pStmt, int i, const char *zData, int nData, void (*xDel)(void*) )
sqlite3_bind_text	sqlite3.c	/^SQLITE_API int sqlite3_bind_text(sqlite3_stmt*,int,const char*,int,void(*)(void*));$/;"	p	file:	signature:(sqlite3_stmt*,int,const char*,int,void(*)(void*))
sqlite3_bind_text	sqlite3.c	99811;"	d	file:
sqlite3_bind_text	sqlite3.h	/^SQLITE_API int sqlite3_bind_text(sqlite3_stmt*,int,const char*,int,void(*)(void*));$/;"	p	signature:(sqlite3_stmt*,int,const char*,int,void(*)(void*))
sqlite3_bind_text16	sqlite3.c	/^SQLITE_API int sqlite3_bind_text16($/;"	f	signature:( sqlite3_stmt *pStmt, int i, const void *zData, int nData, void (*xDel)(void*) )
sqlite3_bind_text16	sqlite3.c	/^SQLITE_API int sqlite3_bind_text16(sqlite3_stmt*, int, const void*, int, void(*)(void*));$/;"	p	file:	signature:(sqlite3_stmt*, int, const void*, int, void(*)(void*))
sqlite3_bind_text16	sqlite3.c	100060;"	d	file:
sqlite3_bind_text16	sqlite3.c	99812;"	d	file:
sqlite3_bind_text16	sqlite3.h	/^SQLITE_API int sqlite3_bind_text16(sqlite3_stmt*, int, const void*, int, void(*)(void*));$/;"	p	signature:(sqlite3_stmt*, int, const void*, int, void(*)(void*))
sqlite3_bind_text64	sqlite3.c	/^SQLITE_API int sqlite3_bind_text64( $/;"	f	signature:( sqlite3_stmt *pStmt, int i, const char *zData, sqlite3_uint64 nData, void (*xDel)(void*), unsigned char enc )
sqlite3_bind_text64	sqlite3.c	/^SQLITE_API int sqlite3_bind_text64(sqlite3_stmt*, int, const char*, sqlite3_uint64,$/;"	p	file:	signature:(sqlite3_stmt*, int, const char*, sqlite3_uint64, void(*)(void*), unsigned char encoding)
sqlite3_bind_text64	sqlite3.c	100005;"	d	file:
sqlite3_bind_text64	sqlite3.h	/^SQLITE_API int sqlite3_bind_text64(sqlite3_stmt*, int, const char*, sqlite3_uint64,$/;"	p	signature:(sqlite3_stmt*, int, const char*, sqlite3_uint64, void(*)(void*), unsigned char encoding)
sqlite3_bind_value	sqlite3.c	/^SQLITE_API int sqlite3_bind_value(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue){$/;"	f	signature:(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue)
sqlite3_bind_value	sqlite3.c	/^SQLITE_API int sqlite3_bind_value(sqlite3_stmt*, int, const sqlite3_value*);$/;"	p	file:	signature:(sqlite3_stmt*, int, const sqlite3_value*)
sqlite3_bind_value	sqlite3.c	99813;"	d	file:
sqlite3_bind_value	sqlite3.h	/^SQLITE_API int sqlite3_bind_value(sqlite3_stmt*, int, const sqlite3_value*);$/;"	p	signature:(sqlite3_stmt*, int, const sqlite3_value*)
sqlite3_bind_zeroblob	sqlite3.c	/^SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt *pStmt, int i, int n){$/;"	f	signature:(sqlite3_stmt *pStmt, int i, int n)
sqlite3_bind_zeroblob	sqlite3.c	/^SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt*, int, int n);$/;"	p	file:	signature:(sqlite3_stmt*, int, int n)
sqlite3_bind_zeroblob	sqlite3.c	100121;"	d	file:
sqlite3_bind_zeroblob	sqlite3.c	99929;"	d	file:
sqlite3_bind_zeroblob	sqlite3.h	/^SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt*, int, int n);$/;"	p	signature:(sqlite3_stmt*, int, int n)
sqlite3_blob	sqlite3.c	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob	file:
sqlite3_blob	sqlite3.h	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob
sqlite3_blob_bytes	sqlite3.c	/^SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *);$/;"	p	file:	signature:(sqlite3_blob *)
sqlite3_blob_bytes	sqlite3.c	/^SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *pBlob){$/;"	f	signature:(sqlite3_blob *pBlob)
sqlite3_blob_bytes	sqlite3.c	100122;"	d	file:
sqlite3_blob_bytes	sqlite3.c	99930;"	d	file:
sqlite3_blob_bytes	sqlite3.h	/^SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *);$/;"	p	signature:(sqlite3_blob *)
sqlite3_blob_close	sqlite3.c	/^SQLITE_API int sqlite3_blob_close(sqlite3_blob *);$/;"	p	file:	signature:(sqlite3_blob *)
sqlite3_blob_close	sqlite3.c	/^SQLITE_API int sqlite3_blob_close(sqlite3_blob *pBlob){$/;"	f	signature:(sqlite3_blob *pBlob)
sqlite3_blob_close	sqlite3.c	100123;"	d	file:
sqlite3_blob_close	sqlite3.c	99931;"	d	file:
sqlite3_blob_close	sqlite3.h	/^SQLITE_API int sqlite3_blob_close(sqlite3_blob *);$/;"	p	signature:(sqlite3_blob *)
sqlite3_blob_open	sqlite3.c	/^SQLITE_API int sqlite3_blob_open($/;"	f	signature:( sqlite3* db, const char *zDb, const char *zTable, const char *zColumn, sqlite_int64 iRow, int flags, sqlite3_blob **ppBlob )
sqlite3_blob_open	sqlite3.c	/^SQLITE_API int sqlite3_blob_open($/;"	p	file:	signature:( sqlite3*, const char *zDb, const char *zTable, const char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob )
sqlite3_blob_open	sqlite3.c	100124;"	d	file:
sqlite3_blob_open	sqlite3.c	99932;"	d	file:
sqlite3_blob_open	sqlite3.h	/^SQLITE_API int sqlite3_blob_open($/;"	p	signature:( sqlite3*, const char *zDb, const char *zTable, const char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob )
sqlite3_blob_read	sqlite3.c	/^SQLITE_API int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset);$/;"	p	file:	signature:(sqlite3_blob *, void *Z, int N, int iOffset)
sqlite3_blob_read	sqlite3.c	/^SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){$/;"	f	signature:(sqlite3_blob *pBlob, void *z, int n, int iOffset)
sqlite3_blob_read	sqlite3.c	100125;"	d	file:
sqlite3_blob_read	sqlite3.c	99933;"	d	file:
sqlite3_blob_read	sqlite3.h	/^SQLITE_API int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset);$/;"	p	signature:(sqlite3_blob *, void *Z, int N, int iOffset)
sqlite3_blob_reopen	sqlite3.c	/^SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_blob_reopen(sqlite3_blob *, sqlite3_int64);$/;"	p	file:	signature:(sqlite3_blob *, sqlite3_int64)
sqlite3_blob_reopen	sqlite3.c	/^SQLITE_API int sqlite3_blob_reopen(sqlite3_blob *pBlob, sqlite3_int64 iRow){$/;"	f	signature:(sqlite3_blob *pBlob, sqlite3_int64 iRow)
sqlite3_blob_reopen	sqlite3.c	100127;"	d	file:
sqlite3_blob_reopen	sqlite3.c	99985;"	d	file:
sqlite3_blob_reopen	sqlite3.h	/^SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_blob_reopen(sqlite3_blob *, sqlite3_int64);$/;"	p	signature:(sqlite3_blob *, sqlite3_int64)
sqlite3_blob_write	sqlite3.c	/^SQLITE_API int sqlite3_blob_write(sqlite3_blob *, const void *z, int n, int iOffset);$/;"	p	file:	signature:(sqlite3_blob *, const void *z, int n, int iOffset)
sqlite3_blob_write	sqlite3.c	/^SQLITE_API int sqlite3_blob_write(sqlite3_blob *pBlob, const void *z, int n, int iOffset){$/;"	f	signature:(sqlite3_blob *pBlob, const void *z, int n, int iOffset)
sqlite3_blob_write	sqlite3.c	100126;"	d	file:
sqlite3_blob_write	sqlite3.c	99934;"	d	file:
sqlite3_blob_write	sqlite3.h	/^SQLITE_API int sqlite3_blob_write(sqlite3_blob *, const void *z, int n, int iOffset);$/;"	p	signature:(sqlite3_blob *, const void *z, int n, int iOffset)
sqlite3_busy_handler	sqlite3.c	/^SQLITE_API int sqlite3_busy_handler($/;"	f	signature:( sqlite3 *db, int (*xBusy)(void*,int), void *pArg )
sqlite3_busy_handler	sqlite3.c	/^SQLITE_API int sqlite3_busy_handler(sqlite3*, int(*)(void*,int), void*);$/;"	p	file:	signature:(sqlite3*, int(*)(void*,int), void*)
sqlite3_busy_handler	sqlite3.c	99814;"	d	file:
sqlite3_busy_handler	sqlite3.h	/^SQLITE_API int sqlite3_busy_handler(sqlite3*, int(*)(void*,int), void*);$/;"	p	signature:(sqlite3*, int(*)(void*,int), void*)
sqlite3_busy_timeout	sqlite3.c	/^SQLITE_API int sqlite3_busy_timeout(sqlite3 *db, int ms){$/;"	f	signature:(sqlite3 *db, int ms)
sqlite3_busy_timeout	sqlite3.c	/^SQLITE_API int sqlite3_busy_timeout(sqlite3*, int ms);$/;"	p	file:	signature:(sqlite3*, int ms)
sqlite3_busy_timeout	sqlite3.c	99815;"	d	file:
sqlite3_busy_timeout	sqlite3.h	/^SQLITE_API int sqlite3_busy_timeout(sqlite3*, int ms);$/;"	p	signature:(sqlite3*, int ms)
sqlite3_callback	sqlite3.c	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t	file:
sqlite3_callback	sqlite3.h	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t
sqlite3_cancel_auto_extension	sqlite3.c	/^SQLITE_API int sqlite3_cancel_auto_extension(void (*xEntryPoint)(void));$/;"	p	file:	signature:(void (*xEntryPoint)(void))
sqlite3_cancel_auto_extension	sqlite3.c	/^SQLITE_API int sqlite3_cancel_auto_extension(void (*xInit)(void)){$/;"	f	signature:(void (*xInit)(void))
sqlite3_cancel_auto_extension	sqlite3.c	100006;"	d	file:
sqlite3_cancel_auto_extension	sqlite3.h	/^SQLITE_API int sqlite3_cancel_auto_extension(void (*xEntryPoint)(void));$/;"	p	signature:(void (*xEntryPoint)(void))
sqlite3_changes	sqlite3.c	/^SQLITE_API int sqlite3_changes(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3_changes	sqlite3.c	/^SQLITE_API int sqlite3_changes(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3_changes	sqlite3.c	99816;"	d	file:
sqlite3_changes	sqlite3.h	/^SQLITE_API int sqlite3_changes(sqlite3*);$/;"	p	signature:(sqlite3*)
sqlite3_clear_bindings	sqlite3.c	/^SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt *pStmt){$/;"	f	signature:(sqlite3_stmt *pStmt)
sqlite3_clear_bindings	sqlite3.c	/^SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt*);$/;"	p	file:	signature:(sqlite3_stmt*)
sqlite3_clear_bindings	sqlite3.c	99928;"	d	file:
sqlite3_clear_bindings	sqlite3.h	/^SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt*);$/;"	p	signature:(sqlite3_stmt*)
sqlite3_close	sqlite3.c	/^SQLITE_API int sqlite3_close(sqlite3 *db){ return sqlite3Close(db,0); }$/;"	f	signature:(sqlite3 *db)
sqlite3_close	sqlite3.c	/^SQLITE_API int sqlite3_close(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3_close	sqlite3.c	99817;"	d	file:
sqlite3_close	sqlite3.h	/^SQLITE_API int sqlite3_close(sqlite3*);$/;"	p	signature:(sqlite3*)
sqlite3_close_v2	sqlite3.c	/^SQLITE_API int sqlite3_close_v2(sqlite3 *db){ return sqlite3Close(db,1); }$/;"	f	signature:(sqlite3 *db)
sqlite3_close_v2	sqlite3.c	/^SQLITE_API int sqlite3_close_v2(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3_close_v2	sqlite3.c	99989;"	d	file:
sqlite3_close_v2	sqlite3.h	/^SQLITE_API int sqlite3_close_v2(sqlite3*);$/;"	p	signature:(sqlite3*)
sqlite3_collation_needed	sqlite3.c	/^SQLITE_API int sqlite3_collation_needed($/;"	f	signature:( sqlite3 *db, void *pCollNeededArg, void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*) )
sqlite3_collation_needed	sqlite3.c	/^SQLITE_API int sqlite3_collation_needed($/;"	p	file:	signature:( sqlite3*, void*, void(*)(void*,sqlite3*,int eTextRep,const char*) )
sqlite3_collation_needed	sqlite3.c	99818;"	d	file:
sqlite3_collation_needed	sqlite3.h	/^SQLITE_API int sqlite3_collation_needed($/;"	p	signature:( sqlite3*, void*, void(*)(void*,sqlite3*,int eTextRep,const char*) )
sqlite3_collation_needed16	sqlite3.c	/^SQLITE_API int sqlite3_collation_needed16($/;"	f	signature:( sqlite3 *db, void *pCollNeededArg, void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*) )
sqlite3_collation_needed16	sqlite3.c	/^SQLITE_API int sqlite3_collation_needed16($/;"	p	file:	signature:( sqlite3*, void*, void(*)(void*,sqlite3*,int eTextRep,const void*) )
sqlite3_collation_needed16	sqlite3.c	100061;"	d	file:
sqlite3_collation_needed16	sqlite3.c	99819;"	d	file:
sqlite3_collation_needed16	sqlite3.h	/^SQLITE_API int sqlite3_collation_needed16($/;"	p	signature:( sqlite3*, void*, void(*)(void*,sqlite3*,int eTextRep,const void*) )
sqlite3_column_blob	sqlite3.c	/^SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){$/;"	f	signature:(sqlite3_stmt *pStmt, int i)
sqlite3_column_blob	sqlite3.c	/^SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt*, int iCol);$/;"	p	file:	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_blob	sqlite3.c	99820;"	d	file:
sqlite3_column_blob	sqlite3.h	/^SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt*, int iCol);$/;"	p	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_bytes	sqlite3.c	/^SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){$/;"	f	signature:(sqlite3_stmt *pStmt, int i)
sqlite3_column_bytes	sqlite3.c	/^SQLITE_API int sqlite3_column_bytes(sqlite3_stmt*, int iCol);$/;"	p	file:	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_bytes	sqlite3.c	99821;"	d	file:
sqlite3_column_bytes	sqlite3.h	/^SQLITE_API int sqlite3_column_bytes(sqlite3_stmt*, int iCol);$/;"	p	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_bytes16	sqlite3.c	/^SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){$/;"	f	signature:(sqlite3_stmt *pStmt, int i)
sqlite3_column_bytes16	sqlite3.c	/^SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt*, int iCol);$/;"	p	file:	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_bytes16	sqlite3.c	99822;"	d	file:
sqlite3_column_bytes16	sqlite3.h	/^SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt*, int iCol);$/;"	p	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_count	sqlite3.c	/^SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt);$/;"	p	file:	signature:(sqlite3_stmt *pStmt)
sqlite3_column_count	sqlite3.c	/^SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt){$/;"	f	signature:(sqlite3_stmt *pStmt)
sqlite3_column_count	sqlite3.c	99823;"	d	file:
sqlite3_column_count	sqlite3.h	/^SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt);$/;"	p	signature:(sqlite3_stmt *pStmt)
sqlite3_column_database_name	sqlite3.c	/^SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){$/;"	f	signature:(sqlite3_stmt *pStmt, int N)
sqlite3_column_database_name	sqlite3.c	/^SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt*,int);$/;"	p	file:	signature:(sqlite3_stmt*,int)
sqlite3_column_database_name	sqlite3.c	100046;"	d	file:
sqlite3_column_database_name	sqlite3.c	99824;"	d	file:
sqlite3_column_database_name	sqlite3.h	/^SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt*,int);$/;"	p	signature:(sqlite3_stmt*,int)
sqlite3_column_database_name16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){$/;"	f	signature:(sqlite3_stmt *pStmt, int N)
sqlite3_column_database_name16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt*,int);$/;"	p	file:	signature:(sqlite3_stmt*,int)
sqlite3_column_database_name16	sqlite3.c	100047;"	d	file:
sqlite3_column_database_name16	sqlite3.c	100079;"	d	file:
sqlite3_column_database_name16	sqlite3.c	99825;"	d	file:
sqlite3_column_database_name16	sqlite3.h	/^SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt*,int);$/;"	p	signature:(sqlite3_stmt*,int)
sqlite3_column_decltype	sqlite3.c	/^SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){$/;"	f	signature:(sqlite3_stmt *pStmt, int N)
sqlite3_column_decltype	sqlite3.c	/^SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt*,int);$/;"	p	file:	signature:(sqlite3_stmt*,int)
sqlite3_column_decltype	sqlite3.c	100091;"	d	file:
sqlite3_column_decltype	sqlite3.c	99826;"	d	file:
sqlite3_column_decltype	sqlite3.h	/^SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt*,int);$/;"	p	signature:(sqlite3_stmt*,int)
sqlite3_column_decltype16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){$/;"	f	signature:(sqlite3_stmt *pStmt, int N)
sqlite3_column_decltype16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt*,int);$/;"	p	file:	signature:(sqlite3_stmt*,int)
sqlite3_column_decltype16	sqlite3.c	100062;"	d	file:
sqlite3_column_decltype16	sqlite3.c	100090;"	d	file:
sqlite3_column_decltype16	sqlite3.c	99827;"	d	file:
sqlite3_column_decltype16	sqlite3.h	/^SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt*,int);$/;"	p	signature:(sqlite3_stmt*,int)
sqlite3_column_double	sqlite3.c	/^SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){$/;"	f	signature:(sqlite3_stmt *pStmt, int i)
sqlite3_column_double	sqlite3.c	/^SQLITE_API double sqlite3_column_double(sqlite3_stmt*, int iCol);$/;"	p	file:	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_double	sqlite3.c	99828;"	d	file:
sqlite3_column_double	sqlite3.h	/^SQLITE_API double sqlite3_column_double(sqlite3_stmt*, int iCol);$/;"	p	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_int	sqlite3.c	/^SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){$/;"	f	signature:(sqlite3_stmt *pStmt, int i)
sqlite3_column_int	sqlite3.c	/^SQLITE_API int sqlite3_column_int(sqlite3_stmt*, int iCol);$/;"	p	file:	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_int	sqlite3.c	99829;"	d	file:
sqlite3_column_int	sqlite3.h	/^SQLITE_API int sqlite3_column_int(sqlite3_stmt*, int iCol);$/;"	p	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_int64	sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_column_int64(sqlite3_stmt*, int iCol);$/;"	p	file:	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_int64	sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){$/;"	f	signature:(sqlite3_stmt *pStmt, int i)
sqlite3_column_int64	sqlite3.c	99830;"	d	file:
sqlite3_column_int64	sqlite3.h	/^SQLITE_API sqlite3_int64 sqlite3_column_int64(sqlite3_stmt*, int iCol);$/;"	p	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_name	sqlite3.c	/^SQLITE_API const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){$/;"	f	signature:(sqlite3_stmt *pStmt, int N)
sqlite3_column_name	sqlite3.c	/^SQLITE_API const char *sqlite3_column_name(sqlite3_stmt*, int N);$/;"	p	file:	signature:(sqlite3_stmt*, int N)
sqlite3_column_name	sqlite3.c	99831;"	d	file:
sqlite3_column_name	sqlite3.h	/^SQLITE_API const char *sqlite3_column_name(sqlite3_stmt*, int N);$/;"	p	signature:(sqlite3_stmt*, int N)
sqlite3_column_name16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){$/;"	f	signature:(sqlite3_stmt *pStmt, int N)
sqlite3_column_name16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt*, int N);$/;"	p	file:	signature:(sqlite3_stmt*, int N)
sqlite3_column_name16	sqlite3.c	100063;"	d	file:
sqlite3_column_name16	sqlite3.c	99832;"	d	file:
sqlite3_column_name16	sqlite3.h	/^SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt*, int N);$/;"	p	signature:(sqlite3_stmt*, int N)
sqlite3_column_origin_name	sqlite3.c	/^SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){$/;"	f	signature:(sqlite3_stmt *pStmt, int N)
sqlite3_column_origin_name	sqlite3.c	/^SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt*,int);$/;"	p	file:	signature:(sqlite3_stmt*,int)
sqlite3_column_origin_name	sqlite3.c	100050;"	d	file:
sqlite3_column_origin_name	sqlite3.c	99833;"	d	file:
sqlite3_column_origin_name	sqlite3.h	/^SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt*,int);$/;"	p	signature:(sqlite3_stmt*,int)
sqlite3_column_origin_name16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){$/;"	f	signature:(sqlite3_stmt *pStmt, int N)
sqlite3_column_origin_name16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt*,int);$/;"	p	file:	signature:(sqlite3_stmt*,int)
sqlite3_column_origin_name16	sqlite3.c	100051;"	d	file:
sqlite3_column_origin_name16	sqlite3.c	100081;"	d	file:
sqlite3_column_origin_name16	sqlite3.c	99834;"	d	file:
sqlite3_column_origin_name16	sqlite3.h	/^SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt*,int);$/;"	p	signature:(sqlite3_stmt*,int)
sqlite3_column_table_name	sqlite3.c	/^SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){$/;"	f	signature:(sqlite3_stmt *pStmt, int N)
sqlite3_column_table_name	sqlite3.c	/^SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt*,int);$/;"	p	file:	signature:(sqlite3_stmt*,int)
sqlite3_column_table_name	sqlite3.c	100048;"	d	file:
sqlite3_column_table_name	sqlite3.c	99835;"	d	file:
sqlite3_column_table_name	sqlite3.h	/^SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt*,int);$/;"	p	signature:(sqlite3_stmt*,int)
sqlite3_column_table_name16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){$/;"	f	signature:(sqlite3_stmt *pStmt, int N)
sqlite3_column_table_name16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt*,int);$/;"	p	file:	signature:(sqlite3_stmt*,int)
sqlite3_column_table_name16	sqlite3.c	100049;"	d	file:
sqlite3_column_table_name16	sqlite3.c	100080;"	d	file:
sqlite3_column_table_name16	sqlite3.c	99836;"	d	file:
sqlite3_column_table_name16	sqlite3.h	/^SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt*,int);$/;"	p	signature:(sqlite3_stmt*,int)
sqlite3_column_text	sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){$/;"	f	signature:(sqlite3_stmt *pStmt, int i)
sqlite3_column_text	sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt*, int iCol);$/;"	p	file:	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_text	sqlite3.c	99837;"	d	file:
sqlite3_column_text	sqlite3.h	/^SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt*, int iCol);$/;"	p	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_text16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){$/;"	f	signature:(sqlite3_stmt *pStmt, int i)
sqlite3_column_text16	sqlite3.c	/^SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt*, int iCol);$/;"	p	file:	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_text16	sqlite3.c	100064;"	d	file:
sqlite3_column_text16	sqlite3.c	99838;"	d	file:
sqlite3_column_text16	sqlite3.h	/^SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt*, int iCol);$/;"	p	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_type	sqlite3.c	/^SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){$/;"	f	signature:(sqlite3_stmt *pStmt, int i)
sqlite3_column_type	sqlite3.c	/^SQLITE_API int sqlite3_column_type(sqlite3_stmt*, int iCol);$/;"	p	file:	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_type	sqlite3.c	99839;"	d	file:
sqlite3_column_type	sqlite3.h	/^SQLITE_API int sqlite3_column_type(sqlite3_stmt*, int iCol);$/;"	p	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_value	sqlite3.c	/^SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){$/;"	f	signature:(sqlite3_stmt *pStmt, int i)
sqlite3_column_value	sqlite3.c	/^SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt*, int iCol);$/;"	p	file:	signature:(sqlite3_stmt*, int iCol)
sqlite3_column_value	sqlite3.c	99840;"	d	file:
sqlite3_column_value	sqlite3.h	/^SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt*, int iCol);$/;"	p	signature:(sqlite3_stmt*, int iCol)
sqlite3_commit_hook	sqlite3.c	/^SQLITE_API void *sqlite3_commit_hook($/;"	f	signature:( sqlite3 *db, int (*xCallback)(void*), void *pArg )
sqlite3_commit_hook	sqlite3.c	/^SQLITE_API void *sqlite3_commit_hook(sqlite3*, int(*)(void*), void*);$/;"	p	file:	signature:(sqlite3*, int(*)(void*), void*)
sqlite3_commit_hook	sqlite3.c	99841;"	d	file:
sqlite3_commit_hook	sqlite3.h	/^SQLITE_API void *sqlite3_commit_hook(sqlite3*, int(*)(void*), void*);$/;"	p	signature:(sqlite3*, int(*)(void*), void*)
sqlite3_compileoption_get	sqlite3.c	/^SQLITE_API const char *sqlite3_compileoption_get(int N);$/;"	p	file:	signature:(int N)
sqlite3_compileoption_get	sqlite3.c	/^SQLITE_API const char *sqlite3_compileoption_get(int N){$/;"	f	signature:(int N)
sqlite3_compileoption_get	sqlite3.c	99969;"	d	file:
sqlite3_compileoption_get	sqlite3.h	/^SQLITE_API const char *sqlite3_compileoption_get(int N);$/;"	p	signature:(int N)
sqlite3_compileoption_used	sqlite3.c	/^SQLITE_API int sqlite3_compileoption_used(const char *zOptName);$/;"	p	file:	signature:(const char *zOptName)
sqlite3_compileoption_used	sqlite3.c	/^SQLITE_API int sqlite3_compileoption_used(const char *zOptName){$/;"	f	signature:(const char *zOptName)
sqlite3_compileoption_used	sqlite3.c	99970;"	d	file:
sqlite3_compileoption_used	sqlite3.h	/^SQLITE_API int sqlite3_compileoption_used(const char *zOptName);$/;"	p	signature:(const char *zOptName)
sqlite3_complete	sqlite3.c	/^SQLITE_API int sqlite3_complete(const char *sql);$/;"	p	file:	signature:(const char *sql)
sqlite3_complete	sqlite3.c	/^SQLITE_API int sqlite3_complete(const char *zSql){$/;"	f	signature:(const char *zSql)
sqlite3_complete	sqlite3.c	100085;"	d	file:
sqlite3_complete	sqlite3.c	99842;"	d	file:
sqlite3_complete	sqlite3.h	/^SQLITE_API int sqlite3_complete(const char *sql);$/;"	p	signature:(const char *sql)
sqlite3_complete16	sqlite3.c	/^SQLITE_API int sqlite3_complete16(const void *sql);$/;"	p	file:	signature:(const void *sql)
sqlite3_complete16	sqlite3.c	/^SQLITE_API int sqlite3_complete16(const void *zSql){$/;"	f	signature:(const void *zSql)
sqlite3_complete16	sqlite3.c	100065;"	d	file:
sqlite3_complete16	sqlite3.c	100086;"	d	file:
sqlite3_complete16	sqlite3.c	99843;"	d	file:
sqlite3_complete16	sqlite3.h	/^SQLITE_API int sqlite3_complete16(const void *sql);$/;"	p	signature:(const void *sql)
sqlite3_config	sqlite3.c	/^SQLITE_API int sqlite3_config(int op, ...){$/;"	f	signature:(int op, ...)
sqlite3_config	sqlite3.c	/^SQLITE_API int sqlite3_config(int, ...);$/;"	p	file:	signature:(int, ...)
sqlite3_config	sqlite3.h	/^SQLITE_API int sqlite3_config(int, ...);$/;"	p	signature:(int, ...)
sqlite3_context	sqlite3.c	/^struct sqlite3_context {$/;"	s	file:
sqlite3_context	sqlite3.c	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context	file:
sqlite3_context	sqlite3.h	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context
sqlite3_context::fErrorOrAux	sqlite3.c	/^  u8 fErrorOrAux;       \/* isError!=0 or pVdbe->pAuxData modified *\/$/;"	m	struct:sqlite3_context	file:	access:public
sqlite3_context::iOp	sqlite3.c	/^  int iOp;              \/* Instruction number of OP_Function *\/$/;"	m	struct:sqlite3_context	file:	access:public
sqlite3_context::isError	sqlite3.c	/^  int isError;          \/* Error code returned by the function. *\/$/;"	m	struct:sqlite3_context	file:	access:public
sqlite3_context::pFunc	sqlite3.c	/^  FuncDef *pFunc;       \/* Pointer to function information *\/$/;"	m	struct:sqlite3_context	file:	access:public
sqlite3_context::pMem	sqlite3.c	/^  Mem *pMem;            \/* Memory cell used to store aggregate context *\/$/;"	m	struct:sqlite3_context	file:	access:public
sqlite3_context::pOut	sqlite3.c	/^  Mem *pOut;            \/* The return value is stored here *\/$/;"	m	struct:sqlite3_context	file:	access:public
sqlite3_context::pVdbe	sqlite3.c	/^  Vdbe *pVdbe;          \/* The VM that owns this context *\/$/;"	m	struct:sqlite3_context	file:	access:public
sqlite3_context::skipFlag	sqlite3.c	/^  u8 skipFlag;          \/* Skip accumulator loading if true *\/$/;"	m	struct:sqlite3_context	file:	access:public
sqlite3_context_db_handle	sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context *p){$/;"	f	signature:(sqlite3_context *p)
sqlite3_context_db_handle	sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context*);$/;"	p	file:	signature:(sqlite3_context*)
sqlite3_context_db_handle	sqlite3.c	99958;"	d	file:
sqlite3_context_db_handle	sqlite3.h	/^SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context*);$/;"	p	signature:(sqlite3_context*)
sqlite3_create_collation	sqlite3.c	/^SQLITE_API int sqlite3_create_collation($/;"	f	signature:( sqlite3* db, const char *zName, int enc, void* pCtx, int(*xCompare)(void*,int,const void*,int,const void*) )
sqlite3_create_collation	sqlite3.c	/^SQLITE_API int sqlite3_create_collation($/;"	p	file:	signature:( sqlite3*, const char *zName, int eTextRep, void *pArg, int(*xCompare)(void*,int,const void*,int,const void*) )
sqlite3_create_collation	sqlite3.c	99844;"	d	file:
sqlite3_create_collation	sqlite3.h	/^SQLITE_API int sqlite3_create_collation($/;"	p	signature:( sqlite3*, const char *zName, int eTextRep, void *pArg, int(*xCompare)(void*,int,const void*,int,const void*) )
sqlite3_create_collation16	sqlite3.c	/^SQLITE_API int sqlite3_create_collation16($/;"	f	signature:( sqlite3* db, const void *zName, int enc, void* pCtx, int(*xCompare)(void*,int,const void*,int,const void*) )
sqlite3_create_collation16	sqlite3.c	/^SQLITE_API int sqlite3_create_collation16($/;"	p	file:	signature:( sqlite3*, const void *zName, int eTextRep, void *pArg, int(*xCompare)(void*,int,const void*,int,const void*) )
sqlite3_create_collation16	sqlite3.c	100066;"	d	file:
sqlite3_create_collation16	sqlite3.c	99845;"	d	file:
sqlite3_create_collation16	sqlite3.h	/^SQLITE_API int sqlite3_create_collation16($/;"	p	signature:( sqlite3*, const void *zName, int eTextRep, void *pArg, int(*xCompare)(void*,int,const void*,int,const void*) )
sqlite3_create_collation_v2	sqlite3.c	/^SQLITE_API int sqlite3_create_collation_v2($/;"	f	signature:( sqlite3* db, const char *zName, int enc, void* pCtx, int(*xCompare)(void*,int,const void*,int,const void*), void(*xDel)(void*) )
sqlite3_create_collation_v2	sqlite3.c	/^SQLITE_API int sqlite3_create_collation_v2($/;"	p	file:	signature:( sqlite3*, const char *zName, int eTextRep, void *pArg, int(*xCompare)(void*,int,const void*,int,const void*), void(*xDestroy)(void*) )
sqlite3_create_collation_v2	sqlite3.c	99935;"	d	file:
sqlite3_create_collation_v2	sqlite3.h	/^SQLITE_API int sqlite3_create_collation_v2($/;"	p	signature:( sqlite3*, const char *zName, int eTextRep, void *pArg, int(*xCompare)(void*,int,const void*,int,const void*), void(*xDestroy)(void*) )
sqlite3_create_function	sqlite3.c	/^SQLITE_API int sqlite3_create_function($/;"	f	signature:( sqlite3 *db, const char *zFunc, int nArg, int enc, void *p, void (*xFunc)(sqlite3_context*,int,sqlite3_value **), void (*xStep)(sqlite3_context*,int,sqlite3_value **), void (*xFinal)(sqlite3_context*) )
sqlite3_create_function	sqlite3.c	/^SQLITE_API int sqlite3_create_function($/;"	p	file:	signature:( sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context*,int,sqlite3_value**), void (*xStep)(sqlite3_context*,int,sqlite3_value**), void (*xFinal)(sqlite3_context*) )
sqlite3_create_function	sqlite3.c	99846;"	d	file:
sqlite3_create_function	sqlite3.h	/^SQLITE_API int sqlite3_create_function($/;"	p	signature:( sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context*,int,sqlite3_value**), void (*xStep)(sqlite3_context*,int,sqlite3_value**), void (*xFinal)(sqlite3_context*) )
sqlite3_create_function16	sqlite3.c	/^SQLITE_API int sqlite3_create_function16($/;"	f	signature:( sqlite3 *db, const void *zFunctionName, int nArg, int eTextRep, void *p, void (*xFunc)(sqlite3_context*,int,sqlite3_value**), void (*xStep)(sqlite3_context*,int,sqlite3_value**), void (*xFinal)(sqlite3_context*) )
sqlite3_create_function16	sqlite3.c	/^SQLITE_API int sqlite3_create_function16($/;"	p	file:	signature:( sqlite3 *db, const void *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context*,int,sqlite3_value**), void (*xStep)(sqlite3_context*,int,sqlite3_value**), void (*xFinal)(sqlite3_context*) )
sqlite3_create_function16	sqlite3.c	100067;"	d	file:
sqlite3_create_function16	sqlite3.c	99847;"	d	file:
sqlite3_create_function16	sqlite3.h	/^SQLITE_API int sqlite3_create_function16($/;"	p	signature:( sqlite3 *db, const void *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context*,int,sqlite3_value**), void (*xStep)(sqlite3_context*,int,sqlite3_value**), void (*xFinal)(sqlite3_context*) )
sqlite3_create_function_v2	sqlite3.c	/^SQLITE_API int sqlite3_create_function_v2($/;"	f	signature:( sqlite3 *db, const char *zFunc, int nArg, int enc, void *p, void (*xFunc)(sqlite3_context*,int,sqlite3_value **), void (*xStep)(sqlite3_context*,int,sqlite3_value **), void (*xFinal)(sqlite3_context*), void (*xDestroy)(void *) )
sqlite3_create_function_v2	sqlite3.c	/^SQLITE_API int sqlite3_create_function_v2($/;"	p	file:	signature:( sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context*,int,sqlite3_value**), void (*xStep)(sqlite3_context*,int,sqlite3_value**), void (*xFinal)(sqlite3_context*), void(*xDestroy)(void*) )
sqlite3_create_function_v2	sqlite3.c	99971;"	d	file:
sqlite3_create_function_v2	sqlite3.h	/^SQLITE_API int sqlite3_create_function_v2($/;"	p	signature:( sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context*,int,sqlite3_value**), void (*xStep)(sqlite3_context*,int,sqlite3_value**), void (*xFinal)(sqlite3_context*), void(*xDestroy)(void*) )
sqlite3_create_module	sqlite3.c	/^SQLITE_API int sqlite3_create_module($/;"	f	signature:( sqlite3 *db, const char *zName, const sqlite3_module *pModule, void *pAux )
sqlite3_create_module	sqlite3.c	/^SQLITE_API int sqlite3_create_module($/;"	p	file:	signature:( sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData )
sqlite3_create_module	sqlite3.c	100099;"	d	file:
sqlite3_create_module	sqlite3.c	99848;"	d	file:
sqlite3_create_module	sqlite3.h	/^SQLITE_API int sqlite3_create_module($/;"	p	signature:( sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData )
sqlite3_create_module_v2	sqlite3.c	/^SQLITE_API int sqlite3_create_module_v2($/;"	f	signature:( sqlite3 *db, const char *zName, const sqlite3_module *pModule, void *pAux, void (*xDestroy)(void *) )
sqlite3_create_module_v2	sqlite3.c	/^SQLITE_API int sqlite3_create_module_v2($/;"	p	file:	signature:( sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData, void(*xDestroy)(void*) )
sqlite3_create_module_v2	sqlite3.c	100100;"	d	file:
sqlite3_create_module_v2	sqlite3.c	99849;"	d	file:
sqlite3_create_module_v2	sqlite3.h	/^SQLITE_API int sqlite3_create_module_v2($/;"	p	signature:( sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData, void(*xDestroy)(void*) )
sqlite3_current_time	sqlite3.c	/^SQLITE_API int sqlite3_current_time = 0;  \/* Fake system time in seconds since 1970. *\/$/;"	v
sqlite3_data_count	sqlite3.c	/^SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt);$/;"	p	file:	signature:(sqlite3_stmt *pStmt)
sqlite3_data_count	sqlite3.c	/^SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt){$/;"	f	signature:(sqlite3_stmt *pStmt)
sqlite3_data_count	sqlite3.c	99850;"	d	file:
sqlite3_data_count	sqlite3.h	/^SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt);$/;"	p	signature:(sqlite3_stmt *pStmt)
sqlite3_data_directory	sqlite3.c	/^SQLITE_API char *sqlite3_data_directory = 0;$/;"	v
sqlite3_data_directory	sqlite3.c	/^SQLITE_API char *sqlite3_data_directory;$/;"	v
sqlite3_data_directory	sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_data_directory;$/;"	v
sqlite3_db_config	sqlite3.c	/^SQLITE_API int sqlite3_db_config(sqlite3 *db, int op, ...){$/;"	f	signature:(sqlite3 *db, int op, ...)
sqlite3_db_config	sqlite3.c	/^SQLITE_API int sqlite3_db_config(sqlite3*, int op, ...);$/;"	p	file:	signature:(sqlite3*, int op, ...)
sqlite3_db_config	sqlite3.c	99972;"	d	file:
sqlite3_db_config	sqlite3.h	/^SQLITE_API int sqlite3_db_config(sqlite3*, int op, ...);$/;"	p	signature:(sqlite3*, int op, ...)
sqlite3_db_filename	sqlite3.c	/^SQLITE_API const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName);$/;"	p	file:	signature:(sqlite3 *db, const char *zDbName)
sqlite3_db_filename	sqlite3.c	/^SQLITE_API const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName){$/;"	f	signature:(sqlite3 *db, const char *zDbName)
sqlite3_db_filename	sqlite3.c	99990;"	d	file:
sqlite3_db_filename	sqlite3.h	/^SQLITE_API const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName);$/;"	p	signature:(sqlite3 *db, const char *zDbName)
sqlite3_db_handle	sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt *pStmt){$/;"	f	signature:(sqlite3_stmt *pStmt)
sqlite3_db_handle	sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt*);$/;"	p	file:	signature:(sqlite3_stmt*)
sqlite3_db_handle	sqlite3.c	99851;"	d	file:
sqlite3_db_handle	sqlite3.h	/^SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt*);$/;"	p	signature:(sqlite3_stmt*)
sqlite3_db_mutex	sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3_db_mutex	sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3_db_mutex	sqlite3.c	99973;"	d	file:
sqlite3_db_mutex	sqlite3.h	/^SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3*);$/;"	p	signature:(sqlite3*)
sqlite3_db_readonly	sqlite3.c	/^SQLITE_API int sqlite3_db_readonly(sqlite3 *db, const char *zDbName);$/;"	p	file:	signature:(sqlite3 *db, const char *zDbName)
sqlite3_db_readonly	sqlite3.c	/^SQLITE_API int sqlite3_db_readonly(sqlite3 *db, const char *zDbName){$/;"	f	signature:(sqlite3 *db, const char *zDbName)
sqlite3_db_readonly	sqlite3.c	99991;"	d	file:
sqlite3_db_readonly	sqlite3.h	/^SQLITE_API int sqlite3_db_readonly(sqlite3 *db, const char *zDbName);$/;"	p	signature:(sqlite3 *db, const char *zDbName)
sqlite3_db_release_memory	sqlite3.c	/^SQLITE_API int sqlite3_db_release_memory(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3_db_release_memory	sqlite3.c	/^SQLITE_API int sqlite3_db_release_memory(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3_db_release_memory	sqlite3.c	99992;"	d	file:
sqlite3_db_release_memory	sqlite3.h	/^SQLITE_API int sqlite3_db_release_memory(sqlite3*);$/;"	p	signature:(sqlite3*)
sqlite3_db_status	sqlite3.c	/^SQLITE_API int sqlite3_db_status($/;"	f	signature:( sqlite3 *db, int op, int *pCurrent, int *pHighwater, int resetFlag )
sqlite3_db_status	sqlite3.c	/^SQLITE_API int sqlite3_db_status(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg);$/;"	p	file:	signature:(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg)
sqlite3_db_status	sqlite3.c	99974;"	d	file:
sqlite3_db_status	sqlite3.h	/^SQLITE_API int sqlite3_db_status(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg);$/;"	p	signature:(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg)
sqlite3_debug_mutex	sqlite3.c	/^typedef struct sqlite3_debug_mutex {$/;"	s	file:
sqlite3_debug_mutex	sqlite3.c	/^} sqlite3_debug_mutex;$/;"	t	typeref:struct:sqlite3_debug_mutex	file:
sqlite3_debug_mutex::cnt	sqlite3.c	/^  int cnt;    \/* Number of entries without a matching leave *\/$/;"	m	struct:sqlite3_debug_mutex	file:	access:public
sqlite3_debug_mutex::id	sqlite3.c	/^  int id;     \/* The mutex type *\/$/;"	m	struct:sqlite3_debug_mutex	file:	access:public
sqlite3_declare_vtab	sqlite3.c	/^SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){$/;"	f	signature:(sqlite3 *db, const char *zCreateTable)
sqlite3_declare_vtab	sqlite3.c	/^SQLITE_API int sqlite3_declare_vtab(sqlite3*, const char *zSQL);$/;"	p	file:	signature:(sqlite3*, const char *zSQL)
sqlite3_declare_vtab	sqlite3.c	100101;"	d	file:
sqlite3_declare_vtab	sqlite3.c	99852;"	d	file:
sqlite3_declare_vtab	sqlite3.h	/^SQLITE_API int sqlite3_declare_vtab(sqlite3*, const char *zSQL);$/;"	p	signature:(sqlite3*, const char *zSQL)
sqlite3_destructor_type	sqlite3.c	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t	file:
sqlite3_destructor_type	sqlite3.h	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t
sqlite3_diskfull	sqlite3.c	/^SQLITE_API int sqlite3_diskfull = 0;$/;"	v
sqlite3_diskfull_pending	sqlite3.c	/^SQLITE_API int sqlite3_diskfull_pending = 0;$/;"	v
sqlite3_enable_load_extension	sqlite3.c	/^SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff);$/;"	p	file:	signature:(sqlite3 *db, int onoff)
sqlite3_enable_load_extension	sqlite3.c	/^SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff){$/;"	f	signature:(sqlite3 *db, int onoff)
sqlite3_enable_load_extension	sqlite3.h	/^SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff);$/;"	p	signature:(sqlite3 *db, int onoff)
sqlite3_enable_shared_cache	sqlite3.c	/^SQLITE_API int sqlite3_enable_shared_cache(int enable){$/;"	f	signature:(int enable)
sqlite3_enable_shared_cache	sqlite3.c	/^SQLITE_API int sqlite3_enable_shared_cache(int);$/;"	p	file:	signature:(int)
sqlite3_enable_shared_cache	sqlite3.c	100107;"	d	file:
sqlite3_enable_shared_cache	sqlite3.c	99853;"	d	file:
sqlite3_enable_shared_cache	sqlite3.h	/^SQLITE_API int sqlite3_enable_shared_cache(int);$/;"	p	signature:(int)
sqlite3_errcode	sqlite3.c	/^SQLITE_API int sqlite3_errcode(sqlite3 *db);$/;"	p	file:	signature:(sqlite3 *db)
sqlite3_errcode	sqlite3.c	/^SQLITE_API int sqlite3_errcode(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3_errcode	sqlite3.c	99854;"	d	file:
sqlite3_errcode	sqlite3.h	/^SQLITE_API int sqlite3_errcode(sqlite3 *db);$/;"	p	signature:(sqlite3 *db)
sqlite3_errmsg	sqlite3.c	/^SQLITE_API const char *sqlite3_errmsg(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3_errmsg	sqlite3.c	/^SQLITE_API const char *sqlite3_errmsg(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3_errmsg	sqlite3.c	99855;"	d	file:
sqlite3_errmsg	sqlite3.h	/^SQLITE_API const char *sqlite3_errmsg(sqlite3*);$/;"	p	signature:(sqlite3*)
sqlite3_errmsg16	sqlite3.c	/^SQLITE_API const void *sqlite3_errmsg16(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3_errmsg16	sqlite3.c	/^SQLITE_API const void *sqlite3_errmsg16(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3_errmsg16	sqlite3.c	100068;"	d	file:
sqlite3_errmsg16	sqlite3.c	99856;"	d	file:
sqlite3_errmsg16	sqlite3.h	/^SQLITE_API const void *sqlite3_errmsg16(sqlite3*);$/;"	p	signature:(sqlite3*)
sqlite3_errstr	sqlite3.c	/^SQLITE_API const char *sqlite3_errstr(int rc){$/;"	f	signature:(int rc)
sqlite3_errstr	sqlite3.c	/^SQLITE_API const char *sqlite3_errstr(int);$/;"	p	file:	signature:(int)
sqlite3_errstr	sqlite3.c	99993;"	d	file:
sqlite3_errstr	sqlite3.h	/^SQLITE_API const char *sqlite3_errstr(int);$/;"	p	signature:(int)
sqlite3_exec	sqlite3.c	/^SQLITE_API int sqlite3_exec($/;"	f	signature:( sqlite3 *db, const char *zSql, sqlite3_callback xCallback, void *pArg, char **pzErrMsg )
sqlite3_exec	sqlite3.c	/^SQLITE_API int sqlite3_exec($/;"	p	file:	signature:( sqlite3*, const char *sql, int (*callback)(void*,int,char**,char**), void *, char **errmsg )
sqlite3_exec	sqlite3.c	99857;"	d	file:
sqlite3_exec	sqlite3.h	/^SQLITE_API int sqlite3_exec($/;"	p	signature:( sqlite3*, const char *sql, int (*callback)(void*,int,char**,char**), void *, char **errmsg )
sqlite3_expired	sqlite3.c	/^SQLITE_API SQLITE_DEPRECATED int sqlite3_expired(sqlite3_stmt*);$/;"	p	file:	signature:(sqlite3_stmt*)
sqlite3_expired	sqlite3.c	/^SQLITE_API int sqlite3_expired(sqlite3_stmt *pStmt){$/;"	f	signature:(sqlite3_stmt *pStmt)
sqlite3_expired	sqlite3.c	99859;"	d	file:
sqlite3_expired	sqlite3.h	/^SQLITE_API SQLITE_DEPRECATED int sqlite3_expired(sqlite3_stmt*);$/;"	p	signature:(sqlite3_stmt*)
sqlite3_extended_errcode	sqlite3.c	/^SQLITE_API int sqlite3_extended_errcode(sqlite3 *db);$/;"	p	file:	signature:(sqlite3 *db)
sqlite3_extended_errcode	sqlite3.c	/^SQLITE_API int sqlite3_extended_errcode(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3_extended_errcode	sqlite3.c	99975;"	d	file:
sqlite3_extended_errcode	sqlite3.h	/^SQLITE_API int sqlite3_extended_errcode(sqlite3 *db);$/;"	p	signature:(sqlite3 *db)
sqlite3_extended_result_codes	sqlite3.c	/^SQLITE_API int sqlite3_extended_result_codes(sqlite3 *db, int onoff){$/;"	f	signature:(sqlite3 *db, int onoff)
sqlite3_extended_result_codes	sqlite3.c	/^SQLITE_API int sqlite3_extended_result_codes(sqlite3*, int onoff);$/;"	p	file:	signature:(sqlite3*, int onoff)
sqlite3_extended_result_codes	sqlite3.c	99959;"	d	file:
sqlite3_extended_result_codes	sqlite3.h	/^SQLITE_API int sqlite3_extended_result_codes(sqlite3*, int onoff);$/;"	p	signature:(sqlite3*, int onoff)
sqlite3_file	sqlite3.c	/^struct sqlite3_file {$/;"	s	file:
sqlite3_file	sqlite3.c	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file	file:
sqlite3_file	sqlite3.h	/^struct sqlite3_file {$/;"	s
sqlite3_file	sqlite3.h	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file
sqlite3_file::pMethods	sqlite3.c	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods	file:	access:public
sqlite3_file::pMethods	sqlite3.h	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods	access:public
sqlite3_file_control	sqlite3.c	/^SQLITE_API int sqlite3_file_control(sqlite3 *db, const char *zDbName, int op, void *pArg){$/;"	f	signature:(sqlite3 *db, const char *zDbName, int op, void *pArg)
sqlite3_file_control	sqlite3.c	/^SQLITE_API int sqlite3_file_control(sqlite3*, const char *zDbName, int op, void*);$/;"	p	file:	signature:(sqlite3*, const char *zDbName, int op, void*)
sqlite3_file_control	sqlite3.c	99936;"	d	file:
sqlite3_file_control	sqlite3.h	/^SQLITE_API int sqlite3_file_control(sqlite3*, const char *zDbName, int op, void*);$/;"	p	signature:(sqlite3*, const char *zDbName, int op, void*)
sqlite3_finalize	sqlite3.c	/^SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt);$/;"	p	file:	signature:(sqlite3_stmt *pStmt)
sqlite3_finalize	sqlite3.c	/^SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt){$/;"	f	signature:(sqlite3_stmt *pStmt)
sqlite3_finalize	sqlite3.c	99861;"	d	file:
sqlite3_finalize	sqlite3.h	/^SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt);$/;"	p	signature:(sqlite3_stmt *pStmt)
sqlite3_found_count	sqlite3.c	/^SQLITE_API int sqlite3_found_count = 0;$/;"	v
sqlite3_free	sqlite3.c	/^SQLITE_API void sqlite3_free(void *p){$/;"	f	signature:(void *p)
sqlite3_free	sqlite3.c	/^SQLITE_API void sqlite3_free(void*);$/;"	p	file:	signature:(void*)
sqlite3_free	sqlite3.c	99862;"	d	file:
sqlite3_free	sqlite3.h	/^SQLITE_API void sqlite3_free(void*);$/;"	p	signature:(void*)
sqlite3_free_table	sqlite3.c	/^SQLITE_API void sqlite3_free_table($/;"	f	signature:( char **azResult )
sqlite3_free_table	sqlite3.c	/^SQLITE_API void sqlite3_free_table(char **result);$/;"	p	file:	signature:(char **result)
sqlite3_free_table	sqlite3.c	100116;"	d	file:
sqlite3_free_table	sqlite3.c	99863;"	d	file:
sqlite3_free_table	sqlite3.h	/^SQLITE_API void sqlite3_free_table(char **result);$/;"	p	signature:(char **result)
sqlite3_fts3_enable_parentheses	sqlite3.c	/^SQLITE_API int sqlite3_fts3_enable_parentheses = 0;$/;"	v
sqlite3_fts3_enable_parentheses	sqlite3.c	136080;"	d	file:
sqlite3_fts3_enable_parentheses	sqlite3.c	136082;"	d	file:
sqlite3_fullsync_count	sqlite3.c	/^SQLITE_API int sqlite3_fullsync_count = 0;$/;"	v
sqlite3_get_autocommit	sqlite3.c	/^SQLITE_API int sqlite3_get_autocommit(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3_get_autocommit	sqlite3.c	/^SQLITE_API int sqlite3_get_autocommit(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3_get_autocommit	sqlite3.c	99864;"	d	file:
sqlite3_get_autocommit	sqlite3.h	/^SQLITE_API int sqlite3_get_autocommit(sqlite3*);$/;"	p	signature:(sqlite3*)
sqlite3_get_auxdata	sqlite3.c	/^SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){$/;"	f	signature:(sqlite3_context *pCtx, int iArg)
sqlite3_get_auxdata	sqlite3.c	/^SQLITE_API void *sqlite3_get_auxdata(sqlite3_context*, int N);$/;"	p	file:	signature:(sqlite3_context*, int N)
sqlite3_get_auxdata	sqlite3.c	99865;"	d	file:
sqlite3_get_auxdata	sqlite3.h	/^SQLITE_API void *sqlite3_get_auxdata(sqlite3_context*, int N);$/;"	p	signature:(sqlite3_context*, int N)
sqlite3_get_table	sqlite3.c	/^SQLITE_API int sqlite3_get_table($/;"	f	signature:( sqlite3 *db, const char *zSql, char ***pazResult, int *pnRow, int *pnColumn, char **pzErrMsg )
sqlite3_get_table	sqlite3.c	/^SQLITE_API int sqlite3_get_table($/;"	p	file:	signature:( sqlite3 *db, const char *zSql, char ***pazResult, int *pnRow, int *pnColumn, char **pzErrmsg )
sqlite3_get_table	sqlite3.c	100117;"	d	file:
sqlite3_get_table	sqlite3.c	99866;"	d	file:
sqlite3_get_table	sqlite3.h	/^SQLITE_API int sqlite3_get_table($/;"	p	signature:( sqlite3 *db, const char *zSql, char ***pazResult, int *pnRow, int *pnColumn, char **pzErrmsg )
sqlite3_get_table_cb	sqlite3.c	/^static int sqlite3_get_table_cb(void *pArg, int nCol, char **argv, char **colv){$/;"	f	file:	signature:(void *pArg, int nCol, char **argv, char **colv)
sqlite3_global_recover	sqlite3.c	/^SQLITE_API SQLITE_DEPRECATED int sqlite3_global_recover(void);$/;"	p	file:	signature:(void)
sqlite3_global_recover	sqlite3.c	/^SQLITE_API int sqlite3_global_recover(void){$/;"	f	signature:(void)
sqlite3_global_recover	sqlite3.c	99868;"	d	file:
sqlite3_global_recover	sqlite3.h	/^SQLITE_API SQLITE_DEPRECATED int sqlite3_global_recover(void);$/;"	p	signature:(void)
sqlite3_hostid_num	sqlite3.c	/^SQLITE_API int sqlite3_hostid_num = 0;$/;"	v
sqlite3_index_constraint	sqlite3.c	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info	file:	access:public
sqlite3_index_constraint	sqlite3.h	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info	access:public
sqlite3_index_constraint_usage	sqlite3.c	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info	file:	access:public
sqlite3_index_constraint_usage	sqlite3.h	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info	access:public
sqlite3_index_info	sqlite3.c	/^struct sqlite3_index_info {$/;"	s	file:
sqlite3_index_info	sqlite3.c	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info	file:
sqlite3_index_info	sqlite3.h	/^struct sqlite3_index_info {$/;"	s
sqlite3_index_info	sqlite3.h	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info
sqlite3_index_info::aConstraint	sqlite3.c	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint	file:	access:public
sqlite3_index_info::aConstraint	sqlite3.h	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint	access:public
sqlite3_index_info::aConstraintUsage	sqlite3.c	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:	access:public
sqlite3_index_info::aConstraintUsage	sqlite3.h	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage	access:public
sqlite3_index_info::aOrderBy	sqlite3.c	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby	file:	access:public
sqlite3_index_info::aOrderBy	sqlite3.h	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby	access:public
sqlite3_index_info::estimatedCost	sqlite3.c	/^  double estimatedCost;           \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info	file:	access:public
sqlite3_index_info::estimatedCost	sqlite3.h	/^  double estimatedCost;           \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info	access:public
sqlite3_index_info::estimatedRows	sqlite3.c	/^  sqlite3_int64 estimatedRows;    \/* Estimated number of rows returned *\/$/;"	m	struct:sqlite3_index_info	file:	access:public
sqlite3_index_info::estimatedRows	sqlite3.h	/^  sqlite3_int64 estimatedRows;    \/* Estimated number of rows returned *\/$/;"	m	struct:sqlite3_index_info	access:public
sqlite3_index_info::idxNum	sqlite3.c	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info	file:	access:public
sqlite3_index_info::idxNum	sqlite3.h	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info	access:public
sqlite3_index_info::idxStr	sqlite3.c	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info	file:	access:public
sqlite3_index_info::idxStr	sqlite3.h	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info	access:public
sqlite3_index_info::nConstraint	sqlite3.c	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info	file:	access:public
sqlite3_index_info::nConstraint	sqlite3.h	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info	access:public
sqlite3_index_info::nOrderBy	sqlite3.c	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	file:	access:public
sqlite3_index_info::nOrderBy	sqlite3.h	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	access:public
sqlite3_index_info::needToFreeIdxStr	sqlite3.c	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info	file:	access:public
sqlite3_index_info::needToFreeIdxStr	sqlite3.h	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info	access:public
sqlite3_index_info::orderByConsumed	sqlite3.c	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info	file:	access:public
sqlite3_index_info::orderByConsumed	sqlite3.h	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info	access:public
sqlite3_index_info::sqlite3_index_constraint	sqlite3.c	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info	file:	access:public
sqlite3_index_info::sqlite3_index_constraint	sqlite3.h	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info	access:public
sqlite3_index_info::sqlite3_index_constraint::iColumn	sqlite3.c	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:	access:public
sqlite3_index_info::sqlite3_index_constraint::iColumn	sqlite3.h	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	access:public
sqlite3_index_info::sqlite3_index_constraint::iTermOffset	sqlite3.c	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:	access:public
sqlite3_index_info::sqlite3_index_constraint::iTermOffset	sqlite3.h	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	access:public
sqlite3_index_info::sqlite3_index_constraint::op	sqlite3.c	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:	access:public
sqlite3_index_info::sqlite3_index_constraint::op	sqlite3.h	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	access:public
sqlite3_index_info::sqlite3_index_constraint::usable	sqlite3.c	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:	access:public
sqlite3_index_info::sqlite3_index_constraint::usable	sqlite3.h	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	access:public
sqlite3_index_info::sqlite3_index_constraint_usage	sqlite3.c	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info	file:	access:public
sqlite3_index_info::sqlite3_index_constraint_usage	sqlite3.h	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info	access:public
sqlite3_index_info::sqlite3_index_constraint_usage::argvIndex	sqlite3.c	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:	access:public
sqlite3_index_info::sqlite3_index_constraint_usage::argvIndex	sqlite3.h	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	access:public
sqlite3_index_info::sqlite3_index_constraint_usage::omit	sqlite3.c	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:	access:public
sqlite3_index_info::sqlite3_index_constraint_usage::omit	sqlite3.h	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	access:public
sqlite3_index_info::sqlite3_index_orderby	sqlite3.c	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info	file:	access:public
sqlite3_index_info::sqlite3_index_orderby	sqlite3.h	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info	access:public
sqlite3_index_info::sqlite3_index_orderby::desc	sqlite3.c	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:	access:public
sqlite3_index_info::sqlite3_index_orderby::desc	sqlite3.h	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	access:public
sqlite3_index_info::sqlite3_index_orderby::iColumn	sqlite3.c	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:	access:public
sqlite3_index_info::sqlite3_index_orderby::iColumn	sqlite3.h	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	access:public
sqlite3_index_orderby	sqlite3.c	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info	file:	access:public
sqlite3_index_orderby	sqlite3.h	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info	access:public
sqlite3_initialize	sqlite3.c	/^SQLITE_API int sqlite3_initialize(void);$/;"	p	file:	signature:(void)
sqlite3_initialize	sqlite3.c	/^SQLITE_API int sqlite3_initialize(void){$/;"	f	signature:(void)
sqlite3_initialize	sqlite3.h	/^SQLITE_API int sqlite3_initialize(void);$/;"	p	signature:(void)
sqlite3_int64	sqlite3.c	/^typedef sqlite_int64 sqlite3_int64;$/;"	t	file:
sqlite3_int64	sqlite3.h	/^typedef sqlite_int64 sqlite3_int64;$/;"	t
sqlite3_interrupt	sqlite3.c	/^SQLITE_API void sqlite3_interrupt(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3_interrupt	sqlite3.c	/^SQLITE_API void sqlite3_interrupt(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3_interrupt	sqlite3.c	99870;"	d	file:
sqlite3_interrupt	sqlite3.h	/^SQLITE_API void sqlite3_interrupt(sqlite3*);$/;"	p	signature:(sqlite3*)
sqlite3_interrupt_count	sqlite3.c	/^SQLITE_API int sqlite3_interrupt_count = 0;$/;"	v
sqlite3_io_error_benign	sqlite3.c	/^SQLITE_API int sqlite3_io_error_benign = 0;         \/* True if errors are benign *\/$/;"	v
sqlite3_io_error_hardhit	sqlite3.c	/^SQLITE_API int sqlite3_io_error_hardhit = 0;        \/* Number of non-benign errors *\/$/;"	v
sqlite3_io_error_hit	sqlite3.c	/^SQLITE_API int sqlite3_io_error_hit = 0;            \/* Total number of I\/O Errors *\/$/;"	v
sqlite3_io_error_pending	sqlite3.c	/^SQLITE_API int sqlite3_io_error_pending = 0;        \/* Count down to first I\/O error *\/$/;"	v
sqlite3_io_error_persist	sqlite3.c	/^SQLITE_API int sqlite3_io_error_persist = 0;        \/* True if I\/O errors persist *\/$/;"	v
sqlite3_io_methods	sqlite3.c	/^struct sqlite3_io_methods {$/;"	s	file:
sqlite3_io_methods	sqlite3.c	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods	file:
sqlite3_io_methods	sqlite3.h	/^struct sqlite3_io_methods {$/;"	s
sqlite3_io_methods	sqlite3.h	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods
sqlite3_io_methods::iVersion	sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::iVersion	sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xCheckReservedLock	sqlite3.c	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xCheckReservedLock	sqlite3.h	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xClose	sqlite3.c	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xClose	sqlite3.h	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xDeviceCharacteristics	sqlite3.c	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xDeviceCharacteristics	sqlite3.h	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xFetch	sqlite3.c	/^  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xFetch	sqlite3.h	/^  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xFileControl	sqlite3.c	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xFileControl	sqlite3.h	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xFileSize	sqlite3.c	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xFileSize	sqlite3.h	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xLock	sqlite3.c	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xLock	sqlite3.h	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xRead	sqlite3.c	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xRead	sqlite3.h	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xSectorSize	sqlite3.c	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xSectorSize	sqlite3.h	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xShmBarrier	sqlite3.c	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xShmBarrier	sqlite3.h	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xShmLock	sqlite3.c	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xShmLock	sqlite3.h	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xShmMap	sqlite3.c	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xShmMap	sqlite3.h	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xShmUnmap	sqlite3.c	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xShmUnmap	sqlite3.h	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xSync	sqlite3.c	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xSync	sqlite3.h	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xTruncate	sqlite3.c	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xTruncate	sqlite3.h	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xUnfetch	sqlite3.c	/^  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xUnfetch	sqlite3.h	/^  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xUnlock	sqlite3.c	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xUnlock	sqlite3.h	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_io_methods::xWrite	sqlite3.c	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:	access:public
sqlite3_io_methods::xWrite	sqlite3.h	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	access:public
sqlite3_key	sqlite3.c	/^SQLITE_API int sqlite3_key($/;"	p	file:	signature:( sqlite3 *db, const void *pKey, int nKey )
sqlite3_key	sqlite3.h	/^SQLITE_API int sqlite3_key($/;"	p	signature:( sqlite3 *db, const void *pKey, int nKey )
sqlite3_key_v2	sqlite3.c	/^SQLITE_API int sqlite3_key_v2($/;"	p	file:	signature:( sqlite3 *db, const char *zDbName, const void *pKey, int nKey )
sqlite3_key_v2	sqlite3.h	/^SQLITE_API int sqlite3_key_v2($/;"	p	signature:( sqlite3 *db, const char *zDbName, const void *pKey, int nKey )
sqlite3_last_insert_rowid	sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_last_insert_rowid(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3_last_insert_rowid	sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_last_insert_rowid(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3_last_insert_rowid	sqlite3.c	99871;"	d	file:
sqlite3_last_insert_rowid	sqlite3.h	/^SQLITE_API sqlite3_int64 sqlite3_last_insert_rowid(sqlite3*);$/;"	p	signature:(sqlite3*)
sqlite3_libversion	sqlite3.c	/^SQLITE_API const char *sqlite3_libversion(void);$/;"	p	file:	signature:(void)
sqlite3_libversion	sqlite3.c	/^SQLITE_API const char *sqlite3_libversion(void){ return sqlite3_version; }$/;"	f	signature:(void)
sqlite3_libversion	sqlite3.c	99872;"	d	file:
sqlite3_libversion	sqlite3.h	/^SQLITE_API const char *sqlite3_libversion(void);$/;"	p	signature:(void)
sqlite3_libversion_number	sqlite3.c	/^SQLITE_API int sqlite3_libversion_number(void);$/;"	p	file:	signature:(void)
sqlite3_libversion_number	sqlite3.c	/^SQLITE_API int sqlite3_libversion_number(void){ return SQLITE_VERSION_NUMBER; }$/;"	f	signature:(void)
sqlite3_libversion_number	sqlite3.c	99873;"	d	file:
sqlite3_libversion_number	sqlite3.h	/^SQLITE_API int sqlite3_libversion_number(void);$/;"	p	signature:(void)
sqlite3_like_count	sqlite3.c	/^SQLITE_API int sqlite3_like_count = 0;$/;"	v
sqlite3_limit	sqlite3.c	/^SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){$/;"	f	signature:(sqlite3 *db, int limitId, int newLimit)
sqlite3_limit	sqlite3.c	/^SQLITE_API int sqlite3_limit(sqlite3*, int id, int newVal);$/;"	p	file:	signature:(sqlite3*, int id, int newVal)
sqlite3_limit	sqlite3.c	99960;"	d	file:
sqlite3_limit	sqlite3.h	/^SQLITE_API int sqlite3_limit(sqlite3*, int id, int newVal);$/;"	p	signature:(sqlite3*, int id, int newVal)
sqlite3_load_extension	sqlite3.c	/^SQLITE_API int sqlite3_load_extension($/;"	f	signature:( sqlite3 *db, const char *zFile, const char *zProc, char **pzErrMsg )
sqlite3_load_extension	sqlite3.c	/^SQLITE_API int sqlite3_load_extension($/;"	p	file:	signature:( sqlite3 *db, const char *zFile, const char *zProc, char **pzErrMsg )
sqlite3_load_extension	sqlite3.c	100007;"	d	file:
sqlite3_load_extension	sqlite3.h	/^SQLITE_API int sqlite3_load_extension($/;"	p	signature:( sqlite3 *db, const char *zFile, const char *zProc, char **pzErrMsg )
sqlite3_log	sqlite3.c	/^SQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...);$/;"	p	file:	signature:(int iErrCode, const char *zFormat, ...)
sqlite3_log	sqlite3.c	/^SQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...){$/;"	f	signature:(int iErrCode, const char *zFormat, ...)
sqlite3_log	sqlite3.c	99976;"	d	file:
sqlite3_log	sqlite3.h	/^SQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...);$/;"	p	signature:(int iErrCode, const char *zFormat, ...)
sqlite3_malloc	sqlite3.c	/^SQLITE_API void *sqlite3_malloc(int n){$/;"	f	signature:(int n)
sqlite3_malloc	sqlite3.c	/^SQLITE_API void *sqlite3_malloc(int);$/;"	p	file:	signature:(int)
sqlite3_malloc	sqlite3.c	99874;"	d	file:
sqlite3_malloc	sqlite3.h	/^SQLITE_API void *sqlite3_malloc(int);$/;"	p	signature:(int)
sqlite3_malloc64	sqlite3.c	/^SQLITE_API void *sqlite3_malloc64(sqlite3_uint64 n){$/;"	f	signature:(sqlite3_uint64 n)
sqlite3_malloc64	sqlite3.c	/^SQLITE_API void *sqlite3_malloc64(sqlite3_uint64);$/;"	p	file:
sqlite3_malloc64	sqlite3.c	100008;"	d	file:
sqlite3_malloc64	sqlite3.h	/^SQLITE_API void *sqlite3_malloc64(sqlite3_uint64);$/;"	p	signature:(sqlite3_uint64)
sqlite3_max_blobsize	sqlite3.c	/^SQLITE_API int sqlite3_max_blobsize = 0;$/;"	v
sqlite3_mem_methods	sqlite3.c	/^struct sqlite3_mem_methods {$/;"	s	file:
sqlite3_mem_methods	sqlite3.c	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods	file:
sqlite3_mem_methods	sqlite3.h	/^struct sqlite3_mem_methods {$/;"	s
sqlite3_mem_methods	sqlite3.h	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods
sqlite3_mem_methods::pAppData	sqlite3.c	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods	file:	access:public
sqlite3_mem_methods::pAppData	sqlite3.h	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods	access:public
sqlite3_mem_methods::xFree	sqlite3.c	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:	access:public
sqlite3_mem_methods::xFree	sqlite3.h	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods	access:public
sqlite3_mem_methods::xInit	sqlite3.c	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:	access:public
sqlite3_mem_methods::xInit	sqlite3.h	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	access:public
sqlite3_mem_methods::xMalloc	sqlite3.c	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods	file:	access:public
sqlite3_mem_methods::xMalloc	sqlite3.h	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods	access:public
sqlite3_mem_methods::xRealloc	sqlite3.c	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:	access:public
sqlite3_mem_methods::xRealloc	sqlite3.h	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods	access:public
sqlite3_mem_methods::xRoundup	sqlite3.c	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods	file:	access:public
sqlite3_mem_methods::xRoundup	sqlite3.h	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods	access:public
sqlite3_mem_methods::xShutdown	sqlite3.c	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:	access:public
sqlite3_mem_methods::xShutdown	sqlite3.h	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	access:public
sqlite3_mem_methods::xSize	sqlite3.c	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:	access:public
sqlite3_mem_methods::xSize	sqlite3.h	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods	access:public
sqlite3_memdebug_vfs_oom_test	sqlite3.c	/^SQLITE_API int sqlite3_memdebug_vfs_oom_test = 1;$/;"	v
sqlite3_memory_alarm	sqlite3.c	/^SQLITE_API SQLITE_DEPRECATED int sqlite3_memory_alarm(void(*)(void*,sqlite3_int64,int),$/;"	p	file:	signature:(void(*)(void*,sqlite3_int64,int), void*,sqlite3_int64)
sqlite3_memory_alarm	sqlite3.c	/^SQLITE_API int sqlite3_memory_alarm($/;"	f	signature:( void(*xCallback)(void *pArg, sqlite3_int64 used,int N), void *pArg, sqlite3_int64 iThreshold )
sqlite3_memory_alarm	sqlite3.h	/^SQLITE_API SQLITE_DEPRECATED int sqlite3_memory_alarm(void(*)(void*,sqlite3_int64,int),$/;"	p	signature:(void(*)(void*,sqlite3_int64,int), void*,sqlite3_int64)
sqlite3_memory_highwater	sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag);$/;"	p	file:	signature:(int resetFlag)
sqlite3_memory_highwater	sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag){$/;"	f	signature:(int resetFlag)
sqlite3_memory_highwater	sqlite3.c	99937;"	d	file:
sqlite3_memory_highwater	sqlite3.h	/^SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag);$/;"	p	signature:(int resetFlag)
sqlite3_memory_used	sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_used(void);$/;"	p	file:	signature:(void)
sqlite3_memory_used	sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_used(void){$/;"	f	signature:(void)
sqlite3_memory_used	sqlite3.c	99938;"	d	file:
sqlite3_memory_used	sqlite3.h	/^SQLITE_API sqlite3_int64 sqlite3_memory_used(void);$/;"	p	signature:(void)
sqlite3_module	sqlite3.c	/^struct sqlite3_module {$/;"	s	file:
sqlite3_module	sqlite3.c	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module	file:
sqlite3_module	sqlite3.h	/^struct sqlite3_module {$/;"	s
sqlite3_module	sqlite3.h	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module
sqlite3_module::iVersion	sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::iVersion	sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xBegin	sqlite3.c	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xBegin	sqlite3.h	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xBestIndex	sqlite3.c	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xBestIndex	sqlite3.h	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xClose	sqlite3.c	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xClose	sqlite3.h	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xColumn	sqlite3.c	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xColumn	sqlite3.h	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xCommit	sqlite3.c	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xCommit	sqlite3.h	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xConnect	sqlite3.c	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xConnect	sqlite3.h	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xCreate	sqlite3.c	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xCreate	sqlite3.h	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xDestroy	sqlite3.c	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xDestroy	sqlite3.h	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xDisconnect	sqlite3.c	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xDisconnect	sqlite3.h	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xEof	sqlite3.c	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xEof	sqlite3.h	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xFilter	sqlite3.c	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xFilter	sqlite3.h	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xFindFunction	sqlite3.c	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xFindFunction	sqlite3.h	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xNext	sqlite3.c	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xNext	sqlite3.h	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xOpen	sqlite3.c	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xOpen	sqlite3.h	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xRelease	sqlite3.c	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xRelease	sqlite3.h	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xRename	sqlite3.c	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xRename	sqlite3.h	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xRollback	sqlite3.c	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xRollback	sqlite3.h	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xRollbackTo	sqlite3.c	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xRollbackTo	sqlite3.h	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xRowid	sqlite3.c	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xRowid	sqlite3.h	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xSavepoint	sqlite3.c	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xSavepoint	sqlite3.h	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xSync	sqlite3.c	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xSync	sqlite3.h	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	access:public
sqlite3_module::xUpdate	sqlite3.c	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module	file:	access:public
sqlite3_module::xUpdate	sqlite3.h	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module	access:public
sqlite3_mprintf	sqlite3.c	/^SQLITE_API char *sqlite3_mprintf(const char *zFormat, ...){$/;"	f	signature:(const char *zFormat, ...)
sqlite3_mprintf	sqlite3.c	/^SQLITE_API char *sqlite3_mprintf(const char*,...);$/;"	p	file:	signature:(const char*,...)
sqlite3_mprintf	sqlite3.c	99875;"	d	file:
sqlite3_mprintf	sqlite3.h	/^SQLITE_API char *sqlite3_mprintf(const char*,...);$/;"	p	signature:(const char*,...)
sqlite3_msize	sqlite3.c	/^SQLITE_API sqlite3_uint64 sqlite3_msize(void *p){$/;"	f	signature:(void *p)
sqlite3_msize	sqlite3.c	/^SQLITE_API sqlite3_uint64 sqlite3_msize(void*);$/;"	p	file:	signature:(void*)
sqlite3_msize	sqlite3.c	100009;"	d	file:
sqlite3_msize	sqlite3.h	/^SQLITE_API sqlite3_uint64 sqlite3_msize(void*);$/;"	p	signature:(void*)
sqlite3_mutex	sqlite3.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex	sqlite3.c	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex	file:
sqlite3_mutex	sqlite3.h	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex
sqlite3_mutex::id	sqlite3.c	/^  int id;                    \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
sqlite3_mutex::mutex	sqlite3.c	/^  CRITICAL_SECTION mutex;    \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
sqlite3_mutex::mutex	sqlite3.c	/^  pthread_mutex_t mutex;     \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
sqlite3_mutex::nRef	sqlite3.c	/^  volatile int nRef;         \/* Number of enterances *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
sqlite3_mutex::nRef	sqlite3.c	/^  volatile int nRef;         \/* Number of entrances *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
sqlite3_mutex::owner	sqlite3.c	/^  volatile DWORD owner;      \/* Thread holding this mutex *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
sqlite3_mutex::owner	sqlite3.c	/^  volatile pthread_t owner;  \/* Thread that is within this mutex *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
sqlite3_mutex::trace	sqlite3.c	/^  int trace;                 \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
sqlite3_mutex::trace	sqlite3.c	/^  volatile int trace;        \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
sqlite3_mutex_alloc	sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int id){$/;"	f	signature:(int id)
sqlite3_mutex_alloc	sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int);$/;"	p	file:	signature:(int)
sqlite3_mutex_alloc	sqlite3.c	10392;"	d	file:
sqlite3_mutex_alloc	sqlite3.c	99939;"	d	file:
sqlite3_mutex_alloc	sqlite3.h	/^SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int);$/;"	p	signature:(int)
sqlite3_mutex_enter	sqlite3.c	/^SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex *p){$/;"	f	signature:(sqlite3_mutex *p)
sqlite3_mutex_enter	sqlite3.c	/^SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex*);$/;"	p	file:	signature:(sqlite3_mutex*)
sqlite3_mutex_enter	sqlite3.c	10394;"	d	file:
sqlite3_mutex_enter	sqlite3.c	99940;"	d	file:
sqlite3_mutex_enter	sqlite3.h	/^SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex*);$/;"	p	signature:(sqlite3_mutex*)
sqlite3_mutex_free	sqlite3.c	/^SQLITE_API void sqlite3_mutex_free(sqlite3_mutex *p){$/;"	f	signature:(sqlite3_mutex *p)
sqlite3_mutex_free	sqlite3.c	/^SQLITE_API void sqlite3_mutex_free(sqlite3_mutex*);$/;"	p	file:	signature:(sqlite3_mutex*)
sqlite3_mutex_free	sqlite3.c	10393;"	d	file:
sqlite3_mutex_free	sqlite3.c	99941;"	d	file:
sqlite3_mutex_free	sqlite3.h	/^SQLITE_API void sqlite3_mutex_free(sqlite3_mutex*);$/;"	p	signature:(sqlite3_mutex*)
sqlite3_mutex_held	sqlite3.c	/^SQLITE_API int sqlite3_mutex_held(sqlite3_mutex *p){$/;"	f	signature:(sqlite3_mutex *p)
sqlite3_mutex_held	sqlite3.c	/^SQLITE_API int sqlite3_mutex_held(sqlite3_mutex*);$/;"	p	file:	signature:(sqlite3_mutex*)
sqlite3_mutex_held	sqlite3.c	10397;"	d	file:
sqlite3_mutex_held	sqlite3.h	/^SQLITE_API int sqlite3_mutex_held(sqlite3_mutex*);$/;"	p	signature:(sqlite3_mutex*)
sqlite3_mutex_leave	sqlite3.c	/^SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex *p){$/;"	f	signature:(sqlite3_mutex *p)
sqlite3_mutex_leave	sqlite3.c	/^SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex*);$/;"	p	file:	signature:(sqlite3_mutex*)
sqlite3_mutex_leave	sqlite3.c	10396;"	d	file:
sqlite3_mutex_leave	sqlite3.c	99942;"	d	file:
sqlite3_mutex_leave	sqlite3.h	/^SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex*);$/;"	p	signature:(sqlite3_mutex*)
sqlite3_mutex_methods	sqlite3.c	/^struct sqlite3_mutex_methods {$/;"	s	file:
sqlite3_mutex_methods	sqlite3.c	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods	file:
sqlite3_mutex_methods	sqlite3.h	/^struct sqlite3_mutex_methods {$/;"	s
sqlite3_mutex_methods	sqlite3.h	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods
sqlite3_mutex_methods::xMutexAlloc	sqlite3.c	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
sqlite3_mutex_methods::xMutexAlloc	sqlite3.h	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods	access:public
sqlite3_mutex_methods::xMutexEnd	sqlite3.c	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
sqlite3_mutex_methods::xMutexEnd	sqlite3.h	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods	access:public
sqlite3_mutex_methods::xMutexEnter	sqlite3.c	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
sqlite3_mutex_methods::xMutexEnter	sqlite3.h	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	access:public
sqlite3_mutex_methods::xMutexFree	sqlite3.c	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
sqlite3_mutex_methods::xMutexFree	sqlite3.h	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	access:public
sqlite3_mutex_methods::xMutexHeld	sqlite3.c	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
sqlite3_mutex_methods::xMutexHeld	sqlite3.h	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	access:public
sqlite3_mutex_methods::xMutexInit	sqlite3.c	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
sqlite3_mutex_methods::xMutexInit	sqlite3.h	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods	access:public
sqlite3_mutex_methods::xMutexLeave	sqlite3.c	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
sqlite3_mutex_methods::xMutexLeave	sqlite3.h	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	access:public
sqlite3_mutex_methods::xMutexNotheld	sqlite3.c	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
sqlite3_mutex_methods::xMutexNotheld	sqlite3.h	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	access:public
sqlite3_mutex_methods::xMutexTry	sqlite3.c	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
sqlite3_mutex_methods::xMutexTry	sqlite3.h	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	access:public
sqlite3_mutex_notheld	sqlite3.c	/^SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex *p){$/;"	f	signature:(sqlite3_mutex *p)
sqlite3_mutex_notheld	sqlite3.c	/^SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex*);$/;"	p	file:	signature:(sqlite3_mutex*)
sqlite3_mutex_notheld	sqlite3.c	10398;"	d	file:
sqlite3_mutex_notheld	sqlite3.h	/^SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex*);$/;"	p	signature:(sqlite3_mutex*)
sqlite3_mutex_try	sqlite3.c	/^SQLITE_API int sqlite3_mutex_try(sqlite3_mutex *p){$/;"	f	signature:(sqlite3_mutex *p)
sqlite3_mutex_try	sqlite3.c	/^SQLITE_API int sqlite3_mutex_try(sqlite3_mutex*);$/;"	p	file:	signature:(sqlite3_mutex*)
sqlite3_mutex_try	sqlite3.c	10395;"	d	file:
sqlite3_mutex_try	sqlite3.c	99943;"	d	file:
sqlite3_mutex_try	sqlite3.h	/^SQLITE_API int sqlite3_mutex_try(sqlite3_mutex*);$/;"	p	signature:(sqlite3_mutex*)
sqlite3_next_stmt	sqlite3.c	/^SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt);$/;"	p	file:	signature:(sqlite3 *pDb, sqlite3_stmt *pStmt)
sqlite3_next_stmt	sqlite3.c	/^SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt){$/;"	f	signature:(sqlite3 *pDb, sqlite3_stmt *pStmt)
sqlite3_next_stmt	sqlite3.c	99961;"	d	file:
sqlite3_next_stmt	sqlite3.h	/^SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt);$/;"	p	signature:(sqlite3 *pDb, sqlite3_stmt *pStmt)
sqlite3_open	sqlite3.c	/^SQLITE_API int sqlite3_open($/;"	f	signature:( const char *zFilename, sqlite3 **ppDb )
sqlite3_open	sqlite3.c	/^SQLITE_API int sqlite3_open($/;"	p	file:	signature:( const char *filename, sqlite3 **ppDb )
sqlite3_open	sqlite3.c	99876;"	d	file:
sqlite3_open	sqlite3.h	/^SQLITE_API int sqlite3_open($/;"	p	signature:( const char *filename, sqlite3 **ppDb )
sqlite3_open16	sqlite3.c	/^SQLITE_API int sqlite3_open16($/;"	f	signature:( const void *zFilename, sqlite3 **ppDb )
sqlite3_open16	sqlite3.c	/^SQLITE_API int sqlite3_open16($/;"	p	file:	signature:( const void *filename, sqlite3 **ppDb )
sqlite3_open16	sqlite3.c	100069;"	d	file:
sqlite3_open16	sqlite3.c	99877;"	d	file:
sqlite3_open16	sqlite3.h	/^SQLITE_API int sqlite3_open16($/;"	p	signature:( const void *filename, sqlite3 **ppDb )
sqlite3_open_file_count	sqlite3.c	/^SQLITE_API int sqlite3_open_file_count = 0;$/;"	v
sqlite3_open_v2	sqlite3.c	/^SQLITE_API int sqlite3_open_v2($/;"	f	signature:( const char *filename, sqlite3 **ppDb, int flags, const char *zVfs )
sqlite3_open_v2	sqlite3.c	/^SQLITE_API int sqlite3_open_v2($/;"	p	file:	signature:( const char *filename, sqlite3 **ppDb, int flags, const char *zVfs )
sqlite3_open_v2	sqlite3.c	99944;"	d	file:
sqlite3_open_v2	sqlite3.h	/^SQLITE_API int sqlite3_open_v2($/;"	p	signature:( const char *filename, sqlite3 **ppDb, int flags, const char *zVfs )
sqlite3_opentemp_count	sqlite3.c	/^SQLITE_API int sqlite3_opentemp_count = 0;$/;"	v
sqlite3_os_end	sqlite3.c	/^SQLITE_API int sqlite3_os_end(void);$/;"	p	file:	signature:(void)
sqlite3_os_end	sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){ $/;"	f	signature:(void)
sqlite3_os_end	sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){$/;"	f	signature:(void)
sqlite3_os_end	sqlite3.h	/^SQLITE_API int sqlite3_os_end(void);$/;"	p	signature:(void)
sqlite3_os_init	sqlite3.c	/^SQLITE_API int sqlite3_os_init(void);$/;"	p	file:	signature:(void)
sqlite3_os_init	sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){ $/;"	f	signature:(void)
sqlite3_os_init	sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){$/;"	f	signature:(void)
sqlite3_os_init	sqlite3.h	/^SQLITE_API int sqlite3_os_init(void);$/;"	p	signature:(void)
sqlite3_os_type	sqlite3.c	/^SQLITE_API LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;$/;"	v
sqlite3_os_type	sqlite3.c	/^static LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;$/;"	v	file:
sqlite3_overload_function	sqlite3.c	/^SQLITE_API int sqlite3_overload_function($/;"	f	signature:( sqlite3 *db, const char *zName, int nArg )
sqlite3_overload_function	sqlite3.c	/^SQLITE_API int sqlite3_overload_function(sqlite3*, const char *zFuncName, int nArg);$/;"	p	file:	signature:(sqlite3*, const char *zFuncName, int nArg)
sqlite3_overload_function	sqlite3.c	99925;"	d	file:
sqlite3_overload_function	sqlite3.h	/^SQLITE_API int sqlite3_overload_function(sqlite3*, const char *zFuncName, int nArg);$/;"	p	signature:(sqlite3*, const char *zFuncName, int nArg)
sqlite3_pager_readdb_count	sqlite3.c	/^SQLITE_API int sqlite3_pager_readdb_count = 0;    \/* Number of full pages read from DB *\/$/;"	v
sqlite3_pager_writedb_count	sqlite3.c	/^SQLITE_API int sqlite3_pager_writedb_count = 0;   \/* Number of full pages written to DB *\/$/;"	v
sqlite3_pager_writej_count	sqlite3.c	/^SQLITE_API int sqlite3_pager_writej_count = 0;    \/* Number of pages written to journal *\/$/;"	v
sqlite3_pcache	sqlite3.c	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache	file:
sqlite3_pcache	sqlite3.h	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache
sqlite3_pcache_methods	sqlite3.c	/^struct sqlite3_pcache_methods {$/;"	s	file:
sqlite3_pcache_methods	sqlite3.c	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods	file:
sqlite3_pcache_methods	sqlite3.h	/^struct sqlite3_pcache_methods {$/;"	s
sqlite3_pcache_methods	sqlite3.h	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods
sqlite3_pcache_methods2	sqlite3.c	/^struct sqlite3_pcache_methods2 {$/;"	s	file:
sqlite3_pcache_methods2	sqlite3.c	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	typeref:struct:sqlite3_pcache_methods2	file:
sqlite3_pcache_methods2	sqlite3.h	/^struct sqlite3_pcache_methods2 {$/;"	s
sqlite3_pcache_methods2	sqlite3.h	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	typeref:struct:sqlite3_pcache_methods2
sqlite3_pcache_methods2::iVersion	sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
sqlite3_pcache_methods2::iVersion	sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2	access:public
sqlite3_pcache_methods2::pArg	sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
sqlite3_pcache_methods2::pArg	sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2	access:public
sqlite3_pcache_methods2::xCachesize	sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
sqlite3_pcache_methods2::xCachesize	sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2	access:public
sqlite3_pcache_methods2::xCreate	sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
sqlite3_pcache_methods2::xCreate	sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2	access:public
sqlite3_pcache_methods2::xDestroy	sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
sqlite3_pcache_methods2::xDestroy	sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	access:public
sqlite3_pcache_methods2::xFetch	sqlite3.c	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
sqlite3_pcache_methods2::xFetch	sqlite3.h	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2	access:public
sqlite3_pcache_methods2::xInit	sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
sqlite3_pcache_methods2::xInit	sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2	access:public
sqlite3_pcache_methods2::xPagecount	sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
sqlite3_pcache_methods2::xPagecount	sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	access:public
sqlite3_pcache_methods2::xRekey	sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
sqlite3_pcache_methods2::xRekey	sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2	access:public
sqlite3_pcache_methods2::xShrink	sqlite3.c	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
sqlite3_pcache_methods2::xShrink	sqlite3.h	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	access:public
sqlite3_pcache_methods2::xShutdown	sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
sqlite3_pcache_methods2::xShutdown	sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2	access:public
sqlite3_pcache_methods2::xTruncate	sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
sqlite3_pcache_methods2::xTruncate	sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2	access:public
sqlite3_pcache_methods2::xUnpin	sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
sqlite3_pcache_methods2::xUnpin	sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2	access:public
sqlite3_pcache_methods::pArg	sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
sqlite3_pcache_methods::pArg	sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods	access:public
sqlite3_pcache_methods::xCachesize	sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
sqlite3_pcache_methods::xCachesize	sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods	access:public
sqlite3_pcache_methods::xCreate	sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
sqlite3_pcache_methods::xCreate	sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods	access:public
sqlite3_pcache_methods::xDestroy	sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
sqlite3_pcache_methods::xDestroy	sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	access:public
sqlite3_pcache_methods::xFetch	sqlite3.c	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
sqlite3_pcache_methods::xFetch	sqlite3.h	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods	access:public
sqlite3_pcache_methods::xInit	sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
sqlite3_pcache_methods::xInit	sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods	access:public
sqlite3_pcache_methods::xPagecount	sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
sqlite3_pcache_methods::xPagecount	sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	access:public
sqlite3_pcache_methods::xRekey	sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
sqlite3_pcache_methods::xRekey	sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods	access:public
sqlite3_pcache_methods::xShutdown	sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
sqlite3_pcache_methods::xShutdown	sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods	access:public
sqlite3_pcache_methods::xTruncate	sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
sqlite3_pcache_methods::xTruncate	sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods	access:public
sqlite3_pcache_methods::xUnpin	sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
sqlite3_pcache_methods::xUnpin	sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods	access:public
sqlite3_pcache_page	sqlite3.c	/^struct sqlite3_pcache_page {$/;"	s	file:
sqlite3_pcache_page	sqlite3.c	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	typeref:struct:sqlite3_pcache_page	file:
sqlite3_pcache_page	sqlite3.h	/^struct sqlite3_pcache_page {$/;"	s
sqlite3_pcache_page	sqlite3.h	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	typeref:struct:sqlite3_pcache_page
sqlite3_pcache_page::pBuf	sqlite3.c	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page	file:	access:public
sqlite3_pcache_page::pBuf	sqlite3.h	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page	access:public
sqlite3_pcache_page::pExtra	sqlite3.c	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page	file:	access:public
sqlite3_pcache_page::pExtra	sqlite3.h	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page	access:public
sqlite3_prepare	sqlite3.c	/^SQLITE_API int sqlite3_prepare($/;"	f	signature:( sqlite3 *db, const char *zSql, int nBytes, sqlite3_stmt **ppStmt, const char **pzTail )
sqlite3_prepare	sqlite3.c	/^SQLITE_API int sqlite3_prepare($/;"	p	file:	signature:( sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail )
sqlite3_prepare	sqlite3.c	99878;"	d	file:
sqlite3_prepare	sqlite3.h	/^SQLITE_API int sqlite3_prepare($/;"	p	signature:( sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail )
sqlite3_prepare16	sqlite3.c	/^SQLITE_API int sqlite3_prepare16($/;"	f	signature:( sqlite3 *db, const void *zSql, int nBytes, sqlite3_stmt **ppStmt, const void **pzTail )
sqlite3_prepare16	sqlite3.c	/^SQLITE_API int sqlite3_prepare16($/;"	p	file:	signature:( sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail )
sqlite3_prepare16	sqlite3.c	100070;"	d	file:
sqlite3_prepare16	sqlite3.c	99879;"	d	file:
sqlite3_prepare16	sqlite3.h	/^SQLITE_API int sqlite3_prepare16($/;"	p	signature:( sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail )
sqlite3_prepare16_v2	sqlite3.c	/^SQLITE_API int sqlite3_prepare16_v2($/;"	f	signature:( sqlite3 *db, const void *zSql, int nBytes, sqlite3_stmt **ppStmt, const void **pzTail )
sqlite3_prepare16_v2	sqlite3.c	/^SQLITE_API int sqlite3_prepare16_v2($/;"	p	file:	signature:( sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail )
sqlite3_prepare16_v2	sqlite3.c	100071;"	d	file:
sqlite3_prepare16_v2	sqlite3.c	99881;"	d	file:
sqlite3_prepare16_v2	sqlite3.c	99927;"	d	file:
sqlite3_prepare16_v2	sqlite3.h	/^SQLITE_API int sqlite3_prepare16_v2($/;"	p	signature:( sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail )
sqlite3_prepare_v2	sqlite3.c	/^SQLITE_API int sqlite3_prepare_v2($/;"	f	signature:( sqlite3 *db, const char *zSql, int nBytes, sqlite3_stmt **ppStmt, const char **pzTail )
sqlite3_prepare_v2	sqlite3.c	/^SQLITE_API int sqlite3_prepare_v2($/;"	p	file:	signature:( sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail )
sqlite3_prepare_v2	sqlite3.c	99880;"	d	file:
sqlite3_prepare_v2	sqlite3.c	99926;"	d	file:
sqlite3_prepare_v2	sqlite3.h	/^SQLITE_API int sqlite3_prepare_v2($/;"	p	signature:( sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail )
sqlite3_profile	sqlite3.c	/^SQLITE_API SQLITE_EXPERIMENTAL void *sqlite3_profile(sqlite3*,$/;"	p	file:	signature:(sqlite3*, void(*xProfile)(void*,const char*,sqlite3_uint64), void*)
sqlite3_profile	sqlite3.c	/^SQLITE_API void *sqlite3_profile($/;"	f	signature:( sqlite3 *db, void (*xProfile)(void*,const char*,sqlite_uint64), void *pArg )
sqlite3_profile	sqlite3.c	100111;"	d	file:
sqlite3_profile	sqlite3.c	99882;"	d	file:
sqlite3_profile	sqlite3.h	/^SQLITE_API SQLITE_EXPERIMENTAL void *sqlite3_profile(sqlite3*,$/;"	p	signature:(sqlite3*, void(*xProfile)(void*,const char*,sqlite3_uint64), void*)
sqlite3_progress_handler	sqlite3.c	/^SQLITE_API void sqlite3_progress_handler($/;"	f	signature:( sqlite3 *db, int nOps, int (*xProgress)(void*), void *pArg )
sqlite3_progress_handler	sqlite3.c	/^SQLITE_API void sqlite3_progress_handler(sqlite3*, int, int(*)(void*), void*);$/;"	p	file:	signature:(sqlite3*, int, int(*)(void*), void*)
sqlite3_progress_handler	sqlite3.c	100095;"	d	file:
sqlite3_progress_handler	sqlite3.c	99883;"	d	file:
sqlite3_progress_handler	sqlite3.h	/^SQLITE_API void sqlite3_progress_handler(sqlite3*, int, int(*)(void*), void*);$/;"	p	signature:(sqlite3*, int, int(*)(void*), void*)
sqlite3_randomness	sqlite3.c	/^SQLITE_API void sqlite3_randomness(int N, void *P);$/;"	p	file:	signature:(int N, void *P)
sqlite3_randomness	sqlite3.c	/^SQLITE_API void sqlite3_randomness(int N, void *pBuf){$/;"	f	signature:(int N, void *pBuf)
sqlite3_randomness	sqlite3.c	99957;"	d	file:
sqlite3_randomness	sqlite3.h	/^SQLITE_API void sqlite3_randomness(int N, void *P);$/;"	p	signature:(int N, void *P)
sqlite3_realloc	sqlite3.c	/^SQLITE_API void *sqlite3_realloc(void *pOld, int n){$/;"	f	signature:(void *pOld, int n)
sqlite3_realloc	sqlite3.c	/^SQLITE_API void *sqlite3_realloc(void*, int);$/;"	p	file:	signature:(void*, int)
sqlite3_realloc	sqlite3.c	99884;"	d	file:
sqlite3_realloc	sqlite3.h	/^SQLITE_API void *sqlite3_realloc(void*, int);$/;"	p	signature:(void*, int)
sqlite3_realloc64	sqlite3.c	/^SQLITE_API void *sqlite3_realloc64(void *pOld, sqlite3_uint64 n){$/;"	f	signature:(void *pOld, sqlite3_uint64 n)
sqlite3_realloc64	sqlite3.c	/^SQLITE_API void *sqlite3_realloc64(void*, sqlite3_uint64);$/;"	p	file:	signature:(void*, sqlite3_uint64)
sqlite3_realloc64	sqlite3.c	100010;"	d	file:
sqlite3_realloc64	sqlite3.h	/^SQLITE_API void *sqlite3_realloc64(void*, sqlite3_uint64);$/;"	p	signature:(void*, sqlite3_uint64)
sqlite3_rekey	sqlite3.c	/^SQLITE_API int sqlite3_rekey($/;"	p	file:	signature:( sqlite3 *db, const void *pKey, int nKey )
sqlite3_rekey	sqlite3.h	/^SQLITE_API int sqlite3_rekey($/;"	p	signature:( sqlite3 *db, const void *pKey, int nKey )
sqlite3_rekey_v2	sqlite3.c	/^SQLITE_API int sqlite3_rekey_v2($/;"	p	file:	signature:( sqlite3 *db, const char *zDbName, const void *pKey, int nKey )
sqlite3_rekey_v2	sqlite3.h	/^SQLITE_API int sqlite3_rekey_v2($/;"	p	signature:( sqlite3 *db, const char *zDbName, const void *pKey, int nKey )
sqlite3_release_memory	sqlite3.c	/^SQLITE_API int sqlite3_release_memory(int n){$/;"	f	signature:(int n)
sqlite3_release_memory	sqlite3.c	/^SQLITE_API int sqlite3_release_memory(int);$/;"	p	file:	signature:(int)
sqlite3_release_memory	sqlite3.c	99945;"	d	file:
sqlite3_release_memory	sqlite3.h	/^SQLITE_API int sqlite3_release_memory(int);$/;"	p	signature:(int)
sqlite3_reset	sqlite3.c	/^SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt);$/;"	p	file:	signature:(sqlite3_stmt *pStmt)
sqlite3_reset	sqlite3.c	/^SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt){$/;"	f	signature:(sqlite3_stmt *pStmt)
sqlite3_reset	sqlite3.c	99885;"	d	file:
sqlite3_reset	sqlite3.h	/^SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt);$/;"	p	signature:(sqlite3_stmt *pStmt)
sqlite3_reset_auto_extension	sqlite3.c	/^SQLITE_API void sqlite3_reset_auto_extension(void);$/;"	p	file:	signature:(void)
sqlite3_reset_auto_extension	sqlite3.c	/^SQLITE_API void sqlite3_reset_auto_extension(void){$/;"	f	signature:(void)
sqlite3_reset_auto_extension	sqlite3.c	100011;"	d	file:
sqlite3_reset_auto_extension	sqlite3.h	/^SQLITE_API void sqlite3_reset_auto_extension(void);$/;"	p	signature:(void)
sqlite3_result_blob	sqlite3.c	/^SQLITE_API void sqlite3_result_blob($/;"	f	signature:( sqlite3_context *pCtx, const void *z, int n, void (*xDel)(void *) )
sqlite3_result_blob	sqlite3.c	/^SQLITE_API void sqlite3_result_blob(sqlite3_context*, const void*, int, void(*)(void*));$/;"	p	file:	signature:(sqlite3_context*, const void*, int, void(*)(void*))
sqlite3_result_blob	sqlite3.c	99886;"	d	file:
sqlite3_result_blob	sqlite3.h	/^SQLITE_API void sqlite3_result_blob(sqlite3_context*, const void*, int, void(*)(void*));$/;"	p	signature:(sqlite3_context*, const void*, int, void(*)(void*))
sqlite3_result_blob64	sqlite3.c	/^SQLITE_API void sqlite3_result_blob64($/;"	f	signature:( sqlite3_context *pCtx, const void *z, sqlite3_uint64 n, void (*xDel)(void *) )
sqlite3_result_blob64	sqlite3.c	/^SQLITE_API void sqlite3_result_blob64(sqlite3_context*,const void*,sqlite3_uint64,void(*)(void*));$/;"	p	file:	signature:(sqlite3_context*,const void*,sqlite3_uint64,void(*)(void*))
sqlite3_result_blob64	sqlite3.c	100012;"	d	file:
sqlite3_result_blob64	sqlite3.h	/^SQLITE_API void sqlite3_result_blob64(sqlite3_context*,const void*,sqlite3_uint64,void(*)(void*));$/;"	p	signature:(sqlite3_context*,const void*,sqlite3_uint64,void(*)(void*))
sqlite3_result_double	sqlite3.c	/^SQLITE_API void sqlite3_result_double(sqlite3_context *pCtx, double rVal){$/;"	f	signature:(sqlite3_context *pCtx, double rVal)
sqlite3_result_double	sqlite3.c	/^SQLITE_API void sqlite3_result_double(sqlite3_context*, double);$/;"	p	file:	signature:(sqlite3_context*, double)
sqlite3_result_double	sqlite3.c	99887;"	d	file:
sqlite3_result_double	sqlite3.h	/^SQLITE_API void sqlite3_result_double(sqlite3_context*, double);$/;"	p	signature:(sqlite3_context*, double)
sqlite3_result_error	sqlite3.c	/^SQLITE_API void sqlite3_result_error(sqlite3_context *pCtx, const char *z, int n){$/;"	f	signature:(sqlite3_context *pCtx, const char *z, int n)
sqlite3_result_error	sqlite3.c	/^SQLITE_API void sqlite3_result_error(sqlite3_context*, const char*, int);$/;"	p	file:	signature:(sqlite3_context*, const char*, int)
sqlite3_result_error	sqlite3.c	99888;"	d	file:
sqlite3_result_error	sqlite3.h	/^SQLITE_API void sqlite3_result_error(sqlite3_context*, const char*, int);$/;"	p	signature:(sqlite3_context*, const char*, int)
sqlite3_result_error16	sqlite3.c	/^SQLITE_API void sqlite3_result_error16(sqlite3_context *pCtx, const void *z, int n){$/;"	f	signature:(sqlite3_context *pCtx, const void *z, int n)
sqlite3_result_error16	sqlite3.c	/^SQLITE_API void sqlite3_result_error16(sqlite3_context*, const void*, int);$/;"	p	file:	signature:(sqlite3_context*, const void*, int)
sqlite3_result_error16	sqlite3.c	100072;"	d	file:
sqlite3_result_error16	sqlite3.c	99889;"	d	file:
sqlite3_result_error16	sqlite3.h	/^SQLITE_API void sqlite3_result_error16(sqlite3_context*, const void*, int);$/;"	p	signature:(sqlite3_context*, const void*, int)
sqlite3_result_error_code	sqlite3.c	/^SQLITE_API void sqlite3_result_error_code(sqlite3_context *pCtx, int errCode){$/;"	f	signature:(sqlite3_context *pCtx, int errCode)
sqlite3_result_error_code	sqlite3.c	/^SQLITE_API void sqlite3_result_error_code(sqlite3_context*, int);$/;"	p	file:	signature:(sqlite3_context*, int)
sqlite3_result_error_code	sqlite3.c	99955;"	d	file:
sqlite3_result_error_code	sqlite3.h	/^SQLITE_API void sqlite3_result_error_code(sqlite3_context*, int);$/;"	p	signature:(sqlite3_context*, int)
sqlite3_result_error_nomem	sqlite3.c	/^SQLITE_API void sqlite3_result_error_nomem(sqlite3_context *pCtx){$/;"	f	signature:(sqlite3_context *pCtx)
sqlite3_result_error_nomem	sqlite3.c	/^SQLITE_API void sqlite3_result_error_nomem(sqlite3_context*);$/;"	p	file:	signature:(sqlite3_context*)
sqlite3_result_error_nomem	sqlite3.c	99946;"	d	file:
sqlite3_result_error_nomem	sqlite3.h	/^SQLITE_API void sqlite3_result_error_nomem(sqlite3_context*);$/;"	p	signature:(sqlite3_context*)
sqlite3_result_error_toobig	sqlite3.c	/^SQLITE_API void sqlite3_result_error_toobig(sqlite3_context *pCtx){$/;"	f	signature:(sqlite3_context *pCtx)
sqlite3_result_error_toobig	sqlite3.c	/^SQLITE_API void sqlite3_result_error_toobig(sqlite3_context*);$/;"	p	file:	signature:(sqlite3_context*)
sqlite3_result_error_toobig	sqlite3.c	99947;"	d	file:
sqlite3_result_error_toobig	sqlite3.h	/^SQLITE_API void sqlite3_result_error_toobig(sqlite3_context*);$/;"	p	signature:(sqlite3_context*)
sqlite3_result_int	sqlite3.c	/^SQLITE_API void sqlite3_result_int(sqlite3_context *pCtx, int iVal){$/;"	f	signature:(sqlite3_context *pCtx, int iVal)
sqlite3_result_int	sqlite3.c	/^SQLITE_API void sqlite3_result_int(sqlite3_context*, int);$/;"	p	file:	signature:(sqlite3_context*, int)
sqlite3_result_int	sqlite3.c	99890;"	d	file:
sqlite3_result_int	sqlite3.h	/^SQLITE_API void sqlite3_result_int(sqlite3_context*, int);$/;"	p	signature:(sqlite3_context*, int)
sqlite3_result_int64	sqlite3.c	/^SQLITE_API void sqlite3_result_int64(sqlite3_context *pCtx, i64 iVal){$/;"	f	signature:(sqlite3_context *pCtx, i64 iVal)
sqlite3_result_int64	sqlite3.c	/^SQLITE_API void sqlite3_result_int64(sqlite3_context*, sqlite3_int64);$/;"	p	file:	signature:(sqlite3_context*, sqlite3_int64)
sqlite3_result_int64	sqlite3.c	99891;"	d	file:
sqlite3_result_int64	sqlite3.h	/^SQLITE_API void sqlite3_result_int64(sqlite3_context*, sqlite3_int64);$/;"	p	signature:(sqlite3_context*, sqlite3_int64)
sqlite3_result_null	sqlite3.c	/^SQLITE_API void sqlite3_result_null(sqlite3_context *pCtx){$/;"	f	signature:(sqlite3_context *pCtx)
sqlite3_result_null	sqlite3.c	/^SQLITE_API void sqlite3_result_null(sqlite3_context*);$/;"	p	file:	signature:(sqlite3_context*)
sqlite3_result_null	sqlite3.c	99892;"	d	file:
sqlite3_result_null	sqlite3.h	/^SQLITE_API void sqlite3_result_null(sqlite3_context*);$/;"	p	signature:(sqlite3_context*)
sqlite3_result_text	sqlite3.c	/^SQLITE_API void sqlite3_result_text($/;"	f	signature:( sqlite3_context *pCtx, const char *z, int n, void (*xDel)(void *) )
sqlite3_result_text	sqlite3.c	/^SQLITE_API void sqlite3_result_text(sqlite3_context*, const char*, int, void(*)(void*));$/;"	p	file:	signature:(sqlite3_context*, const char*, int, void(*)(void*))
sqlite3_result_text	sqlite3.c	99893;"	d	file:
sqlite3_result_text	sqlite3.h	/^SQLITE_API void sqlite3_result_text(sqlite3_context*, const char*, int, void(*)(void*));$/;"	p	signature:(sqlite3_context*, const char*, int, void(*)(void*))
sqlite3_result_text16	sqlite3.c	/^SQLITE_API void sqlite3_result_text16($/;"	f	signature:( sqlite3_context *pCtx, const void *z, int n, void (*xDel)(void *) )
sqlite3_result_text16	sqlite3.c	/^SQLITE_API void sqlite3_result_text16(sqlite3_context*, const void*, int, void(*)(void*));$/;"	p	file:	signature:(sqlite3_context*, const void*, int, void(*)(void*))
sqlite3_result_text16	sqlite3.c	100073;"	d	file:
sqlite3_result_text16	sqlite3.c	99894;"	d	file:
sqlite3_result_text16	sqlite3.h	/^SQLITE_API void sqlite3_result_text16(sqlite3_context*, const void*, int, void(*)(void*));$/;"	p	signature:(sqlite3_context*, const void*, int, void(*)(void*))
sqlite3_result_text16be	sqlite3.c	/^SQLITE_API void sqlite3_result_text16be($/;"	f	signature:( sqlite3_context *pCtx, const void *z, int n, void (*xDel)(void *) )
sqlite3_result_text16be	sqlite3.c	/^SQLITE_API void sqlite3_result_text16be(sqlite3_context*, const void*, int,void(*)(void*));$/;"	p	file:	signature:(sqlite3_context*, const void*, int,void(*)(void*))
sqlite3_result_text16be	sqlite3.c	100074;"	d	file:
sqlite3_result_text16be	sqlite3.c	99895;"	d	file:
sqlite3_result_text16be	sqlite3.h	/^SQLITE_API void sqlite3_result_text16be(sqlite3_context*, const void*, int,void(*)(void*));$/;"	p	signature:(sqlite3_context*, const void*, int,void(*)(void*))
sqlite3_result_text16le	sqlite3.c	/^SQLITE_API void sqlite3_result_text16le($/;"	f	signature:( sqlite3_context *pCtx, const void *z, int n, void (*xDel)(void *) )
sqlite3_result_text16le	sqlite3.c	/^SQLITE_API void sqlite3_result_text16le(sqlite3_context*, const void*, int,void(*)(void*));$/;"	p	file:	signature:(sqlite3_context*, const void*, int,void(*)(void*))
sqlite3_result_text16le	sqlite3.c	100075;"	d	file:
sqlite3_result_text16le	sqlite3.c	99896;"	d	file:
sqlite3_result_text16le	sqlite3.h	/^SQLITE_API void sqlite3_result_text16le(sqlite3_context*, const void*, int,void(*)(void*));$/;"	p	signature:(sqlite3_context*, const void*, int,void(*)(void*))
sqlite3_result_text64	sqlite3.c	/^SQLITE_API void sqlite3_result_text64($/;"	f	signature:( sqlite3_context *pCtx, const char *z, sqlite3_uint64 n, void (*xDel)(void *), unsigned char enc )
sqlite3_result_text64	sqlite3.c	/^SQLITE_API void sqlite3_result_text64(sqlite3_context*, const char*,sqlite3_uint64,$/;"	p	file:	signature:(sqlite3_context*, const char*,sqlite3_uint64, void(*)(void*), unsigned char encoding)
sqlite3_result_text64	sqlite3.c	100013;"	d	file:
sqlite3_result_text64	sqlite3.h	/^SQLITE_API void sqlite3_result_text64(sqlite3_context*, const char*,sqlite3_uint64,$/;"	p	signature:(sqlite3_context*, const char*,sqlite3_uint64, void(*)(void*), unsigned char encoding)
sqlite3_result_value	sqlite3.c	/^SQLITE_API void sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){$/;"	f	signature:(sqlite3_context *pCtx, sqlite3_value *pValue)
sqlite3_result_value	sqlite3.c	/^SQLITE_API void sqlite3_result_value(sqlite3_context*, sqlite3_value*);$/;"	p	file:	signature:(sqlite3_context*, sqlite3_value*)
sqlite3_result_value	sqlite3.c	99897;"	d	file:
sqlite3_result_value	sqlite3.h	/^SQLITE_API void sqlite3_result_value(sqlite3_context*, sqlite3_value*);$/;"	p	signature:(sqlite3_context*, sqlite3_value*)
sqlite3_result_zeroblob	sqlite3.c	/^SQLITE_API void sqlite3_result_zeroblob(sqlite3_context *pCtx, int n){$/;"	f	signature:(sqlite3_context *pCtx, int n)
sqlite3_result_zeroblob	sqlite3.c	/^SQLITE_API void sqlite3_result_zeroblob(sqlite3_context*, int n);$/;"	p	file:	signature:(sqlite3_context*, int n)
sqlite3_result_zeroblob	sqlite3.c	99954;"	d	file:
sqlite3_result_zeroblob	sqlite3.h	/^SQLITE_API void sqlite3_result_zeroblob(sqlite3_context*, int n);$/;"	p	signature:(sqlite3_context*, int n)
sqlite3_rollback_hook	sqlite3.c	/^SQLITE_API void *sqlite3_rollback_hook($/;"	f	signature:( sqlite3 *db, void (*xCallback)(void*), void *pArg )
sqlite3_rollback_hook	sqlite3.c	/^SQLITE_API void *sqlite3_rollback_hook(sqlite3*, void(*)(void *), void*);$/;"	p	file:	signature:(sqlite3*, void(*)(void *), void*)
sqlite3_rollback_hook	sqlite3.c	99898;"	d	file:
sqlite3_rollback_hook	sqlite3.h	/^SQLITE_API void *sqlite3_rollback_hook(sqlite3*, void(*)(void *), void*);$/;"	p	signature:(sqlite3*, void(*)(void *), void*)
sqlite3_rtree_dbl	sqlite3.c	/^  typedef double sqlite3_rtree_dbl;$/;"	t	file:
sqlite3_rtree_dbl	sqlite3.c	/^  typedef sqlite3_int64 sqlite3_rtree_dbl;$/;"	t	file:
sqlite3_rtree_dbl	sqlite3.h	/^  typedef double sqlite3_rtree_dbl;$/;"	t
sqlite3_rtree_dbl	sqlite3.h	/^  typedef sqlite3_int64 sqlite3_rtree_dbl;$/;"	t
sqlite3_rtree_geometry	sqlite3.c	/^struct sqlite3_rtree_geometry {$/;"	s	file:
sqlite3_rtree_geometry	sqlite3.c	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry	file:
sqlite3_rtree_geometry	sqlite3.h	/^struct sqlite3_rtree_geometry {$/;"	s
sqlite3_rtree_geometry	sqlite3.h	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry
sqlite3_rtree_geometry::aParam	sqlite3.c	/^  sqlite3_rtree_dbl *aParam;      \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry	file:	access:public
sqlite3_rtree_geometry::aParam	sqlite3.h	/^  sqlite3_rtree_dbl *aParam;      \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry	access:public
sqlite3_rtree_geometry::nParam	sqlite3.c	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry	file:	access:public
sqlite3_rtree_geometry::nParam	sqlite3.h	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry	access:public
sqlite3_rtree_geometry::pContext	sqlite3.c	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry	file:	access:public
sqlite3_rtree_geometry::pContext	sqlite3.h	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry	access:public
sqlite3_rtree_geometry::pUser	sqlite3.c	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry	file:	access:public
sqlite3_rtree_geometry::pUser	sqlite3.h	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry	access:public
sqlite3_rtree_geometry::xDelUser	sqlite3.c	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry	file:	access:public
sqlite3_rtree_geometry::xDelUser	sqlite3.h	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry	access:public
sqlite3_rtree_geometry_callback	sqlite3.c	/^SQLITE_API int sqlite3_rtree_geometry_callback($/;"	f	signature:( sqlite3 *db, const char *zGeom, int (*xGeom)(sqlite3_rtree_geometry*,int,RtreeDValue*,int*), void *pContext )
sqlite3_rtree_geometry_callback	sqlite3.c	/^SQLITE_API int sqlite3_rtree_geometry_callback($/;"	p	file:	signature:( sqlite3 *db, const char *zGeom, int (*xGeom)(sqlite3_rtree_geometry*, int, sqlite3_rtree_dbl*,int*), void *pContext )
sqlite3_rtree_geometry_callback	sqlite3.h	/^SQLITE_API int sqlite3_rtree_geometry_callback($/;"	p	signature:( sqlite3 *db, const char *zGeom, int (*xGeom)(sqlite3_rtree_geometry*, int, sqlite3_rtree_dbl*,int*), void *pContext )
sqlite3_rtree_query_callback	sqlite3.c	/^SQLITE_API int sqlite3_rtree_query_callback($/;"	f	signature:( sqlite3 *db, const char *zQueryFunc, int (*xQueryFunc)(sqlite3_rtree_query_info*), void *pContext, void (*xDestructor)(void*) )
sqlite3_rtree_query_callback	sqlite3.c	/^SQLITE_API int sqlite3_rtree_query_callback($/;"	p	file:	signature:( sqlite3 *db, const char *zQueryFunc, int (*xQueryFunc)(sqlite3_rtree_query_info*), void *pContext, void (*xDestructor)(void*) )
sqlite3_rtree_query_callback	sqlite3.h	/^SQLITE_API int sqlite3_rtree_query_callback($/;"	p	signature:( sqlite3 *db, const char *zQueryFunc, int (*xQueryFunc)(sqlite3_rtree_query_info*), void *pContext, void (*xDestructor)(void*) )
sqlite3_rtree_query_info	sqlite3.c	/^struct sqlite3_rtree_query_info {$/;"	s	file:
sqlite3_rtree_query_info	sqlite3.c	/^typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;$/;"	t	typeref:struct:sqlite3_rtree_query_info	file:
sqlite3_rtree_query_info	sqlite3.h	/^struct sqlite3_rtree_query_info {$/;"	s
sqlite3_rtree_query_info	sqlite3.h	/^typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;$/;"	t	typeref:struct:sqlite3_rtree_query_info
sqlite3_rtree_query_info::aCoord	sqlite3.c	/^  sqlite3_rtree_dbl *aCoord;        \/* Coordinates of node or entry to check *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
sqlite3_rtree_query_info::aCoord	sqlite3.h	/^  sqlite3_rtree_dbl *aCoord;        \/* Coordinates of node or entry to check *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
sqlite3_rtree_query_info::aParam	sqlite3.c	/^  sqlite3_rtree_dbl *aParam;        \/* value of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
sqlite3_rtree_query_info::aParam	sqlite3.h	/^  sqlite3_rtree_dbl *aParam;        \/* value of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
sqlite3_rtree_query_info::anQueue	sqlite3.c	/^  unsigned int *anQueue;            \/* Number of pending entries in the queue *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
sqlite3_rtree_query_info::anQueue	sqlite3.h	/^  unsigned int *anQueue;            \/* Number of pending entries in the queue *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
sqlite3_rtree_query_info::eParentWithin	sqlite3.c	/^  int eParentWithin;                \/* Visibility of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
sqlite3_rtree_query_info::eParentWithin	sqlite3.h	/^  int eParentWithin;                \/* Visibility of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
sqlite3_rtree_query_info::eWithin	sqlite3.c	/^  int eWithin;                      \/* OUT: Visiblity *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
sqlite3_rtree_query_info::eWithin	sqlite3.h	/^  int eWithin;                      \/* OUT: Visiblity *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
sqlite3_rtree_query_info::iLevel	sqlite3.c	/^  int iLevel;                       \/* Level of current node or entry *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
sqlite3_rtree_query_info::iLevel	sqlite3.h	/^  int iLevel;                       \/* Level of current node or entry *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
sqlite3_rtree_query_info::iRowid	sqlite3.c	/^  sqlite3_int64 iRowid;             \/* Rowid for current entry *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
sqlite3_rtree_query_info::iRowid	sqlite3.h	/^  sqlite3_int64 iRowid;             \/* Rowid for current entry *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
sqlite3_rtree_query_info::mxLevel	sqlite3.c	/^  int mxLevel;                      \/* The largest iLevel value in the tree *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
sqlite3_rtree_query_info::mxLevel	sqlite3.h	/^  int mxLevel;                      \/* The largest iLevel value in the tree *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
sqlite3_rtree_query_info::nCoord	sqlite3.c	/^  int nCoord;                       \/* Number of coordinates *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
sqlite3_rtree_query_info::nCoord	sqlite3.h	/^  int nCoord;                       \/* Number of coordinates *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
sqlite3_rtree_query_info::nParam	sqlite3.c	/^  int nParam;                       \/* Number of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
sqlite3_rtree_query_info::nParam	sqlite3.h	/^  int nParam;                       \/* Number of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
sqlite3_rtree_query_info::pContext	sqlite3.c	/^  void *pContext;                   \/* pContext from when function registered *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
sqlite3_rtree_query_info::pContext	sqlite3.h	/^  void *pContext;                   \/* pContext from when function registered *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
sqlite3_rtree_query_info::pUser	sqlite3.c	/^  void *pUser;                      \/* callback can use this, if desired *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
sqlite3_rtree_query_info::pUser	sqlite3.h	/^  void *pUser;                      \/* callback can use this, if desired *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
sqlite3_rtree_query_info::rParentScore	sqlite3.c	/^  sqlite3_rtree_dbl rParentScore;   \/* Score of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
sqlite3_rtree_query_info::rParentScore	sqlite3.h	/^  sqlite3_rtree_dbl rParentScore;   \/* Score of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
sqlite3_rtree_query_info::rScore	sqlite3.c	/^  sqlite3_rtree_dbl rScore;         \/* OUT: Write the score here *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
sqlite3_rtree_query_info::rScore	sqlite3.h	/^  sqlite3_rtree_dbl rScore;         \/* OUT: Write the score here *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
sqlite3_rtree_query_info::xDelUser	sqlite3.c	/^  void (*xDelUser)(void*);          \/* function to free pUser *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
sqlite3_rtree_query_info::xDelUser	sqlite3.h	/^  void (*xDelUser)(void*);          \/* function to free pUser *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
sqlite3_search_count	sqlite3.c	/^SQLITE_API int sqlite3_search_count = 0;$/;"	v
sqlite3_set_authorizer	sqlite3.c	/^SQLITE_API int sqlite3_set_authorizer($/;"	f	signature:( sqlite3 *db, int (*xAuth)(void*,int,const char*,const char*,const char*,const char*), void *pArg )
sqlite3_set_authorizer	sqlite3.c	/^SQLITE_API int sqlite3_set_authorizer($/;"	p	file:	signature:( sqlite3*, int (*xAuth)(void*,int,const char*,const char*,const char*,const char*), void *pUserData )
sqlite3_set_authorizer	sqlite3.c	100056;"	d	file:
sqlite3_set_authorizer	sqlite3.c	99899;"	d	file:
sqlite3_set_authorizer	sqlite3.h	/^SQLITE_API int sqlite3_set_authorizer($/;"	p	signature:( sqlite3*, int (*xAuth)(void*,int,const char*,const char*,const char*,const char*), void *pUserData )
sqlite3_set_auxdata	sqlite3.c	/^SQLITE_API void sqlite3_set_auxdata($/;"	f	signature:( sqlite3_context *pCtx, int iArg, void *pAux, void (*xDelete)(void*) )
sqlite3_set_auxdata	sqlite3.c	/^SQLITE_API void sqlite3_set_auxdata(sqlite3_context*, int N, void*, void (*)(void*));$/;"	p	file:	signature:(sqlite3_context*, int N, void*, void (*)(void*))
sqlite3_set_auxdata	sqlite3.c	99900;"	d	file:
sqlite3_set_auxdata	sqlite3.h	/^SQLITE_API void sqlite3_set_auxdata(sqlite3_context*, int N, void*, void (*)(void*));$/;"	p	signature:(sqlite3_context*, int N, void*, void (*)(void*))
sqlite3_shutdown	sqlite3.c	/^SQLITE_API int sqlite3_shutdown(void);$/;"	p	file:	signature:(void)
sqlite3_shutdown	sqlite3.c	/^SQLITE_API int sqlite3_shutdown(void){$/;"	f	signature:(void)
sqlite3_shutdown	sqlite3.h	/^SQLITE_API int sqlite3_shutdown(void);$/;"	p	signature:(void)
sqlite3_sleep	sqlite3.c	/^SQLITE_API int sqlite3_sleep(int ms){$/;"	f	signature:(int ms)
sqlite3_sleep	sqlite3.c	/^SQLITE_API int sqlite3_sleep(int);$/;"	p	file:	signature:(int)
sqlite3_sleep	sqlite3.c	99948;"	d	file:
sqlite3_sleep	sqlite3.h	/^SQLITE_API int sqlite3_sleep(int);$/;"	p	signature:(int)
sqlite3_snprintf	sqlite3.c	/^SQLITE_API char *sqlite3_snprintf(int n, char *zBuf, const char *zFormat, ...){$/;"	f	signature:(int n, char *zBuf, const char *zFormat, ...)
sqlite3_snprintf	sqlite3.c	/^SQLITE_API char *sqlite3_snprintf(int,char*,const char*, ...);$/;"	p	file:	signature:(int,char*,const char*, ...)
sqlite3_snprintf	sqlite3.c	99901;"	d	file:
sqlite3_snprintf	sqlite3.h	/^SQLITE_API char *sqlite3_snprintf(int,char*,const char*, ...);$/;"	p	signature:(int,char*,const char*, ...)
sqlite3_soft_heap_limit	sqlite3.c	/^SQLITE_API SQLITE_DEPRECATED void sqlite3_soft_heap_limit(int N);$/;"	p	file:	signature:(int N)
sqlite3_soft_heap_limit	sqlite3.c	/^SQLITE_API void sqlite3_soft_heap_limit(int n){$/;"	f	signature:(int n)
sqlite3_soft_heap_limit	sqlite3.c	99949;"	d	file:
sqlite3_soft_heap_limit	sqlite3.h	/^SQLITE_API SQLITE_DEPRECATED void sqlite3_soft_heap_limit(int N);$/;"	p	signature:(int N)
sqlite3_soft_heap_limit64	sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N);$/;"	p	file:	signature:(sqlite3_int64 N)
sqlite3_soft_heap_limit64	sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){$/;"	f	signature:(sqlite3_int64 n)
sqlite3_soft_heap_limit64	sqlite3.c	99977;"	d	file:
sqlite3_soft_heap_limit64	sqlite3.h	/^SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N);$/;"	p	signature:(sqlite3_int64 N)
sqlite3_sort_count	sqlite3.c	/^SQLITE_API int sqlite3_sort_count = 0;$/;"	v
sqlite3_sourceid	sqlite3.c	/^SQLITE_API const char *sqlite3_sourceid(void);$/;"	p	file:	signature:(void)
sqlite3_sourceid	sqlite3.c	/^SQLITE_API const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }$/;"	f	signature:(void)
sqlite3_sourceid	sqlite3.c	99978;"	d	file:
sqlite3_sourceid	sqlite3.h	/^SQLITE_API const char *sqlite3_sourceid(void);$/;"	p	signature:(void)
sqlite3_sql	sqlite3.c	/^SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt);$/;"	p	file:	signature:(sqlite3_stmt *pStmt)
sqlite3_sql	sqlite3.c	/^SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt){$/;"	f	signature:(sqlite3_stmt *pStmt)
sqlite3_sql	sqlite3.c	99962;"	d	file:
sqlite3_sql	sqlite3.h	/^SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt);$/;"	p	signature:(sqlite3_stmt *pStmt)
sqlite3_status	sqlite3.c	/^SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag);$/;"	p	file:	signature:(int op, int *pCurrent, int *pHighwater, int resetFlag)
sqlite3_status	sqlite3.c	/^SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){$/;"	f	signature:(int op, int *pCurrent, int *pHighwater, int resetFlag)
sqlite3_status	sqlite3.c	99963;"	d	file:
sqlite3_status	sqlite3.h	/^SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag);$/;"	p	signature:(int op, int *pCurrent, int *pHighwater, int resetFlag)
sqlite3_step	sqlite3.c	/^SQLITE_API int sqlite3_step(sqlite3_stmt *pStmt){$/;"	f	signature:(sqlite3_stmt *pStmt)
sqlite3_step	sqlite3.c	/^SQLITE_API int sqlite3_step(sqlite3_stmt*);$/;"	p	file:	signature:(sqlite3_stmt*)
sqlite3_step	sqlite3.c	99902;"	d	file:
sqlite3_step	sqlite3.h	/^SQLITE_API int sqlite3_step(sqlite3_stmt*);$/;"	p	signature:(sqlite3_stmt*)
sqlite3_stmt	sqlite3.c	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt	file:
sqlite3_stmt	sqlite3.h	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt
sqlite3_stmt_busy	sqlite3.c	/^SQLITE_API int sqlite3_stmt_busy(sqlite3_stmt *pStmt){$/;"	f	signature:(sqlite3_stmt *pStmt)
sqlite3_stmt_busy	sqlite3.c	/^SQLITE_API int sqlite3_stmt_busy(sqlite3_stmt*);$/;"	p	file:	signature:(sqlite3_stmt*)
sqlite3_stmt_busy	sqlite3.c	99994;"	d	file:
sqlite3_stmt_busy	sqlite3.h	/^SQLITE_API int sqlite3_stmt_busy(sqlite3_stmt*);$/;"	p	signature:(sqlite3_stmt*)
sqlite3_stmt_readonly	sqlite3.c	/^SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt);$/;"	p	file:	signature:(sqlite3_stmt *pStmt)
sqlite3_stmt_readonly	sqlite3.c	/^SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt){$/;"	f	signature:(sqlite3_stmt *pStmt)
sqlite3_stmt_readonly	sqlite3.c	99995;"	d	file:
sqlite3_stmt_readonly	sqlite3.h	/^SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt);$/;"	p	signature:(sqlite3_stmt *pStmt)
sqlite3_stmt_status	sqlite3.c	/^SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){$/;"	f	signature:(sqlite3_stmt *pStmt, int op, int resetFlag)
sqlite3_stmt_status	sqlite3.c	/^SQLITE_API int sqlite3_stmt_status(sqlite3_stmt*, int op,int resetFlg);$/;"	p	file:	signature:(sqlite3_stmt*, int op,int resetFlg)
sqlite3_stmt_status	sqlite3.c	99979;"	d	file:
sqlite3_stmt_status	sqlite3.h	/^SQLITE_API int sqlite3_stmt_status(sqlite3_stmt*, int op,int resetFlg);$/;"	p	signature:(sqlite3_stmt*, int op,int resetFlg)
sqlite3_strglob	sqlite3.c	/^SQLITE_API int sqlite3_strglob(const char *zGlob, const char *zStr);$/;"	p	file:	signature:(const char *zGlob, const char *zStr)
sqlite3_strglob	sqlite3.c	/^SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){$/;"	f	signature:(const char *zGlobPattern, const char *zString)
sqlite3_strglob	sqlite3.c	100014;"	d	file:
sqlite3_strglob	sqlite3.h	/^SQLITE_API int sqlite3_strglob(const char *zGlob, const char *zStr);$/;"	p	signature:(const char *zGlob, const char *zStr)
sqlite3_stricmp	sqlite3.c	/^SQLITE_API int sqlite3_stricmp(const char *, const char *);$/;"	p	file:	signature:(const char *, const char *)
sqlite3_stricmp	sqlite3.c	/^SQLITE_API int sqlite3_stricmp(const char *zLeft, const char *zRight){$/;"	f	signature:(const char *zLeft, const char *zRight)
sqlite3_stricmp	sqlite3.c	99996;"	d	file:
sqlite3_stricmp	sqlite3.h	/^SQLITE_API int sqlite3_stricmp(const char *, const char *);$/;"	p	signature:(const char *, const char *)
sqlite3_strnicmp	sqlite3.c	/^SQLITE_API int sqlite3_strnicmp(const char *, const char *, int);$/;"	p	file:	signature:(const char *, const char *, int)
sqlite3_strnicmp	sqlite3.c	/^SQLITE_API int sqlite3_strnicmp(const char *zLeft, const char *zRight, int N){$/;"	f	signature:(const char *zLeft, const char *zRight, int N)
sqlite3_strnicmp	sqlite3.c	99980;"	d	file:
sqlite3_strnicmp	sqlite3.h	/^SQLITE_API int sqlite3_strnicmp(const char *, const char *, int);$/;"	p	signature:(const char *, const char *, int)
sqlite3_sync_count	sqlite3.c	/^SQLITE_API int sqlite3_sync_count = 0;$/;"	v
sqlite3_syscall_ptr	sqlite3.c	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t	file:
sqlite3_syscall_ptr	sqlite3.h	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t
sqlite3_table_column_metadata	sqlite3.c	/^SQLITE_API int sqlite3_table_column_metadata($/;"	f	signature:( sqlite3 *db, const char *zDbName, const char *zTableName, const char *zColumnName, char const **pzDataType, char const **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc )
sqlite3_table_column_metadata	sqlite3.c	/^SQLITE_API int sqlite3_table_column_metadata($/;"	p	file:	signature:( sqlite3 *db, const char *zDbName, const char *zTableName, const char *zColumnName, char const **pzDataType, char const **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc )
sqlite3_table_column_metadata	sqlite3.c	100052;"	d	file:
sqlite3_table_column_metadata	sqlite3.c	99903;"	d	file:
sqlite3_table_column_metadata	sqlite3.h	/^SQLITE_API int sqlite3_table_column_metadata($/;"	p	signature:( sqlite3 *db, const char *zDbName, const char *zTableName, const char *zColumnName, char const **pzDataType, char const **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc )
sqlite3_temp_directory	sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory = 0;$/;"	v
sqlite3_temp_directory	sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory;$/;"	v
sqlite3_temp_directory	sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;$/;"	v
sqlite3_test_control	sqlite3.c	/^SQLITE_API int sqlite3_test_control(int op, ...);$/;"	p	file:	signature:(int op, ...)
sqlite3_test_control	sqlite3.c	/^SQLITE_API int sqlite3_test_control(int op, ...){$/;"	f	signature:(int op, ...)
sqlite3_test_control	sqlite3.c	99956;"	d	file:
sqlite3_test_control	sqlite3.h	/^SQLITE_API int sqlite3_test_control(int op, ...);$/;"	p	signature:(int op, ...)
sqlite3_thread_cleanup	sqlite3.c	/^SQLITE_API SQLITE_DEPRECATED void sqlite3_thread_cleanup(void);$/;"	p	file:	signature:(void)
sqlite3_thread_cleanup	sqlite3.c	/^SQLITE_API void sqlite3_thread_cleanup(void){$/;"	f	signature:(void)
sqlite3_thread_cleanup	sqlite3.c	99904;"	d	file:
sqlite3_thread_cleanup	sqlite3.h	/^SQLITE_API SQLITE_DEPRECATED void sqlite3_thread_cleanup(void);$/;"	p	signature:(void)
sqlite3_threadsafe	sqlite3.c	/^SQLITE_API int sqlite3_threadsafe(void);$/;"	p	file:	signature:(void)
sqlite3_threadsafe	sqlite3.c	/^SQLITE_API int sqlite3_threadsafe(void){ return SQLITE_THREADSAFE; }$/;"	f	signature:(void)
sqlite3_threadsafe	sqlite3.c	99953;"	d	file:
sqlite3_threadsafe	sqlite3.h	/^SQLITE_API int sqlite3_threadsafe(void);$/;"	p	signature:(void)
sqlite3_tokenizer	sqlite3.c	/^struct sqlite3_tokenizer {$/;"	s	file:
sqlite3_tokenizer	sqlite3.c	/^typedef struct sqlite3_tokenizer sqlite3_tokenizer;$/;"	t	typeref:struct:sqlite3_tokenizer	file:
sqlite3_tokenizer::pModule	sqlite3.c	/^  const sqlite3_tokenizer_module *pModule;  \/* The module for this tokenizer *\/$/;"	m	struct:sqlite3_tokenizer	file:	access:public
sqlite3_tokenizer_cursor	sqlite3.c	/^struct sqlite3_tokenizer_cursor {$/;"	s	file:
sqlite3_tokenizer_cursor	sqlite3.c	/^typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;$/;"	t	typeref:struct:sqlite3_tokenizer_cursor	file:
sqlite3_tokenizer_cursor::pTokenizer	sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;       \/* Tokenizer for this cursor. *\/$/;"	m	struct:sqlite3_tokenizer_cursor	file:	access:public
sqlite3_tokenizer_module	sqlite3.c	/^struct sqlite3_tokenizer_module {$/;"	s	file:
sqlite3_tokenizer_module	sqlite3.c	/^typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;$/;"	t	typeref:struct:sqlite3_tokenizer_module	file:
sqlite3_tokenizer_module::iVersion	sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_tokenizer_module	file:	access:public
sqlite3_tokenizer_module::xClose	sqlite3.c	/^  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);$/;"	m	struct:sqlite3_tokenizer_module	file:	access:public
sqlite3_tokenizer_module::xCreate	sqlite3.c	/^  int (*xCreate)($/;"	m	struct:sqlite3_tokenizer_module	file:	access:public
sqlite3_tokenizer_module::xDestroy	sqlite3.c	/^  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);$/;"	m	struct:sqlite3_tokenizer_module	file:	access:public
sqlite3_tokenizer_module::xLanguageid	sqlite3.c	/^  int (*xLanguageid)(sqlite3_tokenizer_cursor *pCsr, int iLangid);$/;"	m	struct:sqlite3_tokenizer_module	file:	access:public
sqlite3_tokenizer_module::xNext	sqlite3.c	/^  int (*xNext)($/;"	m	struct:sqlite3_tokenizer_module	file:	access:public
sqlite3_tokenizer_module::xOpen	sqlite3.c	/^  int (*xOpen)($/;"	m	struct:sqlite3_tokenizer_module	file:	access:public
sqlite3_total_changes	sqlite3.c	/^SQLITE_API int sqlite3_total_changes(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3_total_changes	sqlite3.c	/^SQLITE_API int sqlite3_total_changes(sqlite3*);$/;"	p	file:	signature:(sqlite3*)
sqlite3_total_changes	sqlite3.c	99905;"	d	file:
sqlite3_total_changes	sqlite3.h	/^SQLITE_API int sqlite3_total_changes(sqlite3*);$/;"	p	signature:(sqlite3*)
sqlite3_trace	sqlite3.c	/^SQLITE_API void *sqlite3_trace(sqlite3 *db, void (*xTrace)(void*,const char*), void *pArg){$/;"	f	signature:(sqlite3 *db, void (*xTrace)(void*,const char*), void *pArg)
sqlite3_trace	sqlite3.c	/^SQLITE_API void *sqlite3_trace(sqlite3*, void(*xTrace)(void*,const char*), void*);$/;"	p	file:	signature:(sqlite3*, void(*xTrace)(void*,const char*), void*)
sqlite3_trace	sqlite3.c	100112;"	d	file:
sqlite3_trace	sqlite3.c	99906;"	d	file:
sqlite3_trace	sqlite3.h	/^SQLITE_API void *sqlite3_trace(sqlite3*, void(*xTrace)(void*,const char*), void*);$/;"	p	signature:(sqlite3*, void(*xTrace)(void*,const char*), void*)
sqlite3_transfer_bindings	sqlite3.c	/^SQLITE_API SQLITE_DEPRECATED int sqlite3_transfer_bindings(sqlite3_stmt*, sqlite3_stmt*);$/;"	p	file:	signature:(sqlite3_stmt*, sqlite3_stmt*)
sqlite3_transfer_bindings	sqlite3.c	/^SQLITE_API int sqlite3_transfer_bindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f	signature:(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt)
sqlite3_transfer_bindings	sqlite3.c	99908;"	d	file:
sqlite3_transfer_bindings	sqlite3.h	/^SQLITE_API SQLITE_DEPRECATED int sqlite3_transfer_bindings(sqlite3_stmt*, sqlite3_stmt*);$/;"	p	signature:(sqlite3_stmt*, sqlite3_stmt*)
sqlite3_uint64	sqlite3.c	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t	file:
sqlite3_uint64	sqlite3.h	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t
sqlite3_unlock_notify	sqlite3.c	/^SQLITE_API int sqlite3_unlock_notify($/;"	f	signature:( sqlite3 *db, void (*xNotify)(void **, int), void *pArg )
sqlite3_unlock_notify	sqlite3.c	/^SQLITE_API int sqlite3_unlock_notify($/;"	p	file:	signature:( sqlite3 *pBlocked, void (*xNotify)(void **apArg, int nArg), void *pNotifyArg )
sqlite3_unlock_notify	sqlite3.c	99981;"	d	file:
sqlite3_unlock_notify	sqlite3.h	/^SQLITE_API int sqlite3_unlock_notify($/;"	p	signature:( sqlite3 *pBlocked, void (*xNotify)(void **apArg, int nArg), void *pNotifyArg )
sqlite3_update_hook	sqlite3.c	/^SQLITE_API void *sqlite3_update_hook($/;"	f	signature:( sqlite3 *db, void (*xCallback)(void*,int,char const *,char const *,sqlite_int64), void *pArg )
sqlite3_update_hook	sqlite3.c	/^SQLITE_API void *sqlite3_update_hook($/;"	p	file:	signature:( sqlite3*, void(*)(void *,int ,char const *,char const *,sqlite3_int64), void* )
sqlite3_update_hook	sqlite3.c	99910;"	d	file:
sqlite3_update_hook	sqlite3.h	/^SQLITE_API void *sqlite3_update_hook($/;"	p	signature:( sqlite3*, void(*)(void *,int ,char const *,char const *,sqlite3_int64), void* )
sqlite3_uri_boolean	sqlite3.c	/^SQLITE_API int sqlite3_uri_boolean(const char *zFile, const char *zParam, int bDefault);$/;"	p	file:	signature:(const char *zFile, const char *zParam, int bDefault)
sqlite3_uri_boolean	sqlite3.c	/^SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){$/;"	f	signature:(const char *zFilename, const char *zParam, int bDflt)
sqlite3_uri_boolean	sqlite3.c	99997;"	d	file:
sqlite3_uri_boolean	sqlite3.h	/^SQLITE_API int sqlite3_uri_boolean(const char *zFile, const char *zParam, int bDefault);$/;"	p	signature:(const char *zFile, const char *zParam, int bDefault)
sqlite3_uri_int64	sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_uri_int64($/;"	f	signature:( const char *zFilename, const char *zParam, sqlite3_int64 bDflt )
sqlite3_uri_int64	sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_uri_int64(const char*, const char*, sqlite3_int64);$/;"	p	file:	signature:(const char*, const char*, sqlite3_int64)
sqlite3_uri_int64	sqlite3.c	99998;"	d	file:
sqlite3_uri_int64	sqlite3.h	/^SQLITE_API sqlite3_int64 sqlite3_uri_int64(const char*, const char*, sqlite3_int64);$/;"	p	signature:(const char*, const char*, sqlite3_int64)
sqlite3_uri_parameter	sqlite3.c	/^SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam);$/;"	p	file:	signature:(const char *zFilename, const char *zParam)
sqlite3_uri_parameter	sqlite3.c	/^SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){$/;"	f	signature:(const char *zFilename, const char *zParam)
sqlite3_uri_parameter	sqlite3.c	99999;"	d	file:
sqlite3_uri_parameter	sqlite3.h	/^SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam);$/;"	p	signature:(const char *zFilename, const char *zParam)
sqlite3_uri_vsnprintf	sqlite3.c	100000;"	d	file:
sqlite3_user_data	sqlite3.c	/^SQLITE_API void *sqlite3_user_data(sqlite3_context *p){$/;"	f	signature:(sqlite3_context *p)
sqlite3_user_data	sqlite3.c	/^SQLITE_API void *sqlite3_user_data(sqlite3_context*);$/;"	p	file:	signature:(sqlite3_context*)
sqlite3_user_data	sqlite3.c	99911;"	d	file:
sqlite3_user_data	sqlite3.h	/^SQLITE_API void *sqlite3_user_data(sqlite3_context*);$/;"	p	signature:(sqlite3_context*)
sqlite3_userauth	sqlite3.c	/^struct sqlite3_userauth {$/;"	s	file:
sqlite3_userauth	sqlite3.c	/^typedef struct sqlite3_userauth sqlite3_userauth;$/;"	t	typeref:struct:sqlite3_userauth	file:
sqlite3_userauth::authLevel	sqlite3.c	/^  u8 authLevel;                 \/* Current authentication level *\/$/;"	m	struct:sqlite3_userauth	file:	access:public
sqlite3_userauth::nAuthPW	sqlite3.c	/^  int nAuthPW;                  \/* Size of the zAuthPW in bytes *\/$/;"	m	struct:sqlite3_userauth	file:	access:public
sqlite3_userauth::zAuthPW	sqlite3.c	/^  char *zAuthPW;                \/* Password used to authenticate *\/$/;"	m	struct:sqlite3_userauth	file:	access:public
sqlite3_userauth::zAuthUser	sqlite3.c	/^  char *zAuthUser;              \/* User name used to authenticate *\/$/;"	m	struct:sqlite3_userauth	file:	access:public
sqlite3_value	sqlite3.c	/^typedef struct Mem sqlite3_value;$/;"	t	typeref:struct:Mem	file:
sqlite3_value	sqlite3.h	/^typedef struct Mem sqlite3_value;$/;"	t	typeref:struct:Mem
sqlite3_value_blob	sqlite3.c	/^SQLITE_API const void *sqlite3_value_blob(sqlite3_value *pVal){$/;"	f	signature:(sqlite3_value *pVal)
sqlite3_value_blob	sqlite3.c	/^SQLITE_API const void *sqlite3_value_blob(sqlite3_value*);$/;"	p	file:	signature:(sqlite3_value*)
sqlite3_value_blob	sqlite3.c	99912;"	d	file:
sqlite3_value_blob	sqlite3.h	/^SQLITE_API const void *sqlite3_value_blob(sqlite3_value*);$/;"	p	signature:(sqlite3_value*)
sqlite3_value_bytes	sqlite3.c	/^SQLITE_API int sqlite3_value_bytes(sqlite3_value *pVal){$/;"	f	signature:(sqlite3_value *pVal)
sqlite3_value_bytes	sqlite3.c	/^SQLITE_API int sqlite3_value_bytes(sqlite3_value*);$/;"	p	file:	signature:(sqlite3_value*)
sqlite3_value_bytes	sqlite3.c	99913;"	d	file:
sqlite3_value_bytes	sqlite3.h	/^SQLITE_API int sqlite3_value_bytes(sqlite3_value*);$/;"	p	signature:(sqlite3_value*)
sqlite3_value_bytes16	sqlite3.c	/^SQLITE_API int sqlite3_value_bytes16(sqlite3_value *pVal){$/;"	f	signature:(sqlite3_value *pVal)
sqlite3_value_bytes16	sqlite3.c	/^SQLITE_API int sqlite3_value_bytes16(sqlite3_value*);$/;"	p	file:	signature:(sqlite3_value*)
sqlite3_value_bytes16	sqlite3.c	99914;"	d	file:
sqlite3_value_bytes16	sqlite3.h	/^SQLITE_API int sqlite3_value_bytes16(sqlite3_value*);$/;"	p	signature:(sqlite3_value*)
sqlite3_value_double	sqlite3.c	/^SQLITE_API double sqlite3_value_double(sqlite3_value *pVal){$/;"	f	signature:(sqlite3_value *pVal)
sqlite3_value_double	sqlite3.c	/^SQLITE_API double sqlite3_value_double(sqlite3_value*);$/;"	p	file:	signature:(sqlite3_value*)
sqlite3_value_double	sqlite3.c	99915;"	d	file:
sqlite3_value_double	sqlite3.h	/^SQLITE_API double sqlite3_value_double(sqlite3_value*);$/;"	p	signature:(sqlite3_value*)
sqlite3_value_int	sqlite3.c	/^SQLITE_API int sqlite3_value_int(sqlite3_value *pVal){$/;"	f	signature:(sqlite3_value *pVal)
sqlite3_value_int	sqlite3.c	/^SQLITE_API int sqlite3_value_int(sqlite3_value*);$/;"	p	file:	signature:(sqlite3_value*)
sqlite3_value_int	sqlite3.c	99916;"	d	file:
sqlite3_value_int	sqlite3.h	/^SQLITE_API int sqlite3_value_int(sqlite3_value*);$/;"	p	signature:(sqlite3_value*)
sqlite3_value_int64	sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_value_int64(sqlite3_value*);$/;"	p	file:	signature:(sqlite3_value*)
sqlite3_value_int64	sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_value_int64(sqlite3_value *pVal){$/;"	f	signature:(sqlite3_value *pVal)
sqlite3_value_int64	sqlite3.c	99917;"	d	file:
sqlite3_value_int64	sqlite3.h	/^SQLITE_API sqlite3_int64 sqlite3_value_int64(sqlite3_value*);$/;"	p	signature:(sqlite3_value*)
sqlite3_value_numeric_type	sqlite3.c	/^SQLITE_API int sqlite3_value_numeric_type(sqlite3_value *pVal){$/;"	f	signature:(sqlite3_value *pVal)
sqlite3_value_numeric_type	sqlite3.c	/^SQLITE_API int sqlite3_value_numeric_type(sqlite3_value*);$/;"	p	file:	signature:(sqlite3_value*)
sqlite3_value_numeric_type	sqlite3.c	99918;"	d	file:
sqlite3_value_numeric_type	sqlite3.h	/^SQLITE_API int sqlite3_value_numeric_type(sqlite3_value*);$/;"	p	signature:(sqlite3_value*)
sqlite3_value_text	sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value *pVal){$/;"	f	signature:(sqlite3_value *pVal)
sqlite3_value_text	sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value*);$/;"	p	file:	signature:(sqlite3_value*)
sqlite3_value_text	sqlite3.c	99919;"	d	file:
sqlite3_value_text	sqlite3.h	/^SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value*);$/;"	p	signature:(sqlite3_value*)
sqlite3_value_text16	sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16(sqlite3_value* pVal){$/;"	f	signature:(sqlite3_value* pVal)
sqlite3_value_text16	sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16(sqlite3_value*);$/;"	p	file:	signature:(sqlite3_value*)
sqlite3_value_text16	sqlite3.c	100076;"	d	file:
sqlite3_value_text16	sqlite3.c	99920;"	d	file:
sqlite3_value_text16	sqlite3.h	/^SQLITE_API const void *sqlite3_value_text16(sqlite3_value*);$/;"	p	signature:(sqlite3_value*)
sqlite3_value_text16be	sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16be(sqlite3_value *pVal){$/;"	f	signature:(sqlite3_value *pVal)
sqlite3_value_text16be	sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16be(sqlite3_value*);$/;"	p	file:	signature:(sqlite3_value*)
sqlite3_value_text16be	sqlite3.c	100077;"	d	file:
sqlite3_value_text16be	sqlite3.c	99921;"	d	file:
sqlite3_value_text16be	sqlite3.h	/^SQLITE_API const void *sqlite3_value_text16be(sqlite3_value*);$/;"	p	signature:(sqlite3_value*)
sqlite3_value_text16le	sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16le(sqlite3_value *pVal){$/;"	f	signature:(sqlite3_value *pVal)
sqlite3_value_text16le	sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16le(sqlite3_value*);$/;"	p	file:	signature:(sqlite3_value*)
sqlite3_value_text16le	sqlite3.c	100078;"	d	file:
sqlite3_value_text16le	sqlite3.c	99922;"	d	file:
sqlite3_value_text16le	sqlite3.h	/^SQLITE_API const void *sqlite3_value_text16le(sqlite3_value*);$/;"	p	signature:(sqlite3_value*)
sqlite3_value_type	sqlite3.c	/^SQLITE_API int sqlite3_value_type(sqlite3_value* pVal){$/;"	f	signature:(sqlite3_value* pVal)
sqlite3_value_type	sqlite3.c	/^SQLITE_API int sqlite3_value_type(sqlite3_value*);$/;"	p	file:	signature:(sqlite3_value*)
sqlite3_value_type	sqlite3.c	99923;"	d	file:
sqlite3_value_type	sqlite3.h	/^SQLITE_API int sqlite3_value_type(sqlite3_value*);$/;"	p	signature:(sqlite3_value*)
sqlite3_version	sqlite3.c	/^SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;$/;"	v
sqlite3_version	sqlite3.h	/^SQLITE_API SQLITE_EXTERN const char sqlite3_version[];$/;"	v
sqlite3_vfs	sqlite3.c	/^struct sqlite3_vfs {$/;"	s	file:
sqlite3_vfs	sqlite3.c	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs	file:
sqlite3_vfs	sqlite3.h	/^struct sqlite3_vfs {$/;"	s
sqlite3_vfs	sqlite3.h	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs
sqlite3_vfs::iVersion	sqlite3.c	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::iVersion	sqlite3.h	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::mxPathname	sqlite3.c	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::mxPathname	sqlite3.h	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::pAppData	sqlite3.c	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::pAppData	sqlite3.h	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::pNext	sqlite3.c	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::pNext	sqlite3.h	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::szOsFile	sqlite3.c	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::szOsFile	sqlite3.h	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::xAccess	sqlite3.c	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::xAccess	sqlite3.h	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::xCurrentTime	sqlite3.c	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::xCurrentTime	sqlite3.h	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::xCurrentTimeInt64	sqlite3.c	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::xCurrentTimeInt64	sqlite3.h	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::xDelete	sqlite3.c	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::xDelete	sqlite3.h	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::xDlClose	sqlite3.c	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::xDlClose	sqlite3.h	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::xDlError	sqlite3.c	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::xDlError	sqlite3.h	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::xDlOpen	sqlite3.c	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::xDlOpen	sqlite3.h	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::xDlSym	sqlite3.c	/^  void (*(*xDlSym)(sqlite3_vfs*,void*, const char *zSymbol))(void);$/;"	p	struct:sqlite3_vfs	file:	access:public	signature:(sqlite3_vfs*,void*, const char *zSymbol)
sqlite3_vfs::xDlSym	sqlite3.h	/^  void (*(*xDlSym)(sqlite3_vfs*,void*, const char *zSymbol))(void);$/;"	p	struct:sqlite3_vfs	access:public	signature:(sqlite3_vfs*,void*, const char *zSymbol)
sqlite3_vfs::xFullPathname	sqlite3.c	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::xFullPathname	sqlite3.h	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::xGetLastError	sqlite3.c	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::xGetLastError	sqlite3.h	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::xGetSystemCall	sqlite3.c	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::xGetSystemCall	sqlite3.h	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::xNextSystemCall	sqlite3.c	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::xNextSystemCall	sqlite3.h	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::xOpen	sqlite3.c	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::xOpen	sqlite3.h	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::xRandomness	sqlite3.c	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::xRandomness	sqlite3.h	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::xSetSystemCall	sqlite3.c	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::xSetSystemCall	sqlite3.h	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::xSleep	sqlite3.c	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::xSleep	sqlite3.h	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs::zName	sqlite3.c	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs	file:	access:public
sqlite3_vfs::zName	sqlite3.h	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs	access:public
sqlite3_vfs_find	sqlite3.c	/^SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){$/;"	f	signature:(const char *zVfs)
sqlite3_vfs_find	sqlite3.c	/^SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName);$/;"	p	file:	signature:(const char *zVfsName)
sqlite3_vfs_find	sqlite3.c	99950;"	d	file:
sqlite3_vfs_find	sqlite3.h	/^SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName);$/;"	p	signature:(const char *zVfsName)
sqlite3_vfs_register	sqlite3.c	/^SQLITE_API int sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){$/;"	f	signature:(sqlite3_vfs *pVfs, int makeDflt)
sqlite3_vfs_register	sqlite3.c	/^SQLITE_API int sqlite3_vfs_register(sqlite3_vfs*, int makeDflt);$/;"	p	file:	signature:(sqlite3_vfs*, int makeDflt)
sqlite3_vfs_register	sqlite3.c	99951;"	d	file:
sqlite3_vfs_register	sqlite3.h	/^SQLITE_API int sqlite3_vfs_register(sqlite3_vfs*, int makeDflt);$/;"	p	signature:(sqlite3_vfs*, int makeDflt)
sqlite3_vfs_unregister	sqlite3.c	/^SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs *pVfs){$/;"	f	signature:(sqlite3_vfs *pVfs)
sqlite3_vfs_unregister	sqlite3.c	/^SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs*);$/;"	p	file:	signature:(sqlite3_vfs*)
sqlite3_vfs_unregister	sqlite3.c	99952;"	d	file:
sqlite3_vfs_unregister	sqlite3.h	/^SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs*);$/;"	p	signature:(sqlite3_vfs*)
sqlite3_vmprintf	sqlite3.c	/^SQLITE_API char *sqlite3_vmprintf(const char *zFormat, va_list ap){$/;"	f	signature:(const char *zFormat, va_list ap)
sqlite3_vmprintf	sqlite3.c	/^SQLITE_API char *sqlite3_vmprintf(const char*, va_list);$/;"	p	file:	signature:(const char*, va_list)
sqlite3_vmprintf	sqlite3.c	99924;"	d	file:
sqlite3_vmprintf	sqlite3.h	/^SQLITE_API char *sqlite3_vmprintf(const char*, va_list);$/;"	p	signature:(const char*, va_list)
sqlite3_vsnprintf	sqlite3.c	/^SQLITE_API char *sqlite3_vsnprintf(int n, char *zBuf, const char *zFormat, va_list ap){$/;"	f	signature:(int n, char *zBuf, const char *zFormat, va_list ap)
sqlite3_vsnprintf	sqlite3.c	/^SQLITE_API char *sqlite3_vsnprintf(int,char*,const char*, va_list);$/;"	p	file:	signature:(int,char*,const char*, va_list)
sqlite3_vsnprintf	sqlite3.h	/^SQLITE_API char *sqlite3_vsnprintf(int,char*,const char*, va_list);$/;"	p	signature:(int,char*,const char*, va_list)
sqlite3_vtab	sqlite3.c	/^struct sqlite3_vtab {$/;"	s	file:
sqlite3_vtab	sqlite3.c	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab	file:
sqlite3_vtab	sqlite3.h	/^struct sqlite3_vtab {$/;"	s
sqlite3_vtab	sqlite3.h	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab
sqlite3_vtab::nRef	sqlite3.c	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab	file:	access:public
sqlite3_vtab::nRef	sqlite3.h	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab	access:public
sqlite3_vtab::pModule	sqlite3.c	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab	file:	access:public
sqlite3_vtab::pModule	sqlite3.h	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab	access:public
sqlite3_vtab::zErrMsg	sqlite3.c	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab	file:	access:public
sqlite3_vtab::zErrMsg	sqlite3.h	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab	access:public
sqlite3_vtab_config	sqlite3.c	/^SQLITE_API int sqlite3_vtab_config(sqlite3 *db, int op, ...){$/;"	f	signature:(sqlite3 *db, int op, ...)
sqlite3_vtab_config	sqlite3.c	/^SQLITE_API int sqlite3_vtab_config(sqlite3*, int op, ...);$/;"	p	file:	signature:(sqlite3*, int op, ...)
sqlite3_vtab_config	sqlite3.c	100102;"	d	file:
sqlite3_vtab_config	sqlite3.c	99986;"	d	file:
sqlite3_vtab_config	sqlite3.h	/^SQLITE_API int sqlite3_vtab_config(sqlite3*, int op, ...);$/;"	p	signature:(sqlite3*, int op, ...)
sqlite3_vtab_cursor	sqlite3.c	/^struct sqlite3_vtab_cursor {$/;"	s	file:
sqlite3_vtab_cursor	sqlite3.c	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor	file:
sqlite3_vtab_cursor	sqlite3.h	/^struct sqlite3_vtab_cursor {$/;"	s
sqlite3_vtab_cursor	sqlite3.h	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor
sqlite3_vtab_cursor::pVtab	sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor	file:	access:public
sqlite3_vtab_cursor::pVtab	sqlite3.h	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor	access:public
sqlite3_vtab_on_conflict	sqlite3.c	/^SQLITE_API int sqlite3_vtab_on_conflict(sqlite3 *);$/;"	p	file:	signature:(sqlite3 *)
sqlite3_vtab_on_conflict	sqlite3.c	/^SQLITE_API int sqlite3_vtab_on_conflict(sqlite3 *db){$/;"	f	signature:(sqlite3 *db)
sqlite3_vtab_on_conflict	sqlite3.c	100103;"	d	file:
sqlite3_vtab_on_conflict	sqlite3.c	99987;"	d	file:
sqlite3_vtab_on_conflict	sqlite3.h	/^SQLITE_API int sqlite3_vtab_on_conflict(sqlite3 *);$/;"	p	signature:(sqlite3 *)
sqlite3_wal_autocheckpoint	sqlite3.c	/^SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int N);$/;"	p	file:	signature:(sqlite3 *db, int N)
sqlite3_wal_autocheckpoint	sqlite3.c	/^SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){$/;"	f	signature:(sqlite3 *db, int nFrame)
sqlite3_wal_autocheckpoint	sqlite3.c	99982;"	d	file:
sqlite3_wal_autocheckpoint	sqlite3.h	/^SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int N);$/;"	p	signature:(sqlite3 *db, int N)
sqlite3_wal_checkpoint	sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb);$/;"	p	file:	signature:(sqlite3 *db, const char *zDb)
sqlite3_wal_checkpoint	sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb){$/;"	f	signature:(sqlite3 *db, const char *zDb)
sqlite3_wal_checkpoint	sqlite3.c	99983;"	d	file:
sqlite3_wal_checkpoint	sqlite3.h	/^SQLITE_API int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb);$/;"	p	signature:(sqlite3 *db, const char *zDb)
sqlite3_wal_checkpoint_v2	sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint_v2($/;"	f	signature:( sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt )
sqlite3_wal_checkpoint_v2	sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint_v2($/;"	p	file:	signature:( sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt )
sqlite3_wal_checkpoint_v2	sqlite3.c	100001;"	d	file:
sqlite3_wal_checkpoint_v2	sqlite3.h	/^SQLITE_API int sqlite3_wal_checkpoint_v2($/;"	p	signature:( sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt )
sqlite3_wal_hook	sqlite3.c	/^SQLITE_API void *sqlite3_wal_hook($/;"	f	signature:( sqlite3 *db, int(*xCallback)(void *, sqlite3*, const char*, int), void *pArg )
sqlite3_wal_hook	sqlite3.c	/^SQLITE_API void *sqlite3_wal_hook($/;"	p	file:	signature:( sqlite3*, int(*)(void *,sqlite3*,const char*,int), void* )
sqlite3_wal_hook	sqlite3.c	99984;"	d	file:
sqlite3_wal_hook	sqlite3.h	/^SQLITE_API void *sqlite3_wal_hook($/;"	p	signature:( sqlite3*, int(*)(void *,sqlite3*,const char*,int), void* )
sqlite3_win32_compact_heap	sqlite3.c	/^SQLITE_API int sqlite3_win32_compact_heap(LPUINT pnLargest){$/;"	f	signature:(LPUINT pnLargest)
sqlite3_win32_is_nt	sqlite3.c	/^SQLITE_API int sqlite3_win32_is_nt(void); \/* os_win.c *\/$/;"	p	file:	signature:(void)
sqlite3_win32_is_nt	sqlite3.c	/^SQLITE_API int sqlite3_win32_is_nt(void){$/;"	f	signature:(void)
sqlite3_win32_mbcs_to_utf8	sqlite3.c	/^SQLITE_API char *sqlite3_win32_mbcs_to_utf8(const char *zFilename){$/;"	f	signature:(const char *zFilename)
sqlite3_win32_reset_heap	sqlite3.c	/^SQLITE_API int sqlite3_win32_reset_heap(){$/;"	f
sqlite3_win32_set_directory	sqlite3.c	/^SQLITE_API int sqlite3_win32_set_directory(DWORD type, LPCWSTR zValue){$/;"	f	signature:(DWORD type, LPCWSTR zValue)
sqlite3_win32_sleep	sqlite3.c	/^SQLITE_API void sqlite3_win32_sleep(DWORD milliseconds); \/* os_win.c *\/$/;"	p	file:	signature:(DWORD milliseconds)
sqlite3_win32_sleep	sqlite3.c	/^SQLITE_API void sqlite3_win32_sleep(DWORD milliseconds){$/;"	f	signature:(DWORD milliseconds)
sqlite3_win32_utf8_to_mbcs	sqlite3.c	/^SQLITE_API char *sqlite3_win32_utf8_to_mbcs(const char *zFilename){$/;"	f	signature:(const char *zFilename)
sqlite3_win32_write_debug	sqlite3.c	/^SQLITE_API void sqlite3_win32_write_debug(const char *zBuf, int nBuf){$/;"	f	signature:(const char *zBuf, int nBuf)
sqlite3_wsd_find	sqlite3.c	/^SQLITE_API   void *sqlite3_wsd_find(void *K, int L);$/;"	p	file:	signature:(void *K, int L)
sqlite3_wsd_init	sqlite3.c	/^SQLITE_API   int sqlite3_wsd_init(int N, int J);$/;"	p	file:	signature:(int N, int J)
sqlite3_xauth	sqlite3.c	/^  typedef int (*sqlite3_xauth)(void*,int,const char*,const char*,const char*,$/;"	t	file:
sqlite3_xferopt_count	sqlite3.c	/^SQLITE_API int sqlite3_xferopt_count;$/;"	v
sqlite3one	sqlite3.c	/^SQLITE_PRIVATE const int sqlite3one = 1;$/;"	v
sqlite3one	sqlite3.c	/^SQLITE_PRIVATE const int sqlite3one;$/;"	v
sqliteAuthBadReturnCode	sqlite3.c	/^static void sqliteAuthBadReturnCode(Parse *pParse){$/;"	f	file:	signature:(Parse *pParse)
sqliteDefaultBusyCallback	sqlite3.c	/^static int sqliteDefaultBusyCallback($/;"	f	file:	signature:( void *ptr, int count )
sqliteDeleteColumnNames	sqlite3.c	/^static void sqliteDeleteColumnNames(sqlite3 *db, Table *pTable){$/;"	f	file:	signature:(sqlite3 *db, Table *pTable)
sqliteErrorFromPosixError	sqlite3.c	/^static int sqliteErrorFromPosixError(int posixError, int sqliteIOErr) {$/;"	f	file:	signature:(int posixError, int sqliteIOErr)
sqliteHashData	sqlite3.c	8245;"	d	file:
sqliteHashFirst	sqlite3.c	8243;"	d	file:
sqliteHashNext	sqlite3.c	8244;"	d	file:
sqliteProcessJoin	sqlite3.c	/^static int sqliteProcessJoin(Parse *pParse, Select *p){$/;"	f	file:	signature:(Parse *pParse, Select *p)
sqliteVdbePopStack	sqlite3.c	/^void sqliteVdbePopStack(Vdbe*,int);$/;"	p	file:	signature:(Vdbe*,int)
sqliteViewResetAll	sqlite3.c	/^static void sqliteViewResetAll(sqlite3 *db, int idx){$/;"	f	file:	signature:(sqlite3 *db, int idx)
sqliteViewResetAll	sqlite3.c	90755;"	d	file:
sqliteViewTriggers	sqlite3.c	/^  void sqliteViewTriggers(Parse*, Table*, Expr*, int, ExprList*);$/;"	p	file:	signature:(Parse*, Table*, Expr*, int, ExprList*)
sqlite_int64	sqlite3.c	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t	file:
sqlite_int64	sqlite3.c	/^  typedef __int64 sqlite_int64;$/;"	t	file:
sqlite_int64	sqlite3.c	/^  typedef long long int sqlite_int64;$/;"	t	file:
sqlite_int64	sqlite3.h	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t
sqlite_int64	sqlite3.h	/^  typedef __int64 sqlite_int64;$/;"	t
sqlite_int64	sqlite3.h	/^  typedef long long int sqlite_int64;$/;"	t
sqlite_uint64	sqlite3.c	/^  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t	file:
sqlite_uint64	sqlite3.c	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t	file:
sqlite_uint64	sqlite3.c	/^  typedef unsigned long long int sqlite_uint64;$/;"	t	file:
sqlite_uint64	sqlite3.h	/^  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t
sqlite_uint64	sqlite3.h	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t
sqlite_uint64	sqlite3.h	/^  typedef unsigned long long int sqlite_uint64;$/;"	t
star_oh	sqlite3.c	/^static int star_oh(const char *z){$/;"	f	file:	signature:(const char *z)
startEndFlag	sqlite3.c	/^  unsigned char startEndFlag;       \/* 1=rel to end of fork, 0=rel to start *\/$/;"	m	struct:ByteRangeLockPB2	file:	access:public
startTime	sqlite3.c	/^  i64 startTime;          \/* Time when query started - used for profiling *\/$/;"	m	struct:Vdbe	file:	access:public
stat4Destructor	sqlite3.c	/^static void stat4Destructor(void *pOld){$/;"	f	file:	signature:(void *pOld)
stat4ValueFromExpr	sqlite3.c	/^static int stat4ValueFromExpr($/;"	f	file:	signature:( Parse *pParse, Expr *pExpr, u8 affinity, struct ValueNewStat4Ctx *pAlloc, sqlite3_value **ppVal )
statGet	sqlite3.c	/^static void statGet($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
statGetFuncdef	sqlite3.c	/^static const FuncDef statGetFuncdef = {$/;"	v	file:
statInit	sqlite3.c	/^static void statInit($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
statInitFuncdef	sqlite3.c	/^static const FuncDef statInitFuncdef = {$/;"	v	file:
statPush	sqlite3.c	/^static void statPush($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
statPushFuncdef	sqlite3.c	/^static const FuncDef statPushFuncdef = {$/;"	v	file:
stateno	sqlite3.c	/^  YYACTIONTYPE stateno;  \/* The state-number *\/$/;"	m	struct:yyStackEntry	file:	access:public
status	sqlite3.c	/^  int (*status)(int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
stem	sqlite3.c	/^static int stem($/;"	f	file:	signature:( char **pz, const char *zFrom, const char *zTo, int (*xCond)(const char*) )
step	sqlite3.c	/^  int  (*step)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
step_list	sqlite3.c	/^  TriggerStep *step_list; \/* Link list of trigger program steps             *\/$/;"	m	struct:Trigger	file:	access:public
stmt_busy	sqlite3.c	/^  int (*stmt_busy)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
stmt_readonly	sqlite3.c	/^  int (*stmt_readonly)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
stmt_status	sqlite3.c	/^  int (*stmt_status)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
str	sqlite3.c	/^  StrAccum str;      \/* The string being accumulated *\/$/;"	m	struct:Explain	file:	access:public
strHash	sqlite3.c	/^static unsigned int strHash(const char *z){$/;"	f	file:	signature:(const char *z)
strftimeFunc	sqlite3.c	/^static void strftimeFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
strglob	sqlite3.c	/^  int (*strglob)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
stricmp	sqlite3.c	/^  int (*stricmp)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
strnicmp	sqlite3.c	/^  int (*strnicmp)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
subjInMemory	sqlite3.c	/^  u8 subjInMemory;            \/* True to use in-memory sub-journals *\/$/;"	m	struct:Pager	file:	access:public
subjRequiresPage	sqlite3.c	/^static int subjRequiresPage(PgHdr *pPg){$/;"	f	file:	signature:(PgHdr *pPg)
subjournalPage	sqlite3.c	/^static int subjournalPage(PgHdr *pPg){$/;"	f	file:	signature:(PgHdr *pPg)
substExpr	sqlite3.c	/^static Expr *substExpr($/;"	f	file:	signature:( sqlite3 *db, Expr *pExpr, int iTable, ExprList *pEList )
substExprList	sqlite3.c	/^static void substExprList($/;"	f	file:	signature:( sqlite3 *db, ExprList *pList, int iTable, ExprList *pEList )
substExprList	sqlite3.c	/^static void substExprList(sqlite3*, ExprList*, int, ExprList*);$/;"	p	file:	signature:(sqlite3*, ExprList*, int, ExprList*)
substSelect	sqlite3.c	/^static void substSelect($/;"	f	file:	signature:( sqlite3 *db, Select *p, int iTable, ExprList *pEList )
substSelect	sqlite3.c	/^static void substSelect(sqlite3*, Select *, int, ExprList *);$/;"	p	file:	signature:(sqlite3*, Select *, int, ExprList *)
substrFunc	sqlite3.c	/^static void substrFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
sumFinalize	sqlite3.c	/^static void sumFinalize(sqlite3_context *context){$/;"	f	file:	signature:(sqlite3_context *context)
sumStep	sqlite3.c	/^static void sumStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:	signature:(sqlite3_context *context, int argc, sqlite3_value **argv)
suppressErr	sqlite3.c	/^  u8 suppressErr;               \/* Do not issue error messages if true *\/$/;"	m	struct:sqlite3	file:	access:public
swapMixedEndianFloat	sqlite3.c	66159;"	d	file:
swapMixedEndianFloat	sqlite3.c	66161;"	d	file:
switchLockProxyPath	sqlite3.c	/^static int switchLockProxyPath(unixFile *pFile, const char *path) {$/;"	f	file:	signature:(unixFile *pFile, const char *path)
syncFlags	sqlite3.c	/^  int syncFlags;               \/* Flags for the fsync *\/$/;"	m	struct:WalWriter	file:	access:public
syncFlags	sqlite3.c	/^  u8 syncFlags;               \/* SYNC_NORMAL or SYNC_FULL otherwise *\/$/;"	m	struct:Pager	file:	access:public
syncFlags	sqlite3.c	/^  u8 syncFlags;              \/* Flags to use to sync header writes *\/$/;"	m	struct:Wal	file:	access:public
syncHeader	sqlite3.c	/^  u8 syncHeader;             \/* Fsync the WAL header if true *\/$/;"	m	struct:Wal	file:	access:public
syncJournal	sqlite3.c	/^static int syncJournal(Pager *pPager, int newHdr){$/;"	f	file:	signature:(Pager *pPager, int newHdr)
synthCollSeq	sqlite3.c	/^static int synthCollSeq(sqlite3 *db, CollSeq *pColl){$/;"	f	file:	signature:(sqlite3 *db, CollSeq *pColl)
sz	sqlite3.c	/^  u16 sz;                 \/* Size of each buffer in bytes *\/$/;"	m	struct:Lookaside	file:	access:public
szAtom	sqlite3.c	/^  int szAtom;      \/* Smallest possible allocation in bytes *\/$/;"	m	struct:Mem5Global	file:	access:public
szCache	sqlite3.c	/^  int szCache;                        \/* Configured cache size *\/$/;"	m	struct:PCache	file:	access:public
szChunk	sqlite3.c	/^  int szChunk;                        \/* Configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:unixFile	file:	access:public
szChunk	sqlite3.c	/^  int szChunk;            \/* Chunk size configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:winFile	file:	access:public
szEst	sqlite3.c	/^  u8 szEst;        \/* Estimated size of this column.  INT==1 *\/$/;"	m	struct:Column	file:	access:public
szExtra	sqlite3.c	/^  int szExtra;                        \/* Size of extra space for each page *\/$/;"	m	struct:PCache	file:	access:public
szExtra	sqlite3.c	/^  int szExtra;                        \/* Size of extra space in bytes *\/$/;"	m	struct:PCache1	file:	access:public
szFirstBlock	sqlite3.c	/^  int szFirstBlock;          \/* Size of first block written to WAL file *\/$/;"	m	struct:Wal	file:	access:public
szIdxRow	sqlite3.c	/^  LogEst szIdxRow;         \/* Estimated average row size in bytes *\/$/;"	m	struct:Index	file:	access:public
szLookaside	sqlite3.c	/^  int szLookaside;                  \/* Default lookaside buffer size *\/$/;"	m	struct:Sqlite3Config	file:	access:public
szMalloc	sqlite3.c	/^  int szMalloc;       \/* Size of the zMalloc allocation *\/$/;"	m	struct:Mem	file:	access:public
szMaster	sqlite3.c	/^  u32 szMaster;$/;"	m	struct:Mem3Global	file:	access:public
szMmap	sqlite3.c	/^  i64 szMmap;                   \/* Default mmap_size setting *\/$/;"	m	struct:sqlite3	file:	access:public
szMmap	sqlite3.c	/^  sqlite3_int64 szMmap;             \/* mmap() space per open file *\/$/;"	m	struct:Sqlite3Config	file:	access:public
szMmap	sqlite3.c	/^  sqlite3_int64 szMmap;       \/* Desired maximum mmap size *\/$/;"	m	struct:Pager	file:	access:public
szOsFile	sqlite3.c	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs	file:	access:public
szOsFile	sqlite3.h	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs	access:public
szPMA	sqlite3.c	/^  int szPMA;                      \/* Size of pList as PMA in bytes *\/$/;"	m	struct:SorterList	file:	access:public
szPage	sqlite3.c	/^  int szPage;                         \/* Size of allocated pages in bytes *\/$/;"	m	struct:PCache1	file:	access:public
szPage	sqlite3.c	/^  int szPage;                         \/* Size of every page in this cache *\/$/;"	m	struct:PCache	file:	access:public
szPage	sqlite3.c	/^  int szPage;                       \/* Size of each page in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:	access:public
szPage	sqlite3.c	/^  int szPage;                  \/* Size of one page *\/$/;"	m	struct:WalWriter	file:	access:public
szPage	sqlite3.c	/^  u16 szPage;                     \/* Database page size in bytes. 1==64K *\/$/;"	m	struct:WalIndexHdr	file:	access:public
szPage	sqlite3.c	/^  u32 szPage;                \/* Database page size *\/$/;"	m	struct:Wal	file:	access:public
szRegion	sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:unixShmNode	file:	access:public
szRegion	sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:winShmNode	file:	access:public
szRow	sqlite3.c	/^  u32 szRow;            \/* Byte available in aRow *\/$/;"	m	struct:VdbeCursor	file:	access:public
szScratch	sqlite3.c	/^  int szScratch;                    \/* Size of each scratch buffer *\/$/;"	m	struct:Sqlite3Config	file:	access:public
szSlot	sqlite3.c	/^  int szSlot;                    \/* Size of each free slot *\/$/;"	m	struct:PCacheGlobal	file:	access:public
szTabRow	sqlite3.c	/^  LogEst szTabRow;     \/* Estimated size of each table row in bytes *\/$/;"	m	struct:Table	file:	access:public
tRowcnt	sqlite3.c	/^ typedef u32 tRowcnt;    \/* 32-bit is the default *\/$/;"	t	file:
tRowcnt	sqlite3.c	/^ typedef u64 tRowcnt;    \/* 64-bit only if requested at compile-time *\/$/;"	t	file:
tabFlags	sqlite3.c	/^  u8 tabFlags;         \/* Mask of TF_* values *\/$/;"	m	struct:Table	file:	access:public
tabTnct	sqlite3.c	/^  int tabTnct;    \/* Ephemeral table used for DISTINCT processing *\/$/;"	m	struct:DistinctCtx	file:	access:public
table	sqlite3.c	/^  char *table;            \/* The table or view to which the trigger applies *\/$/;"	m	struct:Trigger	file:	access:public
tableAndColumnIndex	sqlite3.c	/^static int tableAndColumnIndex($/;"	f	file:	signature:( SrcList *pSrc, int N, const char *zCol, int *piTab, int *piCol )
tableOfTrigger	sqlite3.c	/^static Table *tableOfTrigger(Trigger *pTrigger){$/;"	f	file:	signature:(Trigger *pTrigger)
table_column_metadata	sqlite3.c	/^  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
target	sqlite3.c	/^  Token target;        \/* Target table for DELETE, UPDATE, INSERT *\/$/;"	m	struct:TriggerStep	file:	access:public
targetSrcList	sqlite3.c	/^static SrcList *targetSrcList($/;"	f	file:	signature:( Parse *pParse, TriggerStep *pStep )
tblHash	sqlite3.c	/^  Hash tblHash;        \/* All tables indexed by name *\/$/;"	m	struct:Schema	file:	access:public
tempFile	sqlite3.c	/^  u8 tempFile;                \/* zFilename is a temporary or immutable file *\/$/;"	m	struct:Pager	file:	access:public
tempReg	sqlite3.c	/^    u8 tempReg;           \/* iReg is a temp register that needs to be freed *\/$/;"	m	struct:Parse::yColCache	file:	access:public
temp_store	sqlite3.c	/^  u8 temp_store;                \/* 1: file 2: memory 0: default *\/$/;"	m	struct:sqlite3	file:	access:public
term	sqlite3.c	/^  Blob term;                      \/* Current term *\/$/;"	m	struct:NodeReader	file:	access:public
termCanDriveIndex	sqlite3.c	/^static int termCanDriveIndex($/;"	f	file:	signature:( WhereTerm *pTerm, struct SrcList_item *pSrc, Bitmask notReady )
testFunc	sqlite3.c	/^static void testFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
test_addop_breakpoint	sqlite3.c	/^static void test_addop_breakpoint(void){$/;"	f	file:	signature:(void)
test_control	sqlite3.c	/^  int (*test_control)(int, ...);$/;"	m	struct:sqlite3_api_routines	file:	access:public
test_fts3_node_chunk_threshold	sqlite3.c	/^int test_fts3_node_chunk_threshold = (4*1024)*4;$/;"	v
test_fts3_node_chunksize	sqlite3.c	/^int test_fts3_node_chunksize = (4*1024);$/;"	v
testcase	sqlite3.c	129466;"	d	file:
testcase	sqlite3.c	8084;"	d	file:
testcase	sqlite3.c	8086;"	d	file:
thread_cleanup	sqlite3.c	/^  void  (*thread_cleanup)(void);$/;"	m	struct:sqlite3_api_routines	file:	access:public
threadid	sqlite3.c	25093;"	d	file:
threadid	sqlite3.c	25095;"	d	file:
tid	sqlite3.c	/^  pthread_t tid;                 \/* Thread ID *\/$/;"	m	struct:SQLiteThread	file:	access:public
tid	sqlite3.c	/^  void *tid;               \/* The thread handle *\/$/;"	m	struct:SQLiteThread	file:	access:public
timeFunc	sqlite3.c	/^static void timeFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
tkCREATE	sqlite3.c	124636;"	d	file:
tkEND	sqlite3.c	124639;"	d	file:
tkEXPLAIN	sqlite3.c	124635;"	d	file:
tkOTHER	sqlite3.c	124633;"	d	file:
tkSEMI	sqlite3.c	124631;"	d	file:
tkTEMP	sqlite3.c	124637;"	d	file:
tkTRIGGER	sqlite3.c	124638;"	d	file:
tkWS	sqlite3.c	124632;"	d	file:
tmask	sqlite3.c	98365;"	d	file:
tnum	sqlite3.c	/^  int tnum;                \/* DB Page containing root of this index *\/$/;"	m	struct:Index	file:	access:public
tnum	sqlite3.c	/^  int tnum;            \/* Root BTree node for this table (see note above) *\/$/;"	m	struct:Table	file:	access:public
token	sqlite3.c	/^  void *token;                  \/* id that may be used to recursive triggers *\/$/;"	m	struct:SubProgram	file:	access:public
token	sqlite3.c	/^  void *token;            \/* Copy of SubProgram.token *\/$/;"	m	struct:VdbeFrame	file:	access:public
totalAlloc	sqlite3.c	/^  u64 totalAlloc;     \/* Total of all malloc calls - includes internal frag *\/$/;"	m	struct:Mem5Global	file:	access:public
totalExcess	sqlite3.c	/^  u64 totalExcess;    \/* Total internal fragmentation *\/$/;"	m	struct:Mem5Global	file:	access:public
totalFinalize	sqlite3.c	/^static void totalFinalize(sqlite3_context *context){$/;"	f	file:	signature:(sqlite3_context *context)
total_changes	sqlite3.c	/^  int  (*total_changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
total_changes	sqlite3.c	/^static void total_changes($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **NotUsed2 )
tr_tm	sqlite3.c	/^  u8 tr_tm;               \/* One of TRIGGER_BEFORE, TRIGGER_AFTER *\/$/;"	m	struct:Trigger	file:	access:public
trace	sqlite3.c	/^  int trace;                 \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
trace	sqlite3.c	/^  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
trace	sqlite3.c	/^  volatile int trace;        \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:	access:public
transCntrChng	sqlite3.c	/^  unsigned char transCntrChng;   \/* True if the transaction counter changed *\/$/;"	m	struct:unixFile	file:	access:public
transferJoinMarkings	sqlite3.c	/^static void transferJoinMarkings(Expr *pDerived, Expr *pBase){$/;"	f	file:	signature:(Expr *pDerived, Expr *pBase)
transferParseError	sqlite3.c	/^static void transferParseError(Parse *pTo, Parse *pFrom){$/;"	f	file:	signature:(Parse *pTo, Parse *pFrom)
transfer_bindings	sqlite3.c	/^  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
translateP	sqlite3.c	/^static int translateP(char c, const Op *pOp){$/;"	f	file:	signature:(char c, const Op *pOp)
trigHash	sqlite3.c	/^  Hash trigHash;       \/* All triggers indexed by name *\/$/;"	m	struct:Schema	file:	access:public
triggerStepAllocate	sqlite3.c	/^static TriggerStep *triggerStepAllocate($/;"	f	file:	signature:( sqlite3 *db, u8 op, Token *pName )
trimFunc	sqlite3.c	/^static void trimFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
truncateOnCommit	sqlite3.c	/^  u8 truncateOnCommit;       \/* True to truncate WAL file on commit *\/$/;"	m	struct:Wal	file:	access:public
truthProb	sqlite3.c	/^  LogEst truthProb;       \/* Probability of truth for this expression *\/$/;"	m	struct:WhereTerm	file:	access:public
type	sqlite3.c	/^  etByte type;             \/* Conversion paradigm *\/$/;"	m	struct:et_info	file:	access:public
type	sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:	access:public
typeofFunc	sqlite3.c	/^static void typeofFunc($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **argv )
tz	sqlite3.c	/^  int tz;            \/* Timezone offset in minutes *\/$/;"	m	struct:DateTime	file:	access:public
u	sqlite3.c	/^    } u;$/;"	m	struct:ExprList::ExprList_item	typeref:union:ExprList::ExprList_item::__anon5	file:	access:public
u	sqlite3.c	/^  u32 u;             \/* Unsigned for byte-order conversions *\/$/;"	m	union:RtreeCoord	file:	access:public
u	sqlite3.c	/^  } u;$/;"	m	struct:Bitvec	typeref:union:Bitvec::__anon13	file:	access:public
u	sqlite3.c	/^  } u;$/;"	m	struct:Expr	typeref:union:Expr::__anon3	file:	access:public
u	sqlite3.c	/^  } u;$/;"	m	struct:Mem	typeref:union:Mem::MemValue	file:	access:public
u	sqlite3.c	/^  } u;$/;"	m	struct:Mem3Block	typeref:union:Mem3Block::__anon10	file:	access:public
u	sqlite3.c	/^  } u;$/;"	m	struct:RtreeConstraint	typeref:union:RtreeConstraint::__anon25	file:	access:public
u	sqlite3.c	/^  } u;$/;"	m	struct:SorterRecord	typeref:union:SorterRecord::__anon14	file:	access:public
u	sqlite3.c	/^  } u;$/;"	m	struct:Stat4Sample	typeref:union:Stat4Sample::__anon15	file:	access:public
u	sqlite3.c	/^  } u;$/;"	m	struct:Walker	typeref:union:Walker::__anon8	file:	access:public
u	sqlite3.c	/^  } u;$/;"	m	struct:WhereLevel	typeref:union:WhereLevel::__anon16	file:	access:public
u	sqlite3.c	/^  } u;$/;"	m	struct:WhereLoop	typeref:union:WhereLoop::__anon18	file:	access:public
u	sqlite3.c	/^  } u;$/;"	m	struct:WhereTerm	typeref:union:WhereTerm::__anon21	file:	access:public
u1	sqlite3.c	/^  } u1;$/;"	m	struct:sqlite3	typeref:union:sqlite3::__anon2	file:	access:public
u16	sqlite3.c	/^typedef UINT16_TYPE u16;           \/* 2-byte unsigned integer *\/$/;"	t	file:
u16	sqlite3.c	/^typedef unsigned short u16;$/;"	t	file:
u32	sqlite3.c	/^typedef UINT32_TYPE u32;           \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	sqlite3.c	/^typedef unsigned int u32;         \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	sqlite3.c	/^typedef unsigned int u32;$/;"	t	file:
u64	sqlite3.c	/^typedef sqlite3_uint64 u64;       \/* 8-byte unsigned integer *\/$/;"	t	file:
u64	sqlite3.c	/^typedef sqlite_uint64 u64;         \/* 8-byte unsigned integer *\/$/;"	t	file:
u8	sqlite3.c	/^typedef UINT8_TYPE u8;             \/* 1-byte unsigned integer *\/$/;"	t	file:
u8	sqlite3.c	/^typedef unsigned char u8;         \/* 1-byte (or larger) unsigned integer *\/$/;"	t	file:
u8	sqlite3.c	/^typedef unsigned char u8;$/;"	t	file:
uTemp	sqlite3.c	/^  u32 uTemp;          \/* Transient storage for serial_type in OP_MakeRecord *\/$/;"	m	struct:Mem	file:	access:public
unLockFlag	sqlite3.c	/^  unsigned char unLockFlag;         \/* 1 = unlock, 0 = lock *\/$/;"	m	struct:ByteRangeLockPB2	file:	access:public
unicodeAddExceptions	sqlite3.c	/^static int unicodeAddExceptions($/;"	f	file:	signature:( unicode_tokenizer *p, int bAlnum, const char *zIn, int nIn )
unicodeClose	sqlite3.c	/^static int unicodeClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:	signature:(sqlite3_tokenizer_cursor *pCursor)
unicodeCreate	sqlite3.c	/^static int unicodeCreate($/;"	f	file:	signature:( int nArg, const char * const *azArg, sqlite3_tokenizer **pp )
unicodeDestroy	sqlite3.c	/^static int unicodeDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:	signature:(sqlite3_tokenizer *pTokenizer)
unicodeFunc	sqlite3.c	/^static void unicodeFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
unicodeIsAlnum	sqlite3.c	/^static int unicodeIsAlnum(unicode_tokenizer *p, int iCode){$/;"	f	file:	signature:(unicode_tokenizer *p, int iCode)
unicodeIsException	sqlite3.c	/^static int unicodeIsException(unicode_tokenizer *p, int iCode){$/;"	f	file:	signature:(unicode_tokenizer *p, int iCode)
unicodeNext	sqlite3.c	/^static int unicodeNext($/;"	f	file:	signature:( sqlite3_tokenizer_cursor *pC, const char **paToken, int *pnToken, int *piStart, int *piEnd, int *piPos )
unicodeOpen	sqlite3.c	/^static int unicodeOpen($/;"	f	file:	signature:( sqlite3_tokenizer *p, const char *aInput, int nInput, sqlite3_tokenizer_cursor **pp )
unicode_cursor	sqlite3.c	/^struct unicode_cursor {$/;"	s	file:
unicode_cursor	sqlite3.c	/^typedef struct unicode_cursor unicode_cursor;$/;"	t	typeref:struct:unicode_cursor	file:
unicode_cursor::aInput	sqlite3.c	/^  const unsigned char *aInput;    \/* Input text being tokenized *\/$/;"	m	struct:unicode_cursor	file:	access:public
unicode_cursor::base	sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:unicode_cursor	file:	access:public
unicode_cursor::iOff	sqlite3.c	/^  int iOff;                       \/* Current offset within aInput[] *\/$/;"	m	struct:unicode_cursor	file:	access:public
unicode_cursor::iToken	sqlite3.c	/^  int iToken;                     \/* Index of next token to be returned *\/$/;"	m	struct:unicode_cursor	file:	access:public
unicode_cursor::nAlloc	sqlite3.c	/^  int nAlloc;                     \/* space allocated at zToken *\/$/;"	m	struct:unicode_cursor	file:	access:public
unicode_cursor::nInput	sqlite3.c	/^  int nInput;                     \/* Size of aInput[] in bytes *\/$/;"	m	struct:unicode_cursor	file:	access:public
unicode_cursor::zToken	sqlite3.c	/^  char *zToken;                   \/* storage for current token *\/$/;"	m	struct:unicode_cursor	file:	access:public
unicode_tokenizer	sqlite3.c	/^struct unicode_tokenizer {$/;"	s	file:
unicode_tokenizer	sqlite3.c	/^typedef struct unicode_tokenizer unicode_tokenizer;$/;"	t	typeref:struct:unicode_tokenizer	file:
unicode_tokenizer::aiException	sqlite3.c	/^  int *aiException;$/;"	m	struct:unicode_tokenizer	file:	access:public
unicode_tokenizer::bRemoveDiacritic	sqlite3.c	/^  int bRemoveDiacritic;$/;"	m	struct:unicode_tokenizer	file:	access:public
unicode_tokenizer::base	sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:unicode_tokenizer	file:	access:public
unicode_tokenizer::nException	sqlite3.c	/^  int nException;$/;"	m	struct:unicode_tokenizer	file:	access:public
uniqNotNull	sqlite3.c	/^  unsigned uniqNotNull:1;  \/* True if UNIQUE and NOT NULL for all columns *\/$/;"	m	struct:Index	file:	access:public
unixAccess	sqlite3.c	/^static int unixAccess($/;"	f	file:	signature:( sqlite3_vfs *NotUsed, const char *zPath, int flags, int *pResOut )
unixCheckReservedLock	sqlite3.c	/^static int unixCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:	signature:(sqlite3_file *id, int *pResOut)
unixClose	sqlite3.c	/^static int unixClose(sqlite3_file *id){$/;"	f	file:	signature:(sqlite3_file *id)
unixCurrentTime	sqlite3.c	/^static int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow){$/;"	f	file:	signature:(sqlite3_vfs *NotUsed, double *prNow)
unixCurrentTimeInt64	sqlite3.c	/^static int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow){$/;"	f	file:	signature:(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow)
unixDelete	sqlite3.c	/^static int unixDelete($/;"	f	file:	signature:( sqlite3_vfs *NotUsed, const char *zPath, int dirSync )
unixDeviceCharacteristics	sqlite3.c	/^static int unixDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:	signature:(sqlite3_file *id)
unixDlClose	sqlite3.c	/^static void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle){$/;"	f	file:	signature:(sqlite3_vfs *NotUsed, void *pHandle)
unixDlClose	sqlite3.c	30899;"	d	file:
unixDlError	sqlite3.c	/^static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){$/;"	f	file:	signature:(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut)
unixDlError	sqlite3.c	30897;"	d	file:
unixDlOpen	sqlite3.c	/^static void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename){$/;"	f	file:	signature:(sqlite3_vfs *NotUsed, const char *zFilename)
unixDlOpen	sqlite3.c	30896;"	d	file:
unixDlSym	sqlite3.c	/^static void (*unixDlSym(sqlite3_vfs *NotUsed, void *p, const char*zSym))(void){$/;"	f	file:	signature:(sqlite3_vfs *NotUsed, void *p, const char*zSym)
unixDlSym	sqlite3.c	30898;"	d	file:
unixEnterMutex	sqlite3.c	/^static void unixEnterMutex(void){$/;"	f	file:	signature:(void)
unixFetch	sqlite3.c	/^static int unixFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){$/;"	f	file:	signature:(sqlite3_file *fd, i64 iOff, int nAmt, void **pp)
unixFile	sqlite3.c	/^struct unixFile {$/;"	s	file:
unixFile	sqlite3.c	/^typedef struct unixFile unixFile;$/;"	t	typeref:struct:unixFile	file:
unixFile::aPadding	sqlite3.c	/^  char aPadding[32];$/;"	m	struct:unixFile	file:	access:public
unixFile::ctrlFlags	sqlite3.c	/^  unsigned short int ctrlFlags;       \/* Behavioral bits.  UNIXFILE_* flags *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::dbUpdate	sqlite3.c	/^  unsigned char dbUpdate;        \/* True if any part of database file changed *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::deviceCharacteristics	sqlite3.c	/^  int deviceCharacteristics;          \/* Precomputed device characteristics *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::eFileLock	sqlite3.c	/^  unsigned char eFileLock;            \/* The type of lock held on this fd *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::fsFlags	sqlite3.c	/^  unsigned fsFlags;                   \/* cached details from statfs() *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::h	sqlite3.c	/^  int h;                              \/* The file descriptor *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::inNormalWrite	sqlite3.c	/^  unsigned char inNormalWrite;   \/* True if in a normal write operation *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::lastErrno	sqlite3.c	/^  int lastErrno;                      \/* The unix errno from last I\/O error *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::lockingContext	sqlite3.c	/^  void *lockingContext;               \/* Locking style specific state *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::mmapSize	sqlite3.c	/^  sqlite3_int64 mmapSize;             \/* Usable size of mapping at pMapRegion *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::mmapSizeActual	sqlite3.c	/^  sqlite3_int64 mmapSizeActual;       \/* Actual size of mapping at pMapRegion *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::mmapSizeMax	sqlite3.c	/^  sqlite3_int64 mmapSizeMax;          \/* Configured FCNTL_MMAP_SIZE value *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::nFetchOut	sqlite3.c	/^  int nFetchOut;                      \/* Number of outstanding xFetch refs *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::openFlags	sqlite3.c	/^  int openFlags;                      \/* The flags specified at open() *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::pId	sqlite3.c	/^  struct vxworksFileId *pId;          \/* Unique file ID *\/$/;"	m	struct:unixFile	typeref:struct:unixFile::vxworksFileId	file:	access:public
unixFile::pInode	sqlite3.c	/^  unixInodeInfo *pInode;              \/* Info about locks on this inode *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::pMapRegion	sqlite3.c	/^  void *pMapRegion;                   \/* Memory mapped region *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::pMethod	sqlite3.c	/^  sqlite3_io_methods const *pMethod;  \/* Always the first entry *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::pShm	sqlite3.c	/^  unixShm *pShm;                      \/* Shared memory segment information *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::pUnused	sqlite3.c	/^  UnixUnusedFd *pUnused;              \/* Pre-allocated UnixUnusedFd *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;                  \/* The VFS that created this unixFile *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::sectorSize	sqlite3.c	/^  int sectorSize;                     \/* Device sector size *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::szChunk	sqlite3.c	/^  int szChunk;                        \/* Configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::transCntrChng	sqlite3.c	/^  unsigned char transCntrChng;   \/* True if the transaction counter changed *\/$/;"	m	struct:unixFile	file:	access:public
unixFile::zPath	sqlite3.c	/^  const char *zPath;                  \/* Name of the file *\/$/;"	m	struct:unixFile	file:	access:public
unixFileControl	sqlite3.c	/^static int unixFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:	signature:(sqlite3_file *id, int op, void *pArg)
unixFileId	sqlite3.c	/^struct unixFileId {$/;"	s	file:
unixFileId::dev	sqlite3.c	/^  dev_t dev;                  \/* Device number *\/$/;"	m	struct:unixFileId	file:	access:public
unixFileId::ino	sqlite3.c	/^  ino_t ino;                  \/* Inode number *\/$/;"	m	struct:unixFileId	file:	access:public
unixFileId::pId	sqlite3.c	/^  struct vxworksFileId *pId;  \/* Unique file ID for vxworks. *\/$/;"	m	struct:unixFileId	typeref:struct:unixFileId::vxworksFileId	file:	access:public
unixFileLock	sqlite3.c	/^static int unixFileLock(unixFile *pFile, struct flock *pLock){$/;"	f	file:	signature:(unixFile *pFile, struct flock *pLock)
unixFileSize	sqlite3.c	/^static int unixFileSize(sqlite3_file *id, i64 *pSize){$/;"	f	file:	signature:(sqlite3_file *id, i64 *pSize)
unixFullPathname	sqlite3.c	/^static int unixFullPathname($/;"	f	file:	signature:( sqlite3_vfs *pVfs, const char *zPath, int nOut, char *zOut )
unixGetLastError	sqlite3.c	/^static int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3){$/;"	f	file:	signature:(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3)
unixGetSystemCall	sqlite3.c	/^static sqlite3_syscall_ptr unixGetSystemCall($/;"	f	file:	signature:( sqlite3_vfs *pNotUsed, const char *zName )
unixGetTempname	sqlite3.c	/^static int unixGetTempname(int nBuf, char *zBuf);$/;"	p	file:	signature:(int nBuf, char *zBuf)
unixGetTempname	sqlite3.c	/^static int unixGetTempname(int nBuf, char *zBuf){$/;"	f	file:	signature:(int nBuf, char *zBuf)
unixGetpagesize	sqlite3.c	/^static int unixGetpagesize(void);$/;"	p	file:	signature:(void)
unixGetpagesize	sqlite3.c	/^static int unixGetpagesize(void){$/;"	f	file:	signature:(void)
unixInodeInfo	sqlite3.c	/^struct unixInodeInfo {$/;"	s	file:
unixInodeInfo	sqlite3.c	/^typedef struct unixInodeInfo unixInodeInfo;   \/* An i-node *\/$/;"	t	typeref:struct:unixInodeInfo	file:
unixInodeInfo::aSemName	sqlite3.c	/^  char aSemName[MAX_PATHNAME+2];  \/* Name of that semaphore *\/$/;"	m	struct:unixInodeInfo	file:	access:public
unixInodeInfo::bProcessLock	sqlite3.c	/^  unsigned char bProcessLock;     \/* An exclusive process lock is held *\/$/;"	m	struct:unixInodeInfo	file:	access:public
unixInodeInfo::eFileLock	sqlite3.c	/^  unsigned char eFileLock;        \/* One of SHARED_LOCK, RESERVED_LOCK etc. *\/$/;"	m	struct:unixInodeInfo	file:	access:public
unixInodeInfo::fileId	sqlite3.c	/^  struct unixFileId fileId;       \/* The lookup key *\/$/;"	m	struct:unixInodeInfo	typeref:struct:unixInodeInfo::unixFileId	file:	access:public
unixInodeInfo::nLock	sqlite3.c	/^  int nLock;                      \/* Number of outstanding file locks *\/$/;"	m	struct:unixInodeInfo	file:	access:public
unixInodeInfo::nRef	sqlite3.c	/^  int nRef;                       \/* Number of pointers to this structure *\/$/;"	m	struct:unixInodeInfo	file:	access:public
unixInodeInfo::nShared	sqlite3.c	/^  int nShared;                    \/* Number of SHARED locks held *\/$/;"	m	struct:unixInodeInfo	file:	access:public
unixInodeInfo::pNext	sqlite3.c	/^  unixInodeInfo *pNext;           \/* List of all unixInodeInfo objects *\/$/;"	m	struct:unixInodeInfo	file:	access:public
unixInodeInfo::pPrev	sqlite3.c	/^  unixInodeInfo *pPrev;           \/*    .... doubly linked *\/$/;"	m	struct:unixInodeInfo	file:	access:public
unixInodeInfo::pSem	sqlite3.c	/^  sem_t *pSem;                    \/* Named POSIX semaphore *\/$/;"	m	struct:unixInodeInfo	file:	access:public
unixInodeInfo::pShmNode	sqlite3.c	/^  unixShmNode *pShmNode;          \/* Shared memory associated with this inode *\/$/;"	m	struct:unixInodeInfo	file:	access:public
unixInodeInfo::pUnused	sqlite3.c	/^  UnixUnusedFd *pUnused;          \/* Unused file descriptors to close *\/$/;"	m	struct:unixInodeInfo	file:	access:public
unixInodeInfo::sharedByte	sqlite3.c	/^  unsigned long long sharedByte;  \/* for AFP simulated shared lock *\/$/;"	m	struct:unixInodeInfo	file:	access:public
unixLeaveMutex	sqlite3.c	/^static void unixLeaveMutex(void){$/;"	f	file:	signature:(void)
unixLock	sqlite3.c	/^static int unixLock(sqlite3_file *id, int eFileLock){$/;"	f	file:	signature:(sqlite3_file *id, int eFileLock)
unixLogError	sqlite3.c	25915;"	d	file:
unixLogErrorAtLine	sqlite3.c	/^static int unixLogErrorAtLine($/;"	f	file:	signature:( int errcode, const char *zFunc, const char *zPath, int iLine )
unixMapfile	sqlite3.c	/^static int unixMapfile(unixFile *pFd, i64 nByte);$/;"	p	file:	signature:(unixFile *pFd, i64 nByte)
unixMapfile	sqlite3.c	/^static int unixMapfile(unixFile *pFd, i64 nByte){$/;"	f	file:	signature:(unixFile *pFd, i64 nByte)
unixModeBit	sqlite3.c	/^static void unixModeBit(unixFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:	signature:(unixFile *pFile, unsigned char mask, int *pArg)
unixMutexHeld	sqlite3.c	/^static int unixMutexHeld(void) {$/;"	f	file:	signature:(void)
unixNextSystemCall	sqlite3.c	/^static const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:	signature:(sqlite3_vfs *p, const char *zName)
unixOpen	sqlite3.c	/^static int unixOpen($/;"	f	file:	signature:( sqlite3_vfs *pVfs, const char *zPath, sqlite3_file *pFile, int flags, int *pOutFlags )
unixOpenSharedMemory	sqlite3.c	/^static int unixOpenSharedMemory(unixFile *pDbFd){$/;"	f	file:	signature:(unixFile *pDbFd)
unixRandomness	sqlite3.c	/^static int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){$/;"	f	file:	signature:(sqlite3_vfs *NotUsed, int nBuf, char *zBuf)
unixRead	sqlite3.c	/^static int unixRead($/;"	f	file:	signature:( sqlite3_file *id, void *pBuf, int amt, sqlite3_int64 offset )
unixRemapfile	sqlite3.c	/^static void unixRemapfile($/;"	f	file:	signature:( unixFile *pFd, i64 nNew )
unixSectorSize	sqlite3.c	/^static int unixSectorSize(sqlite3_file *NotUsed){$/;"	f	file:	signature:(sqlite3_file *NotUsed)
unixSectorSize	sqlite3.c	/^static int unixSectorSize(sqlite3_file *id){$/;"	f	file:	signature:(sqlite3_file *id)
unixSetSystemCall	sqlite3.c	/^static int unixSetSystemCall($/;"	f	file:	signature:( sqlite3_vfs *pNotUsed, const char *zName, sqlite3_syscall_ptr pNewFunc )
unixShm	sqlite3.c	/^struct unixShm {$/;"	s	file:
unixShm	sqlite3.c	/^typedef struct unixShm unixShm;               \/* Connection shared memory *\/$/;"	t	typeref:struct:unixShm	file:
unixShm::exclMask	sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShm	file:	access:public
unixShm::hasMutex	sqlite3.c	/^  u8 hasMutex;               \/* True if holding the unixShmNode mutex *\/$/;"	m	struct:unixShm	file:	access:public
unixShm::id	sqlite3.c	/^  u8 id;                     \/* Id of this connection within its unixShmNode *\/$/;"	m	struct:unixShm	file:	access:public
unixShm::pNext	sqlite3.c	/^  unixShm *pNext;            \/* Next unixShm with the same unixShmNode *\/$/;"	m	struct:unixShm	file:	access:public
unixShm::pShmNode	sqlite3.c	/^  unixShmNode *pShmNode;     \/* The underlying unixShmNode object *\/$/;"	m	struct:unixShm	file:	access:public
unixShm::sharedMask	sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:unixShm	file:	access:public
unixShmBarrier	sqlite3.c	/^static void unixShmBarrier($/;"	f	file:	signature:( sqlite3_file *fd )
unixShmBarrier	sqlite3.c	29496;"	d	file:
unixShmLock	sqlite3.c	/^static int unixShmLock($/;"	f	file:	signature:( sqlite3_file *fd, int ofst, int n, int flags )
unixShmLock	sqlite3.c	29495;"	d	file:
unixShmMap	sqlite3.c	/^static int unixShmMap($/;"	f	file:	signature:( sqlite3_file *fd, int iRegion, int szRegion, int bExtend, void volatile **pp )
unixShmMap	sqlite3.c	29494;"	d	file:
unixShmNode	sqlite3.c	/^struct unixShmNode {$/;"	s	file:
unixShmNode	sqlite3.c	/^typedef struct unixShmNode unixShmNode;       \/* Shared memory instance *\/$/;"	t	typeref:struct:unixShmNode	file:
unixShmNode::apRegion	sqlite3.c	/^  char **apRegion;           \/* Array of mapped shared-memory regions *\/$/;"	m	struct:unixShmNode	file:	access:public
unixShmNode::exclMask	sqlite3.c	/^  u8 exclMask;               \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShmNode	file:	access:public
unixShmNode::h	sqlite3.c	/^  int h;                     \/* Open file descriptor *\/$/;"	m	struct:unixShmNode	file:	access:public
unixShmNode::isReadonly	sqlite3.c	/^  u8 isReadonly;             \/* True if read-only *\/$/;"	m	struct:unixShmNode	file:	access:public
unixShmNode::mutex	sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:unixShmNode	file:	access:public
unixShmNode::nRef	sqlite3.c	/^  int nRef;                  \/* Number of unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:	access:public
unixShmNode::nRegion	sqlite3.c	/^  u16 nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:unixShmNode	file:	access:public
unixShmNode::nextShmId	sqlite3.c	/^  u8 nextShmId;              \/* Next available unixShm.id value *\/$/;"	m	struct:unixShmNode	file:	access:public
unixShmNode::pFirst	sqlite3.c	/^  unixShm *pFirst;           \/* All unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:	access:public
unixShmNode::pInode	sqlite3.c	/^  unixInodeInfo *pInode;     \/* unixInodeInfo that owns this SHM node *\/$/;"	m	struct:unixShmNode	file:	access:public
unixShmNode::sharedMask	sqlite3.c	/^  u8 sharedMask;             \/* Mask of shared locks held *\/$/;"	m	struct:unixShmNode	file:	access:public
unixShmNode::szRegion	sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:unixShmNode	file:	access:public
unixShmNode::zFilename	sqlite3.c	/^  char *zFilename;           \/* Name of the mmapped file *\/$/;"	m	struct:unixShmNode	file:	access:public
unixShmPurge	sqlite3.c	/^static void unixShmPurge(unixFile *pFd){$/;"	f	file:	signature:(unixFile *pFd)
unixShmRegionPerMap	sqlite3.c	/^static int unixShmRegionPerMap(void){$/;"	f	file:	signature:(void)
unixShmSystemLock	sqlite3.c	/^static int unixShmSystemLock($/;"	f	file:	signature:( unixShmNode *pShmNode, int lockType, int ofst, int n )
unixShmUnmap	sqlite3.c	/^static int unixShmUnmap($/;"	f	file:	signature:( sqlite3_file *fd, int deleteFlag )
unixShmUnmap	sqlite3.c	29497;"	d	file:
unixSleep	sqlite3.c	/^static int unixSleep(sqlite3_vfs *NotUsed, int microseconds){$/;"	f	file:	signature:(sqlite3_vfs *NotUsed, int microseconds)
unixSync	sqlite3.c	/^static int unixSync(sqlite3_file *id, int flags){$/;"	f	file:	signature:(sqlite3_file *id, int flags)
unixTempFileDir	sqlite3.c	/^static const char *unixTempFileDir(void){$/;"	f	file:	signature:(void)
unixTruncate	sqlite3.c	/^static int unixTruncate(sqlite3_file *id, i64 nByte){$/;"	f	file:	signature:(sqlite3_file *id, i64 nByte)
unixUnfetch	sqlite3.c	/^static int unixUnfetch(sqlite3_file *fd, i64 iOff, void *p){$/;"	f	file:	signature:(sqlite3_file *fd, i64 iOff, void *p)
unixUnlock	sqlite3.c	/^static int unixUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:	signature:(sqlite3_file *id, int eFileLock)
unixUnmapfile	sqlite3.c	/^static void unixUnmapfile(unixFile *pFd);$/;"	p	file:	signature:(unixFile *pFd)
unixUnmapfile	sqlite3.c	/^static void unixUnmapfile(unixFile *pFd){$/;"	f	file:	signature:(unixFile *pFd)
unixWrite	sqlite3.c	/^static int unixWrite($/;"	f	file:	signature:( sqlite3_file *id, const void *pBuf, int amt, sqlite3_int64 offset )
unix_syscall	sqlite3.c	/^static struct unix_syscall {$/;"	s	file:
unix_syscall::pCurrent	sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:unix_syscall	file:	access:public
unix_syscall::pDefault	sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:unix_syscall	file:	access:public
unix_syscall::zName	sqlite3.c	/^  const char *zName;            \/* Name of the system call *\/$/;"	m	struct:unix_syscall	file:	access:public
unlikely	sqlite3.c	8155;"	d	file:
unlockBtreeIfUnused	sqlite3.c	/^static void unlockBtreeIfUnused(BtShared *pBt){$/;"	f	file:	signature:(BtShared *pBt)
unlockBtreeMutex	sqlite3.c	/^static void SQLITE_NOINLINE unlockBtreeMutex(Btree *p){$/;"	f	file:	signature:(Btree *p)
unlock_notify	sqlite3.c	/^  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
untestedTerms	sqlite3.c	/^  u8 untestedTerms;         \/* Not all WHERE terms resolved by outer loop *\/$/;"	m	struct:WhereInfo	file:	access:public
unused	sqlite3.c	/^  u32 unused;                     \/* Unused (padding) field *\/$/;"	m	struct:WalIndexHdr	file:	access:public
updateAccumulator	sqlite3.c	/^static void updateAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:	signature:(Parse *pParse, AggInfo *pAggInfo)
updateMapping	sqlite3.c	/^static int updateMapping($/;"	f	file:	signature:( Rtree *pRtree, i64 iRowid, RtreeNode *pNode, int iHeight )
updateMaxBlobsize	sqlite3.c	/^static void updateMaxBlobsize(Mem *p){$/;"	f	file:	signature:(Mem *p)
updateVirtualTable	sqlite3.c	/^static void updateVirtualTable($/;"	f	file:	signature:( Parse *pParse, SrcList *pSrc, Table *pTab, ExprList *pChanges, Expr *pRowid, int *aXRef, Expr *pWhere, int onError )
updateVirtualTable	sqlite3.c	/^static void updateVirtualTable($/;"	p	file:	signature:( Parse *pParse, SrcList *pSrc, Table *pTab, ExprList *pChanges, Expr *pRowidExpr, int *aXRef, Expr *pWhere, int onError )
update_hook	sqlite3.c	/^  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,$/;"	m	struct:sqlite3_api_routines	file:	access:public
upperFunc	sqlite3.c	/^static void upperFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:	signature:(sqlite3_context *context, int argc, sqlite3_value **argv)
uri_boolean	sqlite3.c	/^  int (*uri_boolean)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
uri_int64	sqlite3.c	/^  sqlite3_int64 (*uri_int64)(const char*,const char*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:	access:public
uri_parameter	sqlite3.c	/^  const char *(*uri_parameter)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
usable	sqlite3.c	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:	access:public
usable	sqlite3.h	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	access:public
usableSize	sqlite3.c	/^  u32 usableSize;       \/* Number of usable bytes on each page *\/$/;"	m	struct:BtShared	file:	access:public
useJournal	sqlite3.c	/^  u8 useJournal;              \/* Use a rollback journal on this file *\/$/;"	m	struct:Pager	file:	access:public
useMalloc	sqlite3.c	/^  u8   useMalloc;      \/* 0: none,  1: sqlite3DbMalloc,  2: sqlite3_malloc *\/$/;"	m	struct:StrAccum	file:	access:public
useRandomRowid	sqlite3.c	/^  Bool useRandomRowid:1;\/* Generate new record numbers semi-randomly *\/$/;"	m	struct:VdbeCursor	file:	access:public
useSortingIdx	sqlite3.c	/^  u8 useSortingIdx;       \/* In direct mode, reference the sorting index rather$/;"	m	struct:AggInfo	file:	access:public
usedAsColumnCache	sqlite3.c	/^static int usedAsColumnCache(Parse *pParse, int iFrom, int iTo){$/;"	f	file:	signature:(Parse *pParse, int iFrom, int iTo)
user_data	sqlite3.c	/^  void * (*user_data)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
usesStmtJournal	sqlite3.c	/^  bft usesStmtJournal:1;  \/* True if uses a statement journal *\/$/;"	m	struct:Vdbe	file:	access:public
v	sqlite3.c	/^  Vdbe *v;                   \/* Vdbe to iterate through the opcodes of *\/$/;"	m	struct:VdbeOpIter	file:	access:public
v	sqlite3.c	/^  Vdbe *v;                \/* VM this frame belongs to *\/$/;"	m	struct:VdbeFrame	file:	access:public
v	sqlite3.c	/^  i64 v;                        \/* ROWID value for this entry *\/$/;"	m	struct:RowSetEntry	file:	access:public
v1	sqlite3.c	/^  int v1, v2;       \/* Values for up to two %d fields in zPfx *\/$/;"	m	struct:IntegrityCk	file:	access:public
v2	sqlite3.c	/^  int v1, v2;       \/* Values for up to two %d fields in zPfx *\/$/;"	m	struct:IntegrityCk	file:	access:public
vacuumFinalize	sqlite3.c	/^static int vacuumFinalize(sqlite3 *db, sqlite3_stmt *pStmt, char **pzErrMsg){$/;"	f	file:	signature:(sqlite3 *db, sqlite3_stmt *pStmt, char **pzErrMsg)
validHMS	sqlite3.c	/^  char validHMS;     \/* True (1) if h,m,s are valid *\/$/;"	m	struct:DateTime	file:	access:public
validJD	sqlite3.c	/^  char validJD;      \/* True (1) if iJD is valid *\/$/;"	m	struct:DateTime	file:	access:public
validTZ	sqlite3.c	/^  char validTZ;      \/* True (1) if tz is valid *\/$/;"	m	struct:DateTime	file:	access:public
validYMD	sqlite3.c	/^  char validYMD;     \/* True (1) if Y,M,D are valid *\/$/;"	m	struct:DateTime	file:	access:public
value	sqlite3.c	/^  struct {int value; int mask;} yy429;$/;"	m	struct:__anon22::__anon23	file:	access:public
valueFromExpr	sqlite3.c	/^static int valueFromExpr($/;"	f	file:	signature:( sqlite3 *db, Expr *pExpr, u8 enc, u8 affinity, sqlite3_value **ppVal, struct ValueNewStat4Ctx *pCtx )
valueNew	sqlite3.c	/^static sqlite3_value *valueNew(sqlite3 *db, struct ValueNewStat4Ctx *p){$/;"	f	file:	signature:(sqlite3 *db, struct ValueNewStat4Ctx *p)
valueToText	sqlite3.c	/^static SQLITE_NOINLINE const void *valueToText(sqlite3_value* pVal, u8 enc){$/;"	f	file:	signature:(sqlite3_value* pVal, u8 enc)
value_blob	sqlite3.c	/^  const void * (*value_blob)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
value_bytes	sqlite3.c	/^  int  (*value_bytes)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
value_bytes16	sqlite3.c	/^  int  (*value_bytes16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
value_double	sqlite3.c	/^  double  (*value_double)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
value_int	sqlite3.c	/^  int  (*value_int)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
value_int64	sqlite3.c	/^  sqlite_int64  (*value_int64)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
value_numeric_type	sqlite3.c	/^  int  (*value_numeric_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
value_text	sqlite3.c	/^  const unsigned char * (*value_text)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
value_text16	sqlite3.c	/^  const void * (*value_text16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
value_text16be	sqlite3.c	/^  const void * (*value_text16be)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
value_text16le	sqlite3.c	/^  const void * (*value_text16le)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
value_type	sqlite3.c	/^  int  (*value_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
vdbeCommit	sqlite3.c	/^static int vdbeCommit(sqlite3 *db, Vdbe *p){$/;"	f	file:	signature:(sqlite3 *db, Vdbe *p)
vdbeCompareMemString	sqlite3.c	/^static int vdbeCompareMemString($/;"	f	file:	signature:( const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl, u8 *prcErr )
vdbeFreeOpArray	sqlite3.c	/^static void vdbeFreeOpArray(sqlite3 *, Op *, int);$/;"	p	file:	signature:(sqlite3 *, Op *, int)
vdbeFreeOpArray	sqlite3.c	/^static void vdbeFreeOpArray(sqlite3 *db, Op *aOp, int nOp){$/;"	f	file:	signature:(sqlite3 *db, Op *aOp, int nOp)
vdbeIncrBgPopulate	sqlite3.c	/^static int vdbeIncrBgPopulate(IncrMerger *pIncr){$/;"	f	file:	signature:(IncrMerger *pIncr)
vdbeIncrFree	sqlite3.c	/^static void vdbeIncrFree(IncrMerger *);$/;"	p	file:	signature:(IncrMerger *)
vdbeIncrFree	sqlite3.c	/^static void vdbeIncrFree(IncrMerger *pIncr){$/;"	f	file:	signature:(IncrMerger *pIncr)
vdbeIncrMergerNew	sqlite3.c	/^static int vdbeIncrMergerNew($/;"	f	file:	signature:( SortSubtask *pTask, MergeEngine *pMerger, IncrMerger **ppOut )
vdbeIncrMergerSetThreads	sqlite3.c	/^static void vdbeIncrMergerSetThreads(IncrMerger *pIncr){$/;"	f	file:	signature:(IncrMerger *pIncr)
vdbeIncrPopulate	sqlite3.c	/^static int vdbeIncrPopulate(IncrMerger *pIncr){$/;"	f	file:	signature:(IncrMerger *pIncr)
vdbeIncrPopulateThread	sqlite3.c	/^static void *vdbeIncrPopulateThread(void *pCtx){$/;"	f	file:	signature:(void *pCtx)
vdbeIncrSwap	sqlite3.c	/^static int vdbeIncrSwap(IncrMerger *pIncr){$/;"	f	file:	signature:(IncrMerger *pIncr)
vdbeIncrSwap	sqlite3.c	/^static int vdbeIncrSwap(IncrMerger*);$/;"	p	file:	signature:(IncrMerger*)
vdbeInvokeSqllog	sqlite3.c	/^static void vdbeInvokeSqllog(Vdbe *v){$/;"	f	file:	signature:(Vdbe *v)
vdbeInvokeSqllog	sqlite3.c	65751;"	d	file:
vdbeMemAddTerminator	sqlite3.c	/^static SQLITE_NOINLINE int vdbeMemAddTerminator(Mem *pMem){$/;"	f	file:	signature:(Mem *pMem)
vdbeMemClear	sqlite3.c	/^static SQLITE_NOINLINE void vdbeMemClear(Mem *p){$/;"	f	file:	signature:(Mem *p)
vdbeMemClearExternAndSetNull	sqlite3.c	/^static SQLITE_NOINLINE void vdbeMemClearExternAndSetNull(Mem *p){$/;"	f	file:	signature:(Mem *p)
vdbeMergeEngineCompare	sqlite3.c	/^static void vdbeMergeEngineCompare($/;"	f	file:	signature:( MergeEngine *pMerger, int iOut )
vdbeMergeEngineFree	sqlite3.c	/^static void vdbeMergeEngineFree(MergeEngine *pMerger){$/;"	f	file:	signature:(MergeEngine *pMerger)
vdbeMergeEngineInit	sqlite3.c	/^static int vdbeMergeEngineInit($/;"	f	file:	signature:( SortSubtask *pTask, MergeEngine *pMerger, int eMode )
vdbeMergeEngineLevel0	sqlite3.c	/^static int vdbeMergeEngineLevel0($/;"	f	file:	signature:( SortSubtask *pTask, int nPMA, i64 *piOffset, MergeEngine **ppOut )
vdbeMergeEngineNew	sqlite3.c	/^static MergeEngine *vdbeMergeEngineNew(int nReader){$/;"	f	file:	signature:(int nReader)
vdbeMergeEngineStep	sqlite3.c	/^static int vdbeMergeEngineStep($/;"	f	file:	signature:( MergeEngine *pMerger, int *pbEof )
vdbePmaReadBlob	sqlite3.c	/^static int vdbePmaReadBlob($/;"	f	file:	signature:( PmaReader *p, int nByte, u8 **ppOut )
vdbePmaReadVarint	sqlite3.c	/^static int vdbePmaReadVarint(PmaReader *p, u64 *pnOut){$/;"	f	file:	signature:(PmaReader *p, u64 *pnOut)
vdbePmaReaderBgIncrInit	sqlite3.c	/^static int vdbePmaReaderBgIncrInit(PmaReader *pReadr){$/;"	f	file:	signature:(PmaReader *pReadr)
vdbePmaReaderBgInit	sqlite3.c	/^static void *vdbePmaReaderBgInit(void *pCtx){$/;"	f	file:	signature:(void *pCtx)
vdbePmaReaderClear	sqlite3.c	/^static void vdbePmaReaderClear(PmaReader *pReadr){$/;"	f	file:	signature:(PmaReader *pReadr)
vdbePmaReaderIncrMergeInit	sqlite3.c	/^static int vdbePmaReaderIncrMergeInit(PmaReader *pReadr, int eMode);$/;"	p	file:	signature:(PmaReader *pReadr, int eMode)
vdbePmaReaderIncrMergeInit	sqlite3.c	/^static int vdbePmaReaderIncrMergeInit(PmaReader *pReadr, int eMode){$/;"	f	file:	signature:(PmaReader *pReadr, int eMode)
vdbePmaReaderInit	sqlite3.c	/^static int vdbePmaReaderInit($/;"	f	file:	signature:( SortSubtask *pTask, SorterFile *pFile, i64 iStart, PmaReader *pReadr, i64 *pnByte )
vdbePmaReaderNext	sqlite3.c	/^static int vdbePmaReaderNext(PmaReader *pReadr){$/;"	f	file:	signature:(PmaReader *pReadr)
vdbePmaReaderSeek	sqlite3.c	/^static int vdbePmaReaderSeek($/;"	f	file:	signature:( SortSubtask *pTask, PmaReader *pReadr, SorterFile *pFile, i64 iOff )
vdbePmaWriteBlob	sqlite3.c	/^static void vdbePmaWriteBlob(PmaWriter *p, u8 *pData, int nData){$/;"	f	file:	signature:(PmaWriter *p, u8 *pData, int nData)
vdbePmaWriteVarint	sqlite3.c	/^static void vdbePmaWriteVarint(PmaWriter *p, u64 iVal){$/;"	f	file:	signature:(PmaWriter *p, u64 iVal)
vdbePmaWriterFinish	sqlite3.c	/^static int vdbePmaWriterFinish(PmaWriter *p, i64 *piEof){$/;"	f	file:	signature:(PmaWriter *p, i64 *piEof)
vdbePmaWriterInit	sqlite3.c	/^static void vdbePmaWriterInit($/;"	f	file:	signature:( sqlite3_file *pFd, PmaWriter *p, int nBuf, i64 iStart )
vdbeRecordCompareDebug	sqlite3.c	/^static int vdbeRecordCompareDebug($/;"	f	file:	signature:( int nKey1, const void *pKey1, const UnpackedRecord *pPKey2, int desiredResult )
vdbeRecordCompareInt	sqlite3.c	/^static int vdbeRecordCompareInt($/;"	f	file:	signature:( int nKey1, const void *pKey1, UnpackedRecord *pPKey2 )
vdbeRecordCompareString	sqlite3.c	/^static int vdbeRecordCompareString($/;"	f	file:	signature:( int nKey1, const void *pKey1, UnpackedRecord *pPKey2 )
vdbeRecordCompareWithSkip	sqlite3.c	/^static int vdbeRecordCompareWithSkip($/;"	f	file:	signature:( int nKey1, const void *pKey1, UnpackedRecord *pPKey2, int bSkip )
vdbeRecordDecodeInt	sqlite3.c	/^static i64 vdbeRecordDecodeInt(u32 serial_type, const u8 *aKey){$/;"	f	file:	signature:(u32 serial_type, const u8 *aKey)
vdbeReleaseAndSetInt64	sqlite3.c	/^static SQLITE_NOINLINE void vdbeReleaseAndSetInt64(Mem *pMem, i64 val){$/;"	f	file:	signature:(Mem *pMem, i64 val)
vdbeSafety	sqlite3.c	/^static int vdbeSafety(Vdbe *p){$/;"	f	file:	signature:(Vdbe *p)
vdbeSafetyNotNull	sqlite3.c	/^static int vdbeSafetyNotNull(Vdbe *p){$/;"	f	file:	signature:(Vdbe *p)
vdbeSortAllocUnpacked	sqlite3.c	/^static int vdbeSortAllocUnpacked(SortSubtask *pTask){$/;"	f	file:	signature:(SortSubtask *pTask)
vdbeSortSubtaskCleanup	sqlite3.c	/^static void vdbeSortSubtaskCleanup(sqlite3 *db, SortSubtask *pTask){$/;"	f	file:	signature:(sqlite3 *db, SortSubtask *pTask)
vdbeSorterAddToTree	sqlite3.c	/^static int vdbeSorterAddToTree($/;"	f	file:	signature:( SortSubtask *pTask, int nDepth, int iSeq, MergeEngine *pRoot, MergeEngine *pLeaf )
vdbeSorterBlockDebug	sqlite3.c	/^static void vdbeSorterBlockDebug($/;"	f	file:	signature:( SortSubtask *pTask, int bBlocked, const char *zEvent )
vdbeSorterBlockDebug	sqlite3.c	76939;"	d	file:
vdbeSorterCompare	sqlite3.c	/^static int vdbeSorterCompare($/;"	f	file:	signature:( SortSubtask *pTask, const void *pKey1, int nKey1, const void *pKey2, int nKey2 )
vdbeSorterCreateThread	sqlite3.c	/^static int vdbeSorterCreateThread($/;"	f	file:	signature:( SortSubtask *pTask, void *(*xTask)(void*), void *pIn )
vdbeSorterExtendFile	sqlite3.c	/^static void vdbeSorterExtendFile(sqlite3 *db, sqlite3_file *pFd, i64 nByte){$/;"	f	file:	signature:(sqlite3 *db, sqlite3_file *pFd, i64 nByte)
vdbeSorterExtendFile	sqlite3.c	77127;"	d	file:
vdbeSorterFlushPMA	sqlite3.c	/^static int vdbeSorterFlushPMA(VdbeSorter *pSorter){$/;"	f	file:	signature:(VdbeSorter *pSorter)
vdbeSorterFlushThread	sqlite3.c	/^static void *vdbeSorterFlushThread(void *pCtx){$/;"	f	file:	signature:(void *pCtx)
vdbeSorterJoinAll	sqlite3.c	/^static int vdbeSorterJoinAll(VdbeSorter *pSorter, int rcin){$/;"	f	file:	signature:(VdbeSorter *pSorter, int rcin)
vdbeSorterJoinAll	sqlite3.c	76999;"	d	file:
vdbeSorterJoinThread	sqlite3.c	/^static int vdbeSorterJoinThread(SortSubtask *pTask){$/;"	f	file:	signature:(SortSubtask *pTask)
vdbeSorterJoinThread	sqlite3.c	77000;"	d	file:
vdbeSorterListToPMA	sqlite3.c	/^static int vdbeSorterListToPMA(SortSubtask *pTask, SorterList *pList){$/;"	f	file:	signature:(SortSubtask *pTask, SorterList *pList)
vdbeSorterMapFile	sqlite3.c	/^static int vdbeSorterMapFile(SortSubtask *pTask, SorterFile *pFile, u8 **pp){$/;"	f	file:	signature:(SortSubtask *pTask, SorterFile *pFile, u8 **pp)
vdbeSorterMerge	sqlite3.c	/^static void vdbeSorterMerge($/;"	f	file:	signature:( SortSubtask *pTask, SorterRecord *p1, SorterRecord *p2, SorterRecord **ppOut )
vdbeSorterMergeTreeBuild	sqlite3.c	/^static int vdbeSorterMergeTreeBuild($/;"	f	file:	signature:( VdbeSorter *pSorter, MergeEngine **ppOut )
vdbeSorterOpenTempFile	sqlite3.c	/^static int vdbeSorterOpenTempFile($/;"	f	file:	signature:( sqlite3 *db, i64 nExtend, sqlite3_file **ppFd )
vdbeSorterPopulateDebug	sqlite3.c	/^static void vdbeSorterPopulateDebug($/;"	f	file:	signature:( SortSubtask *pTask, const char *zEvent )
vdbeSorterPopulateDebug	sqlite3.c	76938;"	d	file:
vdbeSorterRecordFree	sqlite3.c	/^static void vdbeSorterRecordFree(sqlite3 *db, SorterRecord *pRecord){$/;"	f	file:	signature:(sqlite3 *db, SorterRecord *pRecord)
vdbeSorterRewindDebug	sqlite3.c	/^static void vdbeSorterRewindDebug(const char *zEvent){$/;"	f	file:	signature:(const char *zEvent)
vdbeSorterRewindDebug	sqlite3.c	76937;"	d	file:
vdbeSorterRowkey	sqlite3.c	/^static void *vdbeSorterRowkey($/;"	f	file:	signature:( const VdbeSorter *pSorter, int *pnKey )
vdbeSorterSetupMerge	sqlite3.c	/^static int vdbeSorterSetupMerge(VdbeSorter *pSorter){$/;"	f	file:	signature:(VdbeSorter *pSorter)
vdbeSorterSort	sqlite3.c	/^static int vdbeSorterSort(SortSubtask *pTask, SorterList *pList){$/;"	f	file:	signature:(SortSubtask *pTask, SorterList *pList)
vdbeSorterTreeDepth	sqlite3.c	/^static int vdbeSorterTreeDepth(int nPMA){$/;"	f	file:	signature:(int nPMA)
vdbeSorterWorkDebug	sqlite3.c	/^static void vdbeSorterWorkDebug(SortSubtask *pTask, const char *zEvent){$/;"	f	file:	signature:(SortSubtask *pTask, const char *zEvent)
vdbeSorterWorkDebug	sqlite3.c	76936;"	d	file:
vdbeTakeBranch	sqlite3.c	/^  static void vdbeTakeBranch(int iSrcLine, u8 I, u8 M){$/;"	f	file:	signature:(int iSrcLine, u8 I, u8 M)
vdbeUnbind	sqlite3.c	/^static int vdbeUnbind(Vdbe *p, int i){$/;"	f	file:	signature:(Vdbe *p, int i)
vdbeVComment	sqlite3.c	/^static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){$/;"	f	file:	signature:(Vdbe *p, const char *zFormat, va_list ap)
verifyDbFile	sqlite3.c	/^static void verifyDbFile(unixFile *pFile){$/;"	f	file:	signature:(unixFile *pFile)
versionFunc	sqlite3.c	/^static void versionFunc($/;"	f	file:	signature:( sqlite3_context *context, int NotUsed, sqlite3_value **NotUsed2 )
vfsFlags	sqlite3.c	/^  u32 vfsFlags;               \/* Flags for sqlite3_vfs.xOpen() *\/$/;"	m	struct:Pager	file:	access:public
vfsList	sqlite3.c	/^static sqlite3_vfs * SQLITE_WSD vfsList = 0;$/;"	v	file:
vfsList	sqlite3.c	16205;"	d	file:
vfsUnlink	sqlite3.c	/^static void vfsUnlink(sqlite3_vfs *pVfs){$/;"	f	file:	signature:(sqlite3_vfs *pVfs)
vfs_find	sqlite3.c	/^  sqlite3_vfs *(*vfs_find)(const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
vfs_register	sqlite3.c	/^  int (*vfs_register)(sqlite3_vfs*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
vfs_unregister	sqlite3.c	/^  int (*vfs_unregister)(sqlite3_vfs*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
viaCoroutine	sqlite3.c	/^    unsigned viaCoroutine :1;  \/* Implemented as a co-routine *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
vmprintf	sqlite3.c	/^  char *(*vmprintf)(const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:	access:public
vsnprintf	sqlite3.c	/^  char *(*vsnprintf)(int,char*,const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:	access:public
vtab	sqlite3.c	/^    } vtab;$/;"	m	union:WhereLoop::__anon18	typeref:struct:WhereLoop::__anon18::__anon20	file:	access:public
vtabBestIndex	sqlite3.c	/^static int vtabBestIndex(Parse *pParse, Table *pTab, sqlite3_index_info *p){$/;"	f	file:	signature:(Parse *pParse, Table *pTab, sqlite3_index_info *p)
vtabCallConstructor	sqlite3.c	/^static int vtabCallConstructor($/;"	f	file:	signature:( sqlite3 *db, Table *pTab, Module *pMod, int (*xConstruct)(sqlite3*,void*,int,const char*const*,sqlite3_vtab**,char**), char **pzErr )
vtabDisconnectAll	sqlite3.c	/^static VTable *vtabDisconnectAll(sqlite3 *db, Table *p){$/;"	f	file:	signature:(sqlite3 *db, Table *p)
vtabOnConflict	sqlite3.c	/^  u8 vtabOnConflict;            \/* Value to return for s3_vtab_on_conflict() *\/$/;"	m	struct:sqlite3	file:	access:public
vtab_config	sqlite3.c	/^  int (*vtab_config)(sqlite3*,int op,...);$/;"	m	struct:sqlite3_api_routines	file:	access:public
vtab_on_conflict	sqlite3.c	/^  int (*vtab_on_conflict)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
vxworksFileId	sqlite3.c	/^struct vxworksFileId {$/;"	s	file:
vxworksFileId::nName	sqlite3.c	/^  int nName;                    \/* Length of the zCanonicalName[] string *\/$/;"	m	struct:vxworksFileId	file:	access:public
vxworksFileId::nRef	sqlite3.c	/^  int nRef;                     \/* Number of references to this one *\/$/;"	m	struct:vxworksFileId	file:	access:public
vxworksFileId::pNext	sqlite3.c	/^  struct vxworksFileId *pNext;  \/* Next in a list of them all *\/$/;"	m	struct:vxworksFileId	typeref:struct:vxworksFileId::vxworksFileId	file:	access:public
vxworksFileId::zCanonicalName	sqlite3.c	/^  char *zCanonicalName;         \/* Canonical filename *\/$/;"	m	struct:vxworksFileId	file:	access:public
vxworksFileList	sqlite3.c	/^static struct vxworksFileId *vxworksFileList = 0;$/;"	v	typeref:struct:vxworksFileId	file:
vxworksFindFileId	sqlite3.c	/^static struct vxworksFileId *vxworksFindFileId(const char *zAbsoluteName){$/;"	f	file:	signature:(const char *zAbsoluteName)
vxworksReleaseFileId	sqlite3.c	/^static void vxworksReleaseFileId(struct vxworksFileId *pId){$/;"	f	file:	signature:(struct vxworksFileId *pId)
vxworksSimplifyName	sqlite3.c	/^static int vxworksSimplifyName(char *z, int n){$/;"	f	file:	signature:(char *z, int n)
walBusyLock	sqlite3.c	/^static int walBusyLock($/;"	f	file:	signature:( Wal *pWal, int (*xBusy)(void*), void *pBusyArg, int lockIdx, int n )
walCheckpoint	sqlite3.c	/^static int walCheckpoint($/;"	f	file:	signature:( Wal *pWal, int eMode, int (*xBusyCall)(void*), void *pBusyArg, int sync_flags, u8 *zBuf )
walChecksumBytes	sqlite3.c	/^static void walChecksumBytes($/;"	f	file:	signature:( int nativeCksum, u8 *a, int nByte, const u32 *aIn, u32 *aOut )
walCkptInfo	sqlite3.c	/^static volatile WalCkptInfo *walCkptInfo(Wal *pWal){$/;"	f	file:	signature:(Wal *pWal)
walCleanupHash	sqlite3.c	/^static void walCleanupHash(Wal *pWal){$/;"	f	file:	signature:(Wal *pWal)
walDecodeFrame	sqlite3.c	/^static int walDecodeFrame($/;"	f	file:	signature:( Wal *pWal, u32 *piPage, u32 *pnTruncate, u8 *aData, u8 *aFrame )
walEncodeFrame	sqlite3.c	/^static void walEncodeFrame($/;"	f	file:	signature:( Wal *pWal, u32 iPage, u32 nTruncate, u8 *aData, u8 *aFrame )
walFrameOffset	sqlite3.c	48520;"	d	file:
walFramePage	sqlite3.c	/^static int walFramePage(u32 iFrame){$/;"	f	file:	signature:(u32 iFrame)
walFramePgno	sqlite3.c	/^static u32 walFramePgno(Wal *pWal, u32 iFrame){$/;"	f	file:	signature:(Wal *pWal, u32 iFrame)
walHash	sqlite3.c	/^static int walHash(u32 iPage){$/;"	f	file:	signature:(u32 iPage)
walHashGet	sqlite3.c	/^static int walHashGet($/;"	f	file:	signature:( Wal *pWal, int iHash, volatile ht_slot **paHash, volatile u32 **paPgno, u32 *piZero )
walIndexAppend	sqlite3.c	/^static int walIndexAppend(Wal *pWal, u32 iFrame, u32 iPage){$/;"	f	file:	signature:(Wal *pWal, u32 iFrame, u32 iPage)
walIndexClose	sqlite3.c	/^static void walIndexClose(Wal *pWal, int isDelete){$/;"	f	file:	signature:(Wal *pWal, int isDelete)
walIndexHdr	sqlite3.c	/^static volatile WalIndexHdr *walIndexHdr(Wal *pWal){$/;"	f	file:	signature:(Wal *pWal)
walIndexPage	sqlite3.c	/^static int walIndexPage(Wal *pWal, int iPage, volatile u32 **ppPage){$/;"	f	file:	signature:(Wal *pWal, int iPage, volatile u32 **ppPage)
walIndexReadHdr	sqlite3.c	/^static int walIndexReadHdr(Wal *pWal, int *pChanged){$/;"	f	file:	signature:(Wal *pWal, int *pChanged)
walIndexRecover	sqlite3.c	/^static int walIndexRecover(Wal *pWal){$/;"	f	file:	signature:(Wal *pWal)
walIndexTryHdr	sqlite3.c	/^static int walIndexTryHdr(Wal *pWal, int *pChanged){$/;"	f	file:	signature:(Wal *pWal, int *pChanged)
walIndexWriteHdr	sqlite3.c	/^static void walIndexWriteHdr(Wal *pWal){$/;"	f	file:	signature:(Wal *pWal)
walIteratorFree	sqlite3.c	/^static void walIteratorFree(WalIterator *p){$/;"	f	file:	signature:(WalIterator *p)
walIteratorInit	sqlite3.c	/^static int walIteratorInit(Wal *pWal, WalIterator **pp){$/;"	f	file:	signature:(Wal *pWal, WalIterator **pp)
walIteratorNext	sqlite3.c	/^static int walIteratorNext($/;"	f	file:	signature:( WalIterator *p, u32 *piPage, u32 *piFrame )
walLimitSize	sqlite3.c	/^static void walLimitSize(Wal *pWal, i64 nMax){$/;"	f	file:	signature:(Wal *pWal, i64 nMax)
walLockExclusive	sqlite3.c	/^static int walLockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:	signature:(Wal *pWal, int lockIdx, int n)
walLockName	sqlite3.c	/^static const char *walLockName(int lockIdx){$/;"	f	file:	signature:(int lockIdx)
walLockShared	sqlite3.c	/^static int walLockShared(Wal *pWal, int lockIdx){$/;"	f	file:	signature:(Wal *pWal, int lockIdx)
walMerge	sqlite3.c	/^static void walMerge($/;"	f	file:	signature:( const u32 *aContent, ht_slot *aLeft, int nLeft, ht_slot **paRight, int *pnRight, ht_slot *aTmp )
walMergesort	sqlite3.c	/^static void walMergesort($/;"	f	file:	signature:( const u32 *aContent, ht_slot *aBuffer, ht_slot *aList, int *pnList )
walNextHash	sqlite3.c	/^static int walNextHash(int iPriorHash){$/;"	f	file:	signature:(int iPriorHash)
walPagesize	sqlite3.c	/^static int walPagesize(Wal *pWal){$/;"	f	file:	signature:(Wal *pWal)
walRestartLog	sqlite3.c	/^static int walRestartLog(Wal *pWal){$/;"	f	file:	signature:(Wal *pWal)
walShmBarrier	sqlite3.c	/^static void walShmBarrier(Wal *pWal){$/;"	f	file:	signature:(Wal *pWal)
walSyncFlags	sqlite3.c	/^  u8 walSyncFlags;            \/* SYNC_NORMAL or SYNC_FULL for wal writes *\/$/;"	m	struct:Pager	file:	access:public
walTryBeginRead	sqlite3.c	/^static int walTryBeginRead(Wal *pWal, int *pChanged, int useWal, int cnt){$/;"	f	file:	signature:(Wal *pWal, int *pChanged, int useWal, int cnt)
walUnlockExclusive	sqlite3.c	/^static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:	signature:(Wal *pWal, int lockIdx, int n)
walUnlockShared	sqlite3.c	/^static void walUnlockShared(Wal *pWal, int lockIdx){$/;"	f	file:	signature:(Wal *pWal, int lockIdx)
walWriteOneFrame	sqlite3.c	/^static int walWriteOneFrame($/;"	f	file:	signature:( WalWriter *p, PgHdr *pPage, int nTruncate, sqlite3_int64 iOffset )
walWriteToLog	sqlite3.c	/^static int walWriteToLog($/;"	f	file:	signature:( WalWriter *p, void *pContent, int iAmt, sqlite3_int64 iOffset )
wal_autocheckpoint	sqlite3.c	/^  int (*wal_autocheckpoint)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:	access:public
wal_checkpoint	sqlite3.c	/^  int (*wal_checkpoint)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
wal_checkpoint_v2	sqlite3.c	/^  int (*wal_checkpoint_v2)(sqlite3*,const char*,int,int*,int*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
wal_hook	sqlite3.c	/^  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:	access:public
walkerDepth	sqlite3.c	/^  int walkerDepth;                          \/* Number of subqueries *\/$/;"	m	struct:Walker	file:	access:public
wantToLock	sqlite3.c	/^  int wantToLock;    \/* Number of nested calls to sqlite3BtreeEnter() *\/$/;"	m	struct:Btree	file:	access:public
wc	sqlite3.c	/^  WhereClause wc;          \/* Decomposition into subterms *\/$/;"	m	struct:WhereOrInfo	file:	access:public
wc	sqlite3.c	/^  WhereClause wc;          \/* The subexpression broken out *\/$/;"	m	struct:WhereAndInfo	file:	access:public
wctrlFlags	sqlite3.c	/^  u16 wctrlFlags;           \/* Flags originally passed to sqlite3WhereBegin() *\/$/;"	m	struct:WhereInfo	file:	access:public
whereAndInfoDelete	sqlite3.c	/^static void whereAndInfoDelete(sqlite3 *db, WhereAndInfo *p){$/;"	f	file:	signature:(sqlite3 *db, WhereAndInfo *p)
whereClauseClear	sqlite3.c	/^static void whereClauseClear(WhereClause *pWC){$/;"	f	file:	signature:(WhereClause *pWC)
whereClauseClear	sqlite3.c	/^static void whereClauseClear(WhereClause*);$/;"	p	file:	signature:(WhereClause*)
whereClauseInit	sqlite3.c	/^static void whereClauseInit($/;"	f	file:	signature:( WhereClause *pWC, WhereInfo *pWInfo )
whereClauseInsert	sqlite3.c	/^static int whereClauseInsert(WhereClause *pWC, Expr *p, u8 wtFlags){$/;"	f	file:	signature:(WhereClause *pWC, Expr *p, u8 wtFlags)
whereEqualScanEst	sqlite3.c	/^static int whereEqualScanEst($/;"	f	file:	signature:( Parse *pParse, WhereLoopBuilder *pBuilder, Expr *pExpr, tRowcnt *pnRow )
whereForeignKeys	sqlite3.c	/^static char *whereForeignKeys(Parse *pParse, Table *pTab){$/;"	f	file:	signature:(Parse *pParse, Table *pTab)
whereInScanEst	sqlite3.c	/^static int whereInScanEst($/;"	f	file:	signature:( Parse *pParse, WhereLoopBuilder *pBuilder, ExprList *pList, tRowcnt *pnRow )
whereInfoFree	sqlite3.c	/^static void whereInfoFree(sqlite3 *db, WhereInfo *pWInfo){$/;"	f	file:	signature:(sqlite3 *db, WhereInfo *pWInfo)
whereKeyStats	sqlite3.c	/^static void whereKeyStats($/;"	f	file:	signature:( Parse *pParse, Index *pIdx, UnpackedRecord *pRec, int roundUp, tRowcnt *aStat )
whereLoopAddAll	sqlite3.c	/^static int whereLoopAddAll(WhereLoopBuilder *pBuilder){$/;"	f	file:	signature:(WhereLoopBuilder *pBuilder)
whereLoopAddBtree	sqlite3.c	/^static int whereLoopAddBtree($/;"	f	file:	signature:( WhereLoopBuilder *pBuilder, Bitmask mExtra )
whereLoopAddBtreeIndex	sqlite3.c	/^static int whereLoopAddBtreeIndex($/;"	f	file:	signature:( WhereLoopBuilder *pBuilder, struct SrcList_item *pSrc, Index *pProbe, LogEst nInMul )
whereLoopAddOr	sqlite3.c	/^static int whereLoopAddOr(WhereLoopBuilder *pBuilder, Bitmask mExtra){$/;"	f	file:	signature:(WhereLoopBuilder *pBuilder, Bitmask mExtra)
whereLoopAddVirtual	sqlite3.c	/^static int whereLoopAddVirtual($/;"	f	file:	signature:( WhereLoopBuilder *pBuilder, Bitmask mExtra )
whereLoopAdjustCost	sqlite3.c	/^static void whereLoopAdjustCost(const WhereLoop *p, WhereLoop *pTemplate){$/;"	f	file:	signature:(const WhereLoop *p, WhereLoop *pTemplate)
whereLoopCheaperProperSubset	sqlite3.c	/^static int whereLoopCheaperProperSubset($/;"	f	file:	signature:( const WhereLoop *pX, const WhereLoop *pY )
whereLoopClear	sqlite3.c	/^static void whereLoopClear(sqlite3 *db, WhereLoop *p){$/;"	f	file:	signature:(sqlite3 *db, WhereLoop *p)
whereLoopClearUnion	sqlite3.c	/^static void whereLoopClearUnion(sqlite3 *db, WhereLoop *p){$/;"	f	file:	signature:(sqlite3 *db, WhereLoop *p)
whereLoopDelete	sqlite3.c	/^static void whereLoopDelete(sqlite3 *db, WhereLoop *p){$/;"	f	file:	signature:(sqlite3 *db, WhereLoop *p)
whereLoopFindLesser	sqlite3.c	/^static WhereLoop **whereLoopFindLesser($/;"	f	file:	signature:( WhereLoop **ppPrev, const WhereLoop *pTemplate )
whereLoopInit	sqlite3.c	/^static void whereLoopInit(WhereLoop *p){$/;"	f	file:	signature:(WhereLoop *p)
whereLoopInsert	sqlite3.c	/^static int whereLoopInsert(WhereLoopBuilder *pBuilder, WhereLoop *pTemplate){$/;"	f	file:	signature:(WhereLoopBuilder *pBuilder, WhereLoop *pTemplate)
whereLoopOutputAdjust	sqlite3.c	/^static void whereLoopOutputAdjust($/;"	f	file:	signature:( WhereClause *pWC, WhereLoop *pLoop, LogEst nRow )
whereLoopPrint	sqlite3.c	/^static void whereLoopPrint(WhereLoop *p, WhereClause *pWC){$/;"	f	file:	signature:(WhereLoop *p, WhereClause *pWC)
whereLoopResize	sqlite3.c	/^static int whereLoopResize(sqlite3 *db, WhereLoop *p, int n){$/;"	f	file:	signature:(sqlite3 *db, WhereLoop *p, int n)
whereLoopResize	sqlite3.c	/^static int whereLoopResize(sqlite3*, WhereLoop*, int);$/;"	p	file:	signature:(sqlite3*, WhereLoop*, int)
whereLoopXfer	sqlite3.c	/^static int whereLoopXfer(sqlite3 *db, WhereLoop *pTo, WhereLoop *pFrom){$/;"	f	file:	signature:(sqlite3 *db, WhereLoop *pTo, WhereLoop *pFrom)
whereOrInfoDelete	sqlite3.c	/^static void whereOrInfoDelete(sqlite3 *db, WhereOrInfo *p){$/;"	f	file:	signature:(sqlite3 *db, WhereOrInfo *p)
whereOrInsert	sqlite3.c	/^static int whereOrInsert($/;"	f	file:	signature:( WhereOrSet *pSet, Bitmask prereq, LogEst rRun, LogEst nOut )
whereOrMove	sqlite3.c	/^static void whereOrMove(WhereOrSet *pDest, WhereOrSet *pSrc){$/;"	f	file:	signature:(WhereOrSet *pDest, WhereOrSet *pSrc)
whereOrName	sqlite3.c	/^static char *whereOrName(sqlite3 *db, char *zWhere, char *zConstant){$/;"	f	file:	signature:(sqlite3 *db, char *zWhere, char *zConstant)
wherePathName	sqlite3.c	/^static const char *wherePathName(WherePath *pPath, int nLoop, WhereLoop *pLast){$/;"	f	file:	signature:(WherePath *pPath, int nLoop, WhereLoop *pLast)
wherePathSatisfiesOrderBy	sqlite3.c	/^static i8 wherePathSatisfiesOrderBy($/;"	f	file:	signature:( WhereInfo *pWInfo, ExprList *pOrderBy, WherePath *pPath, u16 wctrlFlags, u16 nLoop, WhereLoop *pLast, Bitmask *pRevMask )
wherePathSolver	sqlite3.c	/^static int wherePathSolver(WhereInfo *pWInfo, LogEst nRowEst){$/;"	f	file:	signature:(WhereInfo *pWInfo, LogEst nRowEst)
whereRangeAdjust	sqlite3.c	/^static LogEst whereRangeAdjust(WhereTerm *pTerm, LogEst nNew){$/;"	f	file:	signature:(WhereTerm *pTerm, LogEst nNew)
whereRangeScanEst	sqlite3.c	/^static int whereRangeScanEst($/;"	f	file:	signature:( Parse *pParse, WhereLoopBuilder *pBuilder, WhereTerm *pLower, WhereTerm *pUpper, WhereLoop *pLoop )
whereRangeSkipScanEst	sqlite3.c	/^static int whereRangeSkipScanEst($/;"	f	file:	signature:( Parse *pParse, WhereTerm *pLower, WhereTerm *pUpper, WhereLoop *pLoop, int *pbDone )
whereScanInit	sqlite3.c	/^static WhereTerm *whereScanInit($/;"	f	file:	signature:( WhereScan *pScan, WhereClause *pWC, int iCur, int iColumn, u32 opMask, Index *pIdx )
whereScanNext	sqlite3.c	/^static WhereTerm *whereScanNext(WhereScan *pScan){$/;"	f	file:	signature:(WhereScan *pScan)
whereShortCut	sqlite3.c	/^static int whereShortCut(WhereLoopBuilder *pBuilder){$/;"	f	file:	signature:(WhereLoopBuilder *pBuilder)
whereSortingCost	sqlite3.c	/^static LogEst whereSortingCost($/;"	f	file:	signature:( WhereInfo *pWInfo, LogEst nRow, int nOrderBy, int nSorted )
whereSplit	sqlite3.c	/^static void whereSplit(WhereClause *pWC, Expr *pExpr, u8 op){$/;"	f	file:	signature:(WhereClause *pWC, Expr *pExpr, u8 op)
whereTempTriggers	sqlite3.c	/^static char *whereTempTriggers(Parse *pParse, Table *pTab){$/;"	f	file:	signature:(Parse *pParse, Table *pTab)
whereTermPrint	sqlite3.c	/^static void whereTermPrint(WhereTerm *pTerm, int iTerm){$/;"	f	file:	signature:(WhereTerm *pTerm, int iTerm)
whereUsablePartialIndex	sqlite3.c	/^static int whereUsablePartialIndex(int iTab, WhereClause *pWC, Expr *pWhere){$/;"	f	file:	signature:(int iTab, WhereClause *pWC, Expr *pWhere)
winAccess	sqlite3.c	/^static int winAccess($/;"	f	file:	signature:( sqlite3_vfs *pVfs, const char *zFilename, int flags, int *pResOut )
winCheckReservedLock	sqlite3.c	/^static int winCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:	signature:(sqlite3_file *id, int *pResOut)
winClose	sqlite3.c	/^static int winClose(sqlite3_file *id){$/;"	f	file:	signature:(sqlite3_file *id)
winConvertFromUtf8Filename	sqlite3.c	/^static void *winConvertFromUtf8Filename(const char *zFilename){$/;"	f	file:	signature:(const char *zFilename)
winConvertToUtf8Filename	sqlite3.c	/^static char *winConvertToUtf8Filename(const void *zFilename){$/;"	f	file:	signature:(const void *zFilename)
winCurrentTime	sqlite3.c	/^static int winCurrentTime(sqlite3_vfs *pVfs, double *prNow){$/;"	f	file:	signature:(sqlite3_vfs *pVfs, double *prNow)
winCurrentTimeInt64	sqlite3.c	/^static int winCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){$/;"	f	file:	signature:(sqlite3_vfs *pVfs, sqlite3_int64 *piNow)
winDelete	sqlite3.c	/^static int winDelete($/;"	f	file:	signature:( sqlite3_vfs *pVfs, const char *zFilename, int syncDir )
winDelete	sqlite3.c	/^static int winDelete(sqlite3_vfs *,const char*,int);$/;"	p	file:	signature:(sqlite3_vfs *,const char*,int)
winDeviceCharacteristics	sqlite3.c	/^static int winDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:	signature:(sqlite3_file *id)
winDlClose	sqlite3.c	/^static void winDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:	signature:(sqlite3_vfs *pVfs, void *pHandle)
winDlClose	sqlite3.c	37844;"	d	file:
winDlError	sqlite3.c	/^static void winDlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:	signature:(sqlite3_vfs *pVfs, int nBuf, char *zBufOut)
winDlError	sqlite3.c	37842;"	d	file:
winDlOpen	sqlite3.c	/^static void *winDlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:	signature:(sqlite3_vfs *pVfs, const char *zFilename)
winDlOpen	sqlite3.c	37841;"	d	file:
winDlSym	sqlite3.c	/^static void (*winDlSym(sqlite3_vfs *pVfs,void *pH,const char *zSym))(void){$/;"	f	file:	signature:(sqlite3_vfs *pVfs,void *pH,const char *zSym)
winDlSym	sqlite3.c	37843;"	d	file:
winFetch	sqlite3.c	/^static int winFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){$/;"	f	file:	signature:(sqlite3_file *fd, i64 iOff, int nAmt, void **pp)
winFile	sqlite3.c	/^struct winFile {$/;"	s	file:
winFile	sqlite3.c	/^typedef struct winFile winFile;$/;"	t	typeref:struct:winFile	file:
winFile::ctrlFlags	sqlite3.c	/^  u8 ctrlFlags;           \/* Flags.  See WINFILE_* below *\/$/;"	m	struct:winFile	file:	access:public
winFile::h	sqlite3.c	/^  HANDLE h;               \/* Handle for accessing the file *\/$/;"	m	struct:winFile	file:	access:public
winFile::hMap	sqlite3.c	/^  HANDLE hMap;                  \/* Handle for accessing memory mapping *\/$/;"	m	struct:winFile	file:	access:public
winFile::hMutex	sqlite3.c	/^  HANDLE hMutex;          \/* Mutex used to control access to shared lock *\/$/;"	m	struct:winFile	file:	access:public
winFile::hShared	sqlite3.c	/^  HANDLE hShared;         \/* Shared memory segment used for locking *\/$/;"	m	struct:winFile	file:	access:public
winFile::lastErrno	sqlite3.c	/^  DWORD lastErrno;        \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winFile	file:	access:public
winFile::local	sqlite3.c	/^  winceLock local;        \/* Locks obtained by this instance of winFile *\/$/;"	m	struct:winFile	file:	access:public
winFile::locktype	sqlite3.c	/^  u8 locktype;            \/* Type of lock currently held on this file *\/$/;"	m	struct:winFile	file:	access:public
winFile::mmapSize	sqlite3.c	/^  sqlite3_int64 mmapSize;       \/* Usable size of mapped region *\/$/;"	m	struct:winFile	file:	access:public
winFile::mmapSizeActual	sqlite3.c	/^  sqlite3_int64 mmapSizeActual; \/* Actual size of mapped region *\/$/;"	m	struct:winFile	file:	access:public
winFile::mmapSizeMax	sqlite3.c	/^  sqlite3_int64 mmapSizeMax;    \/* Configured FCNTL_MMAP_SIZE value *\/$/;"	m	struct:winFile	file:	access:public
winFile::nFetchOut	sqlite3.c	/^  int nFetchOut;                \/* Number of outstanding xFetch references *\/$/;"	m	struct:winFile	file:	access:public
winFile::pMapRegion	sqlite3.c	/^  void *pMapRegion;             \/* Area memory mapped *\/$/;"	m	struct:winFile	file:	access:public
winFile::pMethod	sqlite3.c	/^  const sqlite3_io_methods *pMethod; \/*** Must be first ***\/$/;"	m	struct:winFile	file:	access:public
winFile::pShm	sqlite3.c	/^  winShm *pShm;           \/* Instance of shared memory on this file *\/$/;"	m	struct:winFile	file:	access:public
winFile::pVfs	sqlite3.c	/^  sqlite3_vfs *pVfs;      \/* The VFS used to open this file *\/$/;"	m	struct:winFile	file:	access:public
winFile::shared	sqlite3.c	/^  winceLock *shared;      \/* Global shared lock memory for the file  *\/$/;"	m	struct:winFile	file:	access:public
winFile::sharedLockByte	sqlite3.c	/^  short sharedLockByte;   \/* Randomly chosen byte used as a shared lock *\/$/;"	m	struct:winFile	file:	access:public
winFile::szChunk	sqlite3.c	/^  int szChunk;            \/* Chunk size configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:winFile	file:	access:public
winFile::zDeleteOnClose	sqlite3.c	/^  LPWSTR zDeleteOnClose;  \/* Name of file to delete when closing *\/$/;"	m	struct:winFile	file:	access:public
winFile::zPath	sqlite3.c	/^  const char *zPath;      \/* Full pathname of this file *\/$/;"	m	struct:winFile	file:	access:public
winFileControl	sqlite3.c	/^static int winFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:	signature:(sqlite3_file *id, int op, void *pArg)
winFileSize	sqlite3.c	/^static int winFileSize(sqlite3_file *id, sqlite3_int64 *pSize){$/;"	f	file:	signature:(sqlite3_file *id, sqlite3_int64 *pSize)
winFullPathname	sqlite3.c	/^static int winFullPathname($/;"	f	file:	signature:( sqlite3_vfs *pVfs, const char *zRelative, int nFull, char *zFull )
winGetDirSep	sqlite3.c	32709;"	d	file:
winGetLastError	sqlite3.c	/^static int winGetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:	signature:(sqlite3_vfs *pVfs, int nBuf, char *zBuf)
winGetLastErrorMsg	sqlite3.c	/^static int winGetLastErrorMsg(DWORD lastErrno, int nBuf, char *zBuf){$/;"	f	file:	signature:(DWORD lastErrno, int nBuf, char *zBuf)
winGetReadLock	sqlite3.c	/^static int winGetReadLock(winFile *pFile){$/;"	f	file:	signature:(winFile *pFile)
winGetSystemCall	sqlite3.c	/^static sqlite3_syscall_ptr winGetSystemCall($/;"	f	file:	signature:( sqlite3_vfs *pNotUsed, const char *zName )
winGetTempname	sqlite3.c	/^static int winGetTempname(sqlite3_vfs *, char **);$/;"	p	file:	signature:(sqlite3_vfs *, char **)
winGetTempname	sqlite3.c	/^static int winGetTempname(sqlite3_vfs *pVfs, char **pzBuf){$/;"	f	file:	signature:(sqlite3_vfs *pVfs, char **pzBuf)
winIoMethod	sqlite3.c	/^static const sqlite3_io_methods winIoMethod = {$/;"	v	file:
winIoerrCanRetry1	sqlite3.c	34450;"	d	file:
winIoerrRetry	sqlite3.c	/^static int winIoerrRetry = SQLITE_WIN32_IOERR_RETRY;$/;"	v	file:
winIoerrRetryDelay	sqlite3.c	/^static int winIoerrRetryDelay = SQLITE_WIN32_IOERR_RETRY_DELAY;$/;"	v	file:
winIsDir	sqlite3.c	/^static int winIsDir(const void *);$/;"	p	file:	signature:(const void *)
winIsDir	sqlite3.c	/^static int winIsDir(const void *zConverted){$/;"	f	file:	signature:(const void *zConverted)
winIsDirSep	sqlite3.c	32694;"	d	file:
winIsDriveLetterAndColon	sqlite3.c	/^static BOOL winIsDriveLetterAndColon($/;"	f	file:	signature:( const char *zPathname )
winIsDriveLetterAndColon	sqlite3.c	/^static BOOL winIsDriveLetterAndColon(const char *);$/;"	p	file:	signature:(const char *)
winIsVerbatimPathname	sqlite3.c	/^static BOOL winIsVerbatimPathname($/;"	f	file:	signature:( const char *zPathname )
winLock	sqlite3.c	/^static int winLock(sqlite3_file *id, int locktype){$/;"	f	file:	signature:(sqlite3_file *id, int locktype)
winLockFile	sqlite3.c	/^static BOOL winLockFile($/;"	f	file:	signature:( LPHANDLE phFile, DWORD flags, DWORD offsetLow, DWORD offsetHigh, DWORD numBytesLow, DWORD numBytesHigh )
winLogError	sqlite3.c	34393;"	d	file:
winLogErrorAtLine	sqlite3.c	/^static int winLogErrorAtLine($/;"	f	file:	signature:( int errcode, DWORD lastErrno, const char *zFunc, const char *zPath, int iLine )
winLogIoerr	sqlite3.c	/^static void winLogIoerr(int nRetry){$/;"	f	file:	signature:(int nRetry)
winMakeEndInDirSep	sqlite3.c	/^static int winMakeEndInDirSep(int nBuf, char *zBuf){$/;"	f	file:	signature:(int nBuf, char *zBuf)
winMapfile	sqlite3.c	/^static int winMapfile(winFile *pFd, sqlite3_int64 nByte){$/;"	f	file:	signature:(winFile *pFd, sqlite3_int64 nByte)
winMapfile	sqlite3.c	/^static int winMapfile(winFile*, sqlite3_int64);$/;"	p	file:	signature:(winFile*, sqlite3_int64)
winMbcsToUnicode	sqlite3.c	/^static LPWSTR winMbcsToUnicode(const char *zFilename){$/;"	f	file:	signature:(const char *zFilename)
winMemAssertMagic	sqlite3.c	32928;"	d	file:
winMemAssertMagic	sqlite3.c	32930;"	d	file:
winMemAssertMagic1	sqlite3.c	32926;"	d	file:
winMemAssertMagic2	sqlite3.c	32927;"	d	file:
winMemData	sqlite3.c	/^struct winMemData {$/;"	s	file:
winMemData	sqlite3.c	/^typedef struct winMemData winMemData;$/;"	t	typeref:struct:winMemData	file:
winMemData::bOwned	sqlite3.c	/^  BOOL bOwned;  \/* Do we own the heap (i.e. destroy it on shutdown)? *\/$/;"	m	struct:winMemData	file:	access:public
winMemData::hHeap	sqlite3.c	/^  HANDLE hHeap; \/* The handle to our heap. *\/$/;"	m	struct:winMemData	file:	access:public
winMemData::magic1	sqlite3.c	/^  u32 magic1;   \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:	access:public
winMemData::magic2	sqlite3.c	/^  u32 magic2;   \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:	access:public
winMemFree	sqlite3.c	/^static void winMemFree(void *pPrior);$/;"	p	file:	signature:(void *pPrior)
winMemFree	sqlite3.c	/^static void winMemFree(void *pPrior){$/;"	f	file:	signature:(void *pPrior)
winMemGetDataPtr	sqlite3.c	32933;"	d	file:
winMemGetHeap	sqlite3.c	32934;"	d	file:
winMemGetOwned	sqlite3.c	32935;"	d	file:
winMemInit	sqlite3.c	/^static int winMemInit(void *pAppData);$/;"	p	file:	signature:(void *pAppData)
winMemInit	sqlite3.c	/^static int winMemInit(void *pAppData){$/;"	f	file:	signature:(void *pAppData)
winMemMalloc	sqlite3.c	/^static void *winMemMalloc(int nBytes);$/;"	p	file:	signature:(int nBytes)
winMemMalloc	sqlite3.c	/^static void *winMemMalloc(int nBytes){$/;"	f	file:	signature:(int nBytes)
winMemRealloc	sqlite3.c	/^static void *winMemRealloc(void *pPrior, int nBytes);$/;"	p	file:	signature:(void *pPrior, int nBytes)
winMemRealloc	sqlite3.c	/^static void *winMemRealloc(void *pPrior, int nBytes){$/;"	f	file:	signature:(void *pPrior, int nBytes)
winMemRoundup	sqlite3.c	/^static int winMemRoundup(int n);$/;"	p	file:	signature:(int n)
winMemRoundup	sqlite3.c	/^static int winMemRoundup(int n){$/;"	f	file:	signature:(int n)
winMemShutdown	sqlite3.c	/^static void winMemShutdown(void *pAppData);$/;"	p	file:	signature:(void *pAppData)
winMemShutdown	sqlite3.c	/^static void winMemShutdown(void *pAppData){$/;"	f	file:	signature:(void *pAppData)
winMemSize	sqlite3.c	/^static int winMemSize(void *p);$/;"	p	file:	signature:(void *p)
winMemSize	sqlite3.c	/^static int winMemSize(void *p){$/;"	f	file:	signature:(void *p)
winModeBit	sqlite3.c	/^static void winModeBit(winFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:	signature:(winFile *pFile, unsigned char mask, int *pArg)
winMutexAlloc	sqlite3.c	/^static sqlite3_mutex *winMutexAlloc(int iType){$/;"	f	file:	signature:(int iType)
winMutexEnd	sqlite3.c	/^static int winMutexEnd(void){$/;"	f	file:	signature:(void)
winMutexEnter	sqlite3.c	/^static void winMutexEnter(sqlite3_mutex *p){$/;"	f	file:	signature:(sqlite3_mutex *p)
winMutexFree	sqlite3.c	/^static void winMutexFree(sqlite3_mutex *p){$/;"	f	file:	signature:(sqlite3_mutex *p)
winMutexHeld	sqlite3.c	/^static int winMutexHeld(sqlite3_mutex *p){$/;"	f	file:	signature:(sqlite3_mutex *p)
winMutexInit	sqlite3.c	/^static int winMutexInit(void){$/;"	f	file:	signature:(void)
winMutexLeave	sqlite3.c	/^static void winMutexLeave(sqlite3_mutex *p){$/;"	f	file:	signature:(sqlite3_mutex *p)
winMutexNotheld	sqlite3.c	/^static int winMutexNotheld(sqlite3_mutex *p){$/;"	f	file:	signature:(sqlite3_mutex *p)
winMutexNotheld2	sqlite3.c	/^static int winMutexNotheld2(sqlite3_mutex *p, DWORD tid){$/;"	f	file:	signature:(sqlite3_mutex *p, DWORD tid)
winMutexTry	sqlite3.c	/^static int winMutexTry(sqlite3_mutex *p){$/;"	f	file:	signature:(sqlite3_mutex *p)
winMutex_isInit	sqlite3.c	/^static int winMutex_isInit = 0;$/;"	v	file:
winMutex_isNt	sqlite3.c	/^static int winMutex_isNt = -1; \/* <0 means "need to query" *\/$/;"	v	file:
winMutex_lock	sqlite3.c	/^static LONG SQLITE_WIN32_VOLATILE winMutex_lock = 0;$/;"	v	file:
winMutex_staticMutexes	sqlite3.c	/^static sqlite3_mutex winMutex_staticMutexes[] = {$/;"	v	file:
winNextSystemCall	sqlite3.c	/^static const char *winNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:	signature:(sqlite3_vfs *p, const char *zName)
winOpen	sqlite3.c	/^static int winOpen($/;"	f	file:	signature:( sqlite3_vfs *pVfs, const char *zName, sqlite3_file *id, int flags, int *pOutFlags )
winOpen	sqlite3.c	/^static int winOpen(sqlite3_vfs*,const char*,sqlite3_file*,int,int*);$/;"	p	file:	signature:(sqlite3_vfs*,const char*,sqlite3_file*,int,int*)
winOpenSharedMemory	sqlite3.c	/^static int winOpenSharedMemory(winFile *pDbFd){$/;"	f	file:	signature:(winFile *pDbFd)
winRandomness	sqlite3.c	/^static int winRandomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:	signature:(sqlite3_vfs *pVfs, int nBuf, char *zBuf)
winRead	sqlite3.c	/^static int winRead($/;"	f	file:	signature:( sqlite3_file *id, void *pBuf, int amt, sqlite3_int64 offset )
winRetryIoerr	sqlite3.c	/^static int winRetryIoerr(int *pnRetry, DWORD *pError){$/;"	f	file:	signature:(int *pnRetry, DWORD *pError)
winSectorSize	sqlite3.c	/^static int winSectorSize(sqlite3_file *id){$/;"	f	file:	signature:(sqlite3_file *id)
winSeekFile	sqlite3.c	/^static int winSeekFile(winFile *pFile, sqlite3_int64 iOffset){$/;"	f	file:	signature:(winFile *pFile, sqlite3_int64 iOffset)
winSetSystemCall	sqlite3.c	/^static int winSetSystemCall($/;"	f	file:	signature:( sqlite3_vfs *pNotUsed, const char *zName, sqlite3_syscall_ptr pNewFunc )
winShm	sqlite3.c	/^struct winShm {$/;"	s	file:
winShm	sqlite3.c	/^typedef struct winShm winShm;           \/* A connection to shared-memory *\/$/;"	t	typeref:struct:winShm	file:
winShm::exclMask	sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:winShm	file:	access:public
winShm::hasMutex	sqlite3.c	/^  u8 hasMutex;               \/* True if holding the winShmNode mutex *\/$/;"	m	struct:winShm	file:	access:public
winShm::id	sqlite3.c	/^  u8 id;                     \/* Id of this connection with its winShmNode *\/$/;"	m	struct:winShm	file:	access:public
winShm::pNext	sqlite3.c	/^  winShm *pNext;             \/* Next winShm with the same winShmNode *\/$/;"	m	struct:winShm	file:	access:public
winShm::pShmNode	sqlite3.c	/^  winShmNode *pShmNode;      \/* The underlying winShmNode object *\/$/;"	m	struct:winShm	file:	access:public
winShm::sharedMask	sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:winShm	file:	access:public
winShmBarrier	sqlite3.c	/^static void winShmBarrier($/;"	f	file:	signature:( sqlite3_file *fd )
winShmBarrier	sqlite3.c	36482;"	d	file:
winShmEnterMutex	sqlite3.c	/^static void winShmEnterMutex(void){$/;"	f	file:	signature:(void)
winShmLeaveMutex	sqlite3.c	/^static void winShmLeaveMutex(void){$/;"	f	file:	signature:(void)
winShmLock	sqlite3.c	/^static int winShmLock($/;"	f	file:	signature:( sqlite3_file *fd, int ofst, int n, int flags )
winShmLock	sqlite3.c	36481;"	d	file:
winShmMap	sqlite3.c	/^static int winShmMap($/;"	f	file:	signature:( sqlite3_file *fd, int iRegion, int szRegion, int isWrite, void volatile **pp )
winShmMap	sqlite3.c	36480;"	d	file:
winShmMutexHeld	sqlite3.c	/^static int winShmMutexHeld(void) {$/;"	f	file:	signature:(void)
winShmNode	sqlite3.c	/^struct winShmNode {$/;"	s	file:
winShmNode	sqlite3.c	/^typedef struct winShmNode winShmNode;   \/* A region of shared-memory *\/$/;"	t	typeref:struct:winShmNode	file:
winShmNode::ShmRegion	sqlite3.c	/^  struct ShmRegion {$/;"	s	struct:winShmNode	file:	access:public
winShmNode::ShmRegion::hMap	sqlite3.c	/^    HANDLE hMap;             \/* File handle from CreateFileMapping *\/$/;"	m	struct:winShmNode::ShmRegion	file:	access:public
winShmNode::ShmRegion::pMap	sqlite3.c	/^    void *pMap;$/;"	m	struct:winShmNode::ShmRegion	file:	access:public
winShmNode::aRegion	sqlite3.c	/^  } *aRegion;$/;"	m	struct:winShmNode	typeref:struct:winShmNode::ShmRegion	file:	access:public
winShmNode::hFile	sqlite3.c	/^  winFile hFile;             \/* File handle from winOpen *\/$/;"	m	struct:winShmNode	file:	access:public
winShmNode::lastErrno	sqlite3.c	/^  DWORD lastErrno;           \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winShmNode	file:	access:public
winShmNode::mutex	sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:winShmNode	file:	access:public
winShmNode::nRef	sqlite3.c	/^  int nRef;                  \/* Number of winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:	access:public
winShmNode::nRegion	sqlite3.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:winShmNode	file:	access:public
winShmNode::nextShmId	sqlite3.c	/^  u8 nextShmId;              \/* Next available winShm.id value *\/$/;"	m	struct:winShmNode	file:	access:public
winShmNode::pFirst	sqlite3.c	/^  winShm *pFirst;            \/* All winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:	access:public
winShmNode::pNext	sqlite3.c	/^  winShmNode *pNext;         \/* Next in list of all winShmNode objects *\/$/;"	m	struct:winShmNode	file:	access:public
winShmNode::szRegion	sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:winShmNode	file:	access:public
winShmNode::zFilename	sqlite3.c	/^  char *zFilename;           \/* Name of the file *\/$/;"	m	struct:winShmNode	file:	access:public
winShmNodeList	sqlite3.c	/^static winShmNode *winShmNodeList = 0;$/;"	v	file:
winShmPurge	sqlite3.c	/^static void winShmPurge(sqlite3_vfs *pVfs, int deleteFlag){$/;"	f	file:	signature:(sqlite3_vfs *pVfs, int deleteFlag)
winShmSystemLock	sqlite3.c	/^static int winShmSystemLock($/;"	f	file:	signature:( winShmNode *pFile, int lockType, int ofst, int nByte )
winShmUnmap	sqlite3.c	/^static int winShmUnmap($/;"	f	file:	signature:( sqlite3_file *fd, int deleteFlag )
winShmUnmap	sqlite3.c	36483;"	d	file:
winSleep	sqlite3.c	/^static int winSleep(sqlite3_vfs *pVfs, int microsec){$/;"	f	file:	signature:(sqlite3_vfs *pVfs, int microsec)
winSync	sqlite3.c	/^static int winSync(sqlite3_file *id, int flags){$/;"	f	file:	signature:(sqlite3_file *id, int flags)
winSysInfo	sqlite3.c	/^static SYSTEM_INFO winSysInfo;$/;"	v	file:
winTruncate	sqlite3.c	/^static int winTruncate(sqlite3_file *id, sqlite3_int64 nByte){$/;"	f	file:	signature:(sqlite3_file *id, sqlite3_int64 nByte)
winUnfetch	sqlite3.c	/^static int winUnfetch(sqlite3_file *fd, i64 iOff, void *p){$/;"	f	file:	signature:(sqlite3_file *fd, i64 iOff, void *p)
winUnicodeToMbcs	sqlite3.c	/^static char *winUnicodeToMbcs(LPCWSTR zWideFilename){$/;"	f	file:	signature:(LPCWSTR zWideFilename)
winUnicodeToUtf8	sqlite3.c	/^static char *winUnicodeToUtf8(LPCWSTR zWideFilename){$/;"	f	file:	signature:(LPCWSTR zWideFilename)
winUnlock	sqlite3.c	/^static int winUnlock(sqlite3_file *id, int locktype){$/;"	f	file:	signature:(sqlite3_file *id, int locktype)
winUnlockFile	sqlite3.c	/^static BOOL winUnlockFile($/;"	f	file:	signature:( LPHANDLE phFile, DWORD offsetLow, DWORD offsetHigh, DWORD numBytesLow, DWORD numBytesHigh )
winUnlockReadLock	sqlite3.c	/^static int winUnlockReadLock(winFile *pFile){$/;"	f	file:	signature:(winFile *pFile)
winUnmapfile	sqlite3.c	/^static int winUnmapfile(winFile *pFile){$/;"	f	file:	signature:(winFile *pFile)
winUnmapfile	sqlite3.c	/^static int winUnmapfile(winFile*);$/;"	p	file:	signature:(winFile*)
winUtf8ToUnicode	sqlite3.c	/^static LPWSTR winUtf8ToUnicode(const char *zFilename){$/;"	f	file:	signature:(const char *zFilename)
winWrite	sqlite3.c	/^static int winWrite($/;"	f	file:	signature:( sqlite3_file *id, const void *pBuf, int amt, sqlite3_int64 offset )
win_mem_data	sqlite3.c	/^static struct winMemData win_mem_data = {$/;"	v	typeref:struct:winMemData	file:
win_syscall	sqlite3.c	/^static struct win_syscall {$/;"	s	file:
win_syscall::pCurrent	sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:win_syscall	file:	access:public
win_syscall::pDefault	sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:win_syscall	file:	access:public
win_syscall::zName	sqlite3.c	/^  const char *zName;            \/* Name of the system call *\/$/;"	m	struct:win_syscall	file:	access:public
winceCreateLock	sqlite3.c	/^static int winceCreateLock(const char *zFilename, winFile *pFile){$/;"	f	file:	signature:(const char *zFilename, winFile *pFile)
winceDestroyLock	sqlite3.c	/^static void winceDestroyLock(winFile *pFile){$/;"	f	file:	signature:(winFile *pFile)
winceLock	sqlite3.c	/^typedef struct winceLock {$/;"	s	file:
winceLock	sqlite3.c	/^} winceLock;$/;"	t	typeref:struct:winceLock	file:
winceLock::bExclusive	sqlite3.c	/^  BOOL bExclusive;    \/* Indicates an exclusive lock has been obtained *\/$/;"	m	struct:winceLock	file:	access:public
winceLock::bPending	sqlite3.c	/^  BOOL bPending;      \/* Indicates a pending lock has been obtained *\/$/;"	m	struct:winceLock	file:	access:public
winceLock::bReserved	sqlite3.c	/^  BOOL bReserved;     \/* Indicates a reserved lock has been obtained *\/$/;"	m	struct:winceLock	file:	access:public
winceLock::nReaders	sqlite3.c	/^  int nReaders;       \/* Number of reader locks obtained *\/$/;"	m	struct:winceLock	file:	access:public
winceLockFile	sqlite3.c	/^static BOOL winceLockFile($/;"	f	file:	signature:( LPHANDLE phFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh )
winceMutexAcquire	sqlite3.c	/^static void winceMutexAcquire(HANDLE h){$/;"	f	file:	signature:(HANDLE h)
winceMutexRelease	sqlite3.c	34549;"	d	file:
winceUnlockFile	sqlite3.c	/^static BOOL winceUnlockFile($/;"	f	file:	signature:( LPHANDLE phFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh )
withDup	sqlite3.c	/^static With *withDup(sqlite3 *db, With *p){$/;"	f	file:	signature:(sqlite3 *db, With *p)
withDup	sqlite3.c	81580;"	d	file:
withExpand	sqlite3.c	/^static int withExpand($/;"	f	file:	signature:( Walker *pWalker, struct SrcList_item *pFrom )
word	comm.h	/^	char word[QMESG_WORD_LEN];$/;"	m	struct:query_protocol	access:public
word	loaddatabase.c	/^struct word {$/;"	s	file:
word::explan	loaddatabase.c	/^	char explan[300];$/;"	m	struct:word	file:	access:public
word::name	loaddatabase.c	/^	char name[32];$/;"	m	struct:word	file:	access:public
write32bits	sqlite3.c	/^static int write32bits(sqlite3_file *fd, i64 offset, u32 val){$/;"	f	file:	signature:(sqlite3_file *fd, i64 offset, u32 val)
writeCoord	sqlite3.c	/^static int writeCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:	signature:(u8 *p, RtreeCoord *pCoord)
writeInt16	sqlite3.c	/^static int writeInt16(u8 *p, int i){$/;"	f	file:	signature:(u8 *p, int i)
writeInt64	sqlite3.c	/^static int writeInt64(u8 *p, i64 i){$/;"	f	file:	signature:(u8 *p, i64 i)
writeJournalHdr	sqlite3.c	/^static int writeJournalHdr(Pager *pPager){$/;"	f	file:	signature:(Pager *pPager)
writeLock	sqlite3.c	/^  u8 writeLock;              \/* True if in a write transaction *\/$/;"	m	struct:Wal	file:	access:public
writeMask	sqlite3.c	/^  yDbMask writeMask;   \/* Start a write transaction on these databases *\/$/;"	m	struct:Parse	file:	access:public
writeMasterJournal	sqlite3.c	/^static int writeMasterJournal(Pager *pPager, const char *zMaster){$/;"	f	file:	signature:(Pager *pPager, const char *zMaster)
wsFlags	sqlite3.c	/^  u32 wsFlags;          \/* WHERE_* flags describing the plan *\/$/;"	m	struct:WhereLoop	file:	access:public
wsdAutoext	sqlite3.c	100652;"	d	file:
wsdAutoext	sqlite3.c	100655;"	d	file:
wsdAutoextInit	sqlite3.c	100650;"	d	file:
wsdAutoextInit	sqlite3.c	100654;"	d	file:
wsdHooks	sqlite3.c	16340;"	d	file:
wsdHooks	sqlite3.c	16343;"	d	file:
wsdHooksInit	sqlite3.c	16338;"	d	file:
wsdHooksInit	sqlite3.c	16342;"	d	file:
wsdPrng	sqlite3.c	21914;"	d	file:
wsdStat	sqlite3.c	14531;"	d	file:
wsdStat	sqlite3.c	14534;"	d	file:
wsdStatInit	sqlite3.c	14530;"	d	file:
wsdStatInit	sqlite3.c	14533;"	d	file:
wtFlags	sqlite3.c	/^  u8 wtFlags;             \/* TERM_xxx bit flags.  See below *\/$/;"	m	struct:WhereTerm	file:	access:public
x	sqlite3.c	/^      } x;$/;"	m	union:ExprList::ExprList_item::__anon5	typeref:struct:ExprList::ExprList_item::__anon5::__anon6	file:	access:public
x	sqlite3.c	/^  } x;$/;"	m	struct:Expr	typeref:union:Expr::__anon4	file:	access:public
xAccess	sqlite3.c	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs	file:	access:public
xAccess	sqlite3.h	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs	access:public
xAdvance	sqlite3.c	/^    int (*xAdvance)(BtCursor *, int *);$/;"	m	union:VdbeOp::__anon1	file:	access:public
xAuth	sqlite3.c	/^  sqlite3_xauth xAuth;          \/* Access authorization function *\/$/;"	m	struct:sqlite3	file:	access:public
xBacktrace	sqlite3.c	/^  void (*xBacktrace)(int, int, void **);$/;"	m	struct:__anon9	file:	access:public
xBegin	sqlite3.c	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:	access:public
xBegin	sqlite3.h	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	access:public
xBenignBegin	sqlite3.c	/^  void (*xBenignBegin)(void);$/;"	m	struct:BenignMallocHooks	file:	access:public
xBenignEnd	sqlite3.c	/^  void (*xBenignEnd)(void);$/;"	m	struct:BenignMallocHooks	file:	access:public
xBestIndex	sqlite3.c	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module	file:	access:public
xBestIndex	sqlite3.h	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module	access:public
xBusyHandler	sqlite3.c	/^  int (*xBusyHandler)(void*); \/* Function to call when busy *\/$/;"	m	struct:Pager	file:	access:public
xCachesize	sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
xCachesize	sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
xCachesize	sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods	access:public
xCachesize	sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2	access:public
xCheckReservedLock	sqlite3.c	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xCheckReservedLock	sqlite3.h	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods	access:public
xClose	sqlite3.c	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xClose	sqlite3.c	/^  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);$/;"	m	struct:sqlite3_tokenizer_module	file:	access:public
xClose	sqlite3.c	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:	access:public
xClose	sqlite3.h	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	access:public
xClose	sqlite3.h	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	access:public
xCmp	sqlite3.c	/^  int (*xCmp)(void*,int, const void*, int, const void*);$/;"	m	struct:CollSeq	file:	access:public
xCodec	sqlite3.c	/^  void *(*xCodec)(void*,void*,Pgno,int); \/* Routine for en\/decoding data *\/$/;"	m	struct:Pager	file:	access:public
xCodecFree	sqlite3.c	/^  void (*xCodecFree)(void*);             \/* Destructor for the codec *\/$/;"	m	struct:Pager	file:	access:public
xCodecSizeChng	sqlite3.c	/^  void (*xCodecSizeChng)(void*,int,int); \/* Notify of page size changes *\/$/;"	m	struct:Pager	file:	access:public
xCollNeeded	sqlite3.c	/^  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);$/;"	m	struct:sqlite3	file:	access:public
xCollNeeded16	sqlite3.c	/^  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);$/;"	m	struct:sqlite3	file:	access:public
xColumn	sqlite3.c	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module	file:	access:public
xColumn	sqlite3.h	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module	access:public
xCommit	sqlite3.c	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:	access:public
xCommit	sqlite3.h	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	access:public
xCommitCallback	sqlite3.c	/^  int (*xCommitCallback)(void*);    \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:	access:public
xConnect	sqlite3.c	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:	access:public
xConnect	sqlite3.h	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	access:public
xCreate	sqlite3.c	/^  int (*xCreate)($/;"	m	struct:sqlite3_tokenizer_module	file:	access:public
xCreate	sqlite3.c	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:	access:public
xCreate	sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
xCreate	sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
xCreate	sqlite3.h	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	access:public
xCreate	sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods	access:public
xCreate	sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2	access:public
xCurrentTime	sqlite3.c	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs	file:	access:public
xCurrentTime	sqlite3.h	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs	access:public
xCurrentTimeInt64	sqlite3.c	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs	file:	access:public
xCurrentTimeInt64	sqlite3.h	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs	access:public
xDel	sqlite3.c	/^  void (*xDel)(void*);  \/* Destructor for pUser *\/$/;"	m	struct:CollSeq	file:	access:public
xDel	sqlite3.c	/^  void (*xDel)(void*);\/* Destructor for Mem.z - only valid if MEM_Dyn *\/$/;"	m	struct:Mem	file:	access:public
xDelUser	sqlite3.c	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry	file:	access:public
xDelUser	sqlite3.c	/^  void (*xDelUser)(void*);          \/* function to free pUser *\/$/;"	m	struct:sqlite3_rtree_query_info	file:	access:public
xDelUser	sqlite3.h	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry	access:public
xDelUser	sqlite3.h	/^  void (*xDelUser)(void*);          \/* function to free pUser *\/$/;"	m	struct:sqlite3_rtree_query_info	access:public
xDelete	sqlite3.c	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs	file:	access:public
xDelete	sqlite3.c	/^  void (*xDelete)(void *);        \/* Destructor for the aux data *\/$/;"	m	struct:AuxData	file:	access:public
xDelete	sqlite3.h	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs	access:public
xDestroy	sqlite3.c	/^  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);$/;"	m	struct:sqlite3_tokenizer_module	file:	access:public
xDestroy	sqlite3.c	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:	access:public
xDestroy	sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
xDestroy	sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
xDestroy	sqlite3.c	/^  void (*xDestroy)(void *);            \/* Module destructor function *\/$/;"	m	struct:Module	file:	access:public
xDestroy	sqlite3.c	/^  void (*xDestroy)(void *);$/;"	m	struct:FuncDestructor	file:	access:public
xDestroy	sqlite3.h	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	access:public
xDestroy	sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	access:public
xDestroy	sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	access:public
xDestructor	sqlite3.c	/^  void (*xDestructor)(void*);$/;"	m	struct:RtreeGeomCallback	file:	access:public
xDeviceCharacteristics	sqlite3.c	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xDeviceCharacteristics	sqlite3.h	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	access:public
xDisconnect	sqlite3.c	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:	access:public
xDisconnect	sqlite3.h	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	access:public
xDlClose	sqlite3.c	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs	file:	access:public
xDlClose	sqlite3.h	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs	access:public
xDlError	sqlite3.c	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs	file:	access:public
xDlError	sqlite3.h	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs	access:public
xDlOpen	sqlite3.c	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs	file:	access:public
xDlOpen	sqlite3.h	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs	access:public
xDlSym	sqlite3.c	/^  void (*(*xDlSym)(sqlite3_vfs*,void*, const char *zSymbol))(void);$/;"	p	struct:sqlite3_vfs	file:	access:public	signature:(sqlite3_vfs*,void*, const char *zSymbol)
xDlSym	sqlite3.h	/^  void (*(*xDlSym)(sqlite3_vfs*,void*, const char *zSymbol))(void);$/;"	p	struct:sqlite3_vfs	access:public	signature:(sqlite3_vfs*,void*, const char *zSymbol)
xEof	sqlite3.c	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:	access:public
xEof	sqlite3.h	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	access:public
xExprCallback	sqlite3.c	/^  int (*xExprCallback)(Walker*, Expr*);     \/* Callback for expressions *\/$/;"	m	struct:Walker	file:	access:public
xFetch	sqlite3.c	/^  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xFetch	sqlite3.c	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
xFetch	sqlite3.c	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
xFetch	sqlite3.h	/^  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);$/;"	m	struct:sqlite3_io_methods	access:public
xFetch	sqlite3.h	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2	access:public
xFetch	sqlite3.h	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods	access:public
xFileControl	sqlite3.c	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xFileControl	sqlite3.h	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods	access:public
xFileSize	sqlite3.c	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xFileSize	sqlite3.h	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods	access:public
xFilter	sqlite3.c	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module	file:	access:public
xFilter	sqlite3.h	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module	access:public
xFinalize	sqlite3.c	/^  void (*xFinalize)(sqlite3_context*);                \/* Aggregate finalizer *\/$/;"	m	struct:FuncDef	file:	access:public
xFindFunction	sqlite3.c	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module	file:	access:public
xFindFunction	sqlite3.h	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module	access:public
xFree	sqlite3.c	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:	access:public
xFree	sqlite3.c	/^static void xFree(void *p){$/;"	f	file:	signature:(void *p)
xFree	sqlite3.h	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods	access:public
xFreeSchema	sqlite3.c	/^  void (*xFreeSchema)(void*);  \/* Destructor for BtShared.pSchema *\/$/;"	m	struct:BtShared	file:	access:public
xFullPathname	sqlite3.c	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs	file:	access:public
xFullPathname	sqlite3.h	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs	access:public
xFunc	sqlite3.c	/^  int (*xFunc)(void *,int);  \/* The busy callback *\/$/;"	m	struct:BusyHandler	file:	access:public
xFunc	sqlite3.c	/^  void (*xFunc)(sqlite3_context*,int,sqlite3_value**); \/* Regular function *\/$/;"	m	struct:FuncDef	file:	access:public
xGeom	sqlite3.c	/^    int (*xGeom)(sqlite3_rtree_geometry*,int,RtreeDValue*,int*);$/;"	m	union:RtreeConstraint::__anon25	file:	access:public
xGeom	sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry*, int, RtreeDValue*, int*);$/;"	m	struct:RtreeGeomCallback	file:	access:public
xGetLastError	sqlite3.c	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs	file:	access:public
xGetLastError	sqlite3.h	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs	access:public
xGetSystemCall	sqlite3.c	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:	access:public
xGetSystemCall	sqlite3.h	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	access:public
xInit	sqlite3.c	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:	access:public
xInit	sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
xInit	sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
xInit	sqlite3.h	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	access:public
xInit	sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods	access:public
xInit	sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2	access:public
xLanguageid	sqlite3.c	/^  int (*xLanguageid)(sqlite3_tokenizer_cursor *pCsr, int iLangid);$/;"	m	struct:sqlite3_tokenizer_module	file:	access:public
xLock	sqlite3.c	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xLock	sqlite3.h	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	access:public
xLog	sqlite3.c	/^  void (*xLog)(void*,int,const char*); \/* Function for logging *\/$/;"	m	struct:Sqlite3Config	file:	access:public
xMalloc	sqlite3.c	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods	file:	access:public
xMalloc	sqlite3.h	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods	access:public
xMutexAlloc	sqlite3.c	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
xMutexAlloc	sqlite3.h	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods	access:public
xMutexEnd	sqlite3.c	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
xMutexEnd	sqlite3.h	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods	access:public
xMutexEnter	sqlite3.c	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
xMutexEnter	sqlite3.h	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	access:public
xMutexFree	sqlite3.c	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
xMutexFree	sqlite3.h	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	access:public
xMutexHeld	sqlite3.c	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
xMutexHeld	sqlite3.h	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	access:public
xMutexInit	sqlite3.c	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
xMutexInit	sqlite3.h	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods	access:public
xMutexLeave	sqlite3.c	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
xMutexLeave	sqlite3.h	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	access:public
xMutexNotheld	sqlite3.c	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
xMutexNotheld	sqlite3.h	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	access:public
xMutexTry	sqlite3.c	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:	access:public
xMutexTry	sqlite3.h	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	access:public
xNext	sqlite3.c	/^  int (*xNext)($/;"	m	struct:sqlite3_tokenizer_module	file:	access:public
xNext	sqlite3.c	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:	access:public
xNext	sqlite3.h	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	access:public
xNextSystemCall	sqlite3.c	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:	access:public
xNextSystemCall	sqlite3.h	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	access:public
xOpen	sqlite3.c	/^  int (*xOpen)($/;"	m	struct:sqlite3_tokenizer_module	file:	access:public
xOpen	sqlite3.c	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs	file:	access:public
xOpen	sqlite3.c	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module	file:	access:public
xOpen	sqlite3.h	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs	access:public
xOpen	sqlite3.h	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module	access:public
xPagecount	sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
xPagecount	sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
xPagecount	sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	access:public
xPagecount	sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	access:public
xProfile	sqlite3.c	/^  void (*xProfile)(void*,const char*,u64);  \/* Profiling function *\/$/;"	m	struct:sqlite3	file:	access:public
xProgress	sqlite3.c	/^  int (*xProgress)(void *);     \/* The progress callback *\/$/;"	m	struct:sqlite3	file:	access:public
xQueryFunc	sqlite3.c	/^    int (*xQueryFunc)(sqlite3_rtree_query_info*);$/;"	m	union:RtreeConstraint::__anon25	file:	access:public
xQueryFunc	sqlite3.c	/^  int (*xQueryFunc)(sqlite3_rtree_query_info*);$/;"	m	struct:RtreeGeomCallback	file:	access:public
xRandomness	sqlite3.c	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs	file:	access:public
xRandomness	sqlite3.h	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs	access:public
xRead	sqlite3.c	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xRead	sqlite3.h	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	access:public
xRealloc	sqlite3.c	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:	access:public
xRealloc	sqlite3.h	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods	access:public
xReiniter	sqlite3.c	/^  void (*xReiniter)(DbPage*); \/* Call this routine when reloading pages *\/$/;"	m	struct:Pager	file:	access:public
xRekey	sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
xRekey	sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
xRekey	sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2	access:public
xRekey	sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods	access:public
xRelease	sqlite3.c	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:	access:public
xRelease	sqlite3.h	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	access:public
xRename	sqlite3.c	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module	file:	access:public
xRename	sqlite3.h	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module	access:public
xRollback	sqlite3.c	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:	access:public
xRollback	sqlite3.h	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	access:public
xRollbackCallback	sqlite3.c	/^  void (*xRollbackCallback)(void*); \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:	access:public
xRollbackTo	sqlite3.c	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:	access:public
xRollbackTo	sqlite3.h	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	access:public
xRoundup	sqlite3.c	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods	file:	access:public
xRoundup	sqlite3.h	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods	access:public
xRowid	sqlite3.c	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module	file:	access:public
xRowid	sqlite3.h	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module	access:public
xSavepoint	sqlite3.c	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:	access:public
xSavepoint	sqlite3.h	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	access:public
xSectorSize	sqlite3.c	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xSectorSize	sqlite3.h	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	access:public
xSelectCallback	sqlite3.c	/^  int (*xSelectCallback)(Walker*,Select*);  \/* Callback for SELECTs *\/$/;"	m	struct:Walker	file:	access:public
xSelectCallback2	sqlite3.c	/^  void (*xSelectCallback2)(Walker*,Select*);\/* Second callback for SELECTs *\/$/;"	m	struct:Walker	file:	access:public
xSetSystemCall	sqlite3.c	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs	file:	access:public
xSetSystemCall	sqlite3.h	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs	access:public
xShmBarrier	sqlite3.c	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xShmBarrier	sqlite3.h	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	access:public
xShmLock	sqlite3.c	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xShmLock	sqlite3.h	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods	access:public
xShmMap	sqlite3.c	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xShmMap	sqlite3.h	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods	access:public
xShmUnmap	sqlite3.c	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xShmUnmap	sqlite3.h	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods	access:public
xShrink	sqlite3.c	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
xShrink	sqlite3.h	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	access:public
xShutdown	sqlite3.c	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:	access:public
xShutdown	sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
xShutdown	sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
xShutdown	sqlite3.h	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	access:public
xShutdown	sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods	access:public
xShutdown	sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2	access:public
xSize	sqlite3.c	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:	access:public
xSize	sqlite3.h	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods	access:public
xSleep	sqlite3.c	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs	file:	access:public
xSleep	sqlite3.h	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs	access:public
xSqllog	sqlite3.c	/^  void(*xSqllog)(void*,sqlite3*,const char*, int);$/;"	m	struct:Sqlite3Config	file:	access:public
xStep	sqlite3.c	/^  void (*xStep)(sqlite3_context*,int,sqlite3_value**); \/* Aggregate step *\/$/;"	m	struct:FuncDef	file:	access:public
xStress	sqlite3.c	/^  int (*xStress)(void*,PgHdr*);       \/* Call to try make a page clean *\/$/;"	m	struct:PCache	file:	access:public
xSync	sqlite3.c	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xSync	sqlite3.c	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:	access:public
xSync	sqlite3.h	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods	access:public
xSync	sqlite3.h	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	access:public
xTask	sqlite3.c	/^  void *(*xTask)(void*);         \/* The thread routine *\/$/;"	m	struct:SQLiteThread	file:	access:public
xTask	sqlite3.c	/^  void *(*xTask)(void*);   \/* The routine to run as a thread *\/$/;"	m	struct:SQLiteThread	file:	access:public
xTestCallback	sqlite3.c	/^  int (*xTestCallback)(int);        \/* Invoked by sqlite3FaultSim() *\/$/;"	m	struct:Sqlite3Config	file:	access:public
xTrace	sqlite3.c	/^  void (*xTrace)(void*,const char*);        \/* Trace function *\/$/;"	m	struct:sqlite3	file:	access:public
xTruncate	sqlite3.c	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xTruncate	sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
xTruncate	sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
xTruncate	sqlite3.h	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods	access:public
xTruncate	sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods	access:public
xTruncate	sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2	access:public
xUnfetch	sqlite3.c	/^  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xUnfetch	sqlite3.h	/^  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);$/;"	m	struct:sqlite3_io_methods	access:public
xUnlock	sqlite3.c	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xUnlock	sqlite3.h	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	access:public
xUnlockNotify	sqlite3.c	/^  void (*xUnlockNotify)(void **, int);  \/* Unlock notify callback *\/$/;"	m	struct:sqlite3	file:	access:public
xUnpin	sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2	file:	access:public
xUnpin	sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods	file:	access:public
xUnpin	sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2	access:public
xUnpin	sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods	access:public
xUpdate	sqlite3.c	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module	file:	access:public
xUpdate	sqlite3.h	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module	access:public
xUpdateCallback	sqlite3.c	/^  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);$/;"	m	struct:sqlite3	file:	access:public
xVdbeBranch	sqlite3.c	/^  void (*xVdbeBranch)(void*,int iSrcLine,u8 eThis,u8 eMx);  \/* Callback *\/$/;"	m	struct:Sqlite3Config	file:	access:public
xWalCallback	sqlite3.c	/^  int (*xWalCallback)(void *, sqlite3 *, const char *, int);$/;"	m	struct:sqlite3	file:	access:public
xWrite	sqlite3.c	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:	access:public
xWrite	sqlite3.h	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	access:public
xferCompatibleCollation	sqlite3.c	/^static int xferCompatibleCollation(const char *z1, const char *z2){$/;"	f	file:	signature:(const char *z1, const char *z2)
xferCompatibleIndex	sqlite3.c	/^static int xferCompatibleIndex(Index *pDest, Index *pSrc){$/;"	f	file:	signature:(Index *pDest, Index *pSrc)
xferOptimization	sqlite3.c	/^static int xferOptimization($/;"	f	file:	signature:( Parse *pParse, Table *pDest, Select *pSelect, int onError, int iDbDest )
xferOptimization	sqlite3.c	/^static int xferOptimization($/;"	p	file:	signature:( Parse *pParse, Table *pDest, Select *pSelect, int onError, int iDbDest )
xthreadsafe	sqlite3.c	/^  int (*xthreadsafe)(void);$/;"	m	struct:sqlite3_api_routines	file:	access:public
yColCache	sqlite3.c	/^  struct yColCache {$/;"	s	struct:Parse	file:	access:public
yDbMask	sqlite3.c	/^  typedef unsigned char yDbMask[(SQLITE_MAX_ATTACHED+9)\/8];$/;"	t	file:
yDbMask	sqlite3.c	/^  typedef unsigned int yDbMask;$/;"	t	file:
ynVar	sqlite3.c	/^typedef i16 ynVar;$/;"	t	file:
ynVar	sqlite3.c	/^typedef int ynVar;$/;"	t	file:
yy0	sqlite3.c	/^  sqlite3ParserTOKENTYPE yy0;$/;"	m	union:__anon22	file:	access:public
yy132	sqlite3.c	/^  Expr* yy132;$/;"	m	union:__anon22	file:	access:public
yy14	sqlite3.c	/^  ExprList* yy14;$/;"	m	union:__anon22	file:	access:public
yy186	sqlite3.c	/^  u8 yy186;$/;"	m	union:__anon22	file:	access:public
yy3	sqlite3.c	/^  Select* yy3;$/;"	m	union:__anon22	file:	access:public
yy328	sqlite3.c	/^  int yy328;$/;"	m	union:__anon22	file:	access:public
yy346	sqlite3.c	/^  ExprSpan yy346;$/;"	m	union:__anon22	file:	access:public
yy378	sqlite3.c	/^  struct TrigEvent yy378;$/;"	m	union:__anon22	typeref:struct:__anon22::TrigEvent	file:	access:public
yy381	sqlite3.c	/^  u16 yy381;$/;"	m	union:__anon22	file:	access:public
yy408	sqlite3.c	/^  IdList* yy408;$/;"	m	union:__anon22	file:	access:public
yy429	sqlite3.c	/^  struct {int value; int mask;} yy429;$/;"	m	union:__anon22	typeref:struct:__anon22::__anon23	file:	access:public
yy473	sqlite3.c	/^  TriggerStep* yy473;$/;"	m	union:__anon22	file:	access:public
yy476	sqlite3.c	/^  struct LimitVal yy476;$/;"	m	union:__anon22	typeref:struct:__anon22::LimitVal	file:	access:public
yy59	sqlite3.c	/^  With* yy59;$/;"	m	union:__anon22	file:	access:public
yy65	sqlite3.c	/^  SrcList* yy65;$/;"	m	union:__anon22	file:	access:public
yy96	sqlite3.c	/^  struct LikeOp yy96;$/;"	m	union:__anon22	typeref:struct:__anon22::LikeOp	file:	access:public
yyFallback	sqlite3.c	/^static const YYCODETYPE yyFallback[] = {$/;"	v	file:
yyGrowStack	sqlite3.c	/^static void yyGrowStack(yyParser *p){$/;"	f	file:	signature:(yyParser *p)
yyParser	sqlite3.c	/^struct yyParser {$/;"	s	file:
yyParser	sqlite3.c	/^typedef struct yyParser yyParser;$/;"	t	typeref:struct:yyParser	file:
yyParser::yyerrcnt	sqlite3.c	/^  int yyerrcnt;                 \/* Shifts left before out of the error *\/$/;"	m	struct:yyParser	file:	access:public
yyParser::yyidx	sqlite3.c	/^  int yyidx;                    \/* Index of top element in stack *\/$/;"	m	struct:yyParser	file:	access:public
yyParser::yyidxMax	sqlite3.c	/^  int yyidxMax;                 \/* Maximum value of yyidx *\/$/;"	m	struct:yyParser	file:	access:public
yyParser::yystack	sqlite3.c	/^  yyStackEntry *yystack;        \/* The parser's stack *\/$/;"	m	struct:yyParser	file:	access:public
yyParser::yystksz	sqlite3.c	/^  int yystksz;                  \/* Current side of the stack *\/$/;"	m	struct:yyParser	file:	access:public
yyRuleInfo	sqlite3.c	/^} yyRuleInfo[] = {$/;"	v	typeref:struct:__anon24	file:
yyRuleName	sqlite3.c	/^static const char *const yyRuleName[] = {$/;"	v	file:
yyStackEntry	sqlite3.c	/^struct yyStackEntry {$/;"	s	file:
yyStackEntry	sqlite3.c	/^typedef struct yyStackEntry yyStackEntry;$/;"	t	typeref:struct:yyStackEntry	file:
yyStackEntry::major	sqlite3.c	/^  YYCODETYPE major;      \/* The major token value.  This is the code$/;"	m	struct:yyStackEntry	file:	access:public
yyStackEntry::minor	sqlite3.c	/^  YYMINORTYPE minor;     \/* The user-supplied minor token value.  This$/;"	m	struct:yyStackEntry	file:	access:public
yyStackEntry::stateno	sqlite3.c	/^  YYACTIONTYPE stateno;  \/* The state-number *\/$/;"	m	struct:yyStackEntry	file:	access:public
yyStackOverflow	sqlite3.c	/^static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){$/;"	f	file:	signature:(yyParser *yypParser, YYMINORTYPE *yypMinor)
yyTokenName	sqlite3.c	/^static const char *const yyTokenName[] = { $/;"	v	file:
yyTraceFILE	sqlite3.c	/^static FILE *yyTraceFILE = 0;$/;"	v	file:
yyTracePrompt	sqlite3.c	/^static char *yyTracePrompt = 0;$/;"	v	file:
yy_accept	sqlite3.c	/^static void yy_accept($/;"	f	file:	signature:( yyParser *yypParser )
yy_accept	sqlite3.c	/^static void yy_accept(yyParser*);  \/* Forward Declaration *\/$/;"	p	file:	signature:(yyParser*)
yy_action	sqlite3.c	/^static const YYACTIONTYPE yy_action[] = {$/;"	v	file:
yy_default	sqlite3.c	/^static const YYACTIONTYPE yy_default[] = {$/;"	v	file:
yy_destructor	sqlite3.c	/^static void yy_destructor($/;"	f	file:	signature:( yyParser *yypParser, YYCODETYPE yymajor, YYMINORTYPE *yypminor )
yy_find_reduce_action	sqlite3.c	/^static int yy_find_reduce_action($/;"	f	file:	signature:( int stateno, YYCODETYPE iLookAhead )
yy_find_shift_action	sqlite3.c	/^static int yy_find_shift_action($/;"	f	file:	signature:( yyParser *pParser, YYCODETYPE iLookAhead )
yy_lookahead	sqlite3.c	/^static const YYCODETYPE yy_lookahead[] = {$/;"	v	file:
yy_parse_failed	sqlite3.c	/^static void yy_parse_failed($/;"	f	file:	signature:( yyParser *yypParser )
yy_pop_parser_stack	sqlite3.c	/^static int yy_pop_parser_stack(yyParser *pParser){$/;"	f	file:	signature:(yyParser *pParser)
yy_reduce	sqlite3.c	/^static void yy_reduce($/;"	f	file:	signature:( yyParser *yypParser, int yyruleno )
yy_reduce_ofst	sqlite3.c	/^static const short yy_reduce_ofst[] = {$/;"	v	file:
yy_shift	sqlite3.c	/^static void yy_shift($/;"	f	file:	signature:( yyParser *yypParser, int yyNewState, int yyMajor, YYMINORTYPE *yypMinor )
yy_shift_ofst	sqlite3.c	/^static const short yy_shift_ofst[] = {$/;"	v	file:
yy_syntax_error	sqlite3.c	/^static void yy_syntax_error($/;"	f	file:	signature:( yyParser *yypParser, int yymajor, YYMINORTYPE yyminor )
yyerrcnt	sqlite3.c	/^  int yyerrcnt;                 \/* Shifts left before out of the error *\/$/;"	m	struct:yyParser	file:	access:public
yyidx	sqlite3.c	/^  int yyidx;                    \/* Index of top element in stack *\/$/;"	m	struct:yyParser	file:	access:public
yyidxMax	sqlite3.c	/^  int yyidxMax;                 \/* Maximum value of yyidx *\/$/;"	m	struct:yyParser	file:	access:public
yyinit	sqlite3.c	/^  int yyinit;$/;"	m	union:__anon22	file:	access:public
yystack	sqlite3.c	/^  yyStackEntry *yystack;        \/* The parser's stack *\/$/;"	m	struct:yyParser	file:	access:public
yystksz	sqlite3.c	/^  int yystksz;                  \/* Current side of the stack *\/$/;"	m	struct:yyParser	file:	access:public
yytestcase	sqlite3.c	120253;"	d	file:
yytestcase	sqlite3.c	120462;"	d	file:
yyzerominor	sqlite3.c	/^static const YYMINORTYPE yyzerominor = { 0 };$/;"	v	file:
z	sqlite3.c	/^    char *z;               \/* Pointer to data for string (char array) types *\/$/;"	m	union:VdbeOp::__anon1	file:	access:public
z	sqlite3.c	/^  char *z;                        \/* Pointer to buffer containing string *\/$/;"	m	struct:StrBuffer	file:	access:public
z	sqlite3.c	/^  char *z;                        \/* Text of the token *\/$/;"	m	struct:Fts3PhraseToken	file:	access:public
z	sqlite3.c	/^  char *z;            \/* String or BLOB value *\/$/;"	m	struct:Mem	file:	access:public
z	sqlite3.c	/^  const char *z;     \/* Text of the token.  Not NULL-terminated! *\/$/;"	m	struct:Token	file:	access:public
zAlias	sqlite3.c	/^    char *zAlias;     \/* The "B" part of a "A AS B" phrase.  zName is the "A" *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
zAuthContext	sqlite3.c	/^  const char *zAuthContext;   \/* Put saved Parse.zAuthContext here *\/$/;"	m	struct:AuthContext	file:	access:public
zAuthContext	sqlite3.c	/^  const char *zAuthContext; \/* The 6th parameter to db->xAuth callbacks *\/$/;"	m	struct:Parse	file:	access:public
zAuthPW	sqlite3.c	/^  char *zAuthPW;                \/* Password used to authenticate *\/$/;"	m	struct:sqlite3_userauth	file:	access:public
zAuthUser	sqlite3.c	/^  char *zAuthUser;              \/* User name used to authenticate *\/$/;"	m	struct:sqlite3_userauth	file:	access:public
zBase	sqlite3.c	/^  char *zBase;         \/* A base allocation.  Not from malloc. *\/$/;"	m	struct:StrAccum	file:	access:public
zBase	sqlite3.c	/^  char zBase[100];   \/* Initial space *\/$/;"	m	struct:Explain	file:	access:public
zBuf	sqlite3.c	/^  char *zBuf;                     \/* Space to buffer journal writes *\/$/;"	m	struct:JournalFile	file:	access:public
zBuffer	sqlite3.c	/^  char *zBuffer;$/;"	m	struct:IcuCursor	file:	access:public
zCanonicalName	sqlite3.c	/^  char *zCanonicalName;         \/* Canonical filename *\/$/;"	m	struct:vxworksFileId	file:	access:public
zChunk	sqlite3.c	/^  u8 zChunk[JOURNAL_CHUNKSIZE];   \/* Content of this chunk *\/$/;"	m	struct:FileChunk	file:	access:public
zCol	sqlite3.c	/^    char *zCol;           \/* Name of column in zTo.  If NULL use PRIMARY KEY *\/$/;"	m	struct:FKey::sColMap	file:	access:public
zColAff	sqlite3.c	/^  char *zColAff;           \/* String defining the affinity of each column *\/$/;"	m	struct:Index	file:	access:public
zColAff	sqlite3.c	/^  char *zColAff;       \/* String defining the affinity of each column *\/$/;"	m	struct:Table	file:	access:public
zColl	sqlite3.c	/^  char *zColl;     \/* Collating sequence.  If NULL, use the default *\/$/;"	m	struct:Column	file:	access:public
zCollName	sqlite3.c	/^  char *zCollName;           \/* Required collating sequence, if not NULL *\/$/;"	m	struct:WhereScan	file:	access:public
zComment	sqlite3.c	/^  char *zComment;          \/* Comment to improve readability *\/$/;"	m	struct:VdbeOp	file:	access:public
zContentTbl	sqlite3.c	/^  char *zContentTbl;              \/* content=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:	access:public
zData	sqlite3.c	/^  u8 *zData;                  \/* Content of the node, as should be on disk *\/$/;"	m	struct:RtreeNode	file:	access:public
zDatabase	sqlite3.c	/^    char *zDatabase;  \/* Name of database holding this table *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
zDatabase	sqlite3.c	/^  const char *zDatabase;$/;"	m	struct:analysisInfo	file:	access:public
zDb	sqlite3.c	/^  char *zDb;                  \/* Name of database containing r-tree table *\/$/;"	m	struct:Rtree	file:	access:public
zDb	sqlite3.c	/^  const char *zDb;                \/* logical database name *\/$/;"	m	struct:Fts3Table	file:	access:public
zDb	sqlite3.c	/^  const char *zDb;    \/* Make sure all objects are contained in this database *\/$/;"	m	struct:DbFixer	file:	access:public
zDeleteOnClose	sqlite3.c	/^  LPWSTR zDeleteOnClose;  \/* Name of file to delete when closing *\/$/;"	m	struct:winFile	file:	access:public
zDflt	sqlite3.c	/^  char *zDflt;     \/* Original text of the default value *\/$/;"	m	struct:Column	file:	access:public
zEnd	sqlite3.c	/^  const char *zEnd;     \/* One character past the end of input text *\/$/;"	m	struct:ExprSpan	file:	access:public
zErr	sqlite3.c	/^    const char *zErr;               \/* Error message for circular references *\/$/;"	m	struct:With::Cte	file:	access:public
zErrMsg	sqlite3.c	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab	file:	access:public
zErrMsg	sqlite3.c	/^  char *zErrMsg;          \/* Error message written here *\/$/;"	m	struct:Vdbe	file:	access:public
zErrMsg	sqlite3.c	/^  char *zErrMsg;       \/* An error message *\/$/;"	m	struct:Parse	file:	access:public
zErrMsg	sqlite3.c	/^  char *zErrMsg;     \/* Error message text, if an error occurs *\/$/;"	m	struct:TabResult	file:	access:public
zErrMsg	sqlite3.h	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab	access:public
zFilename	sqlite3.c	/^  char *zFilename;            \/* Name of the database file *\/$/;"	m	struct:Pager	file:	access:public
zFilename	sqlite3.c	/^  char *zFilename;           \/* Name of the file *\/$/;"	m	struct:winShmNode	file:	access:public
zFilename	sqlite3.c	/^  char *zFilename;           \/* Name of the mmapped file *\/$/;"	m	struct:unixShmNode	file:	access:public
zIndex	sqlite3.c	/^    char *zIndex;     \/* Identifier from "INDEXED BY <zIndex>" clause *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
zInput	sqlite3.c	/^  char *zInput;                   \/* Input string *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
zInput	sqlite3.c	/^  const char *zInput;          \/* input we are tokenizing *\/$/;"	m	struct:porter_tokenizer_cursor	file:	access:public
zJournal	sqlite3.c	/^  char *zJournal;             \/* Name of the journal file *\/$/;"	m	struct:Pager	file:	access:public
zJournal	sqlite3.c	/^  const char *zJournal;           \/* Name of the journal file *\/$/;"	m	struct:JournalFile	file:	access:public
zLanguageid	sqlite3.c	/^  char *zLanguageid;              \/* languageid=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:	access:public
zLocale	sqlite3.c	/^  char *zLocale;$/;"	m	struct:IcuTokenizer	file:	access:public
zMagicHeader	sqlite3.c	/^static const char zMagicHeader[] = SQLITE_FILE_HEADER;$/;"	v	file:
zMalloc	sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentNode	file:	access:public
zMalloc	sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentWriter	file:	access:public
zMalloc	sqlite3.c	/^  char *zMalloc;      \/* Space to hold MEM_Str or MEM_Blob if szMalloc>0 *\/$/;"	m	struct:Mem	file:	access:public
zMatchinfo	sqlite3.c	/^  char *zMatchinfo;               \/* Matchinfo specification *\/$/;"	m	struct:Fts3Cursor	file:	access:public
zName	sqlite3.c	/^    char *zName;                    \/* Name of this CTE *\/$/;"	m	struct:With::Cte	file:	access:public
zName	sqlite3.c	/^    char *zName;            \/* Token associated with this expression *\/$/;"	m	struct:ExprList::ExprList_item	file:	access:public
zName	sqlite3.c	/^    char *zName;      \/* Name of the identifier *\/$/;"	m	struct:IdList::IdList_item	file:	access:public
zName	sqlite3.c	/^    char *zName;      \/* Name of the table *\/$/;"	m	struct:SrcList::SrcList_item	file:	access:public
zName	sqlite3.c	/^  char *zName;                        \/* Savepoint name (nul-terminated) *\/$/;"	m	struct:Savepoint	file:	access:public
zName	sqlite3.c	/^  char *zName;                \/* Name of r-tree table *\/ $/;"	m	struct:Rtree	file:	access:public
zName	sqlite3.c	/^  char *zName;             \/* Name of this index *\/$/;"	m	struct:Index	file:	access:public
zName	sqlite3.c	/^  char *zName;            \/* The name of the trigger                        *\/$/;"	m	struct:Trigger	file:	access:public
zName	sqlite3.c	/^  char *zName;          \/* Name of the collating sequence, UTF-8 encoded *\/$/;"	m	struct:CollSeq	file:	access:public
zName	sqlite3.c	/^  char *zName;         \/* Name of the table or view *\/$/;"	m	struct:Table	file:	access:public
zName	sqlite3.c	/^  char *zName;         \/* Name of this database *\/$/;"	m	struct:Db	file:	access:public
zName	sqlite3.c	/^  char *zName;         \/* SQL name of the function. *\/$/;"	m	struct:FuncDef	file:	access:public
zName	sqlite3.c	/^  char *zName;     \/* Name of this column *\/$/;"	m	struct:Column	file:	access:public
zName	sqlite3.c	/^  const char *const zName;  \/* Name of pragma *\/$/;"	m	struct:sPragmaNames	file:	access:public
zName	sqlite3.c	/^  const char *zName;                   \/* Name passed to create_module() *\/$/;"	m	struct:Module	file:	access:public
zName	sqlite3.c	/^  const char *zName;              \/* virtual table name *\/$/;"	m	struct:Fts3Table	file:	access:public
zName	sqlite3.c	/^  const char *zName;            \/* Name of the system call *\/$/;"	m	struct:unix_syscall	file:	access:public
zName	sqlite3.c	/^  const char *zName;            \/* Name of the system call *\/$/;"	m	struct:win_syscall	file:	access:public
zName	sqlite3.c	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs	file:	access:public
zName	sqlite3.c	/^  const char *zName;   \/* Name of the table *\/$/;"	m	struct:TableLock	file:	access:public
zName	sqlite3.h	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs	access:public
zPath	sqlite3.c	/^  const char *zPath;                  \/* Name of the file *\/$/;"	m	struct:unixFile	file:	access:public
zPath	sqlite3.c	/^  const char *zPath;      \/* Full pathname of this file *\/$/;"	m	struct:winFile	file:	access:public
zPfx	sqlite3.c	/^  const char *zPfx; \/* Error message prefix *\/$/;"	m	struct:IntegrityCk	file:	access:public
zPool	sqlite3.c	/^  u8 *zPool;       \/* Memory available to be allocated *\/$/;"	m	struct:Mem5Global	file:	access:public
zReadExprlist	sqlite3.c	/^  char *zReadExprlist;$/;"	m	struct:Fts3Table	file:	access:public
zSegmentsTbl	sqlite3.c	/^  char *zSegmentsTbl;             \/* Name of %_segments table *\/$/;"	m	struct:Fts3Table	file:	access:public
zSelName	sqlite3.c	/^  char zSelName[12];     \/* Symbolic name of this SELECT use for debugging *\/$/;"	m	struct:Select	file:	access:public
zSpan	sqlite3.c	/^    char *zSpan;            \/* Original text of the expression *\/$/;"	m	struct:ExprList::ExprList_item	file:	access:public
zSql	sqlite3.c	/^  char *zSql;             \/* Text of the SQL statement that generated this *\/$/;"	m	struct:Vdbe	file:	access:public
zStart	sqlite3.c	/^  const char *zStart;   \/* First character of input text *\/$/;"	m	struct:ExprSpan	file:	access:public
zStop	sqlite3.c	/^  char *zStop;$/;"	m	struct:Fts3auxCursor	file:	access:public
zTail	sqlite3.c	/^  const char *zTail;        \/* All SQL text past the last semicolon parsed *\/$/;"	m	struct:Parse	file:	access:public
zTerm	sqlite3.c	/^  char *zTerm;                    \/* Pointer to current term *\/$/;"	m	struct:Fts3SegReader	file:	access:public
zTerm	sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentNode	file:	access:public
zTerm	sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentWriter	file:	access:public
zTerm	sqlite3.c	/^  char *zTerm;                    \/* Pointer to term buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:	access:public
zTerm	sqlite3.c	/^  const char *zTerm;$/;"	m	struct:Fts3SegFilter	file:	access:public
zText	sqlite3.c	/^  char *zText;         \/* The string collected so far *\/$/;"	m	struct:StrAccum	file:	access:public
zTitle	sqlite3.c	/^  char zTitle[100];  \/* The title text *\/$/;"	m	struct:__anon9	file:	access:public
zTo	sqlite3.c	/^  char *zTo;        \/* Name of table that the key points to (aka: Parent) *\/$/;"	m	struct:FKey	file:	access:public
zToken	sqlite3.c	/^    char *zToken;          \/* Token value. Zero terminated and dequoted *\/$/;"	m	union:Expr::__anon3	file:	access:public
zToken	sqlite3.c	/^  char *zToken;                   \/* storage for current token *\/$/;"	m	struct:unicode_cursor	file:	access:public
zToken	sqlite3.c	/^  char *zToken;                \/* storage for current token *\/$/;"	m	struct:porter_tokenizer_cursor	file:	access:public
zToken	sqlite3.c	/^  const char *zToken;             \/* Current 'token' value *\/$/;"	m	struct:Fts3tokCursor	file:	access:public
zType	sqlite3.c	/^  char *zType;     \/* Data type for this column *\/$/;"	m	struct:Column	file:	access:public
zType	sqlite3.c	/^  const char *zType;  \/* Type of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:	access:public
zWal	sqlite3.c	/^  char *zWal;                 \/* File name for write-ahead log *\/$/;"	m	struct:Pager	file:	access:public
zWalName	sqlite3.c	/^  const char *zWalName;      \/* Name of WAL file *\/$/;"	m	struct:Wal	file:	access:public
zWriteExprlist	sqlite3.c	/^  char *zWriteExprlist;$/;"	m	struct:Fts3Table	file:	access:public
zeroJournalHdr	sqlite3.c	/^static int zeroJournalHdr(Pager *pPager, int doTruncate){$/;"	f	file:	signature:(Pager *pPager, int doTruncate)
zeroPage	sqlite3.c	/^static void zeroPage(MemPage *pPage, int flags){$/;"	f	file:	signature:(MemPage *pPage, int flags)
zeroblobFunc	sqlite3.c	/^static void zeroblobFunc($/;"	f	file:	signature:( sqlite3_context *context, int argc, sqlite3_value **argv )
